<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法（Java实现）-算法的时间复杂度和空间复杂度</title>
      <link href="/2020/09/06/%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2020/09/06/%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-时间复杂度"><a class="markdownIt-Anchor" href="#1-时间复杂度">#</a> 1、时间复杂度</h1><h2 id="11度量一个程序算法执行时间的两种方法"><a class="markdownIt-Anchor" href="#11度量一个程序算法执行时间的两种方法">#</a> 1.1 度量一个程序（算法）执行时间的两种方法</h2><p><strong>事后统计的方法</strong></p><p>这种方法可行，但是有两个问题：<br>一是要想对设计的算法的运行性能进行评测，需要实际运行该程序；<br>二是所得时间的统计量依赖于计算机的硬件、软件等环境因素，<strong>这种方式，要在同一台计算机的相同状态下运行，才能比较那个算法速度更快</strong>。</p><ul><li><strong>事前估计的方法</strong></li></ul><p>通过分析某个<strong>算法的时间复杂度</strong>来判断哪个算法更优。因事后统计方法更多的依赖于计算机的硬件、软件等环境因素，有时容易掩盖算法本身的优劣。<strong>因此人们常常采用事前分析估算的方法。</strong></p><p>在编写程序前，依据统计方法对算法进行估算。一个用高级语言编写的程序在计算机上运行时所消耗的时间取决于下列因素：</p><ol><li>算法采用的策略、方法；</li><li>编译产生的代码质量；</li><li>问题的输入规模；</li><li>机器执行指令的速度。<br>一个算法是由<strong>控制结构</strong>（顺序、分支和循环 3 种）和<strong>原操作</strong>（指固有数据类型的操作）构成的，则<strong>算法时间取决于两者的综合效果</strong>。为了便于比较同一个问题的不同算法，通常的做法是，从算法中选取一种对于所研究的问题（或算法类型）来说是基本操作的原操作，以该基本操作的<strong>重复执行的次数作为算法的时间量度</strong>。</li></ol><h2 id="12时间频度"><a class="markdownIt-Anchor" href="#12时间频度">#</a> 1.2 时间频度</h2><p><strong>时间频度</strong>：一个算法花费的时间与算法中语句的执行次数成正比例，<strong>哪个算法中语句执行次数多，它花费时间就多</strong>。<font color=red>一个算法中的语句执行次数</font>称为语句频度或<strong>时间频度</strong>。记为<strong> T (n)</strong>。<br>举例：<br><strong>比如计算 1-100 所有数字之和，我们设计两种算法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> total=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> end=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=end;i++)</span><br><span class="line">&#123;</span><br><span class="line">total+=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T (n) = n+1；也就是要执行 101 次第 101 次也要判断一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total=（<span class="number">1</span>+end）*end/<span class="number">2</span></span><br></pre></td></tr></table></figure><p>T (n)=1；也就是只需要执行一次</p><p><strong>忽略常数项</strong>：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200903203501203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020090320350961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>观察图像分析：<br>2n+20 和 2n 随着 n 变大，执行曲线无限接近，20 可以忽略<br> 3n+10 和 3n 随着 n 变大，执行曲线无限接近，10 可以忽略<br><strong>忽略低次项</strong>：<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200903204245124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200903204310327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>观察图像分析：<br>2n^2+3n+10 和 2n^2 随着 n 变大，执行曲线无限接近，可以忽略 3n+10<br>n^2+5n+20 和 n^2 随着 n 变大，执行曲线无限接近，可以忽略 5n+20<br><strong> 忽略系数</strong>：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200903204444910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200903204453554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>观察图像分析：<br>随着 n 值变大，5n^2+7n 和 3n^2 + 2n ，执行曲线重合，说明  这种情况下，5 和 3 可以忽略。<br>而 n^3+5n 和 6n^3+4n  ，执行曲线分离，说明多少次方才是关键</p><h2 id="13时间复杂度"><a class="markdownIt-Anchor" href="#13时间复杂度">#</a> 1.3 时间复杂度</h2><p>一般情况下，算法中的基本操作语句的重复执行次数是问题规模 n 的某个函数，用 T (n) 表示，若有某个辅助函数 f (n)，使得当 n 趋近于无穷大时，T (n) /f (n) 的极限值为不等于零的常数，则称 f (n) 是 T (n) 的同数量级函数。<strong>记作 T (n)=Ｏ( f (n) )，称Ｏ( f (n) )  为算法的渐进时间复杂度，简称时间复杂度</strong>。</p><p><strong>T (n) 不同，但时间复杂度可能相同</strong>。<br>如：T (n)=n²+7n+6 与 T (n)=3n²+2n+2 它们的 T (n) 不同，但时间复杂度相同，都为 O (n²)。</p><p><strong>计算时间复杂度的方法</strong>：<br>比如：计算 T (n)=3n²+2n+2 的时间复杂度</p><ol><li>用常数 1 代替运行时间中的所有加法常数：  T (n)=3n²+2n+2  =&gt; T (n)=3n²+2n+1</li><li>修改后的运行次数函数中，只保留最高阶项  T (n)=3n²+2n+1 =&gt; T (n) = 3n²</li><li>去除最高阶项的系数 T (n) = 3n² =&gt; T (n) = n² =&gt; <strong>O(n²)</strong></li></ol><h2 id="14常见的时间复杂度"><a class="markdownIt-Anchor" href="#14常见的时间复杂度">#</a> 1.4 常见的时间复杂度</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200903211501685.png#" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200906102546620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>常见的算法时间复杂度由小到大依次为：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200903211622396.png#" alt="在这里插入图片描述"><br>随着问题规模 n 的不断增大，上述时间复杂度不断增大，算法的执行效率越低。从图中可见，<strong>我们应该尽可能避免使用指数阶的算法</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200903212308811.png#" alt="在这里插入图片描述"><br>无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是 O (1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">2</span>;</span><br><span class="line">++i;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">int</span> m = i + j;</span><br></pre></td></tr></table></figure><p>上述代码在执行的时候，它消耗的时候并不随着某个变量的增长而增长，那么无论这类代码有多长，即使有几万几十万行，都可以用 O (1) 来表示它的时间复杂度。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200906100358901.png#pic_cent" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)</span><br><span class="line">&#123;</span><br><span class="line">i=i*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：在 while 循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。假设循环 x 次之后，i 就大于 2 了，此时这个循环就退出了，也就是说 2 的 x 次方等于 n，那么 x = log2n 也就是说当循环 log2n 次以后，这个代码就结束了。因此这个代码的时间复杂度为：O (log2^n)  。 O (log2^n) 的这个 2 时间上是根据代码变化的，i = i * 3 ，则是 O (log3^n) .<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200906100705448.png#" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">j = i;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：这段代码，for 循环里面的代码会执行 n 遍，因此它消耗的时间是随着 n 的变化而变化的，因此这类代码都可以用 O (n) 来表示它的时间复杂度<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200906102006267.png#pic" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(m=<span class="number">1</span>;m&lt;n;m++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)</span><br><span class="line">&#123;</span><br><span class="line">i=i*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：线性<strong>对数阶 O (nlogN)</strong> 其实非常容易理解，将时间复杂度为 O (logn) 的代码循环 N 遍的话，那么它的时间复杂度就是 n * O (logN)，也就是了 O (nlogN)。比如上面的代码的时间复杂度就是 O (nlog2^ n) , 如果 i=i * 2 改为 i=i * 3 的话，时间复杂度就是 O (nlog3^ n)<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200906103400793.png#pic_cent" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(x=<span class="number">1</span>; i&lt;=n; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line">j = i;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：平方阶 O (n²) 就更容易理解了，如果把 O (n) 的代码再嵌套循环一遍，它的时间复杂度就是 O (n²)，这段代码其实就是嵌套了 2 层 n 循环，它的时间复杂度就是 O (n<em>n)，即  O (n²) 如果将其中一层循环的 n 改成 m，那它的时间复杂度就变成了 O (m</em>n)<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020090613433984.png#pic_ce" alt="在这里插入图片描述"><br> O (n³) 相当于三层 n 循环<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200906134351820.png#pic_cent" alt="在这里插入图片描述"><br> O (n^k) 相当于 k 层循环</p><h2 id="15平均时间复杂度和最坏时间复杂度"><a class="markdownIt-Anchor" href="#15平均时间复杂度和最坏时间复杂度">#</a> 1.5 平均时间复杂度和最坏时间复杂度</h2><ol><li>平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间。</li><li>最坏情况下的时间复杂度称最坏时间复杂度。一般讨论的时间复杂度均是最坏情况下的时间复杂度。这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的界限，这就保证了算法的运行时间不会比最坏情况更长。</li><li>平均时间复杂度和最坏时间复杂度是否一致，和算法有关。</li></ol><p>比如下图为八大排序算法的时间复杂度：<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200906134845435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="2-算法的空间复杂度"><a class="markdownIt-Anchor" href="#2-算法的空间复杂度">#</a> 2、算法的空间复杂度</h1><ul><li>类似于时间复杂度的讨论，一个算法的空间复杂度 (Space Complexity) 定义为该算法所耗费的存储空间，它也是问题规模 n 的函数。</li><li>空间复杂度 (Space Complexity) 是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数与解决问题的规模 n 有关，它随着 n 的增大而增大，当 n 较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况</li><li>在做算法分析时，主要讨论的是时间复杂度。从用户使用体验上看，更看重的程序执行的速度。一些缓存产品 (redis,memcache) 和算法 (基数排序) 本质就是用空间换时间.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 时间复杂度 </tag>
            
            <tag> 空间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习-详谈泛型</title>
      <link href="/2020/09/03/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%B3%9B%E5%9E%8B/"/>
      <url>/2020/09/03/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型"><a class="markdownIt-Anchor" href="#泛型">#</a> 泛型</h1><h2 id="11泛型概述"><a class="markdownIt-Anchor" href="#11泛型概述">#</a> 1.1 泛型概述</h2><p><strong>泛型</strong>：即 <strong>参数化类型</strong> 。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？<br><strong>参数化类型</strong>：就是<strong>将类型由原来的具体的类型参数化</strong>，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为<strong>类型形参</strong>），然后在<strong>使用 (调用) 时传入具体的类型（类型实参）</strong>。</p><p>简而言之：（ <font color=red>泛型就是可以在类或方法中预支地使用未知的类型。一般在创建对象时，将未知的类型确定具体的类型。<strong>当没有指定泛型时，默认类型为 Object 类型</strong></font>）</p><p><strong>泛型的本质</strong>：是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p><p>在前面学习集合时，我们都知道集合中是可以存放任意对象的，只要把对象存储集合后，那么这时他们都会被提升成 Object 类型。当我们在取出每一个对象，并且进行相应的操作，这时必须采用类型转换。<br><strong>观察下面代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">coll.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">coll.add(<span class="number">5</span>);<span class="comment">//由于集合没有做任何限定，任何类型都可以给其中存放</span></span><br><span class="line">Iterator it = coll.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line"><span class="comment">//需要打印每个字符串的长度,就要把迭代出来的对象转成String类型</span></span><br><span class="line">String str = (String) it.next();</span><br><span class="line">System.out.println(str.length());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200902160410661.png#pic_center" alt="在这里插入图片描述"><br>程序在运行时发生了问题 <code>java.lang.ClassCastException</code> 。 为什么会发生<strong>类型转换异常</strong> 呢？ 我们来分析下：ArrayList 可以存放任意类型，例子中添加了 String 类型，又添加了 Integer 类型，再使用时都以 String 的方式使用，因此程序崩溃了。为了解决类似这样的问题（在编译阶段就可以解决），泛型应运而生。 Collection 虽然可以存储各种对象，但实际上通常 Collection 只存储同一类型对象。例如都是存储字符串对象。<strong>因此在 JDK5 之后，新增了泛型 (Generic) 语法，让你在设计 API 时可以指定类或方法支持泛型</strong>，这样我们使用 API 的时候也变得更为简洁，并得到了编译时期的语法检查。</p><h2 id="12为什么要使用泛型"><a class="markdownIt-Anchor" href="#12为什么要使用泛型">#</a> 1.2 为什么要使用泛型？</h2><p>先看下面一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; stringArrayList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    List&lt;Integer&gt; integerArrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    Class classStringArrayList = stringArrayList.getClass();</span><br><span class="line">    Class classIntegerArrayList = integerArrayList.getClass();</span><br><span class="line">    <span class="keyword">if</span>(classStringArrayList.equals(classIntegerArrayList))</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;泛型测试&quot;</span>+<span class="string">&quot;类型相同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(stringArrayList.getClass());</span><br><span class="line">    System.out.println(integerArrayList.getClass());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">泛型测试类型相同</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">ArrayList</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">ArrayList</span></span></span><br></pre></td></tr></table></figure><p>通过上面的例子可以证明，在编译之后程序会采取去泛型化的措施。也就是说 Java 中的泛型，只在<strong>编译阶段有效</strong>。<font color=blue><em>在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦除，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法</em>。</font>也就是说，<strong>泛型信息不会进入到运行时阶段</strong> ，很好地避免了类型强制转换的麻烦。<br><strong>对此得出一个结论</strong>：<font color=red>泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。</font></p><h2 id="13-泛型的定义与使用"><a class="markdownIt-Anchor" href="#13-泛型的定义与使用">#</a> 1.3 泛型的定义与使用</h2><p>泛型，用来灵活地将数据类型应用到不同的 <code>类、方法、接口</code> 当中。将数据类型作为参数进行传递。</p><ul><li><strong>定义和使用含有泛型的类</strong></li></ul><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;代表泛型的变量&gt; </span>&#123;  &#125;</span><br></pre></td></tr></table></figure><p>例如，API 中的 ArrayList 集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt;</span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123; &#125;</span><br><span class="line">   ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用泛型： 即什么时候确定泛型？</strong><br>—— 在创建对象的时候确定泛型<br>例如： <code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</code> <br> 此时，变量 E 的值就是 String 类型，那么我们的类型就可以理解为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">String</span>&gt;</span>&#123; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(String e)</span></span>&#123; &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;  &#125;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再如： <code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</code> <br> 此时，变量 E 的值就是 Integer 类型，那么我们的类型就可以理解为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">Integer</span>&gt; </span>&#123; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Integer e)</span> </span>&#123; &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  &#125;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举例自定义泛型类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericClass</span>&lt;<span class="title">MVP</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//没有MVP类型，在这里代表 未知的一种数据类型 未来传递什么就是什么类型</span></span><br><span class="line"><span class="keyword">private</span> MVP mvp;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMVP</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mvp = mvp;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> MVP <span class="title">getMVP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mvp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClassDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">         <span class="comment">// 创建一个泛型为String的类</span></span><br><span class="line">         MyGenericClass&lt;String&gt; my = <span class="keyword">new</span> MyGenericClass&lt;String&gt;();    </span><br><span class="line">         <span class="comment">// 调用setMVP</span></span><br><span class="line">         my.setMVP(<span class="string">&quot;大胡子登登&quot;</span>);</span><br><span class="line">         <span class="comment">// 调用getMVP</span></span><br><span class="line">         String mvp = my.getMVP();</span><br><span class="line">         System.out.println(mvp);</span><br><span class="line">         <span class="comment">//创建一个泛型为Integer的类</span></span><br><span class="line">         MyGenericClass&lt;Integer&gt; my2 = <span class="keyword">new</span> MyGenericClass&lt;Integer&gt;(); </span><br><span class="line">         my2.setMVP(<span class="number">123</span>);     </span><br><span class="line">         Integer mvp2 = my2.getMVP();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>定义和使用含有泛型的方法</strong></li></ul><p><strong>定义格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数)&#123;  &#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericMethod</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> &lt;MVP&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line">    System.out.println(mvp.getClass());</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">public</span> &lt;MVP&gt; <span class="function">MVP <span class="title">show2</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mvp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用格式</strong>：调用方法时，确定泛型的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethodDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        MyGenericMethod mm = <span class="keyword">new</span> MyGenericMethod();</span><br><span class="line">        <span class="comment">// 演示看方法提示</span></span><br><span class="line">        mm.show(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        mm.show(<span class="number">123</span>);</span><br><span class="line">        mm.show(<span class="number">12.45</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Integer</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Double</span></span></span><br></pre></td></tr></table></figure><ul><li>定义和使用含有泛型的接口</li></ul><p><strong>定义格式</strong>： <code>修饰符 interface接口名&lt;代表泛型的变量&gt; &#123;  &#125;</code> <br> 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> E <span class="title">getE</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用格式：<br><strong>1、定义类时确定泛型的类型</strong><br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImp1</span> <span class="keyword">implements</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，泛型 E 的值就是 String 类型<br><strong> 2、始终不确定泛型的类型，直到创建对象时，确定泛型的类型</strong><br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImp2</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确定泛型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyImp2&lt;String&gt;  my = <span class="keyword">new</span> MyImp2&lt;String&gt;();  </span><br><span class="line">        my.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态方法与泛型</strong><br>静态方法有一种情况需要注意一下，那就是在类中的静态方法使用泛型：静态方法无法访问类上定义的泛型；如果静态方法操作的引用数据类型不确定的时候，必须要将泛型定义在方法上。<br>即：如果静态方法要使用泛型的话，必须将静态方法也定义成泛型方法 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticGenerator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果在类中定义使用泛型的静态方法，需要添加额外的泛型声明（将这个方法定义成泛型方法）</span></span><br><span class="line"><span class="comment">     * 即使静态方法要使用泛型类中已经声明过的泛型也不可以。</span></span><br><span class="line"><span class="comment">     * 如：public static void show(T t)&#123;..&#125;,此时编译器会提示错误信息：</span></span><br><span class="line"><span class="comment">          &quot;StaticGenerator cannot be refrenced from static context&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14泛型通配符"><a class="markdownIt-Anchor" href="#14泛型通配符">#</a> 1.4 泛型通配符</h2><p><strong>泛型通配符：</strong><br>当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符 &lt;?&gt; 表示。但是一旦使用泛型的通配符后，只能使用 Object 类中的共性方法，集合中元素自身方法无法使用。<br><strong>通配符基本使用：</strong><br>泛型的通配符：不知道使用什么类型来接收的时候，此时可以使用？，？表示未知通配符。<br>(此时只能接受数据，不能往该集合中存储数据。)<br> 比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;Intger&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    getElement(list1);</span><br><span class="line">    Collection&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    getElement(list2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement</span><span class="params">(Collection&lt;?&gt; coll)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//？代表可以接收任意类型</span></span><br></pre></td></tr></table></figure><p>（泛型不存在继承关系 Collection (); 这种是错误的）</p><p><strong>通配符高级使用 ---- 受限泛型</strong><br>之前设置泛型的时候，实际上是可以任意设置的，只要是类就可以设置。但是在 JAVA 的泛型中可以指定一个泛型的<strong>上限</strong> 和<strong>下限</strong>。</p><p>泛型的上限：<br>格式：  <code>类型名称 &lt;? extends 类 &gt; 对象名称</code> <br>意义： 只能接收该类型及其子类</p><p>泛型的下限：<br>格式：  <code>类型名称 &lt;? super 类 &gt; 对象名称</code> <br>意义： 只能接收该类型及其父类型</p><p>比如：现已知 Object 类，String 类，Number 类，Integer 类，其中 Number 是 Integer 的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    Collection&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    Collection&lt;Number&gt; list3 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">    Collection&lt;Object&gt; list4 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();    </span><br><span class="line">    getElement(list1);</span><br><span class="line">    getElement(list2);<span class="comment">//报错</span></span><br><span class="line">    getElement(list3);</span><br><span class="line">    getElement(list4);<span class="comment">//报错</span></span><br><span class="line">    getElement2(list1);<span class="comment">//报错</span></span><br><span class="line">    getElement2(list2);<span class="comment">//报错</span></span><br><span class="line">    getElement2(list3);</span><br><span class="line">    getElement2(list4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 泛型的上限：此时的泛型?，必须是Number类型或者Number类型的子类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement1</span><span class="params">(Collection&lt;? extends Number&gt; coll)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 泛型的下限：此时的泛型?，必须是Number类型或者Number类型的父类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement2</span><span class="params">(Collection&lt;? <span class="keyword">super</span> Number&gt; coll)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习-Collection集合和Iterator迭代器</title>
      <link href="/2020/09/03/Java%E5%AD%A6%E4%B9%A0-Collection%E9%9B%86%E5%90%88%E5%92%8CIterator%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>/2020/09/03/Java%E5%AD%A6%E4%B9%A0-Collection%E9%9B%86%E5%90%88%E5%92%8CIterator%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-collection集合"><a class="markdownIt-Anchor" href="#1-collection集合">#</a> 1、Collection 集合</h1><h2 id="11集合概述"><a class="markdownIt-Anchor" href="#11集合概述">#</a> 1.1 集合概述</h2><ul><li>集合：集合是 java 中提供的一种容器，可以用来存储多个数据。</li></ul><p><strong>集合和数组既然都是容器，它们有啥区别呢？</strong></p><ul><li>数组的长度是固定的。<strong>集合的长度是可变的。</strong></li><li>数组中存储的是<strong>同一类型的元素</strong>，可以存储基本数据类型值。集合<strong>存储的都是对象</strong>。而且<strong>对象的类型可以不一致</strong>。在开发中一般当对象多的时候，使用集合进行存储。</li></ul><h2 id="12-集合框架"><a class="markdownIt-Anchor" href="#12-集合框架">#</a> 1.2 集合框架</h2><p>JAVASE 提供了满足各种需求的 API，在使用这些 API 前，先<strong>了解其继承与接口操作架构</strong>，才能了解何时采用哪个类，以及类之间如何彼此合作，从而达到灵活应用。<br>集合按照其存储结构可以分为两大类，分别是<strong>单列集合</strong>  <code>java.util.Collection</code>  和<strong>双列集合</strong> <code>java.util.Map</code></p><p><strong>Collection：</strong> 单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是 <code>java.util.List</code>  和 <code>java.util.Set</code> 。其中，List 的特点是元素有序、元素可重复。Set 的特点是元素无序，而且不可重复。<strong>List 接口</strong>的主要实现类有 <code>java.util.ArrayList</code> 、 <code>java.util.LinkedList</code>  和 <code>java.util.Vector</code> ，<strong>Set 接口</strong>的主要实现类有 <code>java.util.HashSet</code>  和 <code>java.util.TreeSet</code> 。<br>从上面的描述可以看出 JDK 中提供了丰富的集合类库，为了便于初学者进行系统地学习，接下来通过一张图来描述整个集合类的继承体系。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200831161312724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200831161543196.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>集合本身是一个工具，它存放在 java.util 包中。在 Collection 接口定义着单列集合框架中最最共性的内容。</p><h2 id="13-collection-常用功能"><a class="markdownIt-Anchor" href="#13-collection-常用功能">#</a> 1.3 Collection 常用功能</h2><p>Collection 是所有单列集合的父接口，因此在 Collection 中定义了单列集合 (List 和 Set) 通用的一些方法，这些方法可用于操作所有的单列集合。方法如下：</p><ul><li><code>public boolean add(E e)</code> ： 把给定的对象添加到当前集合中 。</li><li><code>public void clear()</code>  : 清空集合中所有的元素。</li><li><code>public boolean remove(E e)</code> : 把给定的对象在当前集合中删除。</li><li><code>public boolean contains(E e)</code> : 判断当前集合中是否包含给定的对象。</li><li><code>public boolean isEmpty()</code> : 判断当前集合是否为空。</li><li><code>public int size()</code> : 返回集合中元素的个数。</li><li><code>public Object[] toArray()</code> : 把集合中的元素，存储到数组中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Collection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建集合对象 </span></span><br><span class="line">    <span class="comment">// 使用多态形式</span></span><br><span class="line">    Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="comment">// 使用方法</span></span><br><span class="line">    <span class="comment">// 添加功能  boolean  add(String s)</span></span><br><span class="line">    coll.add(<span class="string">&quot;小李广&quot;</span>);</span><br><span class="line">    coll.add(<span class="string">&quot;扫地僧&quot;</span>);</span><br><span class="line">    coll.add(<span class="string">&quot;石破天&quot;</span>);</span><br><span class="line">    System.out.println(coll);</span><br><span class="line">    <span class="comment">// boolean contains(E e) 判断o是否在集合中存在</span></span><br><span class="line">    System.out.println(<span class="string">&quot;判断  扫地僧 是否在集合中&quot;</span>+coll.contains(<span class="string">&quot;扫地僧&quot;</span>));</span><br><span class="line">    <span class="comment">//boolean remove(E e) 删除在集合中的o元素</span></span><br><span class="line">    System.out.println(<span class="string">&quot;删除石破天：&quot;</span>+coll.remove(<span class="string">&quot;石破天&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;操作之后集合中元素:&quot;</span>+coll);</span><br><span class="line">    <span class="comment">// size() 集合中有几个元素</span></span><br><span class="line">System.out.println(<span class="string">&quot;集合中有&quot;</span>+coll.size()+<span class="string">&quot;个元素&quot;</span>);</span><br><span class="line"><span class="comment">// Object[] toArray()转换成一个Object数组</span></span><br><span class="line">    Object[] objects = coll.toArray();</span><br><span class="line">    <span class="comment">// 遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class="line">System.out.println(objects[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// void  clear() 清空集合</span></span><br><span class="line">coll.clear();</span><br><span class="line">System.out.println(<span class="string">&quot;集合中内容为：&quot;</span>+coll);</span><br><span class="line"><span class="comment">// boolean  isEmpty()  判断是否为空</span></span><br><span class="line">System.out.println(coll.isEmpty());  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[小李广, 扫地僧, 石破天]</span><br><span class="line">判断  扫地僧 是否在集合中<span class="keyword">true</span></span><br><span class="line">删除石破天：<span class="keyword">true</span></span><br><span class="line">操作之后集合中元素:[小李广, 扫地僧]</span><br><span class="line">集合中有<span class="number">2</span>个元素</span><br><span class="line">小李广</span><br><span class="line">扫地僧</span><br><span class="line">集合中内容为：[]</span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><h1 id="2-iterator迭代器"><a class="markdownIt-Anchor" href="#2-iterator迭代器">#</a> 2、Iterator 迭代器</h1><h2 id="21迭代器模式"><a class="markdownIt-Anchor" href="#21迭代器模式">#</a> 2.1 迭代器模式</h2><p>Java 集合框架的集合类，我们有时候称之为容器。容器的种类有很多种，比如 ArrayList、LinkedList、HashSet…，每种容器都有自己的特点，ArrayList 底层维护的是一个数组；LinkedList 是链表结构的；HashSet 依赖的是哈希表，<strong>每种容器都有自己特有的数据结构</strong>。<br>　　因为容器的内部结构不同，很多时候可能不知道该怎样去遍历一个容器中的元素。所以为了使对容器内元素的操作更为简单，Java 引入了<strong>迭代器模式！</strong></p><p><strong>迭代器模式</strong>：<font color=red>提供一种方法对一个容器对象中的各个元素进行访问，而又不暴露该对象容器的内部细节。</font></p><h2 id="22iterator迭代器"><a class="markdownIt-Anchor" href="#22iterator迭代器">#</a> 2.2Iterator 迭代器</h2><p>在程序开发中，经常需要遍历集合中的所有元素。针对这种需求，JDK 专门提供了一个接口 <code>java.util.Iterator</code> 。Iterator 接口也是 Java 集合中的一员，但它与 Collection、Map 接口有所不同，<strong>Collection 接口与 Map 接口主要用于存储元素</strong>，而 I<strong>terator 主要用于迭代访问</strong>（即遍历）Collection 中的元素，因此 Iterator 对象也被称为迭代器。<br>其接口定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;<span class="comment">//判断是否存在下一个对象元素</span></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;<span class="comment">//获取下一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;<span class="comment">//移除元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取迭代器的方法：</strong><br> <code>public Iterator iterator()</code> ： 获取集合对应的迭代器，用来遍历集合中的元素的。<br><strong>下面介绍一下迭代的概念：</strong><br>迭代即 Collection 集合元素的通用获取方式。在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，继续在判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。<br><strong>Iterator 接口的常用方法如下：</strong><br> <code>public E next()</code> ：返回迭代的下一个元素。<br> <code>public boolean hasNext()</code> ：如果仍有元素可以迭代，则返回 true。<br> <code>public void remove()</code> ：移除元素</p><h2 id="23iterable"><a class="markdownIt-Anchor" href="#23iterable">#</a> 2.3Iterable</h2><p>Java 中还提供了一个 Iterable 接口，Iterable 接口实现后的功能是‘返回’一个迭代器，我们常用的实现了该接口的子接口有：Collection<E>、List<E>、Set<E>等。该接口的 iterator () 方法返回一个标准的 Iterator 实现。实现 Iterable 接口允许对象成为 foreach 语句的目标，就可以通过 foreach 语句来遍历你的底层序列。<br><strong>Iterable 接口的具体实现:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Package java.lang;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们通过案例学习如何使用 Iterator 迭代集合中元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用多态方式 创建对象</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">// 添加元素到集合</span></span><br><span class="line">        coll.add(<span class="string">&quot;串串星人&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;吐槽星人&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;汪星人&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="comment">//使用迭代器 遍历   每个集合对象都有自己的迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line">        <span class="comment">//  泛型指的是 迭代出 元素的数据类型</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123; <span class="comment">//判断是否有迭代元素</span></span><br><span class="line">            String s = it.next();<span class="comment">//获取迭代出的元素</span></span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span>         List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"> <span class="number">3</span>         list.add(<span class="string">&quot;张三1&quot;</span>);</span><br><span class="line"> <span class="number">4</span>         list.add(<span class="string">&quot;张三2&quot;</span>);</span><br><span class="line"> <span class="number">5</span>         list.add(<span class="string">&quot;张三3&quot;</span>);</span><br><span class="line"> <span class="number">6</span>         list.add(<span class="string">&quot;张三4&quot;</span>);</span><br><span class="line"> <span class="number">7</span>         </span><br><span class="line"> <span class="number">8</span>         List&lt;String&gt; linkList = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"> <span class="number">9</span>         linkList.add(<span class="string">&quot;link1&quot;</span>);</span><br><span class="line"><span class="number">10</span>         linkList.add(<span class="string">&quot;link2&quot;</span>);</span><br><span class="line"><span class="number">11</span>         linkList.add(<span class="string">&quot;link3&quot;</span>);</span><br><span class="line"><span class="number">12</span>         linkList.add(<span class="string">&quot;link4&quot;</span>);</span><br><span class="line"><span class="number">13</span>         </span><br><span class="line"><span class="number">14</span>         Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"><span class="number">15</span>         set.add(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line"><span class="number">16</span>         set.add(<span class="string">&quot;set2&quot;</span>);</span><br><span class="line"><span class="number">17</span>         set.add(<span class="string">&quot;set3&quot;</span>);</span><br><span class="line"><span class="number">18</span>         set.add(<span class="string">&quot;set4&quot;</span>);</span><br><span class="line"><span class="number">19</span>         <span class="comment">//使用迭代器遍历ArrayList集合</span></span><br><span class="line"><span class="number">20</span>         Iterator&lt;String&gt; listIt = list.iterator();</span><br><span class="line"><span class="number">21</span>         <span class="keyword">while</span>(listIt.hasNext())&#123;</span><br><span class="line"><span class="number">22</span>             System.out.println(listIt.next());</span><br><span class="line"><span class="number">23</span>         &#125;</span><br><span class="line"><span class="number">24</span>         <span class="comment">//使用迭代器遍历Set集合</span></span><br><span class="line"><span class="number">25</span>         Iterator&lt;String&gt; setIt = set.iterator();</span><br><span class="line"><span class="number">26</span>         <span class="keyword">while</span>(setIt.hasNext())&#123;</span><br><span class="line"><span class="number">27</span>             System.out.println(listIt.next());</span><br><span class="line"><span class="number">28</span>         &#125;</span><br><span class="line"><span class="number">29</span>         <span class="comment">//使用迭代器遍历LinkedList集合</span></span><br><span class="line"><span class="number">30</span>         Iterator&lt;String&gt; linkIt = linkList.iterator();</span><br><span class="line"><span class="number">31</span>         <span class="keyword">while</span>(linkIt.hasNext())&#123;</span><br><span class="line"><span class="number">32</span>             System.out.println(listIt.next());</span><br><span class="line"><span class="number">33</span>         &#125;</span><br><span class="line"><span class="number">34</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="24for-each循环"><a class="markdownIt-Anchor" href="#24for-each循环">#</a> 2.4for each 循环</h2><p>增强 for 循环 (也称 for each 循环) 是 JDK1.5 以后出来的一个高级 for 循环，<strong>专门用来遍历数组和集合的</strong>。它的<strong>内部原理其实是个 Iterator 迭代器</strong>，所以<strong>在遍历的过程中，不能对集合中的元素进行增删操作。</strong><br><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素的数据类型  变量 : Collection集合or数组)&#123; </span><br><span class="line">  <span class="comment">//写操作代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（<font color=red>它用于遍历 Collection 和数组。通常只进行遍历元素，不要在遍历的过程中对集合元素进行增删操作</font>）<br><strong>练习 1：遍历数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBForDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">87</span>&#125;;</span><br><span class="line">       <span class="comment">//使用增强for遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a : arr)&#123;<span class="comment">//a代表数组中的每个元素</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习 2: 遍历集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBFor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">    Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    coll.add(<span class="string">&quot;小河神&quot;</span>);</span><br><span class="line">    coll.add(<span class="string">&quot;老河神&quot;</span>);</span><br><span class="line">    coll.add(<span class="string">&quot;神婆&quot;</span>);</span><br><span class="line">    <span class="comment">//使用增强for遍历</span></span><br><span class="line">    <span class="keyword">for</span>(String s :coll)&#123;<span class="comment">//接收变量s代表 代表被遍历到的集合元素</span></span><br><span class="line">    System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Collection </tag>
            
            <tag> Iterator </tag>
            
            <tag> 集合 </tag>
            
            <tag> 迭代器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习-Random类和Math类</title>
      <link href="/2020/08/30/Java%E5%AD%A6%E4%B9%A0-Random%E7%B1%BB%E5%92%8CMath%E7%B1%BB/"/>
      <url>/2020/08/30/Java%E5%AD%A6%E4%B9%A0-Random%E7%B1%BB%E5%92%8CMath%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="random类"><a class="markdownIt-Anchor" href="#random类">#</a> Random 类</h1><h2 id="1-什么是random类"><a class="markdownIt-Anchor" href="#1-什么是random类">#</a> 1 、什么是 Random 类</h2><p>此类的实例用于生成伪随机数<br> Random 类中实现的随机算法是<strong>伪随机</strong>，也就是<strong>有规则</strong>的随机。在进行随机时，随机算法的起源数字称为<strong>种子数 (seed)</strong>，在种子数的基础上进行一定的变换，从而产生需要的随机数字。相同种子数的 Random 对象，<strong>相同次数生成的随机数字是完全相同的</strong>。也就是说，<font color=red><strong>两个种子数相同的 Random 对象，第一次生成的随机数字完全相同，第 N 次生成的随机数字也完全相同</strong></font>。这点在生成多个随机数字时需要特别注意。</p><p>（注意：<strong>种子数只是随机算法的起源数字，和生成的随机数字的区间无关</strong>）</p><h2 id="2-random类的使用步骤"><a class="markdownIt-Anchor" href="#2-random类的使用步骤">#</a> 2、Random 类的使用步骤</h2><p><strong>查看类：</strong></p><ul><li><code>java.util.Random</code>  ：该类需要 import 导入使后使用。</li></ul><p><strong>查看构造方法</strong></p><ul><li><code>public Random()</code>  ：创建一个新的随机数生成器。</li><li><code>public Random(long seed)</code> ：该构造方法可以通过制定一个种子数进行创建。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line">Random r1 = <span class="keyword">new</span> Random(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><strong>查看成员方法</strong><br> Random 类中的方法比较简单，每个方法的功能也很容易理解。需要说明的是，Random 类中各方法生成的随机数字都是均匀分布的，也就是说区间内部的数字生成的几率是均等的</p><ul><li><p><code>public int nextInt()</code>  ：返回一个伪随机数，范围在 0 （包括）和 指定值 n （不包括）之间的 int 值。</p></li><li><p><code>public boolean nextBoolean()</code> ：该方法的作用是生成一个随机的 boolean 值，生成 true 和 false 的值几率相等，也就是都是 50% 的几率。</p></li><li><p><code>public double nextDouble()</code> ：该方法的作用是生成一个随机的 double 值，数值介于 [0,1.0) 之间。</p></li><li><p><code>public int nextInt()</code> ：该方法的作用是生成一个随机的 int 值，该值介于 int 的区间，也就是 - 2^31 到 2^31-1 之间。</p></li><li><p><code>public int nextInt(int n)</code> ：生成指定区间的 int 值，该方法的作用是生成一个随机的 int 值，该值介于 [0,n) 的区间，也就是<strong> 0 到 n 之间的随机 int 值，包含 0 而不包含 n</strong>。</p></li><li><p><code>public void setSeed(long seed)</code> ：该方法的作用是重新设置 Random 对象中的种子数。设置完种子数以后的 Random 对象和相同种子数使用 new 关键字创建出的 Random 对象相同。</p></li></ul><h2 id="3-具体应用"><a class="markdownIt-Anchor" href="#3-具体应用">#</a> 3、具体应用</h2><p>使用 Random 类，完成生成 3 个 10 以内的随机整数的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="comment">//2. 创建键盘录入数据的对象 </span></span><br><span class="line">Random r = <span class="keyword">new</span> Random(); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123; </span><br><span class="line"><span class="comment">//3. 随机生成一个数据</span></span><br><span class="line"><span class="keyword">int</span> number = r.nextInt(<span class="number">10</span>); </span><br><span class="line"><span class="comment">//4. 输出数据 </span></span><br><span class="line">System.out.println(<span class="string">&quot;number:&quot;</span>+ number); </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取 1-n 之间的随机数，<strong>包含 n</strong>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 导包 </span></span><br><span class="line"> <span class="keyword">import</span> java.util.Random; </span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123; </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> n = <span class="number">50</span>; </span><br><span class="line"> <span class="comment">// 创建对象 </span></span><br><span class="line"> Random r = <span class="keyword">new</span> Random(); </span><br><span class="line"> <span class="comment">// 获取随机数 </span></span><br><span class="line"> <span class="keyword">int</span> number = r.nextInt(n) + <span class="number">1</span>; </span><br><span class="line"> <span class="comment">// 输出随机数 </span></span><br><span class="line"> System.out.println(<span class="string">&quot;number:&quot;</span> + number); </span><br><span class="line"> &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>猜数字游戏：</strong> 游戏开始时，会随机生成一个 1-100 之间的整数 number 。玩家猜测一个数字 guessNumber ，会与 number 作比 较，系统提示大了或者小了，直到玩家猜中，游戏结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 系统产生一个随机数1‐100之间的。 </span></span><br><span class="line">Random r = <span class="keyword">new</span> Random(); </span><br><span class="line"><span class="keyword">int</span> number = r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123; </span><br><span class="line"><span class="comment">// 键盘录入我们要猜的数据 </span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in); </span><br><span class="line">System.out.println(<span class="string">&quot;请输入你要猜的数字(1‐100)：&quot;</span>); </span><br><span class="line"><span class="keyword">int</span> guessNumber = sc.nextInt(); </span><br><span class="line"><span class="comment">// 比较这两个数据(用if语句) </span></span><br><span class="line"><span class="keyword">if</span> (guessNumber &gt; number) </span><br><span class="line">&#123; </span><br><span class="line">System.out.println(<span class="string">&quot;你猜的数据&quot;</span> + guessNumber + <span class="string">&quot;大了&quot;</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (guessNumber &lt; number) </span><br><span class="line">&#123; System.out.println(<span class="string">&quot;你猜的数据&quot;</span> + guessNumber + <span class="string">&quot;小了&quot;</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">System.out.println(<span class="string">&quot;恭喜你,猜中了&quot;</span>); </span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="math类"><a class="markdownIt-Anchor" href="#math类">#</a> Math 类</h1><h2 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述">#</a> 1、概述</h2><p><code>java.lang.Math</code>  类包含用于<strong>执行基本数学运算</strong>的方法，如初等指数、对数、平方根和三角函数。类似这样的工具 类，其<strong>所有方法均为静态方法</strong>，并且<strong>不会创建对象</strong>，调用起来非常简单。</p><h2 id="2-常用运算方法"><a class="markdownIt-Anchor" href="#2-常用运算方法">#</a> 2、常用运算方法</h2><ul><li><code>Math.sqrt()</code> ：计算平方根</li><li><code>Math.cbrt()</code> ：计算立方根</li><li><code>Math.hypot(x,y)</code> ：计算 (x 的平方 + y 的平方)<strong> 的平方根</strong></li><li><code>Math.pow(a,b)</code> ：计算 a 的 b 次方</li><li><code>Math.exp(x)</code> ：计算 e^x 的值</li><li><code>Math.max()</code> ：计算最大值 Math.min ();// 计算最小值</li><li><code>Math.abs()</code> ：返回 double 值的绝对值。</li><li><code>Math.ceil()</code> ：天花板的意思，返回大于等于参数的最小的整数</li><li><code>Math.floor()</code> ：地板的意思，返回小于等于参数最大的整数</li><li><code>Math.random()</code> ： 取得一个大于或者等于 0.0 小于不等于 1.0 的随机数 [0,1)</li><li><code>Math.rint()</code> ： 四舍五入 返回 double 值</li><li><code>Math.round()</code> ： 四舍五入 float 时返回 int 值，double 时返回 long 值</li><li><code>Math.nextUp(a)</code> ： 返回比 a 大一点点的浮点数</li><li><code>Math.nextDown(a)</code> ： 返回比 a 小一点点的浮点数</li><li><code>Math.nextAfter(a,b)</code> ：返回 (a,b) 或 (b,a) 间与 a 相邻的浮点数 b 可以比 a 小</li></ul>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 类 </tag>
            
            <tag> Random类 </tag>
            
            <tag> Math类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习-详谈String类及其常用方法</title>
      <link href="/2020/08/30/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88String%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2020/08/30/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88String%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-string类"><a class="markdownIt-Anchor" href="#1-string类">#</a> 1、String 类</h1><h2 id="11string类的概述"><a class="markdownIt-Anchor" href="#11string类的概述">#</a> 1.1String 类的概述</h2><p><code>java.lang.String</code>  类代表<strong>字符串</strong>。Java 程序中所有的字符串文字（例如 “abc” ）都可以被看作是实现此类的实例。类 String 中包括用于检查各个字符串的方法，比如用于<strong>比较字符串</strong>，<strong>搜索字符串</strong>，<strong>提取子字符串</strong>以及<strong>创建具有翻 译为大写或小写的所有字符的字符串的副本</strong><br><strong>特点：</strong></p><ol><li>字符串不变：字符串的值在创建后不能被更改。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;abc&quot;</span>; s1 += <span class="string">&quot;d&quot;</span>; </span><br><span class="line">System.out.println(s1); <span class="comment">// &quot;abcd&quot; </span></span><br><span class="line"><span class="comment">// 内存中有&quot;abc&quot;，&quot;abcd&quot;两个对象，s1从指向&quot;abc&quot;，改变指向，指向了&quot;abcd&quot;。</span></span><br></pre></td></tr></table></figure><ol start="2"><li>因为 String 对象是不可变的，所以它们<strong>可以被共享</strong>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;abc&quot;</span>; </span><br><span class="line">String s2 = <span class="string">&quot;abc&quot;</span>; </span><br><span class="line"><span class="comment">// 内存中只有一个&quot;abc&quot;对象被创建，同时被s1和s2共享。</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>&quot;abc&quot;</code>  等效于  <code>char[] data=&#123; 'a' , 'b' , 'c' &#125;</code>  。（<strong>String 底层是靠字符数组实现的。</strong>）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如： </span><br><span class="line">String str = <span class="string">&quot;abc&quot;</span>; </span><br><span class="line">相当于： </span><br><span class="line"><span class="keyword">char</span> data[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;; </span><br><span class="line">String str = <span class="keyword">new</span> String(data); </span><br><span class="line"><span class="comment">// String底层是靠字符数组实现的。</span></span><br></pre></td></tr></table></figure><h2 id="12-使用步骤"><a class="markdownIt-Anchor" href="#12-使用步骤">#</a> 1.2 使用步骤</h2><ul><li><strong>查看类：</strong>  <code>java.lang.String</code>  ：此类不需要导入。</li><li><strong>查看构造方法：</strong><br> <code>public String()</code>  ：初始化新创建的 String 对象，以使其表示空字符序列。<br> <code>public String(char[] value)</code>  ：通过当前参数中的字符数组来构造新的 String。<br> <code>public String(byte[] bytes)</code>  ：通过使用平台的默认字符集解码当前参数中的字节数组来构造新的 String。<br><strong>构造举例，代码如下：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参构造 </span></span><br><span class="line">String str = <span class="keyword">new</span> String（）； </span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过字符数组构造 </span></span><br><span class="line"><span class="keyword">char</span> chars[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;; </span><br><span class="line">String str2 = <span class="keyword">new</span> String(chars); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过字节数组构造 </span></span><br><span class="line"><span class="keyword">byte</span> bytes[] = &#123; <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span> &#125;;</span><br><span class="line">String str3 = <span class="keyword">new</span> String(bytes);</span><br></pre></td></tr></table></figure><h2 id="13-常用方法"><a class="markdownIt-Anchor" href="#13-常用方法">#</a> 1.3 常用方法</h2><ul><li><code>public boolean equals (Object anObject)</code>  ：将此字符串与指定对象进行比较。（String 类中已经对 equals 方法进行了重写所以比较的是对象的内容不是地址）</li><li><code>public boolean equalsIgnoreCase (String anotherString)</code>  ：将此字符串与指定对象进行比较，忽略大小 写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// 创建字符串对象 </span></span><br><span class="line">String s1 = <span class="string">&quot;hello&quot;</span>; </span><br><span class="line">String s2 = <span class="string">&quot;hello&quot;</span>; </span><br><span class="line">String s3 = <span class="string">&quot;HELLO&quot;</span>;</span><br><span class="line"><span class="comment">// boolean equals(Object obj):比较字符串的内容是否相同 </span></span><br><span class="line">System.out.println(s1.equals(s2)); <span class="comment">// true </span></span><br><span class="line">System.out.println(s1.equals(s3)); <span class="comment">// false </span></span><br><span class="line">System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class="line"><span class="comment">//boolean equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写 </span></span><br><span class="line">System.out.println(s1.equalsIgnoreCase(s2)); <span class="comment">// true </span></span><br><span class="line">System.out.println(s1.equalsIgnoreCase(s3)); <span class="comment">// true </span></span><br><span class="line">System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取功能的方法</strong>：</p><ul><li><code>public int length ()</code>  ：返回此字符串的长度。</li><li><code>public String concat (String str)</code>  ：将指定的字符串连接到该字符串的末尾。</li><li><code>public char charAt (int index)</code>  ：获取指定索引处的 char 值。</li><li><code>public int indexOf (String str)</code>  ：获取指定子字符串第一次出现在该字符串内的索引。</li><li><code>public String substring (int beginIndex)</code>  ：获取一个子字符串，从 beginIndex 开始截取字符串到字符串结尾。</li><li><code>public String substring (int beginIndex, int endIndex)</code>  ：获取一个子字符串，从 beginIndex 到 endIndex 截取字符串。含 beginIndex，不含 endIndex。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="comment">//创建字符串对象 </span></span><br><span class="line">String s = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"><span class="comment">// int length():获取字符串的长度，其实也就是字符个数 </span></span><br><span class="line">System.out.println(s.length()); <span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class="line"><span class="comment">// String concat (String str):将将指定的字符串连接到该字符串的末尾. </span></span><br><span class="line">String s2 = s.concat(<span class="string">&quot;**hello itheima&quot;</span>);<span class="comment">//helloworld**hello itheima</span></span><br><span class="line">System.out.println(s2);<span class="comment">// helloworld**hello itheima </span></span><br><span class="line"><span class="comment">// char charAt(int index):获取指定索引处的字符 </span></span><br><span class="line">System.out.println(s.charAt(<span class="number">0</span>)); <span class="comment">//h</span></span><br><span class="line">System.out.println(s.charAt(<span class="number">1</span>)); <span class="comment">//e</span></span><br><span class="line">System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class="line"><span class="comment">// int indexOf(String str):获取str在字符串对象中第一次出现的索引,没有返回‐1 </span></span><br><span class="line">System.out.println(s.indexOf(<span class="string">&quot;l&quot;</span>)); <span class="comment">//2</span></span><br><span class="line">System.out.println(s.indexOf(<span class="string">&quot;owo&quot;</span>));<span class="comment">//4 </span></span><br><span class="line">System.out.println(s.indexOf(<span class="string">&quot;ak&quot;</span>)); <span class="comment">//-1</span></span><br><span class="line">System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class="line"><span class="comment">// String substring(int start):从start开始截取字符串到字符串结尾 </span></span><br><span class="line">System.out.println(s.substring(<span class="number">0</span>)); <span class="comment">//helloworld</span></span><br><span class="line">System.out.println(s.substring(<span class="number">5</span>)); <span class="comment">//world</span></span><br><span class="line">System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class="line"><span class="comment">// String substring(int start,int end):从start到end截取字符串。含start，不含end。 </span></span><br><span class="line">System.out.println(s.substring(<span class="number">0</span>, s.length())); <span class="comment">//helloworld</span></span><br><span class="line">System.out.println(s.substring(<span class="number">3</span>,<span class="number">8</span>)); <span class="comment">//lowor</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>转换功能的方法</strong></p><ul><li><code>public char[] toCharArray ()</code>  ：将此字符串转换为新的字符数组。</li><li><code>public byte[] getBytes ()</code>  ：使用平台的默认字符集将该 String 编码转换为新的字节数组。</li><li><code>public String replace (CharSequence target, CharSequence replacement)</code>  ：将与 target 匹配的字符串使 用 replacement 字符串替换。<strong>CharSequence 是一个接口，也是一种引用类型。作为参数类型，可以把 String 对象传递到方法中</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="comment">//创建字符串对象 </span></span><br><span class="line">String s = <span class="string">&quot;abcde&quot;</span>; </span><br><span class="line"><span class="comment">// char[] toCharArray():把字符串转换为字符数组 </span></span><br><span class="line"><span class="keyword">char</span>[] chs = s.toCharArray(); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; chs.length; x++) &#123; </span><br><span class="line">System.out.println(chs[x]); </span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class="line"><span class="comment">// byte[] getBytes ():把字符串转换为字节数组 </span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = s.getBytes(); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; bytes.length; x++) </span><br><span class="line">&#123; </span><br><span class="line">System.out.println(bytes[x]); </span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class="line"><span class="comment">// 替换字母it为大写IT</span></span><br><span class="line">String str = <span class="string">&quot;itcast itheima&quot;</span>; </span><br><span class="line">String replace = str.replace(<span class="string">&quot;it&quot;</span>, <span class="string">&quot;IT&quot;</span>); </span><br><span class="line">System.out.println(replace); <span class="comment">// ITcast ITheima </span></span><br><span class="line">System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分割功能的方法</strong></p><ul><li><code>public String[] split(String regex)</code>  ：将此字符串按照给定的 regex（规则）拆分为字符串数组。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="comment">//创建字符串对象 </span></span><br><span class="line">String s = <span class="string">&quot;aa|bb|cc&quot;</span>;</span><br><span class="line">String[] strArray = s.split(<span class="string">&quot;|&quot;</span>); <span class="comment">// [&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;] </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; strArray.length; x++)</span><br><span class="line">&#123; </span><br><span class="line">System.out.println(strArray[x]); <span class="comment">// aa bb cc &#125; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-string类的练习"><a class="markdownIt-Anchor" href="#14-string类的练习">#</a> 1.4 String 类的练习</h2><p><strong>拼接字符串</strong><br>定义一个方法，把数组 {1,2,3} 按照指定个格式拼接成一个字符串。格式参照如下：[1#2#3]。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="comment">//定义一个int类型的数组 </span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; </span><br><span class="line"><span class="comment">//调用方法 </span></span><br><span class="line">String s = arrayToString(arr); </span><br><span class="line"><span class="comment">//输出结果 </span></span><br><span class="line">System.out.println(<span class="string">&quot;s:&quot;</span> + s); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  写方法实现把数组中的元素按照指定的格式拼接成一个字符串 </span></span><br><span class="line"><span class="comment"> *  两个明确：</span></span><br><span class="line"><span class="comment"> *  返回值类型：String </span></span><br><span class="line"><span class="comment"> *  参数列表：int[] arr </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123; </span><br><span class="line"><span class="comment">// 创建字符串s</span></span><br><span class="line">String s = <span class="keyword">new</span> String(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"><span class="comment">// 遍历数组，并拼接字符串 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; arr.length; x++) &#123; </span><br><span class="line"><span class="keyword">if</span> (x == arr.length -<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">s = s.concat(arr[x] + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; s = s.concat(arr[x] + <span class="string">&quot;#&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>统计字符个数</strong><br>键盘录入一个字符，统计字符串中大小写字母及数字字符个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="comment">//键盘录入一个字符串数据 </span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in); </span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个字符串数据：&quot;</span>); </span><br><span class="line">String s = sc.nextLine(); </span><br><span class="line"><span class="comment">//定义三个统计变量，初始化值都是0 </span></span><br><span class="line"><span class="keyword">int</span> bigCount = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> smallCount = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> numberCount = <span class="number">0</span>; </span><br><span class="line"><span class="comment">//遍历字符串，得到每一个字符 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;s.length(); x++) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">char</span> ch = s.charAt(x); </span><br><span class="line"><span class="comment">//拿字符进行判断 </span></span><br><span class="line"><span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;Z&#x27;</span>) </span><br><span class="line">&#123; </span><br><span class="line">bigCount++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;z&#x27;</span>) </span><br><span class="line">&#123; </span><br><span class="line">smallCount++; </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) </span><br><span class="line">&#123; </span><br><span class="line">numberCount++; </span><br><span class="line">&#125;<span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">System.out.println(<span class="string">&quot;该字符&quot;</span>+ch+<span class="string">&quot;非法&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125;<span class="comment">//输出结果 </span></span><br><span class="line">System.out.println(<span class="string">&quot;大写字符：&quot;</span>+bigCount+<span class="string">&quot;个&quot;</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;小写字符：&quot;</span>+smallCount+<span class="string">&quot;个&quot;</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;数字字符：&quot;</span>+numberCount+<span class="string">&quot;个&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请输入一个字符串数据：</span><br><span class="line">xGSHDsdas</span><br><span class="line">大写字符：<span class="number">4</span>个</span><br><span class="line">小写字符：<span class="number">5</span>个</span><br><span class="line">数字字符：<span class="number">0</span>个</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 字符串 </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习-详谈数组Array和数组工具类Arrays</title>
      <link href="/2020/08/30/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%95%B0%E7%BB%84Array%E5%92%8C%E6%95%B0%E7%BB%84%E5%B7%A5%E5%85%B7%E7%B1%BBArrays/"/>
      <url>/2020/08/30/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%95%B0%E7%BB%84Array%E5%92%8C%E6%95%B0%E7%BB%84%E5%B7%A5%E5%85%B7%E7%B1%BBArrays/</url>
      
        <content type="html"><![CDATA[<h1 id="1-数组的定义和访问"><a class="markdownIt-Anchor" href="#1-数组的定义和访问">#</a> 1、数组的定义和访问</h1><h2 id="11容器概述"><a class="markdownIt-Anchor" href="#11容器概述">#</a> 1.1 容器概述</h2><p><strong>案例分析：</strong> 现在需要统计某公司员工的工资情况，例如计算平均工资、找到最高工资等。假设该公司有 50 名员工，用前面所学 的知识，程序首先需要声明 50 个变量来分别记住每位员工的工资，然后在进行操作，这样做会显得很麻烦，而且错 误率也会很高。因此我们可以使用容器进行操作。将所有的数据全部存储到一个容器中，统一操作。</p><p><strong>容器的概念：</strong> 容器是将多个数据存储到一起，每个数据称为该容器的元素。</p><h2 id="12数组的概念"><a class="markdownIt-Anchor" href="#12数组的概念">#</a> 1.2 数组的概念</h2><p><strong>数组概念：</strong>  数组就是存储数据长度固定的容器，保证多个数据的数据类型要一致。<br>（<font color=red>其实所谓的数组指的就是一组相关类型的变量集合，并且这些变量可以按照统一的方式进行操作。数组本身属于<strong>引用数据类型</strong></font>）</p><h2 id="13数组的定义"><a class="markdownIt-Anchor" href="#13数组的定义">#</a> 1.3 数组的定义</h2><p><strong>方式一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数组存储的数据类型[] 数组名字 = <span class="keyword">new</span> 数组存储的数据类型[长度];</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><ul><li>数组存储的数据类型： 创建的数组容器可以存储的数据类型。</li><li>[] : 表示数组。</li><li>数组名字：为定义的数组起个变量名，满足标识符规范，可以使用名字操作数组。</li><li>new：关键字，创建数组使用的关键字。</li><li>[长度]：数组的长度，表示数组容器中可以存储多少个元素。</li></ul><p><strong>注意：</strong> <font color=red>数组有定长特性，长度一旦指定，不可再更改</font><br><strong>方式二：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3.</span>..&#125;;</span><br><span class="line">例如：定义存储<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>整数的数组容器。</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>方式三：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3.</span>..&#125;;</span><br><span class="line">例如：定义存储<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>整数的数组容器。</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="14数组的访问"><a class="markdownIt-Anchor" href="#14数组的访问">#</a> 1.4 数组的访问</h2><ul><li><strong>索引</strong>： 每一个存储到数组的元素，都会自动的拥有一个编号，从 0 开始，这个自动编号称为数组索引 (index)，可以通过数组的索引访问到数组中的元素。</li><li><strong>格式</strong>： <code>数组名[索引]</code></li><li><strong>数组的长度属性</strong>： 每个数组都具有长度，而且是固定的，Java 中赋予了数组的一个属性，可以获取到数组的 长度，语句为： 数组名.length ，属性 length 的执行结果是数组的长度，int 类型结果。由次可以推断出，数 组的最大索引值为 数组名.length-1 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; </span><br><span class="line"><span class="comment">//打印数组的属性，输出结果是5 </span></span><br><span class="line">System.out.println(arr.length); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>索引访问数组中的元素</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="comment">//定义存储int类型数组，赋值元素1，2，3，4，5 </span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; </span><br><span class="line"><span class="comment">//为0索引元素赋值为6 </span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">6</span>; </span><br><span class="line"><span class="comment">//获取数组0索引上的元素 int i = arr[0]; </span></span><br><span class="line">System.out.println(i); </span><br><span class="line"><span class="comment">//直接输出数组0索引元素 </span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-数组原理内存"><a class="markdownIt-Anchor" href="#2-数组原理内存">#</a> 2、数组原理内存</h1><h2 id="21-内存概述"><a class="markdownIt-Anchor" href="#21-内存概述">#</a> 2.1 内存概述</h2><p>内存是计算机中的重要原件，<strong>临时存储区域，作用是运行程序</strong>。我们<strong>编写的程序是存放在硬盘中的，在硬盘中的程 序是不会运行的，必须放进内存中才能运行</strong>，运行完毕后会清空内存。 Java 虚拟机要运行程序，必须要对内存进行空间的分配和管理。</p><h2 id="22java虚拟机的内存划分"><a class="markdownIt-Anchor" href="#22java虚拟机的内存划分">#</a> 2.2Java 虚拟机的内存划分</h2><p>为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。<br><strong>JVM 的内存划分：</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200830154211197.jpg#pic_center" alt="在这里插入图片描述"></p><h2 id="23-数组在内存中的存储"><a class="markdownIt-Anchor" href="#23-数组在内存中的存储">#</a> 2.3 数组在内存中的存储</h2><p><strong>一个数组内存图</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; </span><br><span class="line">System.out.println(arr);<span class="comment">//[I@5f150435 </span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);<span class="comment">//输出0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>new 出来的内容，都是在堆 内存中存储的，而方法中的变量 arr 保存的是数组的地址。</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200830154856824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200830154926542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>两个数组内存图</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200830155051592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>两个变量指向一个数组</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200830155152992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="3-数组常见操作"><a class="markdownIt-Anchor" href="#3-数组常见操作">#</a> 3、数组常见操作</h1><h2 id="31-数组越界异常"><a class="markdownIt-Anchor" href="#31-数组越界异常">#</a> 3.1 数组越界异常</h2><p>观察下列代码运行后的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; </span><br><span class="line">System.out.println(arr[<span class="number">3</span>]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200830155454606.png#pic_center" alt="在这里插入图片描述"><br>分析：创建数组，赋值 3 个元素，数组的索引就是 0，1，2，没有 3 索引，因此我们不能访问数组中不存在的索引，程序运 行后，将会抛出  <code>ArrayIndexOutOfBoundsException</code>  数组越界异常。在开发中，数组的越界异常是<strong>不能出现的</strong>，一 旦出现了，就必须要修改我们编写的代码。</p><h2 id="32-数组空指针异常"><a class="markdownIt-Anchor" href="#32-数组空指针异常">#</a> 3.2 数组空指针异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; </span><br><span class="line">arr = <span class="keyword">null</span>; </span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); </span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200830160809908.png#pic_center" alt="在这里插入图片描述"><br><strong>分析：</strong>  <code>arr = null</code>  这行代码，意味着<strong>变量 arr 将不会再保存数组的内存地址</strong>，也就不允许再操作数组了，因此运行的时候 会抛出  <code>NullPointerException</code>  空指针异常。在开发中，数组的越界异常是<strong>不能出现的</strong>，一旦出现了，就必须要修 改我们编写的代码。</p><h2 id="33-数组遍历"><a class="markdownIt-Anchor" href="#33-数组遍历">#</a> 3.3 数组遍历</h2><p><strong>数组遍历：</strong>  就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); </span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); </span><br><span class="line">System.out.println(arr[<span class="number">3</span>]); </span><br><span class="line">System.out.println(arr[<span class="number">4</span>]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码是可以将数组中每个元素全部遍历出来，但是如果<strong>数组元素非常多</strong>，这种写法肯定不行，因此我们需要改 造成循环的写法。<strong>数组的索引是 0 到 lenght-1</strong> ，可以作为<strong>循环的条件</strong>出现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) </span><br><span class="line">&#123; </span><br><span class="line">System.out.println(arr[i]); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="34-数组获取最大值元素"><a class="markdownIt-Anchor" href="#34-数组获取最大值元素">#</a> 3.4 数组获取最大值元素</h2><p><strong>最大值获取：</strong> 从数组的所有元素中找出最大值（最小值同理）。<br><strong>实现思路：</strong></p><ul><li>定义变量，保存数组 0 索引上的元素</li><li>遍历数组，获取出数组中的每个元素</li><li>将遍历到的元素和保存数组 0 索引上值的变量进行比较</li><li>如果数组元素的值大于了变量的值，变量记录住新的值</li><li>数组循环遍历结束，变量保存的就是数组中的最大值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span>[] arr = &#123; <span class="number">5</span>, <span class="number">15</span>, <span class="number">2000</span>, <span class="number">10000</span>, <span class="number">100</span>, <span class="number">4000</span> &#125;; </span><br><span class="line"><span class="comment">//定义变量，保存数组中0索引的元素 </span></span><br><span class="line"><span class="keyword">int</span> max = arr[<span class="number">0</span>]; </span><br><span class="line"><span class="comment">//遍历数组，取出每个元素 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) </span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">//遍历到的元素和变量max比较 </span></span><br><span class="line"><span class="comment">//如果数组元素大于max </span></span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt; max) </span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">//max记录住大值 </span></span><br><span class="line">max = arr[i]; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;数组最大值是： &quot;</span> + max); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="35-数组反转"><a class="markdownIt-Anchor" href="#35-数组反转">#</a> 3.5 数组反转</h2><p><strong>数组的反转：</strong>  数组中的元素颠倒顺序，例如原始数组为 1,2,3,4,5，反转后的数组为 5,4,3,2,1（要求只能用一个数组实现）<br>思路：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200830162049666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;; </span><br><span class="line"><span class="comment">/*循环中定义变量min=0最小索引 max=arr.length‐1最大索引 min++,max‐‐ */</span> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> min = <span class="number">0</span>, max = arr.length ‐ <span class="number">1</span>; min &lt;= max; min++, max‐‐) </span><br><span class="line">&#123; <span class="comment">//利用第三方变量完成数组中的元素交换 </span></span><br><span class="line"><span class="keyword">int</span> temp = arr[min]; arr[min] = arr[max]; </span><br><span class="line">arr[max] = temp; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 反转后，遍历数组 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) </span><br><span class="line">&#123; System.out.println(arr[i]); &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-数组作为方法参数和返回值"><a class="markdownIt-Anchor" href="#4-数组作为方法参数和返回值">#</a> 4、数组作为方法参数和返回值</h1><h2 id="41-数组作为方法参数"><a class="markdownIt-Anchor" href="#41-数组作为方法参数">#</a> 4.1 数组作为方法参数</h2><p>以前的方法中学习了方法的参数和返回值，但是使用的都是基本数据类型。那么作为引用类型的数组能否作为方法的参数进行传递呢，当然是可以的。 数组作为方法参数传递，<strong>传递的参数是数组内存的地址</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;; </span><br><span class="line"><span class="comment">//调用方法，传递数组 </span></span><br><span class="line">printArray(arr); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建方法，方法接收数组类型的参数 进行数组的遍历 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) </span><br><span class="line">&#123; </span><br><span class="line">System.out.println(arr[i]); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200830163500691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="42-数组作为方法返回值"><a class="markdownIt-Anchor" href="#42-数组作为方法返回值">#</a> 4.2 数组作为方法返回值</h2><p><strong>数组作为方法的返回值，返回的是数组的内存地址</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">//调用方法，接收数组的返回值 </span></span><br><span class="line"><span class="comment">//接收到的是数组的内存地址 </span></span><br><span class="line"><span class="keyword">int</span>[] arr = getArray(); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) </span><br><span class="line">&#123; System.out.println(arr[i]); &#125; </span><br><span class="line">&#125;<span class="comment">/*创建方法，返回值是数组类型 return返回数组的地址 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getArray() </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;; <span class="comment">//返回数组的地址，返回到调用者 </span></span><br><span class="line"><span class="keyword">return</span> arr; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200830163756874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="43-方法的参数类型区别"><a class="markdownIt-Anchor" href="#43-方法的参数类型区别">#</a> 4.3 方法的参数类型区别</h2><p><strong>方法的参数为基本类型时，传递的是数据值。方法的参数为引用类型时，传递的是地址值.</strong><br> 方法的参数为基本类型时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>; </span><br><span class="line">System.out.println(a); </span><br><span class="line">System.out.println(b); </span><br><span class="line">change(a, b); </span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">a = a + b; </span><br><span class="line">b = b + a; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法的参数为引用类型时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;; </span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); </span><br><span class="line">change(arr); </span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure><h1 id="5-arrays类"><a class="markdownIt-Anchor" href="#5-arrays类">#</a> 5、Arrays 类</h1><h2 id="51概述"><a class="markdownIt-Anchor" href="#51概述">#</a> 5.1 概述</h2><p><code>java.util.Arrays</code>  此类<strong>包含用来操作数组的各种方法</strong>，比如<strong>排序</strong> 和<strong>搜索</strong> 等。其所有方法<strong>均为静态方法</strong>，调用起来 非常简单。</p><h2 id="52-操作数组的方法"><a class="markdownIt-Anchor" href="#52-操作数组的方法">#</a> 5.2 操作数组的方法</h2><ul><li><code>Arrays.toString()</code>  ：返回指定数组内容的字符串表示形式。、</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// 定义int 数组 </span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">34</span>,<span class="number">35</span>,<span class="number">4</span>,<span class="number">657</span>,<span class="number">8</span>,<span class="number">69</span>,<span class="number">9</span>&#125;; </span><br><span class="line"><span class="comment">// 打印数组,输出地址值</span></span><br><span class="line">System.out.println(arr); <span class="comment">// [I@2ac1fdc4 </span></span><br><span class="line"><span class="comment">// 数组内容转为字符串 </span></span><br><span class="line">String s = Arrays.toString(arr); </span><br><span class="line"><span class="comment">// 打印字符串,输出内容 </span></span><br><span class="line">System.out.println(s); <span class="comment">// [2, 34, 35, 4, 657, 8, 69, 9] &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Arrays.sort(数组名)</code>  ：对指定的 int 型数组按数字升序进行排序。如果传入的是字符型数组按字符的 Acell 码排序（<strong>只能做升序排序，不能做降序排序。</strong>）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// 定义int 数组 </span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">24</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">48</span>, <span class="number">4</span>, <span class="number">46</span>, <span class="number">35</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">2</span>&#125;; </span><br><span class="line">System.out.println(<span class="string">&quot;排序前:&quot;</span>+ Arrays.toString(arr)); </span><br><span class="line"><span class="comment">// 排序前:[24, 7, 5, 48, 4, 46, 35, 11, 6, 2]</span></span><br><span class="line"><span class="comment">// 升序排序</span></span><br><span class="line">Arrays.sort(arr); System.out.println(<span class="string">&quot;排序后:&quot;</span>+ Arrays.toString(arr));</span><br><span class="line"><span class="comment">// 排序后:[2, 4, 5, 6, 7, 11, 24, 35, 46, 48] </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Arrays.fill(数组名 ,开始位置 , 结束位置, 填入的值)</code> ：向数组中填充元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        Arrays.fill(arr, <span class="number">3</span>, <span class="number">6</span>, <span class="number">50</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a:arr)</span><br><span class="line">            System.out.print(a+<span class="string">&quot; &quot;</span>);       </span><br><span class="line">        System.out.println(); </span><br><span class="line">        <span class="keyword">int</span> array[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">            Arrays.fill(array, <span class="number">100</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, n=array.length; i &lt; n; i++) &#123;</span><br><span class="line">                System.out.print(array[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">50</span> <span class="number">50</span> <span class="number">50</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">100</span> <span class="number">100</span> <span class="number">100</span> <span class="number">100</span> <span class="number">100</span> <span class="number">100</span> </span><br></pre></td></tr></table></figure><ul><li><code>Arrays.copy(原数组，原数组起始位置，新数组，新数组起始位置，复制长度)</code> ：数组的复制</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Arrayscopy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">        </span><br><span class="line">        System.arraycopy(arr, <span class="number">0</span>, arr1, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> str : arr1)&#123;</span><br><span class="line">            System.out.print(str+“ ”);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><code>Arrays.copyOf(数组名，扩容后长度)</code> ：数组扩容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;         </span><br><span class="line">       arr = Arrays.copyOf(arr,<span class="number">8</span>);</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> a:arr)</span><br><span class="line">           System.out.print(a+<span class="string">&quot; &quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 数组 </tag>
            
            <tag> Arrays </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法（java）-汉诺塔问题（递归回溯）</title>
      <link href="/2020/08/26/%E7%AE%97%E6%B3%95%EF%BC%88java%EF%BC%89-%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98%EF%BC%88%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF%EF%BC%89/"/>
      <url>/2020/08/26/%E7%AE%97%E6%B3%95%EF%BC%88java%EF%BC%89-%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98%EF%BC%88%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="1-汉诺塔问题介绍"><a class="markdownIt-Anchor" href="#1-汉诺塔问题介绍">#</a> 1、汉诺塔问题介绍</h1><p>汉诺塔 (又称河内塔) 问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着 64 片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。<br>简单分析要求：</p><ol><li>有三根柱子</li><li>一次只能移动一个圆盘</li><li>小圆盘上不能放比它更大的圆盘</li><li>需要按从小盘到大盘的顺序重新摆在另一个盘上</li></ol><h1 id="2-思路分析"><a class="markdownIt-Anchor" href="#2-思路分析">#</a> 2、思路分析</h1><p>假设我们先给三根柱子分别命名为 A、B、C：<br>初始的时候盘按从小到大的顺序依次摆在 A 柱上、而 C 柱作为结果柱。我们的目标就是把 A 柱的所有盘按照本来的从小到大的顺序摆在 C 盘。<br>假设 n 为盘的数量；</p><ul><li>n=1 时，直接将 A 中的那个盘移到 C 盘</li><li>n=2 时，先将 A 盘上最小的移到 B，再将 A 盘剩下那个移到 C，再将 B 盘上的移到 C</li><li>n=3 时，<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200826194912579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 1、A-&gt;C<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200826195355760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 2、A-&gt;B<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200826195420922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 3、C-&gt;B<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200826195511735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 4、A-&gt;C<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200826195642944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 5、B-&gt;A<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200826195731756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 6、B-&gt;C<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200826195754504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 7、A-&gt;C<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200826195814456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>我们发现除了当 n=1 时，直接将 A 的盘直接移到 C 柱上。后面 n 为其他值时都需要借助 C 盘先将 A 盘中除最大盘外的 n-1 个盘移到 B 盘然后将 A 中剩下的那个盘移到 C 盘。而此时 A 盘就空了，然后将 A 作为辅助盘再将 B 的所有盘按顺序移到 C 盘。<br><strong>我们可以把将 A 中最大的移到 C 看作中间步</strong></li><li>中间一步之上可以看成把 A 上 n-1 个盘子通过借助辅助塔（C 塔）移到了 B 上，</li><li>中间一步之下可以看成把 B 上 n-1 个盘子通过借助辅助塔（A 塔）移到了 C 上；<br>最核心的是，我们发现把 A 上 n-1 个盘子通过借助辅助塔（C 塔）移到了 B 上的结果和上一关只有 n-1 个盘的结果是一样的只是这时的目标柱变成了 B，所以可以通过递归来达到我们想要的目标。<br>比如假如这一关 n=3：<br>1、将 A 中最大盘遮住，将 B 柱当作上一关的 C 柱，按从小到大的顺序依次把 A 上剩下的 n-1 个盘按 n=2 的走法摆在 B 柱上<br> 2、C 空，将 A 中最大的移到 C，A 空<br> 3、将 C 中最大盘遮住，将 C 柱当作上一关的 C 柱，按从小到大的顺序依次把 B 上剩下的 n-1 个盘按 n=2 的走法摆在 C 柱上</li></ul><h1 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现">#</a> 代码实现：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhukun;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一共走了多少步</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> times;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> A = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> B = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> C = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入盘子数：&quot;</span>);</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = s.nextInt();</span><br><span class="line">        <span class="comment">//调用汉诺塔</span></span><br><span class="line">        hannoi(n, A, B, C);</span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 盘子移动</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> disk, <span class="keyword">char</span> M, <span class="keyword">char</span> N )</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第&quot;</span>+(++times)+<span class="string">&quot;次移动, 盘子&quot;</span>+disk+ <span class="string">&quot;  &quot;</span>+M+<span class="string">&quot;-------&gt;&quot;</span>+N);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hannoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> A, <span class="keyword">char</span> B, <span class="keyword">char</span> C)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            move(n, A, C);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//移动上一关的步骤移动到B</span></span><br><span class="line">            hannoi(n - <span class="number">1</span>, A, C, B);</span><br><span class="line">            <span class="comment">//把最大的盘子移动C塔</span></span><br><span class="line">            move(n, A, C);</span><br><span class="line">            <span class="comment">//再把B上的上一关的盘子移动到C上就可以了</span></span><br><span class="line">            hannoi(n - <span class="number">1</span>, B, A, C);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请输入盘子数：</span><br><span class="line"><span class="number">2</span></span><br><span class="line">第<span class="number">1</span>次移动, 盘子<span class="number">1</span>  A-------&gt;B</span><br><span class="line">第<span class="number">2</span>次移动, 盘子<span class="number">2</span>  A-------&gt;C</span><br><span class="line">第<span class="number">3</span>次移动, 盘子<span class="number">1</span>  B-------&gt;C</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">请输入盘子数：</span><br><span class="line"><span class="number">3</span></span><br><span class="line">第<span class="number">1</span>次移动, 盘子<span class="number">1</span>  A-------&gt;C</span><br><span class="line">第<span class="number">2</span>次移动, 盘子<span class="number">2</span>  A-------&gt;B</span><br><span class="line">第<span class="number">3</span>次移动, 盘子<span class="number">1</span>  C-------&gt;B</span><br><span class="line">第<span class="number">4</span>次移动, 盘子<span class="number">3</span>  A-------&gt;C</span><br><span class="line">第<span class="number">5</span>次移动, 盘子<span class="number">1</span>  B-------&gt;A</span><br><span class="line">第<span class="number">6</span>次移动, 盘子<span class="number">2</span>  B-------&gt;C</span><br><span class="line">第<span class="number">7</span>次移动, 盘子<span class="number">1</span>  A-------&gt;C</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 汉诺塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>J计算机网络（一）-总结计算机网络体系结构</title>
      <link href="/2020/08/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2020/08/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>学习目标：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816161827830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="一-概念-功能-组成-分类"><a class="markdownIt-Anchor" href="#一-概念-功能-组成-分类">#</a> 一、概念、功能、组成、分类</h1><h2 id="1-计算机网络的概念"><a class="markdownIt-Anchor" href="#1-计算机网络的概念">#</a> 1、计算机网络的概念</h2><p>计算机网络是一个将分散的、具体独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享与信息传递的系统。（计算机网络是互连的、自治的计算机集合）<br><strong>互连</strong>：互联互通，通信链路        <strong>自治</strong>：无主从关系<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200815201600891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="2-计算机网络的功能"><a class="markdownIt-Anchor" href="#2-计算机网络的功能">#</a> 2、计算机网络的功能</h2><ol><li>数据通信（连通性）：比如不同主机间传送文档，发送邮件</li><li>资源共享：硬件共享，软件共享，数据共享</li><li>分布式处理：多台计算机各自承担同一工作任务的不同部分    （Hadoop 平台）</li><li>提高可靠性：不同主机间可通过计算机网络进行替代</li><li>负载均衡：多台计算机可以同时进行工作，个计算机之间更亲密</li></ol><h2 id="3-计算机网络的组成"><a class="markdownIt-Anchor" href="#3-计算机网络的组成">#</a> 3、计算机网络的组成</h2><p>1、组成部分：硬件、软件、协议<br> 2、工作方式：</p><ul><li>边缘部分：用户直接使用，有 C/S 方式  和   P2P 方式</li><li>核心部分：为边缘部分服务</li></ul><p>3、功能组成：</p><ol><li>通信子网：实现数据通信</li><li>资源子网：实现资源共享 / 数据处理<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200815204123705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol><h2 id="4-计算机网络的分类"><a class="markdownIt-Anchor" href="#4-计算机网络的分类">#</a> 4、计算机网络的分类</h2><p>1、按分布范围分：广域网 WAN、城域网 MAN、局域网 WAN、个人区域网 PAN   （后面会详解）<br>2、按使用者分：公用网（中国电信、中国联通）、专用网（国家军队，政府机关，铁路、银行等）<br>3、按交换技术分：电路交换、报文交换、分组交换<br> 4、按拓扑结构分：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200815205225372.png#pic_center" alt="在这里插入图片描述"><br> 5、按传送技术分：</p><ul><li>广播式网络：共享公共通信信道</li><li>点对点网络：使用分组存储转发和路由选择机制</li></ul><h2 id="5-总结"><a class="markdownIt-Anchor" href="#5-总结">#</a> 5、总结</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816095334787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="二-标准化工作及相关组织"><a class="markdownIt-Anchor" href="#二-标准化工作及相关组织">#</a> 二、标准化工作及相关组织</h1><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200815210019943.png#pic_center" alt="在这里插入图片描述"><br>要实现不同厂商的硬、软件之间相互连通，必须遵从统一的标准。</p><h2 id="1-标准化工作"><a class="markdownIt-Anchor" href="#1-标准化工作">#</a> 1、标准化工作</h2><p>1、标准的分类：</p><ul><li>法定标准：由权威机构制定的正式的、合法的标准（OSI）</li><li>事实标准：某些公司的产品在竞争中占据了主流，时间长了，这些产品中的协议和技术就成了标准（TCP/IP 协议）</li></ul><p>RFC（Request for Comments）—— 因特网标准的形式<br> RFC 要升为 因特网正式标准的四个阶段：</p><ol><li>因特网草案（Internet Draft）：这个阶段还不是 RFC 文档</li><li>建议标准（Proposed Standard）：从这个阶段开始成为 RFC 文档</li><li>草案标准（Draft Standard）：经过 IETF，IAB 审核</li><li>因特网标准（Internet Standard）</li></ol><h2 id="2-标准化工作的相关组织"><a class="markdownIt-Anchor" href="#2-标准化工作的相关组织">#</a> 2、标准化工作的相关组织</h2><ul><li>国际标准化组织 ISO：建立了 OSI 参考模型、HDLC 协议</li><li>国际电信联盟 ITU：制定通信规则</li><li>国际电气电子工程师协会 IEEE：学术机构、制定了 IEEE802 系列标准，5G 相关协议</li><li>Internet 工程任务组 IETF：负责因特网相关标准的制定 RFC XXXX</li></ul><h2 id="3-总结"><a class="markdownIt-Anchor" href="#3-总结">#</a> 3、总结</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816095555982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="三-性能指标之速率-带宽-吞吐量"><a class="markdownIt-Anchor" href="#三-性能指标之速率-带宽-吞吐量">#</a> 三、性能指标之速率、带宽、吞吐量</h1><h2 id="1-速率"><a class="markdownIt-Anchor" href="#1-速率">#</a> 1、速率</h2><p>速率即数据率或称数据传输率或比特率</p><p>比特（bit）1/0 位。连接在计算机网络上的主机在数字信道上传送数据位数的速率。单位是 b/s，kb/s，Mb/s，Tb/s<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/202008161004034.png#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816100647660.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2-带宽"><a class="markdownIt-Anchor" href="#2-带宽">#</a> 2、带宽</h2><ol><li>“带宽” 原本指某个信号具有的频带宽度，即最高频率与最低频率之差，单位是赫兹（Hz）</li><li>计算机网络中，带宽用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的 “最高数据率”，单位是 “比特每秒”，b/s，kb/s，Mb/s，Gb/s。（网络设备所支持的最高速度）</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816101903553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="3-吞吐量"><a class="markdownIt-Anchor" href="#3-吞吐量">#</a> 3、吞吐量</h2><p>1、吞吐量表示在单位时间内通过某个网络（或信道、接口）的数据量。单位 b/s，kb/s，Mb/s<br>2、吞吐量受网络的带宽或网络的额定速率的限制</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816102828713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="四-性能指标之时延时延带宽积-往返时间rtt-利用率"><a class="markdownIt-Anchor" href="#四-性能指标之时延时延带宽积-往返时间rtt-利用率">#</a> 四、性能指标之时延，时延带宽积、往返时间 RTT、利用率</h1><h2 id="1-时延"><a class="markdownIt-Anchor" href="#1-时延">#</a> 1、时延</h2><p>1、时延是指（报文 / 分组 / 比特流）从网络（或链路）的一端传送到另一端所需的时间。也叫延迟或迟延。单位是 s。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816104641259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="2-时延带宽积"><a class="markdownIt-Anchor" href="#2-时延带宽积">#</a> 2、时延带宽积</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816104604881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="3-往返时延rtt"><a class="markdownIt-Anchor" href="#3-往返时延rtt">#</a> 3、往返时延 RTT</h2><p>1、RTT 表示从发送数据开始，到发送方收到接收方的确认（接收方收到数据后立即发送确认），总共经历的时延。<br>（RTT 越大，在收到确认之前，可以发送的数据越多）<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816105709919.png#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816105723204.png#pic_center" alt="在这里插入图片描述"></p><h2 id="4-利用率"><a class="markdownIt-Anchor" href="#4-利用率">#</a> 4、利用率</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816110005376.png#pic_center" alt="在这里插入图片描述"></p><h2 id="5-总结-2"><a class="markdownIt-Anchor" href="#5-总结-2">#</a> 5、总结</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816110107946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="五-分层结构-协议-接口-服务"><a class="markdownIt-Anchor" href="#五-分层结构-协议-接口-服务">#</a> 五、分层结构、协议、接口、服务</h1><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816110549547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="1-分层的原则"><a class="markdownIt-Anchor" href="#1-分层的原则">#</a> 1、分层的原则</h2><ol><li>各层之间相互独立，每层只实现一种相对独立的功能</li><li>每层之间界面自然清晰，易于理解，相互交流尽可能少</li><li>结构上下可分割开。每层都采用最合适的技术来实现</li><li>保持下层对上层的独立性，上层单向使用下层提供的服务</li><li>整个分层结构应该能促进标准化工作<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816112940219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol><h2 id="2-实体-协议-接口-服务"><a class="markdownIt-Anchor" href="#2-实体-协议-接口-服务">#</a> 2、实体、协议、接口、服务</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816112957961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816113023991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816113042478.png#pic_center" alt="在这里插入图片描述"></p><h2 id="3-概念总结"><a class="markdownIt-Anchor" href="#3-概念总结">#</a> 3、概念总结</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081611323243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="六-osi参考模型"><a class="markdownIt-Anchor" href="#六-osi参考模型">#</a> 六、OSI 参考模型</h1><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816144158637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="1-isoosi参考模型怎么来的"><a class="markdownIt-Anchor" href="#1-isoosi参考模型怎么来的">#</a> 1、ISO/OSI 参考模型怎么来的</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816144614489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>（理论成功，市场失败）</strong></p><h2 id="2-七层结构"><a class="markdownIt-Anchor" href="#2-七层结构">#</a> 2、七层结构</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816145046920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="3-osi参考模型解释通信过程"><a class="markdownIt-Anchor" href="#3-osi参考模型解释通信过程">#</a> 3、OSI 参考模型解释通信过程</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816145922913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816150740695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="4-各层功能"><a class="markdownIt-Anchor" href="#4-各层功能">#</a> 4、各层功能</h2><p>1、应用层：所有能和用户交互产生网络流量的程序</p><p>典型的应用层服务：文件传输（FTP）、电子邮件（SMTP）、万维网（HTTP）</p><p>2、表示层：用于处理在两个通信系统中交换信息的表示方式（语法和语义）（主要协议 JPEG、ASCII）</p><ul><li>功能一：数据格式变换（类似于翻译官）</li><li>功能二：数据加密和解密</li><li>功能三：数据压缩和恢复</li></ul><p>3、会话层：向表示层实体 / 用户进程提供建立连接并在连接上有序地传输数据。这是会话，也是建立同步（SYN）。</p><p>（主要协议 ADSP、ASP）</p><ul><li>功能一：建立、管理、终止会话</li><li>功能二：使用校验点可使会话在通信失效时从校验点 / 同步点继续恢复通信、实现数据同步（适用于传输大文件）</li></ul><p>4、传输层：负责主机中两个进程的通信，即端到端的通信。传输单位是报文段或是用户数据报。（主要协议：TCP、UDP）</p><ul><li>功能一：可靠传输、不可靠传输</li><li>功能二：差错控制</li><li>功能三：流量控制</li><li>功能四：复用分用</li></ul><p>复用：多个应用层进程可同时使用下面运输层的服务<br>分用：运输层把收到的信息分别交付给上面应用层中相应的进程</p><p>5、网络层：主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务。网络层传输单位是数据报。</p><p>（主要协议：IP、IPX、ICMP、IGMP、ARP、RARP、OSPF）</p><ul><li>功能一：路由选择、最佳路径</li><li>功能二：流量控制</li><li>功能三：差错控制</li><li>功能四：拥塞控制（若所有结点都开不及接受分组，而要丢弃大量分组的话，网络就要处于拥塞状态。因此要采取一定的措施来缓解这种拥塞）</li></ul><p>6、数据链路层：主要任务是把网络层传下来的数据报组装成帧。书局链路层 / 链路层的传输单位是帧。</p><p>（主要协议 SDLC、HDLC、PPP、STP）</p><ul><li>功能一：成帧（定义帧的开始和结束）</li><li>功能二：差错控制（帧错 + 位错）</li><li>功能三：流量控制</li><li>功能四：访问（接入）控制（控制对信道的访问）</li></ul><p>7、物理层：主要任务是在物理媒体上实现比特流的透明传输。物理层传输单位是比特。（主要协议 Rj45、802.3）</p><p>透明传输：指不管所传输数据是什么样的比特组合，都应当能够在链路上传送。</p><ul><li>功能一：定义接口特性</li><li>功能二：定义传输模式（单工、半双工、双工）</li><li>功能三：定义传输速率</li><li>功能四：比特同步</li><li>功能五：比特编码</li></ul><h1 id="七-tcpip-模型-5层参考模型"><a class="markdownIt-Anchor" href="#七-tcpip-模型-5层参考模型">#</a> 七、TCP/IP 模型 &amp; 5 层参考模型</h1><h2 id="1-osi参考模型与tcpip参考模型相同点"><a class="markdownIt-Anchor" href="#1-osi参考模型与tcpip参考模型相同点">#</a> 1、OSI 参考模型与 TCP/IP 参考模型相同点</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816160432542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>都分层</li><li>都基于独立的协议栈的概念</li><li>可以实现异构网络互联</li></ol><h2 id="2-osi参考模型与tcpip参考模型不同点"><a class="markdownIt-Anchor" href="#2-osi参考模型与tcpip参考模型不同点">#</a> 2、OSI 参考模型与 TCP/IP 参考模型不同点</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816160939352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="3-5层参考模型"><a class="markdownIt-Anchor" href="#3-5层参考模型">#</a> 3、5 层参考模型</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816161312658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="4-5层参考模型额数据封装与解封装"><a class="markdownIt-Anchor" href="#4-5层参考模型额数据封装与解封装">#</a> 4、5 层参考模型额数据封装与解封装</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200816161634849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 网络体系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb学习-JSP和JavaBean</title>
      <link href="/2020/08/25/jsp%E5%92%8CJavaBean/"/>
      <url>/2020/08/25/jsp%E5%92%8CJavaBean/</url>
      
        <content type="html"><![CDATA[<h1 id="1-认识javabean"><a class="markdownIt-Anchor" href="#1-认识javabean">#</a> 1、认识 JavaBean</h1><p><strong>JavaBean 是一个遵循特定写法的 Java 类</strong>，在 JavaBean 中可以将控制逻辑、值、数据库访问和其他对象进行封装，并且可以被其他应用来调用。实际上，JavaBean 就是一种<strong> Java 组件技术</strong>。JavaBean 的作用是<strong>向用户提供实现特定逻辑的方法接口</strong>，而具体的实现封装在组件的内部，不同的用户根据具体的应用情况<strong>使用该组件的部分或全部控制逻辑。</strong></p><p>它通常具有如下特点：</p><ul><li>Java 类必须具有一个无参的构造函数（一般不写的话系统会自动生成）</li><li>私有化的成员属性。</li><li>私有化的属性必须通过 public 类型的方法暴露给其它程序，并且方法的命名也必须遵守一定的命名规范。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String stuno;<span class="comment">//学生学号</span></span><br><span class="line"><span class="keyword">private</span> String stuname;<span class="comment">//学生姓名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;<span class="comment">//学生年龄</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Student类对外提供的用于访问私有属性的public方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getStuno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stuno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuno</span><span class="params">(String stuno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.stuno = stuno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getStuname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stuname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuname</span><span class="params">(String stuname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.stuname = stuname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的例子可以看出，在 JavaBean 中不仅要定义其成员变量，还要对成员变量定义<strong> setter/getter 方法。</strong> 对于每一个成员变量要定义一个 getter 方法和一个 setter 方法。<strong>setter 方法称为属性修改器，getter 方法称为属性访问器。</strong> 属性修改器必须以小写的 set 前缀开始，后跟属性名，<strong>且属性名的第一个字母要改为大写，</strong> 如上面的 setStuname。属性访问器通常以小写的 get 前缀开始，后跟属性名，且属性名的第一个字母也要改为大写，如上面的 getStuname。</p><p>特殊的 JavaBean 属性：</p><p>给 Boolean 类型设置属性，要将 getter 方法改为 is 方法</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> member;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMember</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isMember;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMember</span><span class="params">(<span class="keyword">boolean</span> isMember)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.isMember = isMember;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于建立属性，MyEclipse 提供了较为方便的做法。右击代码界面，在弹出的快捷菜单中选择 Source|Generate Getters and Setteers 命令<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200809102953511.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="2-在jsp中使用javabean"><a class="markdownIt-Anchor" href="#2-在jsp中使用javabean">#</a> 2、在 JSP 中使用 JavaBean</h1><h2 id="21-为什么要在jsp中使用javabean"><a class="markdownIt-Anchor" href="#21-为什么要在jsp中使用javabean">#</a> 2.1、为什么要在 JSP 中使用 JavaBean？</h2><p>在很多 Javaweb 项目中都要显示数据库中的内容。比如在学生信息管理系统中经常在页面中显示数据库中学生的信息，在这种情况下就必须要访问数据库。通常将访问数据库的代码写在 JSP 内。但是在 JSP 内嵌入大量的 java 代码可能会造成维护不方便。试想一下，如果 JSP 页面上需要进行复杂的 HTML 显示又要写大量的 java 代码，则对该页面的编写成员要求就高了，既要是 html 专家又得精通 java。所以最好的办法就是将 JSP 中的 Java 代码移植到 Java 类中。而这些可能使用到的 Java 类就是 JavaBean。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200809103849888.png#pic_center" alt="在这里插入图片描述"><br> JSP 访问数据库<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200809103859263.png#pic_center" alt="在这里插入图片描述"><br> Java 类访问数据库</p><h2 id="22-具体使用"><a class="markdownIt-Anchor" href="#22-具体使用">#</a> 2.2、具体使用</h2><p>1、定义 JavaBean</p><p>方法一：直接在 JSP 中实例化 JavaBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    Student student = <span class="keyword">new</span> Student();<span class="comment">//使用student</span></span><br><span class="line">&gt;%</span><br></pre></td></tr></table></figure><p>但这种方法是在 JSP 中使用 Java 代码。</p><p>方法二：使用<a href="jsp:useBean"> jsp:useBean</a> 标签<br><a href="jsp:useBean"> jsp:useBean</a> 标签用于在指定的域范围内查找指定名称的 JavaBean 对象，如果存在则直接返回该 JavaBean 对象的引用，如果不存在则实例化一个新的 JavaBean 对象并将它以指定的名称存储到指定的域范围中。<br>　　常用语法：<br>&lt;jsp:useBean id=“beanName”  class=“package.class” scope=“page|request|session|application”/&gt;<br>　　&quot;id&quot; 属性用于指定 JavaBean 实例对象的引用名称和其存储在域范围中的名称。<br>　　&quot;class&quot; 属性用于指定 JavaBean 的完整类名（即必须带有包名）。<br>　　&quot;scope&quot; 属性用于指定 JavaBean 实例对象所存储的域范围，其取值只能是 page、request、session 和 application 等四个值中的一个，其默认值是 page。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;jsp:useBean id=&quot;student&quot; class=&quot;com.zhukun.programmer.entity.Student&quot; scope=&quot;page&quot;&gt;&lt;/jsp:useBean&gt;</span><br><span class="line"> &lt;%</span><br><span class="line">     student.setStuno(<span class="string">&quot;200101&quot;</span>);<span class="comment">//为student对象的stuno属性赋值</span></span><br><span class="line">     student.setStuname(<span class="string">&quot;王强&quot;</span>);<span class="comment">//为student对象的stuname属性赋值</span></span><br><span class="line">     student.setAge(<span class="number">21</span>);<span class="comment">//为student对象的age属性赋值</span></span><br><span class="line"> %&gt;</span><br><span class="line">&lt;%--使用getXxx()方法获取对象的属性值 --%&gt;</span><br><span class="line">     &lt;h2&gt;姓名：&lt;%=student.getStuno()%&gt;&lt;/h2&gt;</span><br><span class="line">     &lt;h2&gt;性别：&lt;%=student.getStuname()%&gt;&lt;/h2&gt;</span><br><span class="line">     &lt;h2&gt;年龄：&lt;%=student.getAge()%&gt;&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在该例子中使用 jsp:useBean 动作实例化了 Student 对象，对象名为 student</p><pre><code>  2、设置JavaBean属性 在实例开发应用中定义JavaBean之后需要在JSP页面设置JavaBean组件的属性。也就是调用setter方法。</code></pre><p>方法一：直接编写 Java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=&quot;student&quot; class=&quot;com.zhukun.programmer.entity.Student&quot; scope=&quot;page&quot;&gt;&lt;/jsp:useBean&gt;</span><br><span class="line"> &lt;%</span><br><span class="line">     student.setStuname(<span class="string">&quot;王强&quot;</span>);<span class="comment">//为student对象的stuname属性赋值</span></span><br><span class="line"> %&gt;</span><br></pre></td></tr></table></figure><p>方法二：使用<a href="jsp:setProperty"> jsp:setProperty</a> 标签<br>当值的来源是 String 常量时，jsp：setProperty 的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:setProperty property=<span class="string">&quot;属性名称&quot;</span> name=<span class="string">&quot;bean对象名&quot;</span> value=<span class="string">&quot;常量&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;jsp:useBean id=<span class="string">&quot;student&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.zhukun.programmer.entity.Student&quot;</span> scope=<span class="string">&quot;page&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:setProperty property=<span class="string">&quot;stuno&quot;</span> name=<span class="string">&quot;student&quot;</span> value=<span class="string">&quot;200102&quot;</span>/&gt;</span><br><span class="line"> &lt;jsp:setProperty property=<span class="string">&quot;stuname&quot;</span> name=<span class="string">&quot;student&quot;</span> value=<span class="string">&quot;李刚&quot;</span>/&gt;</span><br><span class="line"> &lt;jsp:setProperty property=<span class="string">&quot;age&quot;</span> name=<span class="string">&quot;student&quot;</span> value=<span class="string">&quot;24&quot;</span>/&gt;</span><br><span class="line">&lt;%--使用getXxx()方法获取对象的属性值 --%&gt;</span><br><span class="line">     &lt;h2&gt;姓名：&lt;%=student.getStuno()%&gt;&lt;/h2&gt;</span><br><span class="line">     &lt;h2&gt;性别：&lt;%=student.getStuname()%&gt;&lt;/h2&gt;</span><br><span class="line">     &lt;h2&gt;年龄：&lt;%=student.getAge()%&gt;&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200809121128124.png#pic_center" alt="在这里插入图片描述"><br>当值来源是 request 参数时，jsp：setProperty 的语法如下：</p><p>语法格式一：<br>　　　　&lt;jsp:setProperty name=“beanName” property=“propertyName” value=“string 字符串”/&gt;</p><p>语法格式二：<br>　　　　&lt;jsp:setProperty name=“beanName” property=“propertyName” value=&quot;&lt;%= expression %&gt;&quot; /&gt;</p><p>语法格式三：<br>　　　　&lt;jsp:setProperty name=“beanName” property=“propertyName” param=“parameterName”/&gt;</p><p>语法格式四：<br>　　　　&lt;jsp:setProperty name=“beanName” property= “*” /&gt;</p><p>先写一个表单；</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;NewFile.jsp&quot;</span> &gt;</span><br><span class="line">请输入学号:&lt;input name=<span class="string">&quot;stuno&quot;</span> type=<span class="string">&quot;text&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">请输入姓名:&lt;input name=<span class="string">&quot;stuname&quot;</span> type=<span class="string">&quot;text&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">请输入年龄:&lt;input name=<span class="string">&quot;stuage&quot;</span> type=<span class="string">&quot;text&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200809121928367.png#pic_center" alt="在这里插入图片描述"><br>使用单个请求参数为 bean 的属性赋值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;jsp:useBean id=<span class="string">&quot;student&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.zhukun.programmer.entity.Student&quot;</span> scope=<span class="string">&quot;page&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:setProperty property=<span class="string">&quot;stuno&quot;</span> name=<span class="string">&quot;student&quot;</span> param=<span class="string">&quot;stuno&quot;</span>/&gt;</span><br><span class="line">&lt;%--使用getXxx()方法获取对象的属性值 --%&gt;</span><br><span class="line">     &lt;h2&gt;学号：&lt;%=student.getStuno()%&gt;&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200809121936799.png#pic_center" alt="在这里插入图片描述"><br>用所有的请求参数为 bean 的属性赋值:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;jsp:useBean id=<span class="string">&quot;student&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.zhukun.programmer.entity.Student&quot;</span> scope=<span class="string">&quot;page&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:setProperty property=<span class="string">&quot;*&quot;</span> name=<span class="string">&quot;student&quot;</span>/&gt;</span><br><span class="line">&lt;%--使用getXxx()方法获取对象的属性值 --%&gt;</span><br><span class="line">     &lt;h2&gt;学号：&lt;%=student.getStuno()%&gt;&lt;/h2&gt;</span><br><span class="line">     &lt;h2&gt;姓名：&lt;%=student.getStuname()%&gt;&lt;/h2&gt;</span><br><span class="line">     &lt;h2&gt;年龄：&lt;%=student.getAge()%&gt;&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200809121941240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="3-javabean的范围"><a class="markdownIt-Anchor" href="#3-javabean的范围">#</a> 3、JavaBean 的范围</h1><p>&lt;jsp:useBean id=“beanName” class=“package.class” scope=“page|request|session|application”/&gt;</p><p>scope 说明它们之间的作用范围是不同的。<br>●page: 表示 JavaBean 对象的作用范围在实例化它的页面上，只在当前页面可用，在其他页面中不被认识。<br>●request: 表示 JavaBean 实例除了可以在当前页面上可用之外，还可以在通过 forward 方法跳转的目标页面中被认识到。<br>●session: 表示 JavaBean 对象可以存在 session 中，该对象可以被同一个用户的所有页面认识。<br>●application: 表示 JavaBean 对象可以存在 application 中，该对象可以被所有用户的所有页面认识。</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> JSP </tag>
            
            <tag> JavaBean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-详谈七大设计原则</title>
      <link href="/2020/08/25/%E4%B8%83%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>/2020/08/25/%E4%B8%83%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="一-设计模式的目的"><a class="markdownIt-Anchor" href="#一-设计模式的目的">#</a> 一、设计模式的目的</h1><p>编写软件过程中，程序员面临着来自耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性等多方面的挑战，设计模式是为了让程序 (软件)，具有更好：</p><ol><li><strong>代码重用性</strong> (即：相同功能的代码，不用多次编写)</li><li><strong>可读性</strong> (即：编程规范性，便于其他程序员的阅读和理解)</li><li><strong>可扩展性</strong> (即：当需要增加新的功能时，非常的方便，称为可维护)</li><li><strong>可靠性</strong> (即：当我们增加新的功能后，对原来的功能没有影响)</li><li>使程序呈现<strong>高内聚，低耦合</strong>的特性<br><font color= red>（设计模式包含了面向对象的精髓，“懂了设计模式，你就懂了面向对象分析和设计 （OOA/D）的精要）</li></ol><h1 id="二-设计模式七大原则"><a class="markdownIt-Anchor" href="#二-设计模式七大原则">#</a> 二、设计模式七大原则</h1><p>设计模式原则，其实就是程序员在编程时，应当遵循的原则，也是各种设计模式的基础（即：<font color= red>设计模式为什么这样设计的依据）</p><p><strong>设计模式常用的七大原则有:</strong></p><ol><li>单一职责原则</li><li>接口隔离原则</li><li>依赖倒转 (倒置) 原则</li><li>里氏替换原则</li><li>开闭原则</li><li>迪米特法则</li><li>合成复用原则</li></ol><h2 id="1-单一职责原则"><a class="markdownIt-Anchor" href="#1-单一职责原则">#</a> 1、单一职责原则</h2><p>1.1、基本介绍<br>对类来说的，即一个类应该只负责一项职责。如类 A 负责两个不同职责：职责 1，职责 2。 当职责 1 需求变更而改变 A 时，可能造成职责 2 执行错误，所以需要将类 A 的粒度分解为 A1，A2<br>1.2、应用实例<br>以交通工具案例讲解：<br><strong>方案一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleResponsibility1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Vehicle vehicle = <span class="keyword">new</span> Vehicle();</span><br><span class="line">vehicle.run(<span class="string">&quot;轮船&quot;</span>);</span><br><span class="line">vehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">vehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交通工具类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot; 在公路上运行....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">轮船 在公路上运行....</span><br><span class="line">汽车 在公路上运行....</span><br><span class="line">飞机 在公路上运行....</span><br></pre></td></tr></table></figure><p>分析：在方案一的 run 方法中，违反了单一职责原则。解决的方案非常的简单，根据交通工具运行方法不同，分解成不同类即可<br><strong>方案二：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleResponsibility2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">RoadVehicle roadVehicle = <span class="keyword">new</span> RoadVehicle();</span><br><span class="line">roadVehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">WaterVehicle waterVehicle = <span class="keyword">new</span>  WaterVehicle();</span><br><span class="line">waterVehicle.run(<span class="string">&quot;轮船&quot;</span>);</span><br><span class="line">AirVehicle airVehicle = <span class="keyword">new</span> AirVehicle();</span><br><span class="line">airVehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoadVehicle</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot;公路运行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirVehicle</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot;天空运行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaterVehicle</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot;水中运行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：方案二<strong>严格遵守单一职责原则</strong>，但是这样做的改动很大，即将类分解，同时修改了客户端。改进：直接修改 Vehicle 类，改动的代码会比较少<br><strong>方案 3:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleResponsibility3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Vehicle2 vehicle2  = <span class="keyword">new</span> Vehicle2();</span><br><span class="line">vehicle2.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">vehicle2.runWater(<span class="string">&quot;轮船&quot;</span>);</span><br><span class="line">vehicle2.runAir(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line"><span class="comment">//处理</span></span><br><span class="line"></span><br><span class="line">System.out.println(vehicle + <span class="string">&quot; 在公路上运行....&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runAir</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot; 在天空上运行....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runWater</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot; 在水中行....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">汽车 在公路上运行....</span><br><span class="line">轮船 在水中行....</span><br><span class="line">飞机 在天空上运行....</span><br></pre></td></tr></table></figure><p>分析：方案三的这种修改方法没有对原来的类做大的修改，只是增加方法。这里<strong>虽然没有在类这个级别上遵守单一职责原则，但是在方法级别上，仍然是遵守单一职责</strong></p><p>1.3、单一职责原则注意事项和细节</p><ol><li>降低类的复杂度，一个类只负责一项职责。</li><li>提高类的可读性，可维护性</li><li>降低变更引起的风险</li><li>通常情况下，我们应当遵守单一职责原则。只有逻辑足够简单，才可以在代码级违反单一职责原则；只有类中方法数量足够少，才可以在方法级保持单一职责原则</li></ol><h2 id="2-接口隔离原则"><a class="markdownIt-Anchor" href="#2-接口隔离原则">#</a> 2、接口隔离原则</h2><p><strong>2.1、基本介绍</strong><br>客户端不应该依赖它不需要的接 口，即一个类对另一个类的依赖 应该建立在最小的接口上<br>例：写代码设计以下类图<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200817173701524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Segregation1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Interface1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 实现了 operation1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 实现了 operation2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 实现了 operation3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 实现了 operation4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 实现了 operation5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">Interface1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D 实现了 operation1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D 实现了 operation2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D 实现了 operation3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D 实现了 operation4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D 实现了 operation5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123; <span class="comment">//A 类通过接口Interface1 依赖(使用) B类，但是只会用到1,2,3方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(Interface1 i)</span> </span>&#123;</span><br><span class="line">i.operation1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span><span class="params">(Interface1 i)</span> </span>&#123;</span><br><span class="line">i.operation2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend3</span><span class="params">(Interface1 i)</span> </span>&#123;</span><br><span class="line">i.operation3();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123; <span class="comment">//C 类通过接口Interface1 依赖(使用) D类，但是只会用到1,4,5方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(Interface1 i)</span> </span>&#123;</span><br><span class="line">i.operation1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend4</span><span class="params">(Interface1 i)</span> </span>&#123;</span><br><span class="line">i.operation4();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend5</span><span class="params">(Interface1 i)</span> </span>&#123;</span><br><span class="line">i.operation5();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产生问题：类 A 通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D，如果接口 Interface1 对于类 A 和类 C 来说不是最小接口， 那么类 B 和类 D 必须去实现他们不需要的方法。</p><p>** 使用接口隔离原则改进：** 将接口 Interface1 拆分为独立的几个接口，类 A 和类 C 分别与他们需要的接口建立 依赖关系。也就是采用接口隔离原则 接口 Interface1 中出现的方法，根据实际情况拆分为三个。</p><p>改进类图：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200817175135319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Segregation1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// 使用一把</span></span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">a.depend1(<span class="keyword">new</span> B()); <span class="comment">// A类通过接口去依赖B类</span></span><br><span class="line">a.depend2(<span class="keyword">new</span> B());</span><br><span class="line">a.depend3(<span class="keyword">new</span> B());</span><br><span class="line">C c = <span class="keyword">new</span> C();</span><br><span class="line">c.depend1(<span class="keyword">new</span> D()); <span class="comment">// C类通过接口去依赖(使用)D类</span></span><br><span class="line">c.depend4(<span class="keyword">new</span> D());</span><br><span class="line">c.depend5(<span class="keyword">new</span> D());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口1</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口2</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口3</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Interface1</span>, <span class="title">Interface2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 实现了 operation1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 实现了 operation2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 实现了 operation3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">Interface1</span>, <span class="title">Interface3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D 实现了 operation1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D 实现了 operation4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D 实现了 operation5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123; <span class="comment">// A 类通过接口Interface1,Interface2 依赖(使用) B类，但是只会用到1,2,3方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(Interface1 i)</span> </span>&#123;</span><br><span class="line">i.operation1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span><span class="params">(Interface2 i)</span> </span>&#123;</span><br><span class="line">i.operation2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend3</span><span class="params">(Interface2 i)</span> </span>&#123;</span><br><span class="line">i.operation3();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123; <span class="comment">// C 类通过接口Interface1,Interface3 依赖(使用) D类，但是只会用到1,4,5方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(Interface1 i)</span> </span>&#123;</span><br><span class="line">i.operation1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend4</span><span class="params">(Interface3 i)</span> </span>&#123;</span><br><span class="line">i.operation4();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend5</span><span class="params">(Interface3 i)</span> </span>&#123;</span><br><span class="line">i.operation5();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">B 实现了 operation1</span><br><span class="line">B 实现了 operation2</span><br><span class="line">B 实现了 operation3</span><br><span class="line">D 实现了 operation1</span><br><span class="line">D 实现了 operation4</span><br><span class="line">D 实现了 operation5</span><br></pre></td></tr></table></figure><h2 id="3-依赖倒转原则"><a class="markdownIt-Anchor" href="#3-依赖倒转原则">#</a> 3、依赖倒转原则</h2><p>3.1 基本介绍<br>依赖倒转原则是指：</p><ol><li>高层模块不应该依赖低层模块，二者都应该依赖其抽象</li><li>抽象不应该依赖细节，细节应该依赖抽象</li><li>依赖倒转 (倒置) 的中心思想是面向接口编程</li><li>依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在 java 中，抽象指的是接口或抽象类，细节就是具体的实现类</li><li>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的 任务交给他们的实现类去完成<br><strong>应用实例：请编程完成 Person 接收消息的功能</strong></li></ol><p>方案一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependecyInversion</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.receive(<span class="keyword">new</span> Email());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;电子邮件信息: hello,world&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Email email )</span> </span>&#123;</span><br><span class="line">System.out.println(email.getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析</strong>：简单，比较容易想到。  产生问题： 如果我们获取的对象是 微信，短信等等，则新增类，同时 Perons 也要增加相应的接收方法。</p><p><strong>使用依赖倒转原则改进：</strong> 引入一个抽象的接口 IReceiver, 表示接收者，这样 Person 类与接口 IReceiver 发生依赖。因为 Email, WeiXin 等属于接收的范围，他们各自实现 IReceiver 接口就 ok, 这样我们就符合依赖倒转原则</p><p>方案二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependecyInversion</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//客户端无需改变</span></span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.receive(<span class="keyword">new</span> Email());</span><br><span class="line">person.receive(<span class="keyword">new</span> WeiXin());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;电子邮件信息: hello,world&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增加微信</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiXin</span> <span class="keyword">implements</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;微信信息: hello,ok&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//这里我们是对接口的依赖</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(IReceiver receiver )</span> </span>&#123;</span><br><span class="line">System.out.println(receiver.getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">电子邮件信息: hello,world</span><br><span class="line">微信信息: hello,ok</span><br></pre></td></tr></table></figure><p>3.2 依赖关系传递的三种方式<br>（1）通过接口传递：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependencyPass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">ChangHong changHong = <span class="keyword">new</span> ChangHong();</span><br><span class="line">OpenAndClose openAndClose = <span class="keyword">new</span> OpenAndClose();</span><br><span class="line">openAndClose.open(changHong);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方式1： 通过接口传递实现依赖</span></span><br><span class="line"><span class="comment">// 开关的接口</span></span><br><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">IOpenAndClose</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>; <span class="comment">//抽象方法</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">ITV</span> </span>&#123; <span class="comment">//ITV接口</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">OpenAndClose</span> <span class="keyword">implements</span> <span class="title">IOpenAndClose</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> ITV tv; <span class="comment">//成员</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">OpenAndClose</span><span class="params">(ITV tv)</span></span>&#123; <span class="comment">//构造器</span></span><br><span class="line"> <span class="keyword">this</span>.tv = tv;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.tv.play();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ChangHong</span> <span class="keyword">implements</span> <span class="title">ITV</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;长虹电视机，打开&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">长虹电视机，打开</span><br></pre></td></tr></table></figure><p>（2）通过构造方法传递：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependencyPass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">ChangHong changHong = <span class="keyword">new</span> ChangHong();</span><br><span class="line"><span class="comment">//通过构造器进行依赖传递</span></span><br><span class="line">OpenAndClose openAndClose = <span class="keyword">new</span> OpenAndClose(changHong);</span><br><span class="line">openAndClose.open();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方式2: 通过构造方法依赖传递</span></span><br><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">IOpenAndClose</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>; <span class="comment">//抽象方法</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">ITV</span> </span>&#123; <span class="comment">//ITV接口</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">OpenAndClose</span> <span class="keyword">implements</span> <span class="title">IOpenAndClose</span></span>&#123;</span><br><span class="line">     <span class="keyword">public</span> ITV tv; <span class="comment">//成员</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">OpenAndClose</span><span class="params">(ITV tv)</span></span></span><br><span class="line"><span class="function">     </span>&#123;                         <span class="comment">//构造器</span></span><br><span class="line">         <span class="keyword">this</span>.tv = tv;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.tv.play();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>（3）通过 setter 方式传递：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependencyPass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">ChangHong changHong = <span class="keyword">new</span> ChangHong();</span><br><span class="line"><span class="comment">//通过setter方法进行依赖传递</span></span><br><span class="line">OpenAndClose openAndClose = <span class="keyword">new</span> OpenAndClose();</span><br><span class="line">openAndClose.setTv(changHong);</span><br><span class="line">openAndClose.open();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IOpenAndClose</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>; <span class="comment">// 抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTv</span><span class="params">(ITV tv)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ITV</span> </span>&#123; <span class="comment">// ITV接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpenAndClose</span> <span class="keyword">implements</span> <span class="title">IOpenAndClose</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ITV tv;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTv</span><span class="params">(ITV tv)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.tv = tv;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.tv.play();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangHong</span> <span class="keyword">implements</span> <span class="title">ITV</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;长虹电视机，打开&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.3 依赖倒转原则的注意事项和细节</strong></p><ol><li>低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好.</li><li>变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在 一个缓冲层，利于程序扩展和优化</li><li>继承时遵循里氏替换原则</li></ol><h2 id="4-里氏替换原则"><a class="markdownIt-Anchor" href="#4-里氏替换原则">#</a> 4、里氏替换原则</h2><p><strong>4.1OO 中的继承性的思考和说明：</strong><br>（1）继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。<br>（2）继承在给程序设计带来便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低，增加对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子<br>类的功能都有可能产生故障<br>（3）问题提出：在编程中，如何正确的使用继承？=&gt; 里氏替换原则<br><strong> 4.2、基本介绍</strong></p><ol><li>里氏替换原则 (Liskov Substitution Principle) 在 1988 年，由麻省理工学院的以为姓里 的女士提出的。</li><li>如果对每个类型为 T1 的对象 o1，都有类型为 T2 的对象 o2，使得以 T1 定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象。</li><li>在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法</li><li>里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖 来解决问</li></ol><p><strong>4.3、应用实例</strong><br>看下列程序，思考下问题和解决思路</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.liskov;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Liskov</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">System.out.println(<span class="string">&quot;11-3=&quot;</span> + a.func1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;1-8=&quot;</span> + a.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line">System.out.println(<span class="string">&quot;11-3=&quot;</span> + b.func1(<span class="number">11</span>, <span class="number">3</span>));<span class="comment">//这里本意是求出11-3</span></span><br><span class="line">System.out.println(<span class="string">&quot;1-8=&quot;</span> + b.func1(<span class="number">1</span>, <span class="number">8</span>));<span class="comment">// 1-8</span></span><br><span class="line">System.out.println(<span class="string">&quot;11+3+9=&quot;</span> + b.func2(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="comment">// 返回两个数的差</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 - num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// B类继承了A</span></span><br><span class="line"><span class="comment">// 增加了一个新功能：完成两个数相加,然后和9求和</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="comment">//这里，重写了A类的方法, 可能是无意识</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> func1(a, b) + <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>-<span class="number">3</span>=<span class="number">8</span></span><br><span class="line"><span class="number">1</span>-<span class="number">8</span>=-<span class="number">7</span></span><br><span class="line">-----------------------</span><br><span class="line"><span class="number">11</span>-<span class="number">3</span>=<span class="number">14</span></span><br><span class="line"><span class="number">1</span>-<span class="number">8</span>=<span class="number">9</span></span><br><span class="line"><span class="number">11</span>+<span class="number">3</span>+<span class="number">9</span>=<span class="number">23</span></span><br></pre></td></tr></table></figure><p>分析：1-8=9；我们发现现原来运行正常的相减功能发生了错误。原因就是类 B 无意中重写了父类的方法，造成原有功能出现错误。在实际编程中，我们常常会通过重写父类的方法完 成新的功能，这样写起来虽然简单，但整个继承体系的复用性会比较差。特别是运行多态比较频繁的时候。</p><p>解决方法：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖，聚合，组合等关系代替.</p><p><strong>（里氏替换原则改进）</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081721581598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Liskov</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">System.out.println(<span class="string">&quot;11-3=&quot;</span> + a.func1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;1-8=&quot;</span> + a.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line"><span class="comment">//因为B类不再继承A类，因此调用者，不会再func1是求减法</span></span><br><span class="line"><span class="comment">//调用完成的功能就会很明确</span></span><br><span class="line">System.out.println(<span class="string">&quot;11+3=&quot;</span> + b.func1(<span class="number">11</span>, <span class="number">3</span>));<span class="comment">//这里本意是求出11+3</span></span><br><span class="line">System.out.println(<span class="string">&quot;1+8=&quot;</span> + b.func1(<span class="number">1</span>, <span class="number">8</span>));<span class="comment">// 1+8</span></span><br><span class="line">System.out.println(<span class="string">&quot;11+3+9=&quot;</span> + b.func2(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">//使用组合仍然可以使用到A类相关方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;11-3=&quot;</span> + b.func3(<span class="number">11</span>, <span class="number">3</span>));<span class="comment">// 这里本意是求出11-3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个更加基础的基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"><span class="comment">//把更加基础的方法和成员写到Base类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"><span class="comment">// 返回两个数的差</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 - num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// B类继承了A</span></span><br><span class="line"><span class="comment">// 增加了一个新功能：完成两个数相加,然后和9求和</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果B需要使用A类的方法,使用组合关系</span></span><br><span class="line"><span class="keyword">private</span> A a = <span class="keyword">new</span> A();</span><br><span class="line"><span class="comment">//这里，重写了A类的方法, 可能是无意识</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> func1(a, b) + <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//我们仍然想使用A的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func3</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.a.func1(a, b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-开闭原则"><a class="markdownIt-Anchor" href="#5-开闭原则">#</a> 5、 开闭原则</h2><p><strong>5.1 基本介绍</strong></p><ol><li>开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则</li><li>一个软件实体如类，模块和函数应该对扩展开放 (对提供方)，对修改关闭 (对使用方)。用抽象构建框架，用实现扩展细节。</li><li>当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已 有的代码来实现变化。</li><li>编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则</li></ol><p><strong>5.2 应用实例</strong><br>看一个画图形的功能<br>类图：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818094219542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>原来的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.m_type == <span class="number">1</span>)</span><br><span class="line">            drawRectangle(s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">2</span>)</span><br><span class="line">            drawCircle(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawRectangle</span><span class="params">(Shape r)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制矩形&quot;</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(Shape r)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制圆形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m_type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    Rectangle() &#123;</span><br><span class="line">        <span class="keyword">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    Circle() &#123;</span><br><span class="line">    <span class="keyword">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">绘制矩形 </span><br><span class="line">绘制圆形 </span><br></pre></td></tr></table></figure><p>分析：优点是比较好理解，简单易操作。缺点是违反了设计模式的 ocp 原则，即对扩展方 (提供方)，对修改关闭 (使用方)。 即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码.<br> 比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ocp</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//使用看看存在的问题</span></span><br><span class="line">GraphicEditor graphicEditor = <span class="keyword">new</span> GraphicEditor();</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> Rectangle());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> Circle());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> Triangle());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是一个用于绘图的类 [使用方]</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span> </span>&#123;</span><br><span class="line"><span class="comment">//接收Shape对象，然后根据type，来绘制不同的图形</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.m_type == <span class="number">1</span>)</span><br><span class="line">drawRectangle(s);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">2</span>)</span><br><span class="line">drawCircle(s);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">3</span>)</span><br><span class="line">drawTriangle(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绘制矩形</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawRectangle</span><span class="params">(Shape r)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot; 绘制矩形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绘制圆形</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(Shape r)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot; 绘制圆形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绘制三角形</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawTriangle</span><span class="params">(Shape r)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot; 绘制三角形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Shape类，基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m_type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">Rectangle() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">Circle() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新增画三角形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">Triangle() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">绘制矩形 </span><br><span class="line">绘制圆形 </span><br><span class="line">绘制三角形 </span><br></pre></td></tr></table></figure><p>我们发现我们这时要新增加一个图形种类 三角形，我们需要做如下修改，修改的地方较多</p><p>改进思路：把创建 Shape 类做成抽象类，并提供一个抽象的 draw 方法，让子类去实现即可， 这样我们有新的图形种类时，只需要让新的图形类继承 Shape，并实现 draw 方法即可， <strong>使用方的代码就不需要修 -&gt;</strong> 满足了开闭原则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ocp</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//使用看看存在的问题</span></span><br><span class="line">GraphicEditor graphicEditor = <span class="keyword">new</span> GraphicEditor();</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> Rectangle());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> Circle());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> Triangle());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> OtherGraphic());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是一个用于绘图的类 [使用方]</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span> </span>&#123;</span><br><span class="line"><span class="comment">//接收Shape对象，调用draw方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span> </span>&#123;</span><br><span class="line">s.draw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Shape类，基类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m_type;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">Rectangle() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 绘制矩形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">Circle() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 绘制圆形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新增画三角形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">Triangle() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 绘制三角形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新增一个图形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherGraphic</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">OtherGraphic() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 绘制其它图形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">绘制矩形 </span><br><span class="line">绘制圆形 </span><br><span class="line">绘制三角形 </span><br><span class="line">绘制其它图形</span><br></pre></td></tr></table></figure><h2 id="6-迪米特法则"><a class="markdownIt-Anchor" href="#6-迪米特法则">#</a> 6、迪米特法则</h2><p><strong>6.1 基本介绍：</strong></p><ol><li>一个对象应该对其他对象保持最少的了解</li><li>类与类关系越密切，耦合度越大</li><li>迪米特法则 (DemeterPrinciple) 又叫最少知道原则，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的 public 方法，不对外泄露任何信息</li><li>迪米特法则还有个更简单的定义：只与直接的朋友通信</li><li>直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部</li></ol><p><strong>6.2 应用实例：</strong><br>有一个学校，下属有各个学院和 总部，现要求打印出学校总部员 工 ID 和学院员工的 id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demeter1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建了一个 SchoolManager 对象</span></span><br><span class="line">SchoolManager schoolManager = <span class="keyword">new</span> SchoolManager();</span><br><span class="line"><span class="comment">//输出学院的员工id 和  学校总部的员工信息</span></span><br><span class="line">schoolManager.printAllEmployee(<span class="keyword">new</span> CollegeManager());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学校总部员工类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学院的员工类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeEmployee</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理学院员工的管理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeManager</span> </span>&#123;</span><br><span class="line"><span class="comment">//返回学院的所有员工</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title">getAllEmployee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> ArrayList&lt;CollegeEmployee&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; <span class="comment">//这里我们增加了10个员工到 list</span></span><br><span class="line">CollegeEmployee emp = <span class="keyword">new</span> CollegeEmployee();</span><br><span class="line">emp.setId(<span class="string">&quot;学院员工id= &quot;</span> + i);</span><br><span class="line">list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学校管理类</span></span><br><span class="line"><span class="comment">//分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager</span></span><br><span class="line"><span class="comment">//CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolManager</span> </span>&#123;</span><br><span class="line"><span class="comment">//返回学校总部的员工</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getAllEmployee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;Employee&gt; list = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123; <span class="comment">//这里我们增加了5个员工到 list</span></span><br><span class="line">Employee emp = <span class="keyword">new</span> Employee();</span><br><span class="line">emp.setId(<span class="string">&quot;学校总部员工id= &quot;</span> + i);</span><br><span class="line">list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该方法完成输出学校总部和学院员工信息(id)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAllEmployee</span><span class="params">(CollegeManager sub)</span> </span>&#123;</span><br><span class="line"><span class="comment">//分析问题</span></span><br><span class="line"><span class="comment">//1. 这里的 CollegeEmployee 不是  SchoolManager的直接朋友</span></span><br><span class="line"><span class="comment">//2. CollegeEmployee 是以局部变量方式出现在 SchoolManager</span></span><br><span class="line"><span class="comment">//3. 违反了 迪米特法则 </span></span><br><span class="line"><span class="comment">//获取到学院员工</span></span><br><span class="line">List&lt;CollegeEmployee&gt; list1 = sub.getAllEmployee();</span><br><span class="line">System.out.println(<span class="string">&quot;------------学院员工------------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (CollegeEmployee e : list1) &#123;</span><br><span class="line">System.out.println(e.getId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取到学校总部员工</span></span><br><span class="line">List&lt;Employee&gt; list2 = <span class="keyword">this</span>.getAllEmployee();</span><br><span class="line">System.out.println(<span class="string">&quot;------------学校总部员工------------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Employee e : list2) &#123;</span><br><span class="line">System.out.println(e.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">------------学院员工------------</span><br><span class="line">学院员工id= <span class="number">0</span></span><br><span class="line">学院员工id= <span class="number">1</span></span><br><span class="line">学院员工id= <span class="number">2</span></span><br><span class="line">学院员工id= <span class="number">3</span></span><br><span class="line">学院员工id= <span class="number">4</span></span><br><span class="line">学院员工id= <span class="number">5</span></span><br><span class="line">学院员工id= <span class="number">6</span></span><br><span class="line">学院员工id= <span class="number">7</span></span><br><span class="line">学院员工id= <span class="number">8</span></span><br><span class="line">学院员工id= <span class="number">9</span></span><br><span class="line">------------学校总部员工------------</span><br><span class="line">学校总部员工id= <span class="number">0</span></span><br><span class="line">学校总部员工id= <span class="number">1</span></span><br><span class="line">学校总部员工id= <span class="number">2</span></span><br><span class="line">学校总部员工id= <span class="number">3</span></span><br><span class="line">学校总部员工id= <span class="number">4</span></span><br></pre></td></tr></table></figure><p>分析：前面设计的问题在于 SchoolManager 中，CollegeEmployee 类并不是 SchoolManager 类的直接朋友 ，违反了迪米特法则。按照迪米特法则，应该避免类中出现这样非直接朋友关系的耦合。</p><p>按照迪米特法则进行改进：将输出学院的员工方法，封装到 CollegeManager</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demeter1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;~~~使用迪米特法则的改进~~~&quot;</span>);</span><br><span class="line"><span class="comment">//创建了一个 SchoolManager 对象</span></span><br><span class="line">SchoolManager schoolManager = <span class="keyword">new</span> SchoolManager();</span><br><span class="line"><span class="comment">//输出学院的员工id 和  学校总部的员工信息</span></span><br><span class="line">schoolManager.printAllEmployee(<span class="keyword">new</span> CollegeManager());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学校总部员工类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学院的员工类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeEmployee</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//管理学院员工的管理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeManager</span> </span>&#123;</span><br><span class="line"><span class="comment">//返回学院的所有员工</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title">getAllEmployee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> ArrayList&lt;CollegeEmployee&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; <span class="comment">//这里我们增加了10个员工到 list</span></span><br><span class="line">CollegeEmployee emp = <span class="keyword">new</span> CollegeEmployee();</span><br><span class="line">emp.setId(<span class="string">&quot;学院员工id= &quot;</span> + i);</span><br><span class="line">list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出学院员工的信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printEmployee</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取到学院员工</span></span><br><span class="line">List&lt;CollegeEmployee&gt; list1 = getAllEmployee();</span><br><span class="line">System.out.println(<span class="string">&quot;------------学院员工------------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (CollegeEmployee e : list1) &#123;</span><br><span class="line">System.out.println(e.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学校管理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolManager</span> </span>&#123;</span><br><span class="line"><span class="comment">//返回学校总部的员工</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getAllEmployee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;Employee&gt; list = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123; <span class="comment">//这里我们增加了5个员工到 list</span></span><br><span class="line">Employee emp = <span class="keyword">new</span> Employee();</span><br><span class="line">emp.setId(<span class="string">&quot;学校总部员工id= &quot;</span> + i);</span><br><span class="line">list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该方法完成输出学校总部和学院员工信息(id)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAllEmployee</span><span class="params">(CollegeManager sub)</span> </span>&#123;</span><br><span class="line"><span class="comment">//分析问题</span></span><br><span class="line"><span class="comment">//1. 将输出学院的员工方法，封装到CollegeManager</span></span><br><span class="line">sub.printEmployee();</span><br><span class="line"><span class="comment">//获取到学校总部员工</span></span><br><span class="line">List&lt;Employee&gt; list2 = <span class="keyword">this</span>.getAllEmployee();</span><br><span class="line">System.out.println(<span class="string">&quot;------------学校总部员工------------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Employee e : list2) &#123;</span><br><span class="line">System.out.println(e.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6.3 迪米特法则注意事项和细节</strong></p><ol><li>迪米特法则的核心是降低类之间的耦合</li><li>但是注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间 (对象间) 耦合关系，并不是要求完全没有依赖关系</li></ol><h2 id="7-合成复用原则"><a class="markdownIt-Anchor" href="#7-合成复用原则">#</a> 7、合成复用原则</h2><p><strong>7.1 基本介绍</strong><br>原则是尽量使用合成 / 聚合的方式，而不是使用继承<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818104037718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="三-设计原则核心思想"><a class="markdownIt-Anchor" href="#三-设计原则核心思想">#</a> 三、设计原则核心思想</h1><ol><li>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代 码混在一起</li><li>针对接口编程，而不是针对实现编程。</li><li>为了交互对象之间的松耦合设计而努力</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 七大原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数据可视化之pyecharts(一)——柱状图、折线图、散点图、饼图、词云的绘制</title>
      <link href="/2020/08/25/python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8Bpyecharts(%E4%B8%80)%E2%80%94%E2%80%94%E6%9F%B1%E7%8A%B6%E5%9B%BE%E3%80%81%E6%8A%98%E7%BA%BF%E5%9B%BE%E3%80%81%E6%95%A3%E7%82%B9%E5%9B%BE%E3%80%81%E9%A5%BC%E5%9B%BE%E3%80%81%E8%AF%8D%E4%BA%91%E7%9A%84%E7%BB%98%E5%88%B6/"/>
      <url>/2020/08/25/python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8Bpyecharts(%E4%B8%80)%E2%80%94%E2%80%94%E6%9F%B1%E7%8A%B6%E5%9B%BE%E3%80%81%E6%8A%98%E7%BA%BF%E5%9B%BE%E3%80%81%E6%95%A3%E7%82%B9%E5%9B%BE%E3%80%81%E9%A5%BC%E5%9B%BE%E3%80%81%E8%AF%8D%E4%BA%91%E7%9A%84%E7%BB%98%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载安装pyecharts"><a class="markdownIt-Anchor" href="#1-下载安装pyecharts">#</a> 1、下载安装 pyecharts</h1><p>cmd 输入以下命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyecharts</span><br></pre></td></tr></table></figure><p>如果是用的 pycharm 可以直接在 Terminal 中输入<br>（如果上述命令没有效果的话，可用下面的命令）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install pyecharts  --trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org</span><br></pre></td></tr></table></figure><p>关于版本问题我在这提一下，最新版本的 pyecharts 导入代码是<br>比如导入 Bar 库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br></pre></td></tr></table></figure><p>而旧版本的是直接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar</span><br></pre></td></tr></table></figure><p>如果导入库的时候出现错误可考虑版本问题，建议还是使用以前的版本</p><p>如果想直接将图片保存为 png, pdf, gif 格式的文件，可以使用 pyecharts-snapshot。<br>pip 安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyecharts_snapshot</span><br></pre></td></tr></table></figure><h1 id="2-学习pyecharts"><a class="markdownIt-Anchor" href="#2-学习pyecharts">#</a> 2、学习 pyecharts</h1><p>Echarts 是一个由百度开源的数据可视化，凭借着良好的交互性，精巧的图表设计，得到了众多开发者的认可。而 Python 是一门富有表达力的语言，很适合用于数据处理。当数据分析遇上数据可视化时，pyecharts 诞生了。</p><h2 id="1-制作动态柱状图"><a class="markdownIt-Anchor" href="#1-制作动态柱状图">#</a> 1、制作动态柱状图</h2><p><strong>1、单属性柱状图</strong></p><p>导入库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar</span><br><span class="line">name_list = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;梨子&quot;</span>, <span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;葡萄&quot;</span>]<span class="comment">#柱状图属性名称</span></span><br><span class="line">value_list = [<span class="number">15</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">10</span>]<span class="comment">#属性值</span></span><br><span class="line"><span class="comment"># 默认Bar()第一个参数为 主标题,第二个参数为副标题</span></span><br><span class="line">bar1 = Bar(<span class="string">&#x27;水果数量&#x27;</span>, <span class="string">&#x27;Theme&#x27;</span>, title_color=<span class="string">&#x27;#5599ff&#x27;</span>, subtitle_color=<span class="string">&#x27;#00ffff&#x27;</span>,</span><br><span class="line">           background_color=<span class="string">&quot;white&quot;</span>, title_pos=<span class="string">&#x27;center&#x27;</span>, title_top=<span class="string">&#x27;5%&#x27;</span>,)</span><br><span class="line"><span class="comment"># background_color 背景颜色 title_top标题距离顶端位置  title_pos标题中心位置</span></span><br><span class="line"><span class="comment"># title_color主标题颜色 subtitle_color副标题颜色</span></span><br><span class="line">bar1.add(<span class="string">&quot;水果&quot;</span>, name_list, value_list)<span class="comment">#将数据加入柱状图中</span></span><br><span class="line">bar1.render(<span class="string">&#x27;./图像/单属性柱状图.html&#x27;</span>)<span class="comment">#保存为HTML格式，也可保存为jpg，png，gif等</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824172243269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>提一下，’./ 图像 / 单属性柱状图.html’是保存为 html 文件以及文件路径我是保存在了当前项目的图像文件夹中（根据自己需求来写）<br><strong>2、多属性柱状图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar</span><br><span class="line">name_list = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;梨子&quot;</span>, <span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;葡萄&quot;</span>]<span class="comment">#柱状图属性名称</span></span><br><span class="line">value_list0 = [<span class="number">15</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">10</span>]<span class="comment">#属性值0</span></span><br><span class="line">value_list1 = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>]<span class="comment">#属性值1</span></span><br><span class="line">value_list2 = [<span class="number">20</span>, <span class="number">5</span>, <span class="number">30</span>, <span class="number">15</span>]<span class="comment">#属性值2</span></span><br><span class="line">bar2 = Bar(title = <span class="string">&quot;水果数量&quot;</span>)<span class="comment">#生成对象，title为柱状图标题</span></span><br><span class="line">bar2.add(<span class="string">&quot;商家0&quot;</span>, name_list, value_list0)<span class="comment">#将数据加入柱状图中</span></span><br><span class="line">bar2.add(<span class="string">&quot;商家1&quot;</span>, name_list, value_list1)<span class="comment">#将数据加入柱状图中</span></span><br><span class="line">bar2.add(<span class="string">&quot;商家2&quot;</span>, name_list, value_list2)<span class="comment">#将数据加入柱状图中</span></span><br><span class="line">bar2.render(<span class="string">&#x27;./图像/多属性柱状图.html&#x27;</span>)<span class="comment">#保存为HTML格式，也可保存为jpg，png，gif等</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824172835892.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>图像是可进行动态操作的，也就是说上面的三个商家的图标是可以点的，想要看哪个就可以把哪个图标点亮，当鼠标移动到对应的柱状图上时会显示对应的数据信息。<br><strong>3、堆叠柱状图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar <span class="comment">#导入相应包</span></span><br><span class="line">name_list = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;梨子&quot;</span>, <span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;葡萄&quot;</span>]<span class="comment">#柱状图属性名称</span></span><br><span class="line">value_list0 = [<span class="number">15</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">10</span>]<span class="comment">#属性值0</span></span><br><span class="line">value_list1 = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>]<span class="comment">#属性值1</span></span><br><span class="line">value_list2 = [<span class="number">20</span>, <span class="number">5</span>, <span class="number">30</span>, <span class="number">15</span>]<span class="comment">#属性值2</span></span><br><span class="line">bar3 = Bar(title=<span class="string">&quot;水果数量&quot;</span>)<span class="comment">#生成对象，title为柱状图标题</span></span><br><span class="line"><span class="comment">#is_stack=True表示将数据堆叠，is_label_show=True表示显示对应数值</span></span><br><span class="line">bar3.add(<span class="string">&quot;商家0&quot;</span>, name_list, value_list0, is_stack=<span class="literal">True</span>, is_label_show=<span class="literal">True</span>)</span><br><span class="line">bar3.add(<span class="string">&quot;商家1&quot;</span>, name_list, value_list1, is_stack=<span class="literal">True</span>, is_label_show=<span class="literal">True</span>)</span><br><span class="line">bar3.add(<span class="string">&quot;商家2&quot;</span>, name_list, value_list2, is_stack=<span class="literal">True</span>, is_label_show=<span class="literal">True</span>)</span><br><span class="line">bar3.render(<span class="string">&#x27;./图像/堆叠柱状图.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824173300796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong> 4、x 和 y 轴交换柱状图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar <span class="comment">#导入相应包</span></span><br><span class="line">name_list = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;梨子&quot;</span>, <span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;葡萄&quot;</span>]<span class="comment">#柱状图属性名称</span></span><br><span class="line">value_list0 = [<span class="number">15</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">10</span>]<span class="comment">#属性值0</span></span><br><span class="line">value_list1 = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>]<span class="comment">#属性值1</span></span><br><span class="line">value_list2 = [<span class="number">20</span>, <span class="number">5</span>, <span class="number">30</span>, <span class="number">15</span>]<span class="comment">#属性值2</span></span><br><span class="line">bar4 = Bar(title=<span class="string">&quot;水果数量&quot;</span>)<span class="comment">#生成对象，title为柱状图标题</span></span><br><span class="line">bar4.add(<span class="string">&quot;商家0&quot;</span>, name_list, value_list0, is_label_show=<span class="literal">True</span>)</span><br><span class="line">bar4.add(<span class="string">&quot;商家1&quot;</span>, name_list, value_list1, is_label_show=<span class="literal">True</span>)</span><br><span class="line">bar4.add(<span class="string">&quot;商家2&quot;</span>, name_list, value_list2, is_label_show=<span class="literal">True</span>, is_convert=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#is_convert=True,xy轴交换</span></span><br><span class="line">bar4.render(<span class="string">&quot;./图像/xy轴交换柱状图.html&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824200814221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong> 5、时间线动态柱状图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar, Timeline<span class="comment">#Timeline展示时间线的包</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">attr = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;梨&quot;</span>, <span class="string">&quot;西瓜&quot;</span>, <span class="string">&quot;橙子&quot;</span>, <span class="string">&quot;菠萝&quot;</span>, <span class="string">&quot;葡萄&quot;</span>]</span><br><span class="line"><span class="comment">#图1</span></span><br><span class="line">bar_1 = Bar(<span class="string">&quot;2016 年销量&quot;</span>, <span class="string">&quot;数据纯属虚构&quot;</span>)</span><br><span class="line">bar_1.add(<span class="string">&quot;春季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line">bar_1.add(<span class="string">&quot;夏季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line">bar_1.add(<span class="string">&quot;秋季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line">bar_1.add(<span class="string">&quot;冬季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line"><span class="comment">#图2</span></span><br><span class="line">bar_2 = Bar(<span class="string">&quot;2017 年销量&quot;</span>, <span class="string">&quot;数据纯属虚构&quot;</span>)</span><br><span class="line">bar_2.add(<span class="string">&quot;春季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line">bar_2.add(<span class="string">&quot;夏季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line">bar_2.add(<span class="string">&quot;秋季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line">bar_2.add(<span class="string">&quot;冬季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line"><span class="comment">#图3</span></span><br><span class="line">bar_3 = Bar(<span class="string">&quot;2018 年销量&quot;</span>, <span class="string">&quot;数据纯属虚构&quot;</span>)</span><br><span class="line">bar_3.add(<span class="string">&quot;春季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line">bar_3.add(<span class="string">&quot;夏季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line">bar_3.add(<span class="string">&quot;秋季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line">bar_3.add(<span class="string">&quot;冬季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line"><span class="comment">#图4</span></span><br><span class="line">bar_4 = Bar(<span class="string">&quot;2019 年销量&quot;</span>, <span class="string">&quot;数据纯属虚构&quot;</span>)</span><br><span class="line">bar_4.add(<span class="string">&quot;春季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line">bar_4.add(<span class="string">&quot;夏季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line">bar_4.add(<span class="string">&quot;秋季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line">bar_4.add(<span class="string">&quot;冬季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line"><span class="comment">#图5</span></span><br><span class="line">bar_5 = Bar(<span class="string">&quot;2020 年销量&quot;</span>, <span class="string">&quot;数据纯属虚构&quot;</span>)</span><br><span class="line">bar_5.add(<span class="string">&quot;春季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line">bar_5.add(<span class="string">&quot;夏季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line">bar_5.add(<span class="string">&quot;秋季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)])</span><br><span class="line">bar_5.add(<span class="string">&quot;冬季&quot;</span>, attr, [randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">6</span>)], is_legend_show=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#将上面的图按时间点加入时间线</span></span><br><span class="line">timeline = Timeline(is_auto_play=<span class="literal">True</span>, timeline_bottom=<span class="number">0</span>)</span><br><span class="line">timeline.add(bar_1, <span class="string">&#x27;2016 年&#x27;</span>)</span><br><span class="line">timeline.add(bar_2, <span class="string">&#x27;2017 年&#x27;</span>)</span><br><span class="line">timeline.add(bar_3, <span class="string">&#x27;2018 年&#x27;</span>)</span><br><span class="line">timeline.add(bar_4, <span class="string">&#x27;2019 年&#x27;</span>)</span><br><span class="line">timeline.add(bar_5, <span class="string">&#x27;2020 年&#x27;</span>)</span><br><span class="line">timeline.render(<span class="string">&#x27;./图像/时间线动态柱状图.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824201243361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="2-折线图"><a class="markdownIt-Anchor" href="#2-折线图">#</a> 2、折线图</h2><p><strong>1、普通折线图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 折线图</span></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Line <span class="comment">#导入相应包</span></span><br><span class="line">name_list = [<span class="string">&quot;冰箱&quot;</span>, <span class="string">&quot;电视&quot;</span>, <span class="string">&quot;空调&quot;</span>, <span class="string">&quot;洗衣机&quot;</span>]<span class="comment">#属性名称</span></span><br><span class="line">value_list0 = [<span class="number">15</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">10</span>]<span class="comment">#属性值0</span></span><br><span class="line">value_list1 = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>]<span class="comment">#属性值1</span></span><br><span class="line">value_list2 = [<span class="number">20</span>, <span class="number">5</span>, <span class="number">30</span>, <span class="number">15</span>]<span class="comment">#属性值2</span></span><br><span class="line">line = Line(title=<span class="string">&quot;电器数量&quot;</span>)<span class="comment">#生成对象，title为标题</span></span><br><span class="line">line.add(<span class="string">&quot;商家0&quot;</span>, name_list, value_list0, is_stack=<span class="literal">True</span>, is_label_show=<span class="literal">True</span>)<span class="comment">#将数据加入图中</span></span><br><span class="line">line.add(<span class="string">&quot;商家1&quot;</span>, name_list, value_list1, is_stack=<span class="literal">True</span>, is_label_show=<span class="literal">True</span>)<span class="comment">#将数据加入图中</span></span><br><span class="line">line.add(<span class="string">&quot;商家2&quot;</span>, name_list, value_list2, is_stack=<span class="literal">True</span>, is_label_show=<span class="literal">True</span>)<span class="comment">#将数据加入图中</span></span><br><span class="line">line.render(<span class="string">&#x27;./图像/折线图.html&#x27;</span>)<span class="comment">#保存为HTML格式，也可保存为jpg，png，gif等</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824201505742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong> 2、折线图 + 柱状图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将柱状图和折线图放在一个图中</span></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar, Line, Overlap</span><br><span class="line">name_list = [<span class="string">&quot;冰箱&quot;</span>, <span class="string">&quot;电视&quot;</span>, <span class="string">&quot;空调&quot;</span>, <span class="string">&quot;电脑&quot;</span>]<span class="comment">#属性名称</span></span><br><span class="line">value_list0 = [<span class="number">15</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">10</span>]<span class="comment">#属性值0</span></span><br><span class="line">value_list1 = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>]<span class="comment">#属性值1</span></span><br><span class="line">bar = Bar(title=<span class="string">&quot;水果销量&quot;</span>)</span><br><span class="line">line = Line()</span><br><span class="line">bar.add(<span class="string">&quot;商家0&quot;</span>, name_list, value_list0, mark_line=[<span class="string">&quot;average&quot;</span>], mark_point=[<span class="string">&quot;max&quot;</span>, <span class="string">&quot;min&quot;</span>], is_label_show=<span class="literal">True</span>)<span class="comment">#将数据加入图中</span></span><br><span class="line">bar.add(<span class="string">&quot;商家1&quot;</span>, name_list, value_list1, mark_line=[<span class="string">&quot;average&quot;</span>], mark_point=[<span class="string">&quot;max&quot;</span>, <span class="string">&quot;min&quot;</span>], is_label_show=<span class="literal">True</span>)<span class="comment">#将数据加入图中</span></span><br><span class="line">line.add(<span class="string">&quot;商家0&quot;</span>, name_list, value_list0, is_smooth=<span class="literal">True</span>)<span class="comment">#将数据加入图中</span></span><br><span class="line">line.add(<span class="string">&quot;商家1&quot;</span>, name_list, value_list1)<span class="comment">#将数据加入图中</span></span><br><span class="line">overlap = Overlap()</span><br><span class="line">overlap.add(bar)</span><br><span class="line">overlap.add(line)</span><br><span class="line">overlap.render(<span class="string">&#x27;./图像/柱状图+折线图.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824201716355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="3-散点图"><a class="markdownIt-Anchor" href="#3-散点图">#</a> 3、散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Scatter   <span class="comment">#散点图</span></span><br><span class="line">v1 =[<span class="number">25.02</span>, <span class="number">18.73</span>, <span class="number">7.85</span>, <span class="number">7.68</span>, <span class="number">7.35</span>, <span class="number">5.35</span>, <span class="number">3.29</span>, <span class="number">2.23</span>, <span class="number">1.98</span>, <span class="number">1.78</span>, <span class="number">1.65</span>, <span class="number">1.64</span>, <span class="number">1.06</span>, <span class="number">1.06</span>, <span class="number">0.69</span>]</span><br><span class="line">v2 =[<span class="number">5.35</span>, <span class="number">4.42</span>, <span class="number">4.31</span>, <span class="number">3.92</span>, <span class="number">3.29</span>, <span class="number">2.23</span>, <span class="number">4.42</span>, <span class="number">4.31</span>, <span class="number">3.92</span>, <span class="number">3.29</span>, <span class="number">2.23</span>, <span class="number">1.98</span>, <span class="number">1.78</span>, <span class="number">1.65</span>, <span class="number">0.8</span>]</span><br><span class="line">scatter =Scatter(<span class="string">&quot;电影类型评分&quot;</span>, title_pos=<span class="string">&#x27;center&#x27;</span>, background_color=<span class="string">&#x27;white&#x27;</span>, title_top=<span class="string">&#x27;90%&#x27;</span>)</span><br><span class="line">scatter.add(<span class="string">&quot;爱情&quot;</span>, v1, v2)</span><br><span class="line">scatter.add(<span class="string">&quot;动作&quot;</span>, v1[::<span class="number">-1</span>], v2)</span><br><span class="line">scatter.show_config()</span><br><span class="line">scatter.render(<span class="string">&quot;./图像/散点图.html&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020082420190324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="4-饼图"><a class="markdownIt-Anchor" href="#4-饼图">#</a> 4、饼图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 饼图</span></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Pie</span><br><span class="line">attr = [<span class="string">&quot;电脑&quot;</span>, <span class="string">&quot;电视&quot;</span>, <span class="string">&quot;冰箱&quot;</span>, <span class="string">&quot;洗衣机&quot;</span>, <span class="string">&quot;电饭煲&quot;</span>, <span class="string">&quot;电磁炉&quot;</span>]</span><br><span class="line">value1 = [<span class="number">10</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">8</span>, <span class="number">18</span>]</span><br><span class="line">value2 = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line">pie = Pie(title=<span class="string">&#x27;电器销量图图&#x27;</span>)</span><br><span class="line"><span class="comment">#饼图1圆心坐标为[25,50]，内外半径radius=[10,75]，is_random = True颜色随机</span></span><br><span class="line">pie.add(<span class="string">&#x27;商家1&#x27;</span>, attr, value1, center=[<span class="number">25</span>, <span class="number">50</span>], is_random=<span class="literal">True</span>, radius=[<span class="number">10</span>, <span class="number">75</span>], is_legend_show=<span class="literal">True</span>)<span class="comment">#,rosetype = &#x27;radius&#x27;,is_label_show = False)</span></span><br><span class="line"><span class="comment">#饼图1圆心坐标为[75,50]，内外半径radius=[0,75]，展示成南丁格尔图</span></span><br><span class="line">pie.add(<span class="string">&#x27;商家2&#x27;</span>, attr, value2, center=[<span class="number">75</span>, <span class="number">50</span>], is_random=<span class="literal">True</span>, radius=[<span class="number">0</span>, <span class="number">75</span>], rosetype=<span class="string">&#x27;area&#x27;</span>, is_legend_show = <span class="literal">True</span>,is_label_show = <span class="literal">True</span>)</span><br><span class="line">pie.render(<span class="string">&#x27;./图像/饼图.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824202037776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="5-词云"><a class="markdownIt-Anchor" href="#5-词云">#</a> 5、词云</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 词云</span></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> WordCloud</span><br><span class="line">name_list = [<span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;PHP&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;C#&#x27;</span>, <span class="string">&#x27;Swift&#x27;</span>]</span><br><span class="line">value_list = [<span class="number">60</span>, <span class="number">90</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>]</span><br><span class="line">wordcloud = WordCloud(title=<span class="string">&#x27;词云&#x27;</span>,width=<span class="number">1200</span>, height=<span class="number">750</span>)</span><br><span class="line">wordcloud.add(<span class="string">&quot;编程语言&quot;</span>, name_list, value_list, word_size_range=[<span class="number">50</span>, <span class="number">100</span>])</span><br><span class="line">wordcloud.render(<span class="string">&#x27;./图像/词云.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824202217407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> python数据可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据可视化 </tag>
            
            <tag> pyecharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python网络爬虫-爬虫实战-(爬取网易云薛之谦歌单里歌曲并下载)</title>
      <link href="/2020/08/25/python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-(%E7%88%AC%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E8%96%9B%E4%B9%8B%E8%B0%A6%E6%AD%8C%E5%8D%95%E9%87%8C%E6%AD%8C%E6%9B%B2%E5%B9%B6%E4%B8%8B%E8%BD%BD)/"/>
      <url>/2020/08/25/python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-(%E7%88%AC%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E8%96%9B%E4%B9%8B%E8%B0%A6%E6%AD%8C%E5%8D%95%E9%87%8C%E6%AD%8C%E6%9B%B2%E5%B9%B6%E4%B8%8B%E8%BD%BD)/</url>
      
        <content type="html"><![CDATA[<h1 id="1-导入要用到的库"><a class="markdownIt-Anchor" href="#1-导入要用到的库">#</a> 1、导入要用到的库</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入库</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><p>很多初学 python 的同学不知道如何下载第三方库，我在这介绍一种和简单的方法<br> 1：首先准备好下载命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install 想要的库的名称  --trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org</span><br></pre></td></tr></table></figure><p>把自己想要下载的库的名称替换掉命令中的 &quot;想要的库的名称&quot;，比如下载 lxml 第三方库的命令如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install lxml  --trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org</span><br></pre></td></tr></table></figure><p>2：在 Pycharm 的 Terminal 中执行这行命令<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824102402269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如图所示，回车即可。</p><h1 id="2-分析获取网址"><a class="markdownIt-Anchor" href="#2-分析获取网址">#</a> 2、分析获取网址</h1><p>进入网易云官网搜索 &quot;薛之谦&quot;<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824102901217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>得到一个网址为 &quot;<a href="https://music.163.com/#/artist?id=5781">https://music.163.com/#/artist?id=5781</a>&quot;<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824102959573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>很明显这不是真正的请求网址，检查网页，重新搜索薛之谦在 network doc 下会有一个新的请求文件点进去看到的 Request URL: <a href="https://music.163.com/artist?id=5781">https://music.163.com/artist?id=5781</a> 就是我们想要的请求 url<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824103344295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这时候我们可以先把这个页面的内容爬取打印出来，看一下是不是我们要的东西</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://music.163.com/artist?id=5781&#x27;</span></span><br><span class="line">headers= &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: UserAgent().chrome</span><br><span class="line">&#125;</span><br><span class="line">result = requests.get(url, headers=headers).text</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020082410404514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>看到这就知道确实是爬取了薛之谦第一页歌单的信息<br>接下来分析每一首歌的网址信息<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824105043124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>用同样的方法检查后获取到<br> Request URL: <a href="https://music.163.com/song?id=1463165983">https://music.163.com/song?id=1463165983</a><br> 通过简单分析可以知道 id 就记录是那一首歌</p><h1 id="3-删选数据"><a class="markdownIt-Anchor" href="#3-删选数据">#</a> 3、删选数据</h1><p>我们可以看到，爬取的歌单内容里面虽然有我们想要的数据，却也有大量不需要的内容，此时我们需要删选数据获取列表中的歌曲 id，储存在一个字典中，里面每个元素为每首歌的 id</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dom =etree.HTML(result)</span><br><span class="line"><span class="comment"># 通过审查元素发现每首歌在&lt;a href=&quot;/song?id=417859631&quot;&gt; 中通过xpath分析得获取所有歌曲id的xpath语句为&#x27;//a[contains(@href,&quot;/song?&quot;)]/@href&#x27;</span></span><br><span class="line">ids = dom.xpath(<span class="string">&#x27;//ul[@class=&quot;f-hide&quot;]//li/a/@href&#x27;</span>)</span><br><span class="line"><span class="comment">#将数据切片只需要id数值</span></span><br><span class="line"><span class="comment">#正则表达式</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ids)):</span><br><span class="line">    ids[i] = re.sub(<span class="string">&#x27;\D&#x27;</span>, <span class="string">&#x27;&#x27;</span>, ids[i])</span><br><span class="line">print(ids)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824105306387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>此时我们就获得了这一页薛之谦歌单里的每一首歌的 id 值并存在了一个字典里<br>通过一个 for 循环验证我们的成果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ids)):</span><br><span class="line">    <span class="comment">#每一首歌的地址</span></span><br><span class="line">    M_url = <span class="string">f&#x27;https://music.163.com/song?id=<span class="subst">&#123;ids[i]&#125;</span>&#x27;</span></span><br><span class="line">    response = requests.get(M_url, headers=headers)</span><br><span class="line">    html = etree.HTML(response.text)</span><br><span class="line">    music_info = html.xpath(<span class="string">&#x27;//title/text()&#x27;</span>)</span><br><span class="line">    music_name = music_info[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    singer = music_info[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    print(music_name, singer) </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824110127191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>可以看到我们通过每一首歌的网址爬取了每一首歌的歌名和歌手名</p><h1 id="4-获取歌源"><a class="markdownIt-Anchor" href="#4-获取歌源">#</a> 4、获取歌源</h1><p>接下来进入最重要的环节，获取歌源，我们之前做的只是获取到每首歌的 url 信息但那些并不可以实现播放，我们需要通过外链来生成 mp3 文件<br>为网易云音乐的外链地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base_url = <span class="string">&#x27;https://link.hhtjim.com/163/&#x27;</span></span><br></pre></td></tr></table></figure><p>在这介绍一个可以获取各大音乐平台外链信息的网址  <a href="https://link.hhtjim.com/">跳转</a><br>通过拼接每一首歌的 id 信息获得每一首歌的外链网址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">base_url = <span class="string">&#x27;https://link.hhtjim.com/163/&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ids)):</span><br><span class="line">    <span class="comment">#每一首歌的地址</span></span><br><span class="line">    M_url = <span class="string">f&#x27;https://music.163.com/song?id=<span class="subst">&#123;ids[i]&#125;</span>&#x27;</span></span><br><span class="line">    response = requests.get(M_url, headers=headers)</span><br><span class="line">    html = etree.HTML(response.text)</span><br><span class="line">    music_info = html.xpath(<span class="string">&#x27;//title/text()&#x27;</span>)</span><br><span class="line">    music_name = music_info[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    singer = music_info[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    print(music_name, singer)</span><br><span class="line">    music_url = base_url + str(ids[i]) + <span class="string">&#x27;.mp3&#x27;</span></span><br><span class="line">    print(music_url)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824111032642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="5-下载歌曲"><a class="markdownIt-Anchor" href="#5-下载歌曲">#</a> 5、下载歌曲</h1><p>在项目当前文件下建一个 music 文件夹来储存爬取的歌曲文件，文件格式为 mp3 格式 ，<br>wb:以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;./music/&#x27;</span>+music_name+<span class="string">&#x27;.mp3&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">       file.write(music)</span><br><span class="line">   print(<span class="string">&quot;正在下载第&quot;</span>+str(i+<span class="number">1</span>)+<span class="string">&quot;首:  &quot;</span>+music_name+singer)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020082411170898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824112505309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>去本地对应的文件下就可以找到这些音乐啦<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824112615921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200824112727851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>可以用任何音乐播放器播放。</p><h1 id="6-总的代码"><a class="markdownIt-Anchor" href="#6-总的代码">#</a> 6、总的代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入库</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#网易云官网 搜索薛之谦跳转网页后  检查  network  doc 找到该网页的</span></span><br><span class="line"><span class="comment">#Request URL: https://music.163.com/artist?id=5781</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1、确定url地址(薛之谦的歌单）</span></span><br><span class="line">url = <span class="string">&#x27;https://music.163.com/artist?id=5781&#x27;</span></span><br><span class="line"><span class="comment">#网易云音乐的外链地址</span></span><br><span class="line">base_url = <span class="string">&#x27;https://link.hhtjim.com/163/&#x27;</span></span><br><span class="line"><span class="comment">#2、请求</span></span><br><span class="line"></span><br><span class="line">headers= &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: UserAgent().chrome</span><br><span class="line">&#125;</span><br><span class="line">result = requests.get(url, headers=headers).text</span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、删选数据 拿到列表中的歌曲id  为一个字典 里面有每首个的id</span></span><br><span class="line">dom =etree.HTML(result)</span><br><span class="line"><span class="comment"># 通过审查元素发现每首歌在&lt;a href=&quot;/song?id=417859631&quot;&gt; 中通过xpath分析得获取所有歌曲id的xpath语句为&#x27;//a[contains(@href,&quot;/song?&quot;)]/@href&#x27;</span></span><br><span class="line">ids = dom.xpath(<span class="string">&#x27;//ul[@class=&quot;f-hide&quot;]//li/a/@href&#x27;</span>)</span><br><span class="line"><span class="comment">#将数据切片只需要id数值</span></span><br><span class="line"><span class="comment">#正则表达式</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ids)):</span><br><span class="line">    ids[i] = re.sub(<span class="string">&#x27;\D&#x27;</span>, <span class="string">&#x27;&#x27;</span>, ids[i])</span><br><span class="line"><span class="comment">#print(ids)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ids)):</span><br><span class="line">    <span class="comment">#每一首歌的地址</span></span><br><span class="line">    M_url = <span class="string">f&#x27;https://music.163.com/song?id=<span class="subst">&#123;ids[i]&#125;</span>&#x27;</span></span><br><span class="line">    response = requests.get(M_url, headers=headers)</span><br><span class="line">    html = etree.HTML(response.text)</span><br><span class="line">    music_info = html.xpath(<span class="string">&#x27;//title/text()&#x27;</span>)</span><br><span class="line">    <span class="comment">#print(music_info)   #[&#x27;我好像在哪见过你（电影《精灵王座》主题曲） - 薛之谦 - 单曲 - 网易云音乐&#x27;]</span></span><br><span class="line">    music_name = music_info[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    singer = music_info[<span class="number">0</span>].split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment">#print(music_name, singer)  #我好像在哪见过你（电影《精灵王座》主题曲）   薛之谦</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取歌源</span></span><br><span class="line">    music_url = base_url + str(ids[i]) + <span class="string">&#x27;.mp3&#x27;</span></span><br><span class="line">    <span class="comment">#print(music_url)    #打印出每首歌的外链网址</span></span><br><span class="line">    music = requests.get(music_url).content</span><br><span class="line"></span><br><span class="line">    <span class="comment">#4、保存</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;./music/&#x27;</span>+music_name+<span class="string">&#x27;.mp3&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(music)</span><br><span class="line">    print(<span class="string">&quot;正在下载第&quot;</span>+str(i+<span class="number">1</span>)+<span class="string">&quot;首:  &quot;</span>+music_name+singer)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>欢迎持续关注！</p>]]></content>
      
      
      <categories>
          
          <category> python网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 网络爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法（Java实现）-求解八皇后问题（回溯算法）</title>
      <link href="/2020/08/25/%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E6%B1%82%E8%A7%A3%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98%EF%BC%88%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%EF%BC%89/"/>
      <url>/2020/08/25/%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E6%B1%82%E8%A7%A3%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98%EF%BC%88%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="1-八皇后问题介绍"><a class="markdownIt-Anchor" href="#1-八皇后问题介绍">#</a> 1、八皇后问题介绍</h1><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200825184930877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯・贝瑟尔于 1848 年提出：在 8×8 格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。</p><h1 id="2-八皇后问题算法思路分析"><a class="markdownIt-Anchor" href="#2-八皇后问题算法思路分析">#</a> 2、 八皇后问题算法思路分析</h1><ol><li>第一个皇后先放第一行第一列</li><li>第二个皇后放在第二行第一列、然后判断是否 OK，如果不 OK，继续放在第二列、第三列、依次把所有列都放完，找到一个合适</li><li>继续第三个皇后，还是第一列、第二列…… 直到第 8 个皇后也能放在一个不冲突的位置，算是找到了一个正确解</li><li>当得到一个正确解时，在栈回退到上一个栈时，就会开始回溯 (即将第一个皇后放到第一列的所有正确解全部得到).</li><li>然后回头继续第一个皇后放第二列，后面继续循环执行 1,2,3,4 的步骤</li></ol><p><strong>说明：</strong> 理论上应该创建一个二维数组来表示棋盘，但是实际上可以通过算法，用一个一维数组即可解决问题。比如其中一个解法：arr [8] = {0 , 4, 7, 5, 2, 6, 1, 3}<br> arr [i] = val , val 表示第 i+1 个皇后，放在第 i+1 行的第 val+1 列<br>即：<br>a [0] = 0  ：表示第 1 个皇后放在第 1 行的第 1 列<br> a [1] = 4  ：表示第 2 个皇后放在第 2 行的第 5 列<br> a [2] = 7  ：表示第 3 个皇后放在第 3 行的第 8 列<br>（后面依次类推）<br>…</p><h1 id="3-代码实现"><a class="markdownIt-Anchor" href="#3-代码实现">#</a> 3、代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhukun.qunun8</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue8</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个max表示共有多少个皇后</span></span><br><span class="line"><span class="keyword">int</span> max = <span class="number">8</span>;</span><br><span class="line"><span class="comment">//定义数组array, 保存皇后放置位置的结果,比如 arr = &#123;0 , 4, 7, 5, 2, 6, 1, 3&#125; </span></span><br><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[max];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> judgeCount = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//测试一把 ， 8皇后是否正确</span></span><br><span class="line">Queue8 queue8 = <span class="keyword">new</span> Queue8();</span><br><span class="line">queue8.check(<span class="number">0</span>);</span><br><span class="line">System.out.printf(<span class="string">&quot;一共有%d解法&quot;</span>, count);</span><br><span class="line">System.out.printf(<span class="string">&quot;一共判断冲突的次数%d次&quot;</span>, judgeCount); <span class="comment">// 1.5w</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编写一个方法，放置第n个皇后</span></span><br><span class="line"><span class="comment">//特别注意： check 是 每一次递归时，进入到check中都有  for(int i = 0; i &lt; max; i++)，因此会有回溯</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == max) &#123;  <span class="comment">//n = 8 , 其实8个皇后就既然放好</span></span><br><span class="line">print();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//依次放入皇后，并判断是否冲突</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line"><span class="comment">//先把当前这个皇后 n , 放到该行的第1列</span></span><br><span class="line">array[n] = i;</span><br><span class="line"><span class="comment">//判断当放置第n个皇后到i列时，是否冲突</span></span><br><span class="line"><span class="keyword">if</span>(judge(n)) &#123; <span class="comment">// 不冲突</span></span><br><span class="line"><span class="comment">//接着放n+1个皇后,即开始递归</span></span><br><span class="line">check(n+<span class="number">1</span>); <span class="comment">//  </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果冲突，就继续执行 array[n] = i; 即将第n个皇后，放置在本行得 后移的一个位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看当我们放置第n个皇后, 就去检测该皇后是否和前面已经摆放的皇后冲突</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 表示第n个皇后</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">judgeCount++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">// 说明</span></span><br><span class="line"><span class="comment">//1. array[i] == array[n]  表示判断 第n个皇后是否和前面的n-1个皇后在同一列</span></span><br><span class="line"><span class="comment">//2. Math.abs(n-i) == Math.abs(array[n] - array[i]) 表示判断第n个皇后是否和第i皇后是否在同一斜线</span></span><br><span class="line"><span class="comment">//（相当于把棋盘看做一个直角坐标系的话|y2-y1|=|x2-x1| 可判断夹角为45度)</span></span><br><span class="line"><span class="comment">// n = 1  放置第 2列 1 n = 1 array[1] = 1</span></span><br><span class="line"><span class="comment">// Math.abs(1-0) == 1  Math.abs(array[n] - array[i]) = Math.abs(1-0) = 1</span></span><br><span class="line"><span class="comment">//3. 判断是否在同一行, 没有必要，n 每次都在递增</span></span><br><span class="line"><span class="keyword">if</span>(array[i] == array[n] || Math.abs(n-i) == Math.abs(array[n] - array[i]) ) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写一个方法，可以将皇后摆放的位置输出</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">System.out.print(array[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">4</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">3</span> </span><br><span class="line"><span class="number">0</span> <span class="number">5</span> <span class="number">7</span> <span class="number">2</span> <span class="number">6</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> </span><br><span class="line"><span class="number">0</span> <span class="number">6</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> </span><br><span class="line"><span class="number">0</span> <span class="number">6</span> <span class="number">4</span> <span class="number">7</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> </span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">3</span> <span class="number">0</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">0</span> <span class="number">6</span> <span class="number">3</span> <span class="number">7</span> <span class="number">2</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span> <span class="number">6</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">4</span> <span class="number">0</span> <span class="number">3</span> </span><br><span class="line"><span class="number">1</span> <span class="number">6</span> <span class="number">4</span> <span class="number">7</span> <span class="number">0</span> <span class="number">3</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">1</span> <span class="number">7</span> <span class="number">5</span> <span class="number">0</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">3</span> </span><br><span class="line"><span class="number">2</span> <span class="number">0</span> <span class="number">6</span> <span class="number">4</span> <span class="number">7</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">7</span> <span class="number">0</span> <span class="number">6</span> <span class="number">3</span> <span class="number">5</span> </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> <span class="number">6</span> <span class="number">0</span> </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">5</span> </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">7</span> <span class="number">3</span> <span class="number">0</span> <span class="number">6</span> <span class="number">1</span> <span class="number">5</span> </span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">4</span> <span class="number">7</span> <span class="number">0</span> <span class="number">6</span> <span class="number">3</span> </span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">0</span> <span class="number">3</span> <span class="number">7</span> <span class="number">4</span> </span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">4</span> <span class="number">0</span> <span class="number">7</span> <span class="number">3</span> </span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">3</span> <span class="number">0</span> <span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">1</span> </span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">0</span> </span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">0</span> <span class="number">3</span> <span class="number">6</span> <span class="number">4</span> <span class="number">1</span> </span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">0</span> <span class="number">4</span> <span class="number">6</span> <span class="number">1</span> <span class="number">3</span> </span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">3</span> <span class="number">0</span> <span class="number">6</span> <span class="number">4</span> </span><br><span class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">7</span> <span class="number">4</span> <span class="number">0</span> <span class="number">3</span> <span class="number">5</span> </span><br><span class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> <span class="number">0</span> <span class="number">4</span> </span><br><span class="line"><span class="number">2</span> <span class="number">7</span> <span class="number">3</span> <span class="number">6</span> <span class="number">0</span> <span class="number">5</span> <span class="number">1</span> <span class="number">4</span> </span><br><span class="line"><span class="number">3</span> <span class="number">0</span> <span class="number">4</span> <span class="number">7</span> <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">3</span> <span class="number">0</span> <span class="number">4</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">1</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">7</span> <span class="number">5</span> <span class="number">0</span> <span class="number">2</span> <span class="number">6</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">0</span> <span class="number">4</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">4</span> <span class="number">0</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">6</span> <span class="number">4</span> <span class="number">0</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">5</span> <span class="number">0</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span> </span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">0</span> <span class="number">4</span> <span class="number">1</span> <span class="number">7</span> <span class="number">2</span> <span class="number">6</span> </span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">4</span> </span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span> <span class="number">4</span> <span class="number">1</span> </span><br><span class="line"><span class="number">3</span> <span class="number">6</span> <span class="number">0</span> <span class="number">7</span> <span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">3</span> <span class="number">6</span> <span class="number">2</span> <span class="number">7</span> <span class="number">1</span> <span class="number">4</span> <span class="number">0</span> <span class="number">5</span> </span><br><span class="line"><span class="number">3</span> <span class="number">6</span> <span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">0</span> <span class="number">2</span> <span class="number">7</span> </span><br><span class="line"><span class="number">3</span> <span class="number">6</span> <span class="number">4</span> <span class="number">2</span> <span class="number">0</span> <span class="number">5</span> <span class="number">7</span> <span class="number">1</span> </span><br><span class="line"><span class="number">3</span> <span class="number">7</span> <span class="number">0</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">4</span> </span><br><span class="line"><span class="number">3</span> <span class="number">7</span> <span class="number">0</span> <span class="number">4</span> <span class="number">6</span> <span class="number">1</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">3</span> <span class="number">7</span> <span class="number">4</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span> <span class="number">1</span> <span class="number">5</span> </span><br><span class="line"><span class="number">4</span> <span class="number">0</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> </span><br><span class="line"><span class="number">4</span> <span class="number">0</span> <span class="number">7</span> <span class="number">3</span> <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">4</span> <span class="number">0</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span> </span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">6</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">0</span> <span class="number">6</span> <span class="number">3</span> <span class="number">7</span> <span class="number">2</span> </span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">7</span> <span class="number">0</span> <span class="number">3</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">0</span> <span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">3</span> <span class="number">6</span> </span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span> <span class="number">1</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">7</span> <span class="number">3</span> <span class="number">6</span> <span class="number">0</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> <span class="number">1</span> </span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">1</span> <span class="number">3</span> <span class="number">7</span> <span class="number">0</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">1</span> <span class="number">5</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span> <span class="number">7</span> </span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">1</span> <span class="number">5</span> <span class="number">2</span> <span class="number">0</span> <span class="number">7</span> <span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">3</span> <span class="number">0</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">4</span> <span class="number">7</span> <span class="number">3</span> <span class="number">0</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">6</span> </span><br><span class="line"><span class="number">4</span> <span class="number">7</span> <span class="number">3</span> <span class="number">0</span> <span class="number">6</span> <span class="number">1</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">4</span> <span class="number">1</span> <span class="number">7</span> <span class="number">2</span> <span class="number">6</span> <span class="number">3</span> </span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">4</span> <span class="number">7</span> <span class="number">3</span> </span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">0</span> <span class="number">3</span> <span class="number">7</span> <span class="number">4</span> <span class="number">2</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span> <span class="number">4</span> <span class="number">7</span> <span class="number">1</span> <span class="number">3</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">0</span> <span class="number">7</span> <span class="number">3</span> <span class="number">1</span> <span class="number">6</span> <span class="number">4</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">0</span> <span class="number">7</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">6</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">7</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">4</span> <span class="number">7</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">6</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">3</span> <span class="number">7</span> <span class="number">0</span> <span class="number">4</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">7</span> <span class="number">4</span> <span class="number">0</span> <span class="number">3</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">3</span> <span class="number">0</span> <span class="number">7</span> <span class="number">1</span> <span class="number">4</span> </span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">0</span> <span class="number">4</span> <span class="number">7</span> <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> </span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">0</span> <span class="number">2</span> </span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">7</span> </span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">6</span> <span class="number">0</span> <span class="number">7</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> </span><br><span class="line"><span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">3</span> <span class="number">0</span> <span class="number">6</span> <span class="number">4</span> <span class="number">2</span> </span><br><span class="line"><span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> </span><br><span class="line"><span class="number">6</span> <span class="number">1</span> <span class="number">3</span> <span class="number">0</span> <span class="number">7</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">6</span> <span class="number">1</span> <span class="number">5</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span> <span class="number">7</span> <span class="number">4</span> </span><br><span class="line"><span class="number">6</span> <span class="number">2</span> <span class="number">0</span> <span class="number">5</span> <span class="number">7</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> </span><br><span class="line"><span class="number">6</span> <span class="number">2</span> <span class="number">7</span> <span class="number">1</span> <span class="number">4</span> <span class="number">0</span> <span class="number">5</span> <span class="number">3</span> </span><br><span class="line"><span class="number">6</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">7</span> <span class="number">0</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">6</span> <span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">5</span> <span class="number">0</span> <span class="number">2</span> <span class="number">4</span> </span><br><span class="line"><span class="number">6</span> <span class="number">4</span> <span class="number">2</span> <span class="number">0</span> <span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">3</span> </span><br><span class="line"><span class="number">7</span> <span class="number">1</span> <span class="number">3</span> <span class="number">0</span> <span class="number">6</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">7</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span> <span class="number">3</span> <span class="number">5</span> </span><br><span class="line"><span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">5</span> <span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">3</span> </span><br><span class="line"><span class="number">7</span> <span class="number">3</span> <span class="number">0</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">4</span> </span><br><span class="line">一共有<span class="number">92</span>解法一共判断冲突的次数<span class="number">15720</span>次</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 回溯 </tag>
            
            <tag> 八皇后 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习-详谈最高层父类-Object类</title>
      <link href="/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%9C%80%E9%AB%98%E5%B1%82%E7%88%B6%E7%B1%BB-Object%E7%B1%BB/"/>
      <url>/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%9C%80%E9%AB%98%E5%B1%82%E7%88%B6%E7%B1%BB-Object%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="1-object类"><a class="markdownIt-Anchor" href="#1-object类">#</a> 1、Object 类</h1><ol><li>Object 类是所有 Java 类的根父类  （多层继承中的最高层的父类）</li><li>如果在类的声明中未使用 extends 关键字指明其父类，则默认父类为 Object 类</li></ol><p>比如：public class Person { } 等价于：public class Person extends Object</p><p>method（Object obj）{ }   // 表示该方法可以接收任何类作为其参数</p><p>（当我们想给某个方法设置一个形参参数，可以确定传递的实参一定会是一个类，但不确定会是一个什么类也就是形参的类型不确定，这时候就可以把形参设置为 Object 类型。）</p><h1 id="2-object类中的主要方法"><a class="markdownIt-Anchor" href="#2-object类中的主要方法">#</a> 2、Object 类中的主要方法</h1><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200812153259688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="21对象相等判断方法equals"><a class="markdownIt-Anchor" href="#21对象相等判断方法equals">#</a> 2.1 对象相等判断方法：equals（）</h2><p>该方法比较的是对象是否相等（其实就是比较堆内地址）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name=name;</span><br><span class="line">       <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Text</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;Mary&quot;</span>,<span class="number">21</span>);</span><br><span class="line">         Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;Mary&quot;</span>,<span class="number">21</span>);</span><br><span class="line">         System.out.println(s1.equals(s2));<span class="comment">//输出一个boolean值  false</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出 false 表示 s1 和 s2 指向的不是同一个对象即他们指向的堆内地址是不同的<br>（关于 equals () 的详细说明在后面的 “==” 和 equals 的对比和使用中会具体阐述）</strong></p><h2 id="22-hashcode方法"><a class="markdownIt-Anchor" href="#22-hashcode方法">#</a> 2.2 hashCode（）方法</h2><p><strong>hashCode 方法的作用：</strong> 对于包含容器类型的程序设计语言来说，基本上都会涉及到 hashCode。在 Java 中也一样，hashCode 方法的主要作用是为了配合基于散列的集合一起正常运行，这样的散列集合包括<strong> HashSet、HashMap 以及 HashTable</strong>。</p><p>（在集合查找时，hashcode 能大大降低对象比较次数，提高查找效率！）</p><p><strong>1、hashCode 返回的就是对象的存储地址吗？</strong></p><p>这种看法是不全面的，确实有些 JVM 在实现时是直接返回对象的存储地址，但是大多时候并不是这样，只能说可能存储地址有一定关联</p><p><strong>2、可以根据 hashCode 值判断两个对象是否相等吗？</strong></p><p>肯定是不可以的，因为不同的对象可能会生成相同的 hashcode 值。虽然不能根据 hashcode 值判断两个对象是否相等，但是可以直接根据 hashcode 值判断两个对象不等，如果两个对象的 hashcode 值不等，则必定是两个不同的对象。如果要判断两个对象是否真正相等，必须通过 equals 方法。也就是说对于两个对象：</p><ul><li>如果调用 equals 方法得到的结果为 true，则两个对象的 hashcode 值必定相等；</li><li>如果 equals 方法得到的结果为 false，则两个对象的 hashcode 值不一定不同；</li><li>如果两个对象的 hashcode 值不等，则 equals 方法得到的结果必定为 false；</li><li>如果两个对象的 hashcode 值相等，则 equals 方法得到的结果未知。</li></ul><p><strong>3、在有些情况下，在设计一个类的时候需要重写 equals 方法，但是千万要注意，在重写 equals 方法的同时也要重写 hashCode 方法。（比如在 String 类中就已经重写了这两个方法）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         String s1 = <span class="keyword">new</span> String(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">         String s2 = <span class="keyword">new</span> String(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">         System.out.println(s1.equals(s2));</span><br><span class="line">         System.out.println(s1.hashCode());</span><br><span class="line">         System.out.println(s2.hashCode());</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="number">96321</span></span><br><span class="line"><span class="number">96321</span></span><br></pre></td></tr></table></figure><p>下面为一个实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> num;</span><br><span class="line">     String name;</span><br><span class="line"> </span><br><span class="line">     Student(<span class="keyword">int</span> num, String name) &#123;</span><br><span class="line">         <span class="keyword">this</span>.num = num;</span><br><span class="line">         <span class="keyword">this</span>.name = name;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> num + <span class="string">&quot;:&quot;</span> + name;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         HashSet&lt;Student&gt; hs = <span class="keyword">new</span> HashSet();</span><br><span class="line">         hs.add(<span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>));</span><br><span class="line">         hs.add(<span class="keyword">new</span> Student(<span class="number">2</span>, <span class="string">&quot;lisi&quot;</span>));</span><br><span class="line">         hs.add(<span class="keyword">new</span> Student(<span class="number">3</span>, <span class="string">&quot;wangwu&quot;</span>));</span><br><span class="line">         hs.add(<span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>));</span><br><span class="line"> </span><br><span class="line">         Iterator it = hs.iterator();</span><br><span class="line">         <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>:wangwu</span><br><span class="line"><span class="number">1</span>:zhangsan</span><br><span class="line"><span class="number">2</span>:lisi</span><br><span class="line"><span class="number">1</span>:zhangsan</span><br></pre></td></tr></table></figure><p><strong>思考：</strong> 为什么 hashset 添加了相等的元素呢，这是不是和 hashset 的原则违背了呢？回答是：没有。因为在根据 hashcode () 对两次建立的 new Student (1,“zhangsan”) 对象进行比较时，<strong>生成的是不同的哈希码值，所以 hashset 把他当作不同的对象对待了，当然此时的 equals () 方法返回的值也不等。</strong></p><p>为什么会生成不同的哈希码值呢？上面我们在比较 s1 和 s2 的时候不是生成了同样的哈希码吗？原因就在于我们自己写的 Student 类并<strong>没有重写自己的 hashcode () 和 equals () 方法</strong>，所以在比较时，是继承的 object 类中的 hashcode () 方法，<strong>而 object 类中的 hashcode () 方法是一个本地方法，比较的是对象的地址（引用地址），使用 new 方法创建对象，两次生成的当然是不同的对象了，造成的结果就是两个对象的 hashcode () 返回的值不一样，所以 Hashset 会把它们当作不同的对象对待。</strong></p><p><strong>解决途径：在 Student 类中重写 hashCode（）和 equals 方法 ——&gt;</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> num;</span><br><span class="line">     String name;</span><br><span class="line"> </span><br><span class="line">     Student(<span class="keyword">int</span> num, String name) &#123;</span><br><span class="line">         <span class="keyword">this</span>.num = num;</span><br><span class="line">         <span class="keyword">this</span>.name = name;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> num * name.hashCode();</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">         Student s = (Student) o;</span><br><span class="line">         <span class="keyword">return</span> num == s.num &amp;&amp; name.equals(s.name);</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> num + <span class="string">&quot;:&quot;</span> + name;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         HashSet&lt;Student&gt; hs = <span class="keyword">new</span> HashSet();</span><br><span class="line">         hs.add(<span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>));</span><br><span class="line">         hs.add(<span class="keyword">new</span> Student(<span class="number">2</span>, <span class="string">&quot;lisi&quot;</span>));</span><br><span class="line">         hs.add(<span class="keyword">new</span> Student(<span class="number">3</span>, <span class="string">&quot;wangwu&quot;</span>));</span><br><span class="line">         hs.add(<span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>));</span><br><span class="line"> </span><br><span class="line">         Iterator it = hs.iterator();</span><br><span class="line">         <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>:wangwu</span><br><span class="line"><span class="number">2</span>:lisi</span><br><span class="line"><span class="number">1</span>:zhangsan</span><br></pre></td></tr></table></figure><h2 id="23取得对象信息的方法tostring"><a class="markdownIt-Anchor" href="#23取得对象信息的方法tostring">#</a> 2.3 取得对象信息的方法：toString（）</h2><p>该方法在打印对象时被调用，将对象信息变为字符串返回，<strong>默认输出对象地址。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> zhukun;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> age=<span class="number">20</span>;</span><br><span class="line">     String name = <span class="string">&quot;zhukun&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         Student s = <span class="keyword">new</span> Student();</span><br><span class="line">         System.out.println(<span class="string">&quot;姓名：&quot;</span>+s.name+<span class="string">&quot;年龄：&quot;</span>+s.age);<span class="comment">//输出对象属性</span></span><br><span class="line">         System.out.println(s);<span class="comment">//直接输出对象信息</span></span><br><span class="line">                 System.out.println(s.toString());<span class="comment">//调用父类方法输出对象信息</span></span><br><span class="line">         &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">姓名：zhukun年龄：<span class="number">20</span></span><br><span class="line">zhukun.Student@<span class="number">15d</span>b9742</span><br><span class="line">zhukun.Student@<span class="number">15d</span>b9742</span><br></pre></td></tr></table></figure><p>上述结果看出编译器默认调用 toString () 方法输出对象，但<strong>输出的是对象的地址</strong>，我们并不能看懂它的意思。那么<strong>就要通过重写 Object 类的 toString () 方法来输出对象属性信息。</strong></p><p>重写 toString 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> zhukun;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> age=<span class="number">20</span>;</span><br><span class="line">     String name = <span class="string">&quot;zhukun&quot;</span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span>+name+<span class="string">&quot;，年龄：&quot;</span>+age;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         Student s = <span class="keyword">new</span> Student();</span><br><span class="line">         System.out.println(<span class="string">&quot;姓名：&quot;</span>+s.name+<span class="string">&quot;年龄：&quot;</span>+s.age);<span class="comment">//输出对象属性</span></span><br><span class="line">         System.out.println(s);<span class="comment">//直接输出对象信息</span></span><br><span class="line">                 System.out.println(s.toString());<span class="comment">//调用父类方法输出对象信息</span></span><br><span class="line">         &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">姓名：zhukun年龄：<span class="number">20</span></span><br><span class="line">姓名：zhukun，年龄：<span class="number">20</span></span><br><span class="line">姓名：zhukun，年龄：<span class="number">20</span></span><br></pre></td></tr></table></figure><h1 id="4-instanceof操作符"><a class="markdownIt-Anchor" href="#4-instanceof操作符">#</a> 4、instanceof 操作符</h1><p>x  instanceof A：检验 x 是否为类 A 的对象，返回值为 boolean 型</p><ul><li>要求 x 所属的类与类 A 必须是子类和父类的关系，否则编译错误。</li><li>如果 x 属于类 A 的子类 B，x instanceof A 的值也为 true。<br>（就是检验某个对象是不是类 A 的子类）</li></ul><p><strong>（就是检验某个对象是不是类 A 的子类）</strong></p>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 继承 </tag>
            
            <tag> Object类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习-方法的重写（覆盖）和重载</title>
      <link href="/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%EF%BC%88%E8%A6%86%E7%9B%96%EF%BC%89%E5%92%8C%E9%87%8D%E8%BD%BD/"/>
      <url>/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%EF%BC%88%E8%A6%86%E7%9B%96%EF%BC%89%E5%92%8C%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="1-方法重写overide"><a class="markdownIt-Anchor" href="#1-方法重写overide">#</a> 1、方法重写（Overide）</h1><h2 id="11什么是方法重写"><a class="markdownIt-Anchor" href="#11什么是方法重写">#</a> 1.1 什么是方法重写？</h2><p>在 Java 程序中，类的继承关系可以产生一个子类，子类继承父类，它具备了父类所有的特征，继承了父类所有的方法和变量。          子类可以定义新的特征，<strong>当子类需要修改父类的一些方法进行扩展，增大功能，程序设计者常常把这样的一种操作方法称为重写，也叫称为覆写或覆盖。</strong> 在 Java 中的继承中，<strong>子类既可以隐藏和访问父类的方法，也可以覆盖继承父类的方法</strong>。在 Java 中覆盖继承父类的方法就是通过方法的重写来实现的。</p><p>方法的重写：子类中的方法与父类中继承的方法有<strong>完全相同</strong>的<strong>返回值类型、方法名、参数个数以及参数类型</strong></p><h2 id="12重写规则"><a class="markdownIt-Anchor" href="#12重写规则">#</a> 1.2 重写规则</h2><p>重写遵循 **“两同一小一大”** 规则：</p><p><strong>两同：</strong></p><ul><li>父类方法的参数列表必须完全与被子类重写的方法的参数列表相同，否则不能称其为重写而是重载。</li><li>父类的返回类型必须与被子类重写的方法返回类型相同，否则不能称其为重写而是重载</li></ul><p><strong>一小：</strong></p><ul><li>子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等</li></ul><p>(在继承过程中如果父类当中的方法抛出异常，那么在子类中重写父类的该方法时，也要抛出异常，而且抛出的异常不能多于父类中抛出的异常 (可以等于父类中抛出的异常)。换句话说，重写方法一定不能抛出新的检查异常，或者比被重写方法声明更加宽泛的检查型异常。例如，父类的一个方法申明了一个检查异常 IOException，在重写这个方法时就不能抛出 Exception，只能抛出 IOException 的子类异常，可以抛出非检查异常。同样的道理，如果子类中创建了一个成员变量，而该变量和父类中的一个变量名称相同，称作变量重写或属性覆盖。)</p><p><strong>一大：</strong> 子类方法的访问权限应比父类方法访问权限更大或相等（特殊情况：子类不能重写父类被声明为 private 权限的方法）</p><h2 id="13重写注意事项"><a class="markdownIt-Anchor" href="#13重写注意事项">#</a> 1.3 重写注意事项</h2><ol><li><p>父类中的私有方法不能被重写，该方法对于子类是隐藏的，因此其子类无法访问该方法，也无法重写</p></li><li><p>父类静态方法，子类也必须通过静态方法进行覆盖，即静态只能覆盖静态</p></li><li><p>子类重写父类方法时，最好声明得一模一样</p></li><li><p>如果子类中定义了一个与父类 private 方法具有相同的方法名、相同的形参列表、相同的返回值类型的方法，依然不是重写，只是在子类中重新定义了一个新的方法，所以该新方法不会受父类方法的任何限制。<br>例子：</p></li></ol><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Overide;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;学习马克思列宁主义&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//基础班的学生是属于学生中一种</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//BaseStudent类的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseStudent</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);<span class="comment">//指定调用父类构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.study();<span class="comment">//一般子类调用的是重写后的方法，要想调用父类的要用super关键字</span></span><br><span class="line">        System.out.println(name+<span class="string">&quot;学习javase..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//就业班学生 也是属于普通学生中一种</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="comment">//构造 函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WorkStudent</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.study();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;学习javaee+android..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo01</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"> <span class="comment">//创建一个基础班的学生</span></span><br><span class="line">        BaseStudent s = <span class="keyword">new</span> BaseStudent(<span class="string">&quot;居东东&quot;</span>);</span><br><span class="line">        s.study();</span><br><span class="line">        <span class="comment">//创建一个就业班的学生</span></span><br><span class="line">        WorkStudent w = <span class="keyword">new</span> WorkStudent(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        w.study();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">居东东学习马克思列宁主义</span><br><span class="line">居东东学习javase..</span><br><span class="line">张三学习马克思列宁主义</span><br><span class="line">张三学习javaee+android..</span><br></pre></td></tr></table></figure><h1 id="2-方法重载overload"><a class="markdownIt-Anchor" href="#2-方法重载overload">#</a> 2、方法重载（Overload）</h1><h2 id="21什么是方法重载"><a class="markdownIt-Anchor" href="#21什么是方法重载">#</a> 2.1 什么是方法重载</h2><p>方法重载是让类以统一的方式处理不同类型数据的一种手段。调用方法时通过传递给它们的不同个数和类型的参数来决定具体使用哪个方法，这就是多态性。在方法重载时，方法之间需要存在一定的联系，因为这样可以提高程序的可读性，一般只重载功能相似的方法，构造方法也可以重载。当 Java 调用一个重载方法时，参数与调用参数匹配的方法被执行</p><p><strong>方法重载：</strong> 在同一个类中，多个方法的方法名相同，但是参数列表不同。参数列表不同指的是参数个数、参数类型或者参数的顺序不同。</p><h2 id="22重载规则"><a class="markdownIt-Anchor" href="#22重载规则">#</a> 2.2 重载规则</h2><ol><li>在使用重载时只能通过不同的参数列表，必须具有不同的参数列表。</li><li>不能通过访问权限、返回类型、抛出的异常进行重载。</li><li>可以有不同的返回类型，只要参数列表不同就可以了。</li><li>方法的异常类型和数目不会对重载造成影响。</li><li>可以有不同的访问修饰符。</li><li>可以抛出不同的异常。</li></ol><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Overload;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    House ()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参数构造函数&quot;</span>);</span><br><span class="line">        height = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    House(<span class="keyword">int</span> i) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房子高度为 &quot;</span> + i + <span class="string">&quot; 米&quot;</span>);</span><br><span class="line">        height = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房子高度为 &quot;</span> + height + <span class="string">&quot; 米&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s + <span class="string">&quot;房子高度为 &quot;</span> + height + <span class="string">&quot; 米&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        House h1 = <span class="keyword">new</span> House();</span><br><span class="line">        House h2 = <span class="keyword">new</span> House(<span class="number">6</span>);</span><br><span class="line">        h1.info();</span><br><span class="line">        h1.info(<span class="string">&quot;我的&quot;</span>);</span><br><span class="line">        h2.info();</span><br><span class="line">        h2.info(<span class="string">&quot;你的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">无参数构造函数</span><br><span class="line">房子高度为 <span class="number">6</span> 米</span><br><span class="line">房子高度为 <span class="number">4</span> 米</span><br><span class="line">我的房子高度为 <span class="number">4</span> 米</span><br><span class="line">房子高度为 <span class="number">6</span> 米</span><br><span class="line">你的房子高度为 <span class="number">6</span> 米</span><br></pre></td></tr></table></figure><h2 id="3-方法重写和方法重载的区别"><a class="markdownIt-Anchor" href="#3-方法重写和方法重载的区别">#</a> 3、方法重写和方法重载的区别</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200810173239780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 重写 </tag>
            
            <tag> 重载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习-访问权限控制</title>
      <link href="/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
      <url>/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-为什么要有访问权限控制"><a class="markdownIt-Anchor" href="#1-为什么要有访问权限控制">#</a> 1、为什么要有访问权限控制？</h1><p><strong>访问控制 (或隐藏具体实现) 与 “最初的实现并不恰当” 有关。</strong><br>所有优秀的作者，包括那些编写软件的程序员，都清楚其著作的某些部分直至重新创作的时候才变得完美，有时甚至要反复重写多次。如果你把一个代码段放到了某个位置，等过一会儿回头再看时，有可能会发现有更好的方式去实现相同的功能。这正是重构的原动力之一，重构即重写代码，以使得它更可读、更易理解，并因此而更具可维护性。但是，在这种修改和完善代码的愿望之下，也存在着巨大的压力。通常总是会有一些消费者 (客户端程序员) 需要你的代码在某些方面保持不变。因此你想改变代码，而他们却想让代码保持不变。由此而产生了在面向对象设计中需要考虑的一一个基本问题:“如何把变动的事物与保持不变的事物区分开来”。<br>这对<strong>类库 (library)</strong> 而言尤为重要。该类库的消费者必须依赖他所使用的那部分类库，并且能够知道如果类库出现了新版本，他们并不需要改写代码。从另一个方面来说，类库的开发者必须有权限进行修改和改进，并确保客户代码不会因为这些改动而受到影响。 这一目标可以通过约定来达到。例如，类库开发者必须同意在改动类库中的类时不得删除任何现有方法，因为那样会破坏客户端程序员的代码。但是，与之相反的情况会更加棘手。在有域 (即数据成员) 存在的情况下，类库开发者要怎样才能知道究竟都有哪些域已经被客户端程序员所调用了呢？这对于方法仅为类的实现的一部分，因此并不想让客户端程序员直接使用的情况来说同样如此。如果程序开发者想要移除旧的实现而要添加新的实现时，结果将会怎样呢？改动任何一个成员都有可能破坏客户端程序员的代码。于是类库开发者会手脚被缚，无法对任何事物进行改动。<br>为了解决这一问题，Java 提供了<strong>访问权限修饰词</strong>，以供类库开发人员向客户端程序员指明<br>哪些是可用的，哪些是不可用的。访向权限控制的等级，从最大权限到最小权限依次为:</p><p><strong>public、protected、包访问权限 (没有关键词称为 &quot;缺省&quot;) 和 private</strong></p><p>构件类库的概念以及对于谁有权取用该类库构件的控制问题都还是不完善的。其中仍旧存在着如何将构件捆绑到一个内聚的类库单元中的问题。对于这一点，Java 用<strong>关键字 package</strong> 加以控制，而访问权限修饰词会因类是存在于一个相同的包，还是存在于一个单独的包而受到影响。</p><h1 id="2-包库单元"><a class="markdownIt-Anchor" href="#2-包库单元">#</a> 2、包：库单元</h1><p><strong>包内包含有一组类，它们在单一的名字空间之下被组织到一起。</strong></p><pre><code>  例如，在Java的标准发布中有一个工具库，它被组织在java.util名字空间下。java.util中有一个叫做ArrayList的类，使用ArrayList的一种方式是用其全名java.util.ArrayList来指定。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">F</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        java.util.ArrayList list = <span class="keyword">new</span> java.util.ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就使得程序变得很冗长，因此可以转而用 import 关键字，如果想要导入单个的类，可以在 import 语句中命名该类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">F</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> java.util.ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，就可以不用限定地使用 ArrayList 了。但是，这样做 java.util 中的其他类仍旧是都不可以使用的。要想导入其中的所有类，只需要使用 &quot;*&quot;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br></pre></td></tr></table></figure><p><strong>Java 常用的类库：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200808223508652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>注意：</strong><br>当编写一个 <strong>.Java</strong> 源代码文件时，此文件通常被称为<strong>编译单元</strong> (有时也被称为转译单元)。每个编译单元都必须有一个后缀名.java, 而在编译单元内则可以有一个 public 类，<strong>该类的名称必须与文件的名称相同</strong> (包括大小写，但不包括文件的后缀名.java)。<strong>每个编译单元只能有一一个 public 类，否则编译器就不会接受</strong>。如果在该编译单元之中还有额外的类的话，那么在包之外<br>的世界是无法看见这些类的，这是因为它们不是 public 类，而且它们主要用来为主 publice 类提供<br>支持。</p><p>比如在 test 包下的 test.java 文件（编译单元）里面只能有一个和文件名称相同的 public 类也就是里面的 test 类 Person 类就不能加 public 限定符了。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200808222558691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>同一个 test 包名下的类 test02 可以调用 Person 类<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200808222645339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在另一个 test03 包名下的类 test03 就不能调用 Person 类了即使导入了包也不能，因为它不是 public 类型的<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200808222651248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="3-java访问权限修饰词"><a class="markdownIt-Anchor" href="#3-java访问权限修饰词">#</a> 3、Java 访问权限修饰词</h1><ul><li><p>public：接口访问权限（无论是谁，无论在哪都可以访问）<br>使用关键字 public，就意味着 public 之后紧跟着的成员声明自己对每个人都是有用的，尤其是使用类库的客户程序员更是如此。</p></li><li><p>protected：继承访问权限（子类可以访问父类的 public 成员和 protected 成员，但不可以访问父类的 private 成员）</p></li><li><p>（缺省）：包访问权限（类内部和同一个包里面的类可以访问（缺省）成员）<br>因为（缺省）没有修饰词，形式如 int age ，也就是前面没有任何修饰词</p></li><li><p>private: 你无法访问（除了包含该类成员的类之外，其他任何类都无法访问这个成员）</p></li></ul><p>为了方便理解和比较准备了以下两张图片<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200808223740311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200808223806321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 类 </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 访问权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习-继承、super关键字</title>
      <link href="/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E7%BB%A7%E6%89%BF%E3%80%81super%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E7%BB%A7%E6%89%BF%E3%80%81super%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="1-引例"><a class="markdownIt-Anchor" href="#1-引例">#</a> 1、引例</h1><p>假如现在有四个类它们的成员属性分别为：</p><ul><li>学生类：姓名，性别，年龄，学校</li><li>教师类：姓名，性别，年龄，学科</li><li>工人类：姓名，性别，年龄，工种</li><li>农民类：姓名，性别，年龄，收入</li></ul><p>对于上面的四个类我们在实际写代码的时候会发现，发我在<strong>重复性</strong>地写一些代码比如（姓名、性别、年龄）是这四个类<strong>共有</strong>的<strong>成员属性</strong>。这时候我们就可以建一个 person 类把（姓名，性别，年龄）作为它的成员属性，而上面四个类通过继承这个 person 类实现对共有的成员属性的调用以提高代码的复用性</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200810094026212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="2-继承"><a class="markdownIt-Anchor" href="#2-继承">#</a> 2、继承</h1><h2 id="21-概述"><a class="markdownIt-Anchor" href="#21-概述">#</a> 2.1 概述</h2><p>继承是 java 面向对象编程技术的一块基石，因为它允许创建分等级层次的类。继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p><ul><li><p>继承是面向对象思想的三大特性之一，使类与类之间产生特殊的关系，即 is-a 关系。</p></li><li><p>继承是从已有类中派生出新的类，新的类能吸收已有类的属性和方法，并且能拓展新的属性和行为。</p></li><li><p>在 Java 中使用 extends 关键字表示继承，语法表示为: class 子类 extends 父类 {}</p></li><li><p>子类被称为派生类，父类又被称为超类。</p></li><li><p>子类继承父类，表示子类是一种特殊的父类，子类拥有父类的非 private 属性和方法，并且子类可以拓展具有父类所没有的一些属性和方法。</p></li><li><p>子类即使不扩展父类，也能维持拥有父类的操作。</p></li></ul><h2 id="22优缺点"><a class="markdownIt-Anchor" href="#22优缺点">#</a> 2.2 优缺点</h2><p>继承的好处是：</p><ul><li>提高了代码的复用性</li><li>提高了代码的维护性</li><li>让类与类之间产生了关系，是多态的前提</li></ul><p>继承的缺点是：</p><ul><li>增加了耦合性（OOP 思想开发原则：高内聚，低耦合    耦合：类与类之间的关系  内聚：自身完成事情的能力）</li></ul><h2 id="23java继承的类型"><a class="markdownIt-Anchor" href="#23java继承的类型">#</a> 2.3Java 继承的类型</h2><ul><li>Java 只支持单继承，不支持多重继承</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200810101811626.png#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200810102402866.png#pic_center" alt="在这里插入图片描述"><br>多重继承会存在安全隐患，因为当继承的多个类都存在相同的属性或方法体不同的方法，子类进行调用时，就会产生不知道该调用哪一个类中的方法的情况</p><ul><li>Java 支持继承体系</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200810102503260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="3-关键字"><a class="markdownIt-Anchor" href="#3-关键字">#</a> 3、关键字</h1><h2 id="31super关键字"><a class="markdownIt-Anchor" href="#31super关键字">#</a> 3.1super 关键字</h2><p><strong>我们可以通过 super 关键字来实现对父类成员的访问，用来引用当前对象的父类。</strong></p><p>两种方法：</p><p>1、用在子类的构造方法里（初始化用），主要是调用父类的默认构造方法，如果父类有不止一个构造方法，可以通过 super 指定具体的构造函数，比如 super (paras)；</p><p>注意：super 表示当前类的父类，super () 调用的是父类默认的构造方法，即这样可以对父类进行初始化。如何没有对父类进行初始化，当子类调用父类的方法时，便会从逻辑上出现错误，因为没对父类初始化，父类的方法和属性便没有内存空间。</p><p>2、用在子类里调用隐藏或重写的属性或行为，比如 super.onDestroy () 等等</p><h2 id="32super与this关键字的区别"><a class="markdownIt-Anchor" href="#32super与this关键字的区别">#</a> 3.2super 与 this 关键字的区别</h2><ol><li>super（参数）：调用基类中的某一个构造函数（应该为构造函数中的第一条语句）</li><li>this（参数）：调用本类中另一种形成的构造函数（应该为构造函数中的第一条语句）</li><li>super:　它引用当前对象的直接父类中的成员（用来访问直接父类中被隐藏的父类中成员数据或函数，基类与派生类中有相同成员定义时如：super. 变量名 super. 成员函数据名（实参）</li><li>this：它代表当前对象名（在程序中易产生二义性之处，应使用 this 来指明当前对象；如果函数的形参与类中的成员数据同名这时需用 this 来指明成员变量名）</li><li>调用 super () 必须写在子类构造方法的第一行，否则编译不通过。每个子类构造方法的第一条语句，都是隐含地调用 super ()，如果父类没有这种形式的构造函数，那么在编译的时候就会报错。</li><li>super () 和 this () 类似，区别是，super () 从子类中调用父类的构造方法，this () 在同一类内调用其它方法。</li><li>super () 和 this () 均需放在构造方法内第一行。</li><li>尽管可以用 this 调用一个构造器，但却不能调用两个。</li><li>this 和 super 不能同时出现在一个构造函数里面，因为 this 必然会调用其它的构造函数，其它的构造函数必然也会有 super 语句的存在，所以在同一个构造函数里面有相同的语句，就失去了语句的意义，编译器也不会通过。</li><li>this () 和 super () 都指的是对象，所以，均不可以在 static 环境中使用。包括：static 变量，static 方法，static 语句块。</li><li>从本质上讲，this 是一个指向本对象的指针，然而 super 是一个 Java 关键字。</li></ol><h1 id="4-继承需要注意的几个问题"><a class="markdownIt-Anchor" href="#4-继承需要注意的几个问题">#</a> 4、继承需要注意的几个问题</h1><h2 id="41成员变量和方法"><a class="markdownIt-Anchor" href="#41成员变量和方法">#</a> 4.1 成员变量和方法</h2><p>1、子类只能继承父类的所有非私有的成员变量和方法。可以继承 public protected 修饰的成员，不可以继承 private 修饰的。<br>2、但是子类可以通过父类中提供的 public 的 setter 和 getter 方法进行间接的访问和操作 private 的属性<br> 3、对于子类可以继承父类中的成员变量和成员方法，如果子类中出现了和父类同名的成员变量和成员方法时，父类的成员变量会被隐藏，父类的成员方法会被覆盖。需要使用父类的成员变量和方法时，就需要使用 super 关键字来进行引用。           （隐藏是针对成员变量和静态方法，覆盖是针对普通方法。）</p><p>4、当创建一个子类对象时，不仅会为该类的实例变量分配内存，也会为它从父类继承得到的所有实例变量分配内存，即使子类定义了与父类中同名的实例变量，也依然会为父类中定义的、被隐藏的变量分配内存。</p><p>5、如果子类中的实例变量被私有了 ，其父类中的同名实例变量没有被私有，那么子类对象就无法直接调用该变量，但可以通过先将对象变量强制向上转型为父类型，在通过该对象引用变量来访问那个实例变量，就会得到的是父类中的那个实例变量。                                                                                                                                                                                          (补充：什么是向上转型和向下转型？)</p><h2 id="42构造器"><a class="markdownIt-Anchor" href="#42构造器">#</a> 4.2 构造器</h2><p>1、子类不能继承获得父类的构造方法，但是可以通过 super 关键字来访问父类构造方法。</p><p>2、在一个构造器中调用另一个重载构造器使用 this 调用完成，在子类构造器中调用父类构造器使用 super 调用来完成。</p><p>3、super 和 this 的调用都必须是在第一句，否则会产生编译错误，this 和 super 只能存在一个。不能进行递归构造器调用，即多个构造器之间互相循环调用。</p><p>4、如果父类有无参构造时，所有构造方法（包含任意有参构造）自动默认都会访问父类中的空参构造方法。（自带 super ();）</p><p>5、因为继承的目的是子类获取和使用父类的属性和行为，所以子类初始化之前，一定要先完成父类数据的初始化。</p><p>6、在 Java 中，每个类都会默认继承 Object 超类，所以每一个构造方法的第一条默认语句都是 super ()</p><p>7、如果父类没有无参构造，反而有其他的有参构造方法时，子类继承父类后，子类必须显式的创建构造器，不论子类的构造器是否和父类构造器中参数类型是否一致，都必须在子类的构造器中显式的通过 super 关键字调用和父类构造器相应参数的构造方法，否则编译都通不过。</p><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">     System.out.println(age);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(age);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(<span class="number">10</span>); <span class="comment">//必须调用父类的有参构造</span></span><br><span class="line">     System.out.println(<span class="string">&quot;子类可以创建其他类型构造器，但是必须显式的用super调用父类构造器&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用 this 先调用子类中的构造方法，再间接调用父类中的有参构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendTest1</span>  </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">new</span> Student();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;父类有参构造&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(age);</span><br><span class="line">     System.out.println(<span class="string">&quot;子类有参构造&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>(<span class="number">10</span>); <span class="comment">//可以使用this先调用子类中的有参构造，从而间接调用父类中的有参构造</span></span><br><span class="line">     System.out.println(<span class="string">&quot;子类无参构造&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 this，执行顺序结果为：先调用了子类中无参构造，此无参构造会接着调用子类中的有参构造，又接着调用父类中的有参构造，此时首先执行完毕了父类有参构造，接着子类有参构造执行完毕，最后子类无参构造才执行完毕。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">父类有参构造</span><br><span class="line">子类有参构造</span><br><span class="line">子类无参构造</span><br></pre></td></tr></table></figure><p>以下这种是错误的：（因为当父类中没有无参构造器时，父类中没有这种类型的构造方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">     <span class="keyword">super</span>();</span><br><span class="line"> &#125; <span class="comment">//错误的，因为当父类中没有无参构造器时，父类中没有这种类型的构造方法</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(age);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name ,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">     System.out.println(name+age);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">     System.out.println(age);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下这种正确：（因为当父类中没有无参构造器时，子类中的构造方法的类型在父类中有）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"> <span class="comment">//因为当父类中没有无参构造器时，子类中的构造方法的类型在父类中有</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(age);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name ,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">     System.out.println(name+age);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">     System.out.println(age);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="comment">//因为当父类中没有无参构造器时，子类中的构造方法的类型在父类中有</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name ,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(name,age);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(age);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name ,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">     System.out.println(name+age);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">     System.out.println(age);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：当父类中没有无参构造器时，子类继承父类，子类中的构造器方法类型可以和父类中的构造器不同，但是必须每个构造器都显式的使用 super 关键字调用父类中的某个有参构造器，也可以使用 this 调用子类中的某个有参构造器，但这个有参构造器必须通过 super 访问父类中的有参构造器。</p><h2 id="43继承的执行顺序问题"><a class="markdownIt-Anchor" href="#43继承的执行顺序问题">#</a> 4.3 继承的执行顺序问题</h2><p>1、继承体系中的构造器执行顺序：</p><ul><li>当调用子类构造器实例化子类对象时，父类构造器总是在子类构造器之前执行。</li><li>创建任何对象总是从该类所在继承树最顶层类的构造器开始执行，然后依次向下执行，最后才执行本类的构造器。如果父类通过 this 调用了同类中的重载构造器，就会依次执行此父类的多个构造器。</li></ul><p>2、继承体系中的静态域执行顺序：</p><ul><li><p>当调用子类构造器实例化子类对象时，父类优先于子类进行加载到内存，所以会先执行父类中的静态域</p></li><li><p>从该类所在继承树最顶层类开始加载，并执行其静态域，依次向下执行，最后执行本类。</p></li><li><p>静态域优先于 main 方法，优先于构造器执行</p></li></ul><p>3、父类和子类中<strong>都有静态代码块和构造代码块</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2_Extends</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;主类静态块&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;静态代码块Fu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;构造代码块Fu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Fu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;构造方法Fu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;静态代码块Zi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;构造代码块Zi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;构造方法Zi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">主类静态块</span><br><span class="line">静态代码块Fu</span><br><span class="line">静态代码块Zi</span><br><span class="line">构造代码块Fu</span><br><span class="line">构造方法Fu</span><br><span class="line">构造代码块Zi</span><br><span class="line">构造方法Zi</span><br></pre></td></tr></table></figure><p>执行顺序分析：</p><p>1、主类 Test2_Extends 先加载到内存，静态域优先于 main 方法执行，先输出了主类静态块，其中的 main 方法入栈执行，main 方法中创建了子类对象<br> 2、子类对象创建过程中，父类和子类都加载到内存中，并且 Fu.class 优先于 Zi.class 加载，父类中的静态域先执行后，再执行子类中的静态域，此时会第一个输出：静态代码块 Fu，第二个输出：静态代码块 Zi<br>3、创建对象时进入子类的构造器，因为 Java 是分层初始化的，所以会先初始化父类再初始化子类，子类构造器会自动默认先执行父类的构造器，因为构造代码块优先于构造方法执行，所以此时就会先执行父类的构造代码块后，再执行父类的构造方法。所以第三个输出：构造代码块 Fu，第四个输出：构造方法 Fu<br>4、Fu 类初始化结束后，子类初始化，第五个输出的是：构造代码块 Zi，第六个输出：构造方法 Zi</p><h2 id="44继承破坏父类封装性问题"><a class="markdownIt-Anchor" href="#44继承破坏父类封装性问题">#</a> 4.4 继承破坏父类封装性问题</h2><p>1、继承严重破坏了父类的封装性，每个类都应该它内部信息和实现细节，而只暴露必要的方法给其它类使用。但在继承关系中，子类可以直接访问父类的成员变量（内部信息）和方法， 从而造成子类和父类的严重耦合。</p><p>2、父类的实现细节对其子类不再透明，从而导致子类可以恶意篡改父类的方法</p><p><strong>改进方法：</strong></p><ul><li>尽量隐藏父类的内部数据。</li><li>尽量把父类的所有成员变量都设置成 private 访问类型，不要让子类直接访问父类的成员变量</li><li>不要让子类随意访问、修改父类的方法</li><li>父类中那些仅为辅助其他的工具方法，应该使用 private 修饰，让子类无法访问方法；</li><li>如果父类中的方法需要被外部类调用，则必须以 public 修饰，但又不想让子类重写，就可以使用 final 修饰符。</li><li>如果希望父类的某个方法被子类重写，但不希望被其他类自由访问，则可以使用 protected 来修饰方法。</li><li>尽量不要在父类构造器中调用将要被子类重写的方法。</li></ul><p>查看下面例子说明在父类构造器中调用被子类重写的方法引发的错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> extend;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类构造器&quot;</span>);</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span>           <span class="comment">// ①号test()方法</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;将被子类重写的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">&quot;aa&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span>         <span class="comment">// ②号test()方法</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类test&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;子类重写父类的方法，&quot;</span></span><br><span class="line">            + <span class="string">&quot;其name字符串长度&quot;</span> + name.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 下面代码会引发空指针异常</span></span><br><span class="line">        Sub s = <span class="keyword">new</span> Sub();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">父类构造器</span><br><span class="line">子类test</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.NullPointerException</span><br></pre></td></tr></table></figure><p><strong>分析：</strong><br>当创建 Sub 对象时，先执行其父类构造器，如果父类构造器调用了被子类重写覆盖的方法，就会调用被子类重写后的②号 test () 方法，子类的 test 方法调用了子类的实例变量 name，父类直接调用的子类的 test 方法，此时子类还未初始化，还未调用子类构造器，实例变量 name 还未被指定初始值，仍然为默认值 null，所以引发了空指针异常。</p><h2 id="45何时适合用继承"><a class="markdownIt-Anchor" href="#45何时适合用继承">#</a> 4.5 何时适合用继承</h2><ul><li>子类需要额外增加属性，而不仅仅是属性值的改变。</li><li>子类需要增加自己独有的行为方式（包括增加新的方法或重写父类的方法）。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 继承 </tag>
            
            <tag> super关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法（Java实现）-详谈递归（迷宫回溯问题）</title>
      <link href="/2020/08/25/%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%B0%88%E9%80%92%E5%BD%92%EF%BC%88%E8%BF%B7%E5%AE%AB%E5%9B%9E%E6%BA%AF%E9%97%AE%E9%A2%98%EF%BC%89/"/>
      <url>/2020/08/25/%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%B0%88%E9%80%92%E5%BD%92%EF%BC%88%E8%BF%B7%E5%AE%AB%E5%9B%9E%E6%BA%AF%E9%97%AE%E9%A2%98%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="1-递归的概念"><a class="markdownIt-Anchor" href="#1-递归的概念">#</a> 1、递归的概念</h1><p>简单的说：递归就是方法自己调用自己，每次调用时传入不同的变量.<strong> 递归有助于编程者解决复杂的问题，</strong> 同时可以让代码变得简洁。</p><h1 id="2-递归调用的机制"><a class="markdownIt-Anchor" href="#2-递归调用的机制">#</a> 2、递归调用的机制</h1><h2 id="1打印问题"><a class="markdownIt-Anchor" href="#1打印问题">#</a> （1）打印问题</h2><p>看下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//通过打印问题，回顾递归调用机制</span></span><br><span class="line">test(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印问题. </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">test(n - <span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line">System.out.println(<span class="string">&quot;n=&quot;</span> + n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="number">2</span></span><br><span class="line">n=<span class="number">3</span></span><br><span class="line">n=<span class="number">4</span></span><br></pre></td></tr></table></figure><p>分析 JVM 内部运行机制：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200825101935631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>一开始，最先运行主方法，在栈内开辟空间而后执行 test (4) 重新开一段栈内空间，当程序执行到一个方法时，就会开辟一个独立的空间（栈），直到 n=2，这时不再执行 if 语句里面的 test 方法也就不再开辟独立的空间，这时就开始执行 if 语句外面的 System.out.println (“n=” + n); 语句，打印 n=2，执行完后这个空间被垃圾回收机制回收，然后执行 n=3 的 test 方法中的 System.out.println (“n=” + n); 语句，打印 n=3，依次回归执行，直到最后退出程序<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200825103253739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200825103306622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>改一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//通过打印问题，回顾递归调用机制</span></span><br><span class="line">test(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印问题. </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">test(n - <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;n=&quot;</span> + n);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>分析：只有最上面的 n=2 的栈没有进入 if 语句中而是进了 else 语句中，所以打印了 n=2，而后面的 3 和 4 进入了 if 语句中就不会再执行 else 中的打印语句。</p><h2 id="2阶乘问题"><a class="markdownIt-Anchor" href="#2阶乘问题">#</a> （2）阶乘问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//通过打印问题，回顾递归调用机制</span></span><br><span class="line"><span class="keyword">int</span> res = factorial(<span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;res=&quot;</span> + res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//阶乘问题</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> factorial(n - <span class="number">1</span>) * n; <span class="comment">// 1 * 2 * 3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res=<span class="number">6</span></span><br></pre></td></tr></table></figure><p>执行过程：</p><ol><li>factorial(3 - 1) * 3  ——&gt; factorial(2) * 3</li><li>factorial(2 - 1) * 2*3 ——&gt; factorial(1) * 2 *3</li><li>1 * 2 * 3 ——&gt; 6</li></ol><p><strong>递归遵循的规则：</strong></p><ol><li>执行一个方法时，就创建一个新的受保护的独立空间 (栈空间)</li><li>方法的局部变量是独立的，不会相互影响</li><li>如果方法中使用的是引用类型变量 (比如数组)，就会共享该引用类型的数据.</li><li>递归必须向退出递归的条件逼近，否则就是无限递归，出现 StackOverflowError，死龟了：)</li><li>当一个方法执行完毕，或者遇到 return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕。</li></ol><h1 id="3-迷宫回溯问题"><a class="markdownIt-Anchor" href="#3-迷宫回溯问题">#</a> 3、迷宫回溯问题</h1><p>以一个 M×N 的长方阵表示迷宫，0 和 1 分别表示迷宫中的通路和障碍。设计程序，对任意设定的迷宫，求出从入口到出口的所有通路。<br>  下面我们来详细讲一下迷宫问题的回溯算法。<br>(入口) 0 0 1 0 0 0 1 0<br>   0 0 1 0 0 0 1 0<br>   0 0 1 0 1 1 0 1<br>   0 1 1 1 0 0 1 0<br>   0 0 0 1 0 0 0 0<br>   0 1 0 0 0 1 0 1<br>   0 1 1 1 1 0 0 1<br>   1 1 0 0 0 1 0 1<br>   1 1 0 0 0 0 0 0 (出口)<br>  该图是一个迷宫的图。1 代表是墙不能走，0 是可以走的路线。只能往上下左右走，直到从左上角到右下角出口。<br>  做法是用一个二维数组来定义迷宫的初始状态，然后从左上角开始，不停的去试探所有可行的路线，碰到 1 就结束本次路径，然后探索其他的方向，当然我们要标记一下已经走的路线，不能反复的在两个可行的格子之间来回走。直到走到出口为止，算找到了一个正确路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiGong2</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> maxRow,maxLine;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 获取行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入行数：&quot;</span>);</span><br><span class="line">        maxRow = scanner.nextInt();</span><br><span class="line">        <span class="comment">// 获取列</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入列数：&quot;</span>);</span><br><span class="line">        maxLine = scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入地图：&quot;</span>);</span><br><span class="line">        <span class="comment">//输入地图</span></span><br><span class="line">       <span class="keyword">int</span> [][] array = <span class="keyword">new</span> <span class="keyword">int</span> [maxRow][maxLine];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxRow; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; maxLine; j++)&#123;</span><br><span class="line">                array[i][j] = scanner.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记录起始时间</span></span><br><span class="line">        Long start = System.currentTimeMillis();  </span><br><span class="line">        <span class="comment">//找出路</span></span><br><span class="line">        <span class="keyword">new</span> MiGong2().check(<span class="number">0</span>, <span class="number">0</span>, array, maxRow, maxLine);</span><br><span class="line">        <span class="comment">//记录结束时间</span></span><br><span class="line">        Long end = System.currentTimeMillis();  </span><br><span class="line">        System.out.println(<span class="string">&quot;耗时：&quot;</span> + (end-start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 制定走的规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxRow</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxLine</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span>[][] array, <span class="keyword">int</span> maxRow, <span class="keyword">int</span> maxLine)</span>    </span>&#123;</span><br><span class="line">        <span class="comment">// 递归出口(如果到达右下角出口)  </span></span><br><span class="line">        <span class="keyword">if</span> (i == maxRow - <span class="number">1</span> &amp;&amp; j == maxLine - <span class="number">1</span>) &#123;  </span><br><span class="line">            print(array, maxRow, maxLine);</span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//向右走  </span></span><br><span class="line">        <span class="keyword">if</span> (canMove(i, j, i, j + <span class="number">1</span>, array, maxRow, maxLine)) &#123;</span><br><span class="line">            <span class="comment">// 已走过的点置标志位5</span></span><br><span class="line">            array[i][j] = <span class="number">5</span>;  </span><br><span class="line">            <span class="comment">// 从下一个点继续寻路</span></span><br><span class="line">            check(i, j + <span class="number">1</span>, array, maxRow, maxLine);</span><br><span class="line">            <span class="comment">// 均不可行，则恢复现场</span></span><br><span class="line">            array[i][j] = <span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//向左走  </span></span><br><span class="line">        <span class="keyword">if</span> (canMove(i, j, i, j - <span class="number">1</span>, array, maxRow, maxLine)) &#123;</span><br><span class="line">            <span class="comment">// 标记为已走</span></span><br><span class="line">            array[i][j] = <span class="number">5</span>;</span><br><span class="line">            <span class="comment">// 递归调用</span></span><br><span class="line">            check(i, j - <span class="number">1</span>, array, maxRow, maxLine);</span><br><span class="line">            array[i][j] = <span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//向下走  </span></span><br><span class="line">        <span class="keyword">if</span> (canMove(i, j, i + <span class="number">1</span>, j, array, maxRow, maxLine)) &#123;  </span><br><span class="line">            array[i][j] = <span class="number">5</span>;  </span><br><span class="line">            check(i + <span class="number">1</span>, j, array, maxRow, maxLine);  </span><br><span class="line">            array[i][j] = <span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//向上走  </span></span><br><span class="line">        <span class="keyword">if</span> (canMove(i, j, i - <span class="number">1</span>, j, array, maxRow, maxLine)) &#123;  </span><br><span class="line">            array[i][j] = <span class="number">5</span>;  </span><br><span class="line">            check(i - <span class="number">1</span>, j, array,maxRow, maxLine);  </span><br><span class="line">            array[i][j] = <span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line"> &#125;   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断[i,j]--&gt;[targetI,targetJ]是否可行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetI</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetJ</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxRow</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxLine</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean 可否通过</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">canMove</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> targetI, <span class="keyword">int</span> targetJ, <span class="keyword">int</span>[][] array, <span class="keyword">int</span> maxRow, <span class="keyword">int</span> maxLine)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;从第&quot; + (i + 1) + &quot;行第&quot; + (j + 1) + &quot;列，走到第&quot; + (targetI + 1) + &quot;行第&quot; + (targetJ + 1) + &quot;列&quot;);  </span></span><br><span class="line">        <span class="keyword">if</span> (targetI &lt; <span class="number">0</span> || targetJ &lt; <span class="number">0</span> || targetI &gt;= maxRow || targetJ &gt;= maxLine) &#123;  </span><br><span class="line"><span class="comment">//            System.out.println(&quot;到达最左边或最右边，失败了&quot;);  </span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (array[targetI][targetJ] == <span class="number">1</span>) &#123;  </span><br><span class="line"><span class="comment">//            System.out.println(&quot;目标是墙，失败了&quot;);  </span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//避免在两个空格间来回走  </span></span><br><span class="line">        <span class="keyword">if</span> (array[targetI][targetJ] == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;来回走，失败了&quot;);  </span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印可行路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxRow</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxLine</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> [][] array, <span class="keyword">int</span> maxRow, <span class="keyword">int</span> maxLine)</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;得到一个解：&quot;</span>);  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxRow; i++) &#123;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; maxLine; j++) &#123;  </span><br><span class="line">                System.out.print(array[i][j] + <span class="string">&quot; &quot;</span>); </span><br><span class="line">            &#125;  </span><br><span class="line">            System.out.println();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">请输入行数：</span><br><span class="line"><span class="number">9</span></span><br><span class="line">请输入列数：</span><br><span class="line"><span class="number">8</span></span><br><span class="line">请输入地图：</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">得到一个解：</span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line">得到一个解：</span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line">得到一个解：</span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line">得到一个解：</span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line">得到一个解：</span><br><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line">得到一个解：</span><br><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line">得到一个解：</span><br><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line">得到一个解：</span><br><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line">耗时：<span class="number">5</span>ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 迷宫回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习-多态性</title>
      <link href="/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E6%80%81%E6%80%A7/"/>
      <url>/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E6%80%81%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="1-面向对象三特征之一多态性"><a class="markdownIt-Anchor" href="#1-面向对象三特征之一多态性">#</a> 1、面向对象三特征之一：多态性</h1><p>1、多态性，是面向对象的最重要的概念，在 java 中有两种体现:</p><ol><li>方法的重载（overload）和重写（override）</li><li>对象的多态性 ------ 可以直接应用在抽象类和接口上</li></ol><p>2、Java 引用变量有两个类型：编译时的类型和运行时的类型：</p><ul><li>编译时类型由声明该变量时使用的类型决定。</li><li>运行时类型由实际赋给该变量的对象决定。</li></ul><p>若编译时类型和运行时类型不一致，就出现多态（Polymorphism）------- 这个多态就是对象的多态</p><p><strong>子类对象的实例化过程：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200812095406924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="2-对象的多态"><a class="markdownIt-Anchor" href="#2-对象的多态">#</a> 2、对象的多态</h1><h2 id="21在java中子类的对象可以替代父类的的对象使用"><a class="markdownIt-Anchor" href="#21在java中子类的对象可以替代父类的的对象使用">#</a> 2.1 在 Java 中，子类的对象可以替代父类的的对象使用：</h2><ul><li>一个变量只能有一种确定的数据类型</li><li>一个引用类型变量可能指向（引用）多种不同类型的对象</li></ul><p>Person  p = new Student();<br>Person  e = new Student ();//Person 类型的变量 e，指向 Student 类型的对象<br>子类可看做是特殊的父类，所以<strong>父类类型的引用可以指向子类的对象：</strong> 向上转型（upcasting）（把子类的对象给父类类型的变量引用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure><p>问：上面代码的当前这个引用对象 p 引用的是哪个类实例对象？答案是：Student 类实例对象<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200812103553841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="22成员变量属性的调用"><a class="markdownIt-Anchor" href="#22成员变量属性的调用">#</a> 2.2 成员变量（属性）的调用：</h2><p>一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就不能再访问子类中添加拓展的成员变量和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student m = <span class="keyword">new</span> Student();</span><br><span class="line">m.school = <span class="string">&quot;csdn&quot;</span>;<span class="comment">//合法，Student类中有school成员变量</span></span><br><span class="line">Person e = <span class="keyword">new</span> Student();</span><br><span class="line">e.school = <span class="string">&quot;csdn&quot;</span>;<span class="comment">//非法，Person类没有school成员变量</span></span><br></pre></td></tr></table></figure><p><strong>成员变量是在编译时确定的，编译时 e 为 Person 类型，没有 school 成员变量，因而编译出错。</strong></p><h2 id="23虚拟方法的调用子类中含有父类的重写方法"><a class="markdownIt-Anchor" href="#23虚拟方法的调用子类中含有父类的重写方法">#</a> 2.3 虚拟方法的调用（子类中含有父类的重写方法）：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;以下是Person类的showInfo方法：&quot;</span>);</span><br><span class="line">System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">System.out.println(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> String school;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;以下是Student类的showInfo方法：&quot;</span>);</span><br><span class="line">System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">System.out.println(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正常的方法调用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.showInfo();</span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">s.showInfo();</span><br></pre></td></tr></table></figure><p><strong>虚拟方法调用（多态情况下）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person e = <span class="keyword">new</span> Student();</span><br><span class="line">e.showInfo(); <span class="comment">//调用的是Student类的showInfo()方法</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200812113006375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>动态绑定：</strong><br>方法的调用是在运行时确定的，编译时 e 为 Person 类型，但运行时 e 为 Student 类型，所以调用的是 Student 类的 showInfo () 方法</p><h1 id="3-小结"><a class="markdownIt-Anchor" href="#3-小结">#</a> 3、小结</h1><p><strong>前提：</strong></p><ul><li>需要存在继承或者实现关系</li><li>需要覆盖操作</li></ul><p><strong>成员方法：</strong></p><ul><li>编译时：要查看引用变量所属的类中是否有所调用的方法<br>运行时：调用实际对象所属的类中的重写方法</li></ul><p><strong>成员变量：</strong></p><ul><li>不具备多态性，只看引用变量所属的类</li></ul>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 多态性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（Java实现）-单链表常见面试题（新浪、百度、腾讯）</title>
      <link href="/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E5%8D%95%E9%93%BE%E8%A1%A8%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E6%96%B0%E6%B5%AA%E3%80%81%E7%99%BE%E5%BA%A6%E3%80%81%E8%85%BE%E8%AE%AF%EF%BC%89/"/>
      <url>/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E5%8D%95%E9%93%BE%E8%A1%A8%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E6%96%B0%E6%B5%AA%E3%80%81%E7%99%BE%E5%BA%A6%E3%80%81%E8%85%BE%E8%AE%AF%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="1、求单链表中有效节点个数"><a href="#1、求单链表中有效节点个数" class="headerlink" title="1、求单链表中有效节点个数"></a>1、求单链表中有效节点个数</h1><p><strong>思路：</strong> 遍历链表获取单链表的节点的个数（如果是带头节点的链表，不能统计头节点）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(LinkNode head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head.next==<span class="keyword">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//空链表</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> length=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//定义一个辅助的变量，这里我们没有统计头节点</span></span><br><span class="line">    LinkNode cur = head.next;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="keyword">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        length++;</span><br><span class="line">        cur = cur.next;<span class="comment">//继续向下遍历</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、查找单链表中的倒数第k个节点（新浪面试题）"><a href="#2、查找单链表中的倒数第k个节点（新浪面试题）" class="headerlink" title="2、查找单链表中的倒数第k个节点（新浪面试题）"></a>2、查找单链表中的倒数第k个节点（新浪面试题）</h1><p><strong>思路：</strong></p><ol><li>编写一个方法，接收head节点，同时接收一个index值（即k的值） </li><li>先把链表从头到尾遍历，得到链表的总长度，用上一题的getLength（）方法</li><li>得到长度size后，我们从链表的第一个开始遍历（size-index）个，就可以得到</li><li>如果找到了，返回该节点，否则返回null</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LinkNode <span class="title">findLastIndexNode</span><span class="params">(LinkNode head,<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断如果链表为空，返回null</span></span><br><span class="line">    <span class="keyword">if</span>(head.next == <span class="keyword">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一遍遍历得到长度</span></span><br><span class="line">    <span class="keyword">int</span> size = getLength(head);</span><br><span class="line">    <span class="comment">//第二次遍历size-index位置，就是倒数的第K个节点</span></span><br><span class="line">    <span class="comment">//先做一个index校验</span></span><br><span class="line">    <span class="keyword">if</span>(index &lt;= <span class="number">0</span> || index &gt; size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个辅助变量cur，for循环定位到倒数的index</span></span><br><span class="line">    LinkNode cur = head.next;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size-index;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cur = cur.next;<span class="comment">//向后遍历</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、单链表的反转-腾讯面试题）"><a href="#3、单链表的反转-腾讯面试题）" class="headerlink" title="3、单链表的反转(腾讯面试题）"></a>3、单链表的反转(腾讯面试题）</h1><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081416344023.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814163450550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>思路：</strong></p><ol><li>先定义一个新的头节点reverseHead = new LinkNode();</li><li>从头到尾遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表头reverseHead.next上 </li><li>原来的链表头head.next = reverseHead.next</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reversetList</span><span class="params">(LinkNode head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果当前链表为空，或者只有一个节点，无需反转，直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个辅助变量，帮助我们遍历原来的链表</span></span><br><span class="line">    LinkNode cur = head.next;</span><br><span class="line">    StudentLinkNode temp = <span class="keyword">null</span>;<span class="comment">//定义一个空的temp节点</span></span><br><span class="line">    LinkNode reverseHead = <span class="keyword">new</span> LinkNode();</span><br><span class="line">    <span class="comment">//遍历原来的链表，每遍历一个节点，就将其取出并放在新的reverseHead的后面第一个节点的位置</span></span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="keyword">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = cur.next;<span class="comment">//空的temp节点暂时储存当前节点cur的下一个节点</span></span><br><span class="line">        cur.next = reverseHead.next;<span class="comment">//将cur的下一个节点指向新的链表的最前端</span></span><br><span class="line">        reverseHead.next = cur;<span class="comment">//将cur连接到新的链表上</span></span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将head.next指向reverseHead,next实现单链表的反转</span></span><br><span class="line">    head.next = reverseHead.next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4、从尾到头打印单链表"><a href="#4、从尾到头打印单链表" class="headerlink" title="4、从尾到头打印单链表"></a>4、从尾到头打印单链表</h1><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814172922544.png#pic_center" alt="在这里插入图片描述"><br><strong>思路：</strong></p><ol><li>这道题目要求的是逆序打印单链表 </li><li>方式一：先将单链表进行反转操作，然后进行遍历即可，但是这样做的问题是会破坏原来的单链表的结构（不建议）</li><li>方式二：可以利用<strong>栈</strong>这个数据结构，将<strong>各个节点压入到栈中</strong>，然后利用栈的<strong>先进后出</strong>的特点，就实现了逆序打印的效果。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reversePrint</span><span class="params">(LinkNode head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head.next == <span class="keyword">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;<span class="comment">//空链表，不能打印</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建一个栈，将各个节点压入栈中</span></span><br><span class="line">    Stack&lt;LinkNode&gt; Stack = <span class="keyword">new</span> Stack&lt;LinkNode&gt;();</span><br><span class="line">    LinkNode cur = head.next;</span><br><span class="line">    <span class="comment">//将链表的所有节点压入栈中</span></span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="keyword">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        stack.push(cur);</span><br><span class="line">        cur = cur.next;<span class="comment">//cur后移，这样就可以压入下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将栈中的节点进行打印，pop出栈</span></span><br><span class="line">    <span class="keyword">while</span>(stack.size()&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        System,out.println(stack.pop());<span class="comment">//stack的特点就是先进的后出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5、合并两个有序的单链表，合并之后的链表依然有序"><a href="#5、合并两个有序的单链表，合并之后的链表依然有序" class="headerlink" title="5、合并两个有序的单链表，合并之后的链表依然有序"></a>5、合并两个有序的单链表，合并之后的链表依然有序</h1><p><strong>思路：</strong></p><ol><li>cur1 和cur2 分别是两条有序链表的辅助引用（指针）方便两个链表的遍历，result则为合并之后的结果链表，tail为结果链表的最后一个节点，方便尾插</li><li>cur1 和 cur2同时往后走，两个引用所指的数分别比较，拿出来的节点尾插在result链表中<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814211820459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LinkNode <span class="title">mergeList</span><span class="params">(LinkNode node1,LinkNode node2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//定义一个辅助变量cur1，帮助我们遍历第一条链表</span></span><br><span class="line">    LinkNode cur1 = node1;</span><br><span class="line">    <span class="comment">//定义一个辅助变量cur2，帮助我们遍历第二条链表</span></span><br><span class="line">    LinkNode cur2 = node2;</span><br><span class="line">    LinkNode result = <span class="keyword">new</span> LinkNode();<span class="comment">//定义节点temp为合并后产生的新链表的头节点</span></span><br><span class="line">    <span class="comment">//result 则为合并之后的结果链表头节点，tail为结果链表的最后一个节点，方便尾插</span></span><br><span class="line">    result = <span class="keyword">null</span>;</span><br><span class="line">    ListNode tail = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//定义一个空的temp节点</span></span><br><span class="line">    ListNode next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span>((cur1 != <span class="keyword">null</span>)  &amp;&amp;  (cur2 != <span class="keyword">null</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur1.data &lt;= cur2.data)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(result != <span class="keyword">null</span>)<span class="comment">//当结果链表不为空时</span></span><br><span class="line">            &#123;   </span><br><span class="line">                temp = cur1.next;  <span class="comment">// temp节点保存链表1的下一个节点，让循环可以继续</span></span><br><span class="line">                tail.next = cur1;   <span class="comment">// 插入过程</span></span><br><span class="line">                cur1.next = <span class="keyword">null</span>;</span><br><span class="line">                tail = cur1;  <span class="comment">//保存结果链表的最后一个节点</span></span><br><span class="line">                cur1 = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;   <span class="comment">// 结果链表为空时</span></span><br><span class="line">                temp = cur1.next;</span><br><span class="line">                result = cur1;</span><br><span class="line">                cur1.next = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//保存新的最后一个节点</span></span><br><span class="line">                tail = cur1;</span><br><span class="line">                cur1 = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(result != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = cur2.next;</span><br><span class="line">                tail.next = cur2;</span><br><span class="line">                cur2.next = <span class="keyword">null</span>;</span><br><span class="line">                tail = cur2;</span><br><span class="line">                cur2 = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                temp = cur2.next;</span><br><span class="line">                result = cur2;</span><br><span class="line">                cur2.next = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//保存新的最后一个节点</span></span><br><span class="line">                tail = cur2;</span><br><span class="line">                cur2 = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其中一个链表为空之后</span></span><br><span class="line">    <span class="comment">//第一条链表的cur1走完以后，第二条链表的cur2还没走完就直接插到结果链表的尾部</span></span><br><span class="line">    <span class="keyword">if</span>(cur1 == <span class="keyword">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tail.next = cur2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二条链表的cur2走完以后，第一条链表的cur1还没走完就直接插到结果链表的尾部</span></span><br><span class="line">    <span class="keyword">if</span>(cur2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">        tail.next = cur1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构(Java实现) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 单链表 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（Java实现）-单链表（单链表实现学生成绩管理系统）</title>
      <link href="/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E5%8D%95%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%89/"/>
      <url>/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E5%8D%95%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="1、链表"><a href="#1、链表" class="headerlink" title="1、链表"></a>1、链表</h1><h2 id="1-1链表的基本介绍"><a href="#1-1链表的基本介绍" class="headerlink" title="1.1链表的基本介绍"></a>1.1链表的基本介绍</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814092724497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>链表是以节点的方式来存储，是链式存储，从图中发现，链表的各个节点不一定是连续存储</li><li>每个节点包含data域：存储数据，next域：指向下一个节点 链表分带头节点</li><li>链表和没有头节点的链表，根据实际的需求来确定</li></ul><p><strong>没有头节点单链表：</strong> 也就是phead只是一个引用（指针），指向链表的第一个节点<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814103326504.png#pic_center" alt="在这里插入图片描述"><br><strong>有头节点单链表：</strong> phead是头节点只不过头节点的data不保存信息<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814103521892.png#pic_center" alt="在这里插入图片描述"><br><strong>基本概念：</strong> 链表的每个元素称为一个节点，每个节点都可以存储在内存中的不同的位置，为了表示每个元素与后继元素的逻辑关系，以便构成“一个节点链着一个节点”的链式存储结构，除了存储元素本身的信息外，还要存储其直接后继信息，因此，每个节点都包含两个部分，第一部分称为链表的数据区域，用于存储元素本身的数据信息，这里用data表示，它不局限于一个成员数据，也可是多个成员数据，第二部分是一个结构体指针，称为链表的<strong>指针域</strong>  ，用于存储其直接后继的节点信息，这里用next表示，next的值实际上就是<strong>下一个节点的地址</strong> ，当前节点为末节点时，next的值设为空指针</p><h2 id="1-2链表和数组的比较"><a href="#1-2链表和数组的比较" class="headerlink" title="1.2链表和数组的比较"></a>1.2链表和数组的比较</h2><p><strong>数组：</strong> 数组（包括结构体数组）的实质是一种线性表的顺序表示方式，它的优点是使用直观，便于快速、随机地存取线性表中的任一元素，但缺点是对其进行 插入和删除操作时需要移动大量的数组元素，同时由于数组属于静态内存分配，定义数组时必须指定数组的长度，程序一旦运行，其长度就不能再改变，实际使用个数不能超过数组元素最大长度的限制，否则就会发生下标越界的错误，低于最大长度时又会造成系统资源的浪费，因此空间效率差。</p><p><strong>链表：</strong> 链表实际上是线性表的链式存储结构，与数组不同的是，它是用一组任意的存储单元来存储线性表中的数据，存储单元不一定是连续的，且链表的长度不是固定的，链表数据的这一特点使其可以非常的方便地实现节点的插入和删除操作。链表的特性，使其在某些操作上比数组更加高效。例如当进行插入和删除操作时，链表操作的时间复杂度仅为O(1)。另外，因为链表在内存中不是连续存储的，所以可以充分利用内存中的碎片空间。除此之外，链表还是很多算法的基础，最常见的哈希表就是基于链表来实现的。</p><h1 id="2、单向链表的具体实现"><a href="#2、单向链表的具体实现" class="headerlink" title="2、单向链表的具体实现"></a>2、单向链表的具体实现</h1><p>本节将具体介绍单向链表（带头结点）的结构和各种操作的具体实现</p><h2 id="2-1单链表（带头节点）逻辑结构示意图如下"><a href="#2-1单链表（带头节点）逻辑结构示意图如下" class="headerlink" title="2.1单链表（带头节点）逻辑结构示意图如下"></a>2.1单链表（带头节点）逻辑结构示意图如下</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200814095145397.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2-2单链表的应用实例（单链表实现学生成绩管理系统）"><a href="#2-2单链表的应用实例（单链表实现学生成绩管理系统）" class="headerlink" title="2.2单链表的应用实例（单链表实现学生成绩管理系统）"></a>2.2单链表的应用实例（单链表实现学生成绩管理系统）</h2><p>为了方便对链表各项操作的理解，把链表应用到具体的实例中：用带头节点的单链表实现学生成绩管理系统。对学生的成绩信息实现增删改查的操作，具体实现目标如下：</p><ol><li>添加学生成绩信息 </li><li>根据学号将学生信息插入到指定位置 </li><li>显示所有学生的信息 </li><li>删除指定学生成绩信息 </li><li>修改指定学生成绩信息</li><li>查询当前链表中有多少为同学 </li><li>查询指定分数的学生个数，并输出查询的学生信息 </li><li>退出程序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhukun.LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentLinkNode</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> stuno;<span class="comment">//学生学号</span></span><br><span class="line">    <span class="keyword">public</span> String name;<span class="comment">//学生姓名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> score;<span class="comment">//学生分数</span></span><br><span class="line">    <span class="keyword">public</span>  StudentLinkNode next;<span class="comment">//指向下一个结点的指针</span></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentLinkNode</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentLinkNode</span><span class="params">(<span class="keyword">int</span> stuno,String name,<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stuno = stuno;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;学号：&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.stuno = scanner.nextInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = scanner.next();</span><br><span class="line">        System.out.print(<span class="string">&quot;分数：&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.score = scanner.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//为了显示方法，重写toString方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学号:    &quot;</span>+stuno+<span class="string">&quot;    &quot;</span>+<span class="string">&quot;姓名&quot;</span>+name+<span class="string">&quot;    &quot;</span>+<span class="string">&quot;分数&quot;</span>+score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span></span>&#123;</span><br><span class="line">    <span class="comment">//先初始化一个头节点，头节点不要动，不存放具体的数据</span></span><br><span class="line">    <span class="keyword">private</span> StudentLinkNode head = <span class="keyword">new</span> StudentLinkNode(<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加结点到单向链表</span></span><br><span class="line">    <span class="comment">//当不考虑编号顺序时</span></span><br><span class="line">    <span class="comment">//1、找到当前链表的最后结节点</span></span><br><span class="line">    <span class="comment">//2、将最后这个节点的next 指向 新的结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(StudentLinkNode stuNode)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//因为head节点不能动，因此我们需要一个辅助遍历的节点  temp</span></span><br><span class="line">        StudentLinkNode temp = head;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//找到链表的最后的节点</span></span><br><span class="line">            <span class="keyword">if</span>(temp.next == <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//找到</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果遍历的当前结点不是尾结点，将temp节点向后移动</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当退出while循环时，表示temp就指向了链表的尾节点</span></span><br><span class="line">        temp.next = stuNode;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第二种添加方式，在添加学生时根据学号将学生插入到指定位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBystuno</span><span class="params">(StudentLinkNode stuNode)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//因为头节点不能动，因此我们仍然通过一个辅助指针(变量)来帮助找到添加的位置</span></span><br><span class="line">        <span class="comment">//因为是单链表，我们找的temp是位于添加位置的前一个节点，否则插入不了</span></span><br><span class="line">        StudentLinkNode temp = head;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//flag标志添加的学号是否存在，默认为false</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.next == <span class="keyword">null</span>) <span class="comment">//说明temp已经在链表的最后</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.next.stuno &gt; stuNode.stuno)<span class="comment">//位置找到，就在temp的后面插入</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(temp.next.stuno == stuNode.stuno)<span class="comment">//说明想要添加的</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;<span class="comment">//说明编号存在    </span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;<span class="comment">//后移    </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断flag的值</span></span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        &#123;   <span class="comment">//不能添加，说明编号存在</span></span><br><span class="line">            System.out.println(<span class="string">&quot;准备添加的学生的学号:&quot;</span>+stuNode.stuno+<span class="string">&quot;已经存在不能添加了&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//插入到链表中，temp的后面</span></span><br><span class="line">            stuNode.next = temp.next;</span><br><span class="line">            temp.next = stuNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showlist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为头节点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class="line">        StudentLinkNode temp = head.next;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断是否到链表最后</span></span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出节点的信息</span></span><br><span class="line">            System.out.print(temp);<span class="comment">//前面StudentLinkNode类中已经重写toString方法</span></span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="comment">//将temp后移</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回链表中共有多少个学生的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">len</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为头节点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class="line">        StudentLinkNode temp = head.next;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断是否到链表最后</span></span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出节点的信息</span></span><br><span class="line">            count++;</span><br><span class="line">            <span class="comment">//将temp后移</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除结点：根据学生学号删除指定学生节点</span></span><br><span class="line">    <span class="comment">//1、head不能动，因此我们需要一个temp辅助节点找到待删除节点的前一个节点</span></span><br><span class="line">    <span class="comment">//2、说明我们在比较时，是temp.next.stuno和需要删除的节点的stuno比较</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> stuno)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        StudentLinkNode temp = head;</span><br><span class="line">        <span class="keyword">boolean</span> flag =<span class="keyword">false</span>;<span class="comment">//标志是否找到待删除的节点</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.next == <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//已经到链表的最后</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.next.stuno == stuno)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//找到待删除的节点的前一个节点temp</span></span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;<span class="comment">//temp后移，遍历</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断flag</span></span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        &#123;<span class="comment">//找到</span></span><br><span class="line">        <span class="comment">//可以删除</span></span><br><span class="line">            temp.next = temp.next.next;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;学号&quot;</span>+stuno+<span class="string">&quot;的学生不存在&quot;</span>);</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修改节点信息，根据stuno 编号来修改</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(StudentLinkNode stuNode)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到需要修改的节点，根据stuno编号</span></span><br><span class="line">        <span class="comment">//定义一个辅助变量</span></span><br><span class="line">        StudentLinkNode temp = head.next;</span><br><span class="line">        <span class="keyword">boolean</span> flag =<span class="keyword">false</span>;<span class="comment">//表示是否找到该节点</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//已经遍历完链表</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.stuno == stuNode.stuno)<span class="comment">//找到</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据flag判断是否找到要修改的节点</span></span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            temp.name = stuNode.name;</span><br><span class="line">            temp.score = stuNode.score;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到学号为&quot;</span>+stuNode.stuno+<span class="string">&quot;的学生&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询指定分数的学生个数，并输出查询的学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getbyScore</span><span class="params">(<span class="keyword">int</span> score)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        StudentLinkNode temp = head;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;分数为&quot;</span>+score+<span class="string">&quot;的学生有：&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.score == score)</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(<span class="string">&quot;学号：&quot;</span>+temp.stuno+<span class="string">&quot;姓名：&quot;</span>+temp.name);</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;共上面&quot;</span>+count+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LinkedList  list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        <span class="keyword">int</span> n;<span class="comment">//接收用户输入</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//输出一个菜单</span></span><br><span class="line">        <span class="keyword">while</span>(loop)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;|-----欢迎来到学生成绩管理系统-----|&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;1、添加学生成绩信息&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;2、根据学号将学生信息插入到指定位置&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;3、显示所有学生的信息&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;4、删除指定学生成绩信息&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;5、修改指定学生成绩信息&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;6、查询当前链表中有多少为同学&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;7、查询指定分数的学生个数，并输出查询的学生信息&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;8、退出程序&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你的选择:&quot;</span>);</span><br><span class="line">            n = scanner.nextInt();</span><br><span class="line">            <span class="keyword">switch</span>(n)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入学生信息&quot;</span>);</span><br><span class="line">                StudentLinkNode s1=<span class="keyword">new</span> StudentLinkNode();</span><br><span class="line">                s1.setInfo();</span><br><span class="line">                list.add(s1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入学生信息&quot;</span>);</span><br><span class="line">                StudentLinkNode s2=<span class="keyword">new</span> StudentLinkNode( );</span><br><span class="line">                s2.setInfo();</span><br><span class="line">                list.addBystuno(s2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                list.showlist();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                System.out.print(<span class="string">&quot;请输入你要删除的学生学号&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> stuno = scanner.nextInt();</span><br><span class="line">                list.del(stuno);</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入你要修改的学生的学号：&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> sno = scanner.nextInt();</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入修改后的姓名为：&quot;</span>);</span><br><span class="line">                String  sname = scanner.next();</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入修改后的分数为：&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> sco = scanner.nextInt();</span><br><span class="line">                StudentLinkNode s3 = <span class="keyword">new</span> StudentLinkNode(sno,sname,sco);</span><br><span class="line">                list.update(s3);</span><br><span class="line">                System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">int</span> num = list.len();</span><br><span class="line">                System.out.println(<span class="string">&quot;当前链表中共记录了&quot;</span>+num+<span class="string">&quot;位学生成绩信息&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入你要查询的分数:&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> sco2 = scanner.nextInt();</span><br><span class="line">                list.getbyScore(sco2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                scanner.close();</span><br><span class="line">                loop = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构(Java实现) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 单链表 </tag>
            
            <tag> 学生成绩管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（Java实现）-详谈队列</title>
      <link href="/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%B0%88%E9%98%9F%E5%88%97/"/>
      <url>/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%B0%88%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="1、队列介绍"><a href="#1、队列介绍" class="headerlink" title="1、队列介绍"></a>1、队列介绍</h1><ul><li>队列是一个有序列表，可以用<strong>数组（顺序存储）</strong> 或是 <strong>链表（链式存储）</strong> 来实现</li><li>遵循先入先出（<strong>从队尾进，队首出</strong>）的原则。即：先存入队列的数据，要先取出，后存入的要后取出。</li></ul><h1 id="2、队列的顺序存储（数组实现）"><a href="#2、队列的顺序存储（数组实现）" class="headerlink" title="2、队列的顺序存储（数组实现）"></a>2、队列的顺序存储（数组实现）</h1><p>队列本身是<strong>有序列表</strong>，若使用数组的结构来存储队列的数据，则队列数组的声明如下图, 其中 maxSize 是该队列的最大容量。 因为队列的输出、输入是分别从前后端来处理，因此需要两个<strong>变量 front及 rear</strong>分别记录队列<strong>前后端的下标</strong>，front 会随着数据输出而改变，而 rear则是随着数据输入而改变。</p><p>使用数组模拟队列示意图：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081020520374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="2-1队列的相关概念"><a href="#2-1队列的相关概念" class="headerlink" title="2.1队列的相关概念"></a>2.1队列的相关概念</h2><ol><li>队头与队尾：允许元素插入的一端称为队尾，允许元素删除的一端称为队头。 </li><li>入队：队列的插入操作</li><li>出队：队列的删除操作</li></ol><p>下面用两张图来理解入队和出队：<br>例如我们有一个存储整型元素的队列，我们依次入队：{1，2，3}：<br>添加元素时，元素只能从队尾一端进入队列，也即是2只能跟在1后面，3只能跟在2后面。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200810210413281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果要出队：元素只能从队首出队列，出队列的顺序为：1、2、3，与入队时的顺序一致，这就是所谓的“先进先出”。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200810210601254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="2-2队列的操作"><a href="#2-2队列的操作" class="headerlink" title="2.2队列的操作"></a>2.2队列的操作</h2><p>队列通常提供的操作：</p><ol><li>入队 </li><li>出队 </li><li>输出所有队列元素 </li><li>获取队首元素 </li><li>判断队满或队空</li></ol><h2 id="2-3代码实现"><a href="#2-3代码实现" class="headerlink" title="2.3代码实现"></a>2.3代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhukun.ArrayListQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用数组模拟队列-编写一个ArrayQueue类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">//表示数组的最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;<span class="comment">//队列头</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;<span class="comment">//队列尾</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;<span class="comment">//该数据用于存放数据，模拟队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length=<span class="number">0</span>;<span class="comment">//队列中实际元素的数量</span></span><br><span class="line">    <span class="comment">//创建队列构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = arrMaxSize;</span><br><span class="line">        <span class="keyword">this</span>.arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">        <span class="keyword">this</span>.front = -<span class="number">1</span>;<span class="comment">//指向队列头部，分析出front是指向队列头的前一个位置</span></span><br><span class="line">        <span class="keyword">this</span>.rear = -<span class="number">1</span>;<span class="comment">//指向队列的尾部，指向队列尾的数据(即就是队列最后一个数据)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == maxSize-<span class="number">1</span>;<span class="comment">//如果成立则队满，即rear指向容量满足下最后一个数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;<span class="comment">//如果成立则对空，即rear指向队首front说明队列为空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先判断队列是否为满</span></span><br><span class="line">        <span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列已满，不能加入数据&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rear++;<span class="comment">//rear后移</span></span><br><span class="line">        arr[rear] = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断队列是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;队列为空，不能取数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        front++;<span class="comment">//front 后移    </span></span><br><span class="line">        <span class="keyword">return</span> arr[front];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示队列的所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列空的，没有数据~&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=front+<span class="number">1</span>;i&lt;rear+<span class="number">1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;arr[%d]=%d\n&quot;</span>,i,arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示队列的头数据，注意不是提取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num;<span class="comment">//记录队首元素</span></span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;队列空的，没有数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        num = arr[front+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取当前队列的元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear-front;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="comment">//创建一个队列</span></span><br><span class="line">        ArrayQueue queue = <span class="keyword">new</span> ArrayQueue(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">int</span> n;<span class="comment">//接收用户输入</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//输出一个菜单</span></span><br><span class="line">        <span class="keyword">while</span>(loop)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1、输出队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;2、退出程序&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;3、入队&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;4、出队&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;5、查看队头数据&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;6、输出队列的元素数量&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你的选择:&quot;</span>);</span><br><span class="line">            n = scanner.nextInt();</span><br><span class="line">            <span class="keyword">switch</span>(n)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                queue.showQueue();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                scanner.close();</span><br><span class="line">                loop = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.print(<span class="string">&quot;请输入要入队的数据：&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">                queue.addQueue(value);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> res = queue.getQueue();</span><br><span class="line">                    System.out.println(<span class="string">&quot;取出的数据是:&quot;</span>+res);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> res = queue.headQueue();</span><br><span class="line">                    System.out.println(<span class="string">&quot;队列头的数据为：&quot;</span>+res);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">int</span> l = queue.getLength();</span><br><span class="line">                System.out.println(<span class="string">&quot;队列中元素个数为：&quot;</span>+l);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、队列的链式存储（链表实现）"><a href="#3、队列的链式存储（链表实现）" class="headerlink" title="3、队列的链式存储（链表实现）"></a>3、队列的链式存储（链表实现）</h1><p>类似于使用链式结构保存线性表，也可以采用链式结构来保存队列的元素，采用链式存储结构的队列也被称为链队列。<br>对于链队列而言，由于程序需要从rear端添加元素，然后从front端删除元素，因此考虑对链队列增加front、rear两个引用变量，使他们分别指向链队列的头、尾两个节点。如下图所示：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200811155745290.png#pic_center" alt="在这里插入图片描述"><br>注意：<strong>由于链队列采用链式存储结构保存数据元素，该队列允许添加无限多个数据元素，因此链队列不会出现列满的问题。</strong></p><h2 id="3-1链式队列的入队"><a href="#3-1链式队列的入队" class="headerlink" title="3.1链式队列的入队"></a>3.1链式队列的入队</h2><p>对于链队列而言，插入操作的实现非常简单，只要创建一个新节点，让原rear节点的next指向新节点，在让rear指向新节点即可。如下图所示链队列的插入操作：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200811155852960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="3-2链式队列的出队"><a href="#3-2链式队列的出队" class="headerlink" title="3.2链式队列的出队"></a>3.2链式队列的出队</h2><p>对于链队列而言，删除操作的实现也是非常的简单，只要将原front节点指向原front节点的next节点，当然不要忘记释放原front节点的引用。如下图所示链队列的移除操纵：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200811155931243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="3-3代码实现："><a href="#3-3代码实现：" class="headerlink" title="3.3代码实现："></a>3.3代码实现：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhukun.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkQueue</span> &lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个私有的结点类，一个链式结点有数据域和指针域</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> T data;      <span class="comment">//T类型的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next;   <span class="comment">//结点类型的指针 指向下一个结点</span></span><br><span class="line">        <span class="comment">//无参构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">        <span class="comment">//有参构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T element, Node next)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代表链式队列的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="comment">//链式队列的链队首</span></span><br><span class="line">    <span class="keyword">private</span> Node front;</span><br><span class="line">    <span class="comment">//链式队列的链队尾</span></span><br><span class="line">    <span class="keyword">private</span> Node rear;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化链式队列</span></span><br><span class="line">    <span class="comment">//链式队列无参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        front = <span class="keyword">null</span>;</span><br><span class="line">        rear = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//链式队列含参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkQueue</span><span class="params">(T element)</span></span>&#123;</span><br><span class="line">        rear = <span class="keyword">new</span> Node(element, <span class="keyword">null</span>);</span><br><span class="line">        front = rear;</span><br><span class="line">        size ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回链式队列的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向rear端队尾插入元素，入队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(T element)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            rear = <span class="keyword">new</span> Node(element, <span class="keyword">null</span>);    </span><br><span class="line">            front = rear;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            rear.next = <span class="keyword">new</span> Node(element, <span class="keyword">null</span>);        </span><br><span class="line">            rear = rear.next;</span><br><span class="line">        &#125;</span><br><span class="line">        size ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从front端队首移除元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">removeQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;链式队列为空异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Node oldNode = front;</span><br><span class="line">        front = front.next;</span><br><span class="line">        oldNode.next = <span class="keyword">null</span>;<span class="comment">//释放要移除的结点</span></span><br><span class="line">        size --;</span><br><span class="line">        <span class="keyword">return</span> oldNode.data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回链式队列的堆首元素，但不删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front.data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//清空链式队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        front = <span class="keyword">null</span>;</span><br><span class="line">        rear = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历队列里的全部数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node p = front;</span><br><span class="line">        <span class="keyword">while</span> (p!= <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(p.data);</span><br><span class="line">            p=p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="comment">//创建一个队列</span></span><br><span class="line">        LinkQueue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkQueue&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> n;<span class="comment">//接收用户输入</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//输出一个菜单</span></span><br><span class="line">        <span class="keyword">while</span>(loop)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1、输出队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;2、退出程序&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;3、入队&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;4、出队&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;5、查看队头数据&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;6、输出队列的元素数量&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你的选择:&quot;</span>);</span><br><span class="line">            n = scanner.nextInt();</span><br><span class="line">            <span class="keyword">switch</span>(n)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                queue.showQueue();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                scanner.close();</span><br><span class="line">                queue.clear();</span><br><span class="line">                loop = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.print(<span class="string">&quot;请输入要入队的数据：&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">                queue.addQueue(value);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> res = queue.removeQueue();</span><br><span class="line">                    System.out.println(<span class="string">&quot;取出的数据是:&quot;</span>+res);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> res = queue.headQueue();</span><br><span class="line">                    System.out.println(<span class="string">&quot;队列头的数据为：&quot;</span>+res);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">int</span> l = queue.getLength();</span><br><span class="line">                System.out.println(<span class="string">&quot;队列中元素个数为：&quot;</span>+l);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4、循环队列"><a href="#4、循环队列" class="headerlink" title="4、循环队列"></a>4、循环队列</h1><h2 id="4-1顺序队列假溢出问题引出循环队列："><a href="#4-1顺序队列假溢出问题引出循环队列：" class="headerlink" title="4.1顺序队列假溢出问题引出循环队列："></a>4.1顺序队列假溢出问题引出循环队列：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200811161402730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>初始建立空队列时，令front = rear  = 0 </li><li>每当插入新的队列元素时，rear+1 </li><li>每当删除队列头元素时，front+1</li></ol><p><strong>缺陷：</strong> 假设当前队列分配的最大空间为6，队列处于（d）状态时不可再继续入队操作，但实际上数组中还有空的位置，这种现象就叫做 <strong>“假溢出”</strong> ，解决假溢出的途径——–<strong>采用循环队列</strong></p><h2 id="4-2何谓循环队列？"><a href="#4-2何谓循环队列？" class="headerlink" title="4.2何谓循环队列？"></a>4.2何谓循环队列？</h2><p>首先我们要说明的是<strong>循环队列仍然是基于数组实现</strong>的。但是为了形象化的说明问题，我们如下图所示：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200811162530492.png#pic_center" alt="在这里插入图片描述"></p><ol><li>图中有两个<strong>指针(其实就是两个整数型变量，因为在这里有指示作用，所以这里理解为指针)front、rear,</strong> 一个指示队头，一个指示队尾。 </li><li>rear和front互相追赶着，这个追赶过程就是队列添加和删除的过程，如果rear追到front说明队列满了，如果front追到rear说明队列为空。</li><li>令队列空间中的一个单元闲置，使得队列非空时，Q.rear与Q.front之间至少间隔一个空闲单。我们把它掰弯，用的是求余，这样两个值就不会跑出最大范围，并且可以实现弯曲的效果，所以说对于<strong>循环队列我们必须给定最大值MAXSIZE。</strong></li></ol><h2 id="4-3循环队列的实现过程"><a href="#4-3循环队列的实现过程" class="headerlink" title="4.3循环队列的实现过程"></a>4.3循环队列的实现过程</h2><p>我们分析可以发现当front==rear时可能队满也可能队空<br>此时我们人为浪费一个单元，令队满特征<strong>front=（rear+1）%maxSize</strong>   ———<strong>空闲单元法</strong></p><ul><li>对空条件：front == rear </li><li>队满条件：front == （rear+1）% maxsize </li><li>队列长度：L=（N+rear-front）% maxsize</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhukun.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用数组模拟队列-编写一个ArrayQueue类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircularArrayQueue</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">//表示数组的最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;<span class="comment">//队列头</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;<span class="comment">//队列尾</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;<span class="comment">//该数据用于存放数据，模拟队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length=<span class="number">0</span>;<span class="comment">//队列中实际元素的数量</span></span><br><span class="line">    <span class="comment">//创建队列构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircularArrayQueue</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = arrMaxSize;</span><br><span class="line">        <span class="keyword">this</span>.arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">        <span class="keyword">this</span>.front = <span class="number">0</span>;<span class="comment">//指向队列头部，分析出front是指向队列头的前一个位置</span></span><br><span class="line">        <span class="keyword">this</span>.rear = <span class="number">0</span>;<span class="comment">//指向队列的尾部，指向队列尾的数据(即就是队列最后一个数据)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear+<span class="number">1</span>)%maxSize == front;<span class="comment">//如果成立则队满，即rear指向容量满足下最后一个数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;<span class="comment">//如果成立则对空，即rear指向队首front说明队列为空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先判断队列是否为满</span></span><br><span class="line">        <span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列已满，不能加入数据&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[rear] = num;</span><br><span class="line">        <span class="comment">//将rear后移，这里要考虑取模</span></span><br><span class="line">        rear = (rear+<span class="number">1</span>)%maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断队列是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;队列为空，不能取数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将front对应的值保留到一个临时变量，将front后移，考虑取模，将临时保存的变量返回</span></span><br><span class="line">        <span class="keyword">int</span> value = arr[front];</span><br><span class="line">        front =(front +<span class="number">1</span>)%maxSize;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示队列的所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列空的，没有数据~&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=front;i&lt;(rear+maxSize)%maxSize;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;arr[%d]=%d\n&quot;</span>,i,arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示队列的头数据，注意不是提取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num;<span class="comment">//记录队首元素</span></span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;队列空的，没有数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        num = arr[front];</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取当前队列的元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear+maxSize-front)%maxSize;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircularArrayQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="comment">//创建一个队列</span></span><br><span class="line">        ArrayQueue queue = <span class="keyword">new</span> ArrayQueue(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">int</span> n;<span class="comment">//接收用户输入</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//输出一个菜单</span></span><br><span class="line">        <span class="keyword">while</span>(loop)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1、输出队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;2、退出程序&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;3、入队&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;4、出队&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;5、查看队头数据&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;6、输出队列的元素数量&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你的选择:&quot;</span>);</span><br><span class="line">            n = scanner.nextInt();</span><br><span class="line">            <span class="keyword">switch</span>(n)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                queue.showQueue();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                scanner.close();</span><br><span class="line">                loop = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.print(<span class="string">&quot;请输入要入队的数据：&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">                queue.addQueue(value);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> res = queue.getQueue();</span><br><span class="line">                    System.out.println(<span class="string">&quot;取出的数据是:&quot;</span>+res);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> res = queue.headQueue();</span><br><span class="line">                    System.out.println(<span class="string">&quot;队列头的数据为：&quot;</span>+res);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">int</span> l = queue.getLength();</span><br><span class="line">                System.out.println(<span class="string">&quot;队列中元素个数为：&quot;</span>+l);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构(Java实现) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
            <tag> 循环队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（Java实现）- 稀疏sparsearray数组</title>
      <link href="/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%20%E7%A8%80%E7%96%8Fsparsearray%E6%95%B0%E7%BB%84/"/>
      <url>/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%20%E7%A8%80%E7%96%8Fsparsearray%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1、先看一个实际的需求"><a href="#1、先看一个实际的需求" class="headerlink" title="1、先看一个实际的需求"></a>1、先看一个实际的需求</h1><p>  在编写的五子棋程序中，有存盘退出和续上盘的功能。<br>这时候就要求我们要使用二维数组来记录棋盘，如下图所示：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200809170541675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在上图的二维数组中用1表示黑棋，用2表示蓝棋</p><p><strong>分析问题：</strong> 我们可以发现该二维数组的很多值是默认值0，因此记录了很多没有意义的数据。这时候就需要用稀疏数组对这个二维数组进行压缩。</p><h1 id="2、基本介绍"><a href="#2、基本介绍" class="headerlink" title="2、基本介绍"></a>2、基本介绍</h1><p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。<br><strong>稀疏数组的处理方法是:</strong></p><ol><li>记录数组一共有几行几列，有多少个不同的值 </li><li>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模而得到的<strong>这个小规模的数组就是稀疏数组</strong></li></ol><p>举例如下：<br><strong>一个原始二维数组：</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200809172309748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>转换为稀疏数组后：</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200809172320881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>分析一下稀疏数组的数据特征：</strong><br>  首先这个稀疏数组是  ： 9x3 （9行3列）的二维数组 <strong>（稀疏数组都是3列，也就是l里面数据的列序号下标的最大值为3-1=2）</strong><br>第一行数据 6   7   8 ：表示原二维数组一共6行 、7列、8个不同数值<br>第二行数据 0   3   22：0和3分别表示，数值22在原二维数组中的行序号下标和列序号下标（表示在原二维数组的0+1行 3+1列）<br>（后面各行的数据特征和第二行的一样）<br>原始二维数组：6x7=42  <strong>转换</strong>    稀疏数组：9x3=27<br>可以看出稀疏数组起到了一个把原始二维数组规模变小的作用</p><h1 id="3、实现"><a href="#3、实现" class="headerlink" title="3、实现"></a>3、实现</h1><h2 id="3-1二维数组转稀疏数组"><a href="#3-1二维数组转稀疏数组" class="headerlink" title="3.1二维数组转稀疏数组"></a>3.1二维数组转稀疏数组</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200809180304145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>思路：</strong></p><ol><li>遍历原始二维数组，得到有效数据的个数sum </li><li>根据sum就可以创建稀疏数组 sparseArr int[sum+1][3]</li><li>将二维数组的有效数据存入到稀疏数组中</li></ol><h2 id="3-2稀疏数组转二维数组"><a href="#3-2稀疏数组转二维数组" class="headerlink" title="3.2稀疏数组转二维数组"></a>3.2稀疏数组转二维数组</h2><p><strong>思路：</strong><br>先读取稀疏数组的第一行，根据第一行的数据，创建原始二维数组，比如上面棋盘中的 chessArr = int[11][11]<br>然后读取稀疏数组的后几行的数据，并赋值给创建好的原始二维数组即可</p><h1 id="4、代码实现："><a href="#4、代码实现：" class="headerlink" title="4、代码实现："></a>4、代码实现：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhukun.SparseArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Desktop;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//先创建一个二维数组 11*11</span></span><br><span class="line">        <span class="comment">//0:表示没有棋子，1表示黑子  2表示蓝子</span></span><br><span class="line">        <span class="keyword">int</span> chessArr1[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        chessArr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        chessArr1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//输出原始二维数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;输出原始二维数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] row: chessArr1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> data: row)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.print(data+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//原始二维数组转稀疏数组</span></span><br><span class="line">        <span class="comment">//1、先遍历原始二维数组，得到有效数据的个数sum</span></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] row:chessArr1) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> data:row) &#123;</span><br><span class="line">                sum=data!=<span class="number">0</span>?sum+<span class="number">1</span>:sum;  <span class="comment">//三元运算符判断 如果不为0则sum+1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;有效数据个数：&quot;</span>+sum);  <span class="comment">//输出不为零的个数</span></span><br><span class="line">        <span class="comment">//2、根据sum就可以创建稀疏数组 sparseArr int[sum+1][3]</span></span><br><span class="line">        <span class="keyword">int</span> sparseArr[][]=<span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">0</span>]=chessArr1.length;   <span class="comment">//原二维数组的行数</span></span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">1</span>]=chessArr1[<span class="number">0</span>].length;  <span class="comment">//原二维数组的列数</span></span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">2</span>]=sum;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历二维数组，将不为0的数放入稀疏数组中</span></span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;     <span class="comment">//用于记录第几个非零数据    </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;chessArr1.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;chessArr1.length;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(chessArr1[i][j]!=<span class="number">0</span>) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    sparseArr[count][<span class="number">0</span>]=i;</span><br><span class="line">                    sparseArr[count][<span class="number">1</span>]=j;</span><br><span class="line">                    sparseArr[count][<span class="number">2</span>]=chessArr1[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;稀疏数组为:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] row:sparseArr) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> data:row) &#123;</span><br><span class="line">                System.out.print(data+<span class="string">&quot;   &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//稀疏数组还原成原二维数组</span></span><br><span class="line">        <span class="comment">//1、先根据稀疏数组第一行的数据，创建原始二维数组</span></span><br><span class="line">        <span class="keyword">int</span> chessArr2[][]=<span class="keyword">new</span> <span class="keyword">int</span>[sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="comment">//2、再读取稀疏数组的数据，将其赋值给二维数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;sparseArr.length;i++) &#123;</span><br><span class="line">                chessArr2[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">1</span>]]=sparseArr[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印还原后的二维数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;还原后的二维数组为:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] row:chessArr2) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> data:row) &#123;</span><br><span class="line">                System.out.print(data+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将稀疏数组保存到硬盘上</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\zhukun\\Desktop\\app\\map.txt&quot;</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        OutputStreamWriter write = <span class="keyword">new</span> OutputStreamWriter(fos, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 输出稀疏数组的形式</span></span><br><span class="line">        System.out.println(<span class="string">&quot;得到的稀疏数组为&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sparseArr.length; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t%d\t%d\t\n&quot;</span>, sparseArr[i][<span class="number">0</span>], sparseArr[i][<span class="number">1</span>], sparseArr[i][<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span> (i == sparseArr.length - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                write.append(sparseArr[i][<span class="number">0</span>] + <span class="string">&quot;,&quot;</span> + sparseArr[i][<span class="number">1</span>] + <span class="string">&quot;,&quot;</span> + sparseArr[i][<span class="number">2</span>]);</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                write.append(sparseArr[i][<span class="number">0</span>] + <span class="string">&quot;,&quot;</span> + sparseArr[i][<span class="number">1</span>] + <span class="string">&quot;,&quot;</span> + sparseArr[i][<span class="number">2</span>] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;写入文件中...&quot;</span>);</span><br><span class="line">        write.close();</span><br><span class="line">        fos.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;打开文件中...&quot;</span>);</span><br><span class="line">        Desktop.getDesktop().open(file);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------先读取_map.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建 FileReader 对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(fis, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span> (reader.ready())</span><br><span class="line">        &#123;</span><br><span class="line">            sb.append((<span class="keyword">char</span>) reader.read());<span class="comment">// 转成char加到StringBuffer对象中</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        reader.close();<span class="comment">// 关闭读取流</span></span><br><span class="line">        fis.close();<span class="comment">// 关闭输入流,释放系统资源</span></span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------恢复成稀疏数组_sparseArrHf&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.创建对应的稀疏数组</span></span><br><span class="line">        String[] str = sb.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> sparseArrHf[][] = <span class="keyword">new</span> <span class="keyword">int</span>[str.length / <span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="comment">// 2.给稀疏数组赋值</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String s : str) &#123;</span><br><span class="line">            sparseArrHf[i/<span class="number">3</span>][i % <span class="number">3</span>]=Integer.parseInt(s);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------再恢复成二维数组_chessArr22&quot;</span>);</span><br><span class="line">        <span class="comment">// 将稀疏数组 --&gt;恢复成 原始的二维数组</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 1. 读取稀疏数组的第一行,根据第一行的数据,创建原始的二维数组,比如上面的 chessArr2 = int[11][11];</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * 2. 在读取稀疏数组后几行的数据,并赋给 原始的二维数组 即可.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 读取稀疏数组的第一行,根据第一行的数据,创建原始的二维数组</span></span><br><span class="line">        <span class="keyword">int</span> chessArr22[][] = <span class="keyword">new</span> <span class="keyword">int</span>[sparseArrHf[<span class="number">0</span>][<span class="number">0</span>]][sparseArrHf[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 在读取稀疏数组后几行的数据,并赋给 原始的二维数组 即可.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i3 = <span class="number">1</span>; i3 &lt; sparseArrHf.length; i3++) &#123;</span><br><span class="line">            chessArr22[sparseArrHf[i3][<span class="number">0</span>]][sparseArrHf[i3][<span class="number">1</span>]] = sparseArrHf[i3][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出恢复的二维数组</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] row : chessArr22) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------------------------------恢复完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构(Java实现) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> sparsearray </tag>
            
            <tag> 数组 </tag>
            
            <tag> 稀疏数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法（Java实现）-图解Josephu（约瑟夫）问题</title>
      <link href="/2020/08/23/%E7%BA%A6%E7%91%9F%E5%A4%AB/"/>
      <url>/2020/08/23/%E7%BA%A6%E7%91%9F%E5%A4%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="1-josephu约瑟夫"><a class="markdownIt-Anchor" href="#1-josephu约瑟夫">#</a> 1、Josephu (约瑟夫）</h1><p>问题描述：设编号为 1,2,3，，，，n 的 n 个人围坐一圈，约定编号为 k（1&lt;=k&lt;=n）的人从 1 开始报数，数到 m 的那个人出列，它的下一位又从 1 开始报数，数到 m 的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列，和最后剩下的那个人。求这个序列和最后那个人的编号。<br>整体解题思路：<strong>用一个不带头节点的单向环形链表来处理该问题。</strong></p><ol><li>先构成一个有 n 个结点的单向环形链表</li><li>由 k 结点起从 1 开始计数，计到 m 时，对应结点从链表中删除</li><li>被删除的下一个节点又从 1 开始计数，直到最后一个节点从链表中删除</li></ol><h1 id="2-构建单向循环链表"><a class="markdownIt-Anchor" href="#2-构建单向循环链表">#</a> 2、构建单向循环链表</h1><h2 id="21单向环形链表示意图"><a class="markdownIt-Anchor" href="#21单向环形链表示意图">#</a> 2.1 单向环形链表示意图：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200815153341468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>假设：</p><ul><li>n=5，即有五个人</li><li>k=1，从编号为 1 的人开始报数</li><li>m=2，数两个数出一个人<br>预期结果：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200815153624808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul><h2 id="22具体构建单向环形链表过程"><a class="markdownIt-Anchor" href="#22具体构建单向环形链表过程">#</a> 2.2 具体构建单向环形链表过程</h2><p>1、先创建第一个节点，让 first 指向该结点，该节点 next 指向自己形成环<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200815153939531.png#pic_center" alt="在这里插入图片描述"><br> 2、创建一个指向 first 的辅助变量 curBoy 帮助构建环形链表，创建新节点 boy 使 curBoy.next 先指向 boy（即与新节点相连）<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081515442095.png#pic_center" alt="在这里插入图片描述"><br> 3、boy.next 指向 first 使这两个节点构成环，curBoy 辅助变量向后移动到新的节点上<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200815154611240.png#pic_center" alt="在这里插入图片描述"><br> 4、依次类推后面的节点也是这样操作<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200815154654333.png#pic_center" alt="在这里插入图片描述"></p><h2 id="23遍历环形链表"><a class="markdownIt-Anchor" href="#23遍历环形链表">#</a> 2.3 遍历环形链表</h2><ol><li>先让一个辅助变量 curBoy，指向 first 节点</li><li>然后通过 while 循环遍历该环形链表即可 curBoy.next==first 结束</li></ol><h2 id="24出圈思路分析"><a class="markdownIt-Anchor" href="#24出圈思路分析">#</a> 2.4 出圈思路分析</h2><p>1、需要创建一个辅助指针（变量）helper，事先应该指向环形链表的最后一个节点<br>（小孩报数前，先让 first 和 helper 移动 k-1 次，确保 first 是指向第一个报数的孩子（图示里一个报数的孩子是 1 号））<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200815155403754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 2、当孩子报数时，让 first 和 helper 指针同时的移动 m-1 次（图示中数两个数出一个人即 m=2）<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200815155537506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 3、这时可以将 first 指向的小孩节点出圈 first = first.next ; helper.next = first; 原来 first 指向的节点就没有任何引用，就会被垃圾机制回收<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200815155809910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="3-代码实现"><a class="markdownIt-Anchor" href="#3-代码实现">#</a> 3、代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhukun.LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Boy类，表示一个节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> no;<span class="comment">//编号</span></span><br><span class="line"><span class="keyword">private</span> Boy next;<span class="comment">//指向下一个节点，默认为null</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Boy</span><span class="params">(<span class="keyword">int</span> no)</span><span class="comment">//构造函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进行封装</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Boy <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Boy next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个环形的单向链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleSingleLinkedList</span></span>&#123;</span><br><span class="line"><span class="comment">//创建一个first节点，当前没有编号</span></span><br><span class="line"><span class="keyword">private</span> Boy first = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//添加小孩节点，构建成一个环形链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBoy</span><span class="params">(<span class="keyword">int</span> nums)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//先对nums进行数据校验</span></span><br><span class="line"><span class="keyword">if</span>(nums &lt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;nums的值不正确&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Boy curBoy =<span class="keyword">null</span>; <span class="comment">//因为first指针不能动，让curBoy辅助变量帮助构建环形链表</span></span><br><span class="line"><span class="comment">//使用for循环来构建环形链表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nums;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//根据编号，创建小孩节点</span></span><br><span class="line">Boy boy = <span class="keyword">new</span> Boy(i);</span><br><span class="line"><span class="comment">//如果第一个小孩，先自己跟自己构成环</span></span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">first = boy;</span><br><span class="line">first.setNext(first);<span class="comment">//构成环</span></span><br><span class="line">curBoy = first;<span class="comment">//让辅助变量curBoy指向第一个小孩</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">curBoy.setNext(boy);<span class="comment">//curBoy指向新生成的boy节点，先让后一个节点与前一个节点相连</span></span><br><span class="line">boy.setNext(first);<span class="comment">//新生成的boy节点指向first，重新构成环</span></span><br><span class="line">curBoy = boy;<span class="comment">//curBoy向后移动移动到新生成的boy节点上</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历当前的环形</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showBoy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(first == <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;没有任何小孩&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为first不能动，因此我们仍然使用一个辅助指针完成遍历</span></span><br><span class="line">Boy curBoy = first;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;小孩的编号:&quot;</span>+curBoy.getNo());</span><br><span class="line"><span class="keyword">if</span>(curBoy.getNext() == first) <span class="comment">//说明已经遍历完所有小孩</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">curBoy = curBoy.getNext();<span class="comment">//辅助变量curBoy遍历完一个往后移动继续向下遍历</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据用户的输入，计算小孩出圈的顺序</span></span><br><span class="line"><span class="comment">//startNo   ：表示从第几个孩子开始数数</span></span><br><span class="line"><span class="comment">//countNum    ：表示数几下后出一个孩子</span></span><br><span class="line"><span class="comment">//nums    ：表示最初有多少个孩子在圈子中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countBoy</span><span class="params">(<span class="keyword">int</span> startNo,<span class="keyword">int</span> countNum,<span class="keyword">int</span> nums)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//先对输入的数据进行校验</span></span><br><span class="line"><span class="keyword">if</span>(first == <span class="keyword">null</span> || startNo&lt;<span class="number">1</span> || startNo&gt;nums)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;参数输入有错误，请重新输入&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个辅助指针，帮助完成小孩出圈</span></span><br><span class="line">Boy helper = first;</span><br><span class="line"><span class="comment">//需要创建一个辅助变量helper事先应该指向环形链表的最后这个节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(helper.getNext() == first)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小孩报数前，先让first和helper移动k-1次确保first指向第一个报数的孩子上，而helper指向这种报数顺序下最后一个孩子上</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;startNo-<span class="number">1</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">first = first.getNext();</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当小孩报数时，让first和helper指针同时的移动countNum-1次(因为第一个孩子本身要报数所以间隔为countNum-1)，然后出圈</span></span><br><span class="line"><span class="comment">//这是一个循环操作，直到圈中只有一个节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(helper == first)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//说明圈中只有一个节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让first和helper指针同时移动countNum-1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;countNum-<span class="number">1</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">first = first.getNext();</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这时first指向的节点，就是要出圈的小孩节点</span></span><br><span class="line">System.out.println(<span class="string">&quot;小孩&quot;</span>+first.getNo()+<span class="string">&quot;出圈&quot;</span>);</span><br><span class="line"><span class="comment">//这时将first指向的小孩节点出圈</span></span><br><span class="line">first = first.getNext();</span><br><span class="line">helper.setNext(first);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;最后留在圈中的小孩编号是：&quot;</span>+first.getNo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Josephu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一开始的孩子数:&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = scanner.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入从第几个孩子开始报数：&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> b = scanner.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请设置数几下后出一个人：&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> c =scanner.nextInt();</span><br><span class="line">CircleSingleLinkedList list = <span class="keyword">new</span> CircleSingleLinkedList();</span><br><span class="line">list.addBoy(a);</span><br><span class="line">System.out.println(<span class="string">&quot;原有编号顺序：&quot;</span>);</span><br><span class="line">list.showBoy();</span><br><span class="line">System.out.println(<span class="string">&quot;出圈顺序：&quot;</span>);</span><br><span class="line">list.countBoy(b, c, a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">请输入一开始的孩子数:</span><br><span class="line"><span class="number">5</span></span><br><span class="line">请输入从第几个孩子开始报数：</span><br><span class="line"><span class="number">1</span></span><br><span class="line">请设置数几下后出一个人：</span><br><span class="line"><span class="number">2</span></span><br><span class="line">原有编号顺序：</span><br><span class="line">小孩的编号:<span class="number">1</span></span><br><span class="line">小孩的编号:<span class="number">2</span></span><br><span class="line">小孩的编号:<span class="number">3</span></span><br><span class="line">小孩的编号:<span class="number">4</span></span><br><span class="line">小孩的编号:<span class="number">5</span></span><br><span class="line">出圈顺序：</span><br><span class="line">小孩<span class="number">2</span>出圈</span><br><span class="line">小孩<span class="number">4</span>出圈</span><br><span class="line">小孩<span class="number">1</span>出圈</span><br><span class="line">小孩<span class="number">5</span>出圈</span><br><span class="line">最后留在圈中的小孩编号是：<span class="number">3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 环形链表 </tag>
            
            <tag> 约瑟夫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（Java实现）-详解栈（实现中缀表达式计算器、逆波兰计算器   中缀表达式转逆波兰表达式过程）</title>
      <link href="/2020/08/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%A7%A3%E6%A0%88-%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>/2020/08/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%A7%A3%E6%A0%88-%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-栈stack的介绍"><a class="markdownIt-Anchor" href="#1-栈stack的介绍">#</a> 1、栈（stack）的介绍：</h1><ol><li>栈是一个先入后出、后入先出的<strong>有序列表。</strong></li><li>栈是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端为变化端，称为<strong>栈顶（Top）</strong>，另一端为固定端，称为<strong>栈底（Bottom）</strong>。</li><li>根据栈的定义可知，最先放入栈中的元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除     （类似于子弹匣）</li></ol><h2 id="11例如"><a class="markdownIt-Anchor" href="#11例如">#</a> 1.1 例如</h2><p>1、入栈：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818202743623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 2、出栈：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081820280271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="12栈的应用场景"><a class="markdownIt-Anchor" href="#12栈的应用场景">#</a> 1.2 栈的应用场景</h2><ol><li>子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。</li><li>处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。</li><li>表达式的转换 [中缀表达式转后缀表达式] 与求值 (实际解决)。</li><li>二叉树的遍历。</li><li>图形的深度优先 (depth 一 first) 搜索法。</li></ol><h2 id="13栈的快速入门"><a class="markdownIt-Anchor" href="#13栈的快速入门">#</a> 1.3 栈的快速入门</h2><p>用数组模拟栈的使用，由于栈是一种有序列表， 当然可以使用数组的结构来储存栈的数据内容， 下面我们就用数组模拟栈的出栈，入栈等操作。<br><strong>实现思路和示意图：</strong></p><ol><li>使用数组来模拟栈</li><li>定义一个 top 来表示栈顶，初始化为 - 1</li><li><strong>入栈</strong>的操作，当数据加入到栈是，top++；stack [top] = data；</li><li><strong>出栈</strong>的操作，int value = stack [top];top–; return value;<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200818203832795.png#pic_center" alt="在这里插入图片描述"><br><strong>代码：</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStackDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//测试一下ArrayStack 是否正确</span></span><br><span class="line"><span class="comment">//先创建一个ArrayStack对象-&gt;表示栈</span></span><br><span class="line">ArrayStack stack = <span class="keyword">new</span> ArrayStack(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> key;</span><br><span class="line"><span class="keyword">boolean</span> loop = <span class="keyword">true</span>; <span class="comment">//控制是否退出菜单</span></span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">while</span>(loop) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;1: 遍历栈中的所有元素&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;2: 表示添加数据到栈(入栈)&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;3: 表示从栈取出数据(出栈)&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;4: 退出程序&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的选择&quot;</span>);</span><br><span class="line">key = scanner.nextInt();</span><br><span class="line"><span class="keyword">switch</span> (key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">stack.list();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个数&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">stack.push(value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> res = stack.pop();</span><br><span class="line">System.out.printf(<span class="string">&quot;出栈的数据是 %d\n&quot;</span>, res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">scanner.close();</span><br><span class="line">loop = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;程序退出~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个 ArrayStack 表示栈</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize; <span class="comment">// 栈的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] stack; <span class="comment">// 数组，数组模拟栈，数据就放在该数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> top = -<span class="number">1</span>;<span class="comment">// top表示栈顶，初始化为-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">stack = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.maxSize];<span class="comment">//初始化这个数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈满</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> top == maxSize - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//栈空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈-push</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="comment">//先判断栈是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;栈满&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">top++;</span><br><span class="line">stack[top] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈-pop, 将栈顶的数据返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//先判断栈是否空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line"><span class="comment">//抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;栈空，没有数据~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> value = stack[top];</span><br><span class="line">top--;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;栈空，没有数据~~&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要从栈顶开始显示数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = top; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;stack[%d]=%d\n&quot;</span>, i, stack[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: 遍历栈中的所有元素</span><br><span class="line"><span class="number">2</span>: 表示添加数据到栈(入栈)</span><br><span class="line"><span class="number">3</span>: 表示从栈取出数据(出栈)</span><br><span class="line"><span class="number">4</span>: 退出程序</span><br><span class="line">请输入你的选择</span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入一个数</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span>: 遍历栈中的所有元素</span><br><span class="line"><span class="number">2</span>: 表示添加数据到栈(入栈)</span><br><span class="line"><span class="number">3</span>: 表示从栈取出数据(出栈)</span><br><span class="line"><span class="number">4</span>: 退出程序</span><br><span class="line">请输入你的选择</span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入一个数</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">1</span>: 遍历栈中的所有元素</span><br><span class="line"><span class="number">2</span>: 表示添加数据到栈(入栈)</span><br><span class="line"><span class="number">3</span>: 表示从栈取出数据(出栈)</span><br><span class="line"><span class="number">4</span>: 退出程序</span><br><span class="line">请输入你的选择</span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入一个数</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">1</span>: 遍历栈中的所有元素</span><br><span class="line"><span class="number">2</span>: 表示添加数据到栈(入栈)</span><br><span class="line"><span class="number">3</span>: 表示从栈取出数据(出栈)</span><br><span class="line"><span class="number">4</span>: 退出程序</span><br><span class="line">请输入你的选择</span><br><span class="line"><span class="number">1</span></span><br><span class="line">stack[<span class="number">2</span>]=<span class="number">8</span></span><br><span class="line">stack[<span class="number">1</span>]=<span class="number">6</span></span><br><span class="line">stack[<span class="number">0</span>]=<span class="number">4</span></span><br><span class="line"><span class="number">1</span>: 遍历栈中的所有元素</span><br><span class="line"><span class="number">2</span>: 表示添加数据到栈(入栈)</span><br><span class="line"><span class="number">3</span>: 表示从栈取出数据(出栈)</span><br><span class="line"><span class="number">4</span>: 退出程序</span><br><span class="line">请输入你的选择</span><br><span class="line"><span class="number">3</span></span><br><span class="line">出栈的数据是 <span class="number">8</span></span><br><span class="line"><span class="number">1</span>: 遍历栈中的所有元素</span><br><span class="line"><span class="number">2</span>: 表示添加数据到栈(入栈)</span><br><span class="line"><span class="number">3</span>: 表示从栈取出数据(出栈)</span><br><span class="line"><span class="number">4</span>: 退出程序</span><br><span class="line">请输入你的选择</span><br><span class="line"><span class="number">4</span></span><br><span class="line">程序退出~~~</span><br></pre></td></tr></table></figure><h1 id="2-栈实现计算器运算中缀表达式"><a class="markdownIt-Anchor" href="#2-栈实现计算器运算中缀表达式">#</a> 2、栈实现计算器（运算中缀表达式)</h1><h2 id="1-提出问题"><a class="markdownIt-Anchor" href="#1-提出问题">#</a> 1、提出问题</h2><p><strong>计算式：[7<em>2</em>2-5+1-5+3-3]</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200819091212282.png#pic_center" alt="在这里插入图片描述"><br>请问：计算机底层是如何运算得到结果的？注意不是简单的把算式列出运算，<strong>思考计算机是怎么理解这个算式的</strong>（对计算机而言，它接收到的就是一个字符串）—— 栈</p><h2 id="2-使用栈完成表达式的思路"><a class="markdownIt-Anchor" href="#2-使用栈完成表达式的思路">#</a> 2、使用栈完成表达式的思路</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200819094050556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 1、创建两个栈，分别为数栈（存放数）符号栈（存放符号）</p><p>2、使用一个 index  值（索引），来遍历扫描我们的表达式</p><p>3、如果扫描的是一个数字就直接入栈</p><p>4、如果扫描的是一个符号，就分如下情况：</p><pre><code>  a、如果发现当前的符号栈为空，就直接入栈  b、如果符号栈有操作符，就进行比较：</code></pre><ul><li>如果当前的操作符的优先级小于或者等于栈中的操作符， 就需要从数栈中 pop 出两个数，在从符号栈中 pop 出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈，</li><li>如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.<br>5、当表达式扫描完毕，就顺序的从 数栈和符号栈中 pop 出相应的数和符号，并进行运算.</li></ul><p>6、最后在数栈中只有一个数字，就是表达式的结果</p><h2 id="3-按照思路图解验证一个表达式的运算"><a class="markdownIt-Anchor" href="#3-按照思路图解验证一个表达式的运算">#</a> 3、按照思路图解验证一个表达式的运算</h2><p>验证：3+2<em>6-2=13<br>1、index 扫描到数字 3 直接入栈<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200819095936939.png#pic_center" alt="在这里插入图片描述"><br> 2、index 扫描到符号 +，判断当前的符号栈为空，就直接入栈<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200819100152671.png#pic_center" alt="在这里插入图片描述"><br> 3、index 扫描到 2，直接进栈<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200819100346288.png#pic_center" alt="在这里插入图片描述"><br> 4、扫描到</em>，<em>的优先级大于 +，直接进栈<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200819100533648.png#pic_center" alt="在这里插入图片描述"><br> 5、扫描到 6，直接进栈。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200819100736986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 6、扫描到 -，- 的优先级小于栈中的</em>，从数栈中 pop 出两个数 6 和 2，从符号栈中 pop 出 *<br> 运算：2*6=12 ，将 12 进栈，- 进栈<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200819101231934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 7、扫描到 2，直接进栈<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200819101413213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 8、依次 pop 出两个数和一个符号进行运算（后一个数   符号   前一个数）<br>数栈 pop 出 2 和 12    符号栈 pop 出 -       运算：12-2=10   将 10 入栈<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200819101709987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>数栈 pop 出 10 和 3     符号栈 pop 出 +     运算：3+10=13  将 13 入栈<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200819101853220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 9、此时数栈中的 13 为最终运算结果，而符号栈栈空<br><font color=red>注意：在测试过程中发现如果表达式中有多位数运算就会出问题。比如表达式中如果有数字 13 的话这里的 1 和 3 就会当成两个数分开入栈，后面的运算自然也会出问题。<br>解决方法：</p><ol><li><strong>在扫描到一个字符是数时不能立即入栈，向表达式中看向 index 指向字符的下一位，注意只是看 index 指向字符的后一位而不是 index++4、 掌握循环语句</strong></li><li><strong>如果 index 指向字符的下一位还是数就继续扫描并将该数和之前的数进行字符拼接，如果下一位是符号就能入栈</strong></li><li><strong>定义一个字符串变量，用于拼接</strong></li></ol><h2 id="4-实现代码"><a class="markdownIt-Anchor" href="#4-实现代码">#</a> 4、实现代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个仅限于加减乘除的数学表达式：&quot;</span>);</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String expression = scanner.next(); </span><br><span class="line"><span class="comment">//创建两个栈，数栈，一个符号栈</span></span><br><span class="line">CalculatorStack numStack = <span class="keyword">new</span> CalculatorStack (<span class="number">10</span>);</span><br><span class="line">CalculatorStack  operStack = <span class="keyword">new</span> CalculatorStack (<span class="number">10</span>);</span><br><span class="line"><span class="comment">//定义需要的相关变量</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;<span class="comment">//用于扫描</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> oper = <span class="number">0</span>;<span class="comment">//保存运算符</span></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;<span class="comment">//保存每次的运算结果</span></span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">&#x27; &#x27;</span>; <span class="comment">//将每次扫描得到char保存到ch</span></span><br><span class="line">String keepNum = <span class="string">&quot;&quot;</span>; <span class="comment">//用于拼接 多位数</span></span><br><span class="line"><span class="comment">//开始while循环的扫描expression</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//依次得到expression 的每一个字符</span></span><br><span class="line">ch = expression.substring(index, index+<span class="number">1</span>).charAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//判断ch是什么，然后做相应的处理</span></span><br><span class="line"><span class="keyword">if</span>(operStack.isOper(ch)) &#123;<span class="comment">//如果是运算符</span></span><br><span class="line"><span class="comment">//判断当前的符号栈是否为空</span></span><br><span class="line"><span class="keyword">if</span>(!operStack.isEmpty()) &#123;</span><br><span class="line"><span class="comment">//如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符,就需要从数栈中pop出两个数,</span></span><br><span class="line"><span class="comment">//在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈</span></span><br><span class="line"><span class="keyword">if</span>(operStack.priority(ch) &lt;= operStack.priority(operStack.peek())) &#123;</span><br><span class="line">num1 = numStack.pop();</span><br><span class="line">num2 = numStack.pop();</span><br><span class="line">oper = operStack.pop();</span><br><span class="line">res = numStack.cal(num1, num2, oper);</span><br><span class="line"><span class="comment">//把运算的结果入数栈</span></span><br><span class="line">numStack.push(res);</span><br><span class="line"><span class="comment">//然后将当前的操作符入符号栈</span></span><br><span class="line">operStack.push(ch);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.</span></span><br><span class="line">operStack.push(ch);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果为空直接入符号栈..</span></span><br><span class="line">operStack.push(ch); <span class="comment">// 1 + 3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line"><span class="comment">//如果是数有以下分析</span></span><br><span class="line"><span class="comment">//分析思路</span></span><br><span class="line"><span class="comment">//1. 当处理多位数时，不能发现是一个数就立即入栈，因为他可能是多位数</span></span><br><span class="line"><span class="comment">//2. 在处理数，需要向expression的表达式的index 后再看一位,如果是数就进行扫描，如果是符号才入栈</span></span><br><span class="line"><span class="comment">//3. 因此我们需要定义一个变量 字符串，用于拼接</span></span><br><span class="line"><span class="comment">//处理多位数</span></span><br><span class="line">keepNum += ch;<span class="comment">//拼接</span></span><br><span class="line"><span class="comment">//如果ch已经是expression的最后一位，就直接入栈</span></span><br><span class="line"><span class="keyword">if</span> (index == expression.length() - <span class="number">1</span>) &#123;</span><br><span class="line">numStack.push(Integer.parseInt(keepNum));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//判断下一个字符是不是数字，如果是数字，就继续扫描，如果是运算符，则入栈</span></span><br><span class="line"><span class="comment">//注意是看后一位，不是index++</span></span><br><span class="line"><span class="keyword">if</span> (operStack.isOper(expression.substring(index+<span class="number">1</span>,index+<span class="number">2</span>).charAt(<span class="number">0</span>))) &#123;</span><br><span class="line"><span class="comment">//如果后一位是运算符，则入栈 keepNum = &quot;1&quot; 或者 &quot;123&quot;</span></span><br><span class="line">numStack.push(Integer.parseInt(keepNum));</span><br><span class="line"><span class="comment">//重要的!!!!!!, keepNum清空,方便后面再次扫描到多位数时的使用</span></span><br><span class="line">keepNum = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让index + 1, 并判断是否扫描到expression最后.</span></span><br><span class="line">index++;</span><br><span class="line"><span class="keyword">if</span> (index &gt;= expression.length()) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当表达式扫描完毕，就顺序的从 数栈和符号栈中pop出相应的数和符号，并运行.</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//如果符号栈为空，则计算到最后的结果, 数栈中只有一个数字【结果】</span></span><br><span class="line"><span class="keyword">if</span>(operStack.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">num1 = numStack.pop();</span><br><span class="line">num2 = numStack.pop();</span><br><span class="line">oper = operStack.pop();</span><br><span class="line">res = numStack.cal(num1, num2, oper);</span><br><span class="line">numStack.push(res);<span class="comment">//入栈</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将数栈的最后数，pop出，就是结果</span></span><br><span class="line"><span class="keyword">int</span> res2 = numStack.pop();</span><br><span class="line">System.out.printf(<span class="string">&quot;表达式 %s = %d&quot;</span>, expression, res2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先创建一个栈,直接使用前面创建好</span></span><br><span class="line"><span class="comment">//定义一个 ArrayStack2 表示栈, 需要扩展功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalculatorStack</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize; <span class="comment">// 栈的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] stack; <span class="comment">// 数组，数组模拟栈，数据就放在该数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> top = -<span class="number">1</span>;<span class="comment">// top表示栈顶，初始化为-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CalculatorStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">stack = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.maxSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加一个方法，可以返回当前栈顶的值, 但是不是真正的pop</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stack[top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈满</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> top == maxSize - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//栈空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈-push</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="comment">//先判断栈是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;栈满&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">top++;</span><br><span class="line">stack[top] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈-pop, 将栈顶的数据返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//先判断栈是否空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line"><span class="comment">//抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;栈空，没有数据~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> value = stack[top];</span><br><span class="line">top--;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;栈空，没有数据~~&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要从栈顶开始显示数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = top; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;stack[%d]=%d\n&quot;</span>, i, stack[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回运算符的优先级，优先级是程序员来确定, 优先级使用数字表示</span></span><br><span class="line"><span class="comment">//数字越大，则优先级就越高.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">priority</span><span class="params">(<span class="keyword">int</span> oper)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(oper == <span class="string">&#x27;*&#x27;</span> || oper == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">&#x27;+&#x27;</span> || oper == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 假定目前的表达式只有 +, - , * , /</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是不是一个运算符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOper</span><span class="params">(<span class="keyword">char</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> val == <span class="string">&#x27;+&#x27;</span> || val == <span class="string">&#x27;-&#x27;</span> || val == <span class="string">&#x27;*&#x27;</span> || val == <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2, <span class="keyword">int</span> oper)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>; <span class="comment">// res 用于存放计算的结果</span></span><br><span class="line"><span class="keyword">switch</span> (oper) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">res = num2 + num1;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">res = num2 - num1;<span class="comment">// 注意顺序</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">res = num2 * num1;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">res = num2 / num1;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入一个仅限于加减乘除的数学表达式：</span><br><span class="line"><span class="number">2</span>+<span class="number">4</span>*<span class="number">12</span>-<span class="number">4</span>+<span class="number">6</span>*<span class="number">14</span></span><br><span class="line">表达式 <span class="number">2</span>+<span class="number">4</span>*<span class="number">12</span>-<span class="number">4</span>+<span class="number">6</span>*<span class="number">14</span> = <span class="number">130</span></span><br></pre></td></tr></table></figure><h1 id="3-前缀-中缀和后缀表达式"><a class="markdownIt-Anchor" href="#3-前缀-中缀和后缀表达式">#</a> 3、前缀、中缀和后缀表达式</h1><h2 id="1-前缀表达式波兰式"><a class="markdownIt-Anchor" href="#1-前缀表达式波兰式">#</a> 1、前缀表达式（波兰式）</h2><p>（1）、前缀表达式又称波兰式，前缀表达式的运算符位于操作数之前</p><p>（2）、举例说明： (3+4)×5-6 对应的前缀表达式就是 - × + 3 4 5 6<br><font color=blue>前缀表达式的计算机求值：<br><font color=red>从右至左<font color=black>扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（栈顶元素和次顶元素），并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果<br>例如: (3+4)×5-6 对应的前缀表达式就是 - × + 3 4 5 6 , 针对前缀表达式求值步骤如下:</p><ol><li>从右至左扫描表达式 &quot;- × + 3 4 5 6&quot;，将 6、5、4、3 压入堆栈</li><li>遇到 + 运算符，因此弹出 3 和 4（3 为栈顶元素，4 为次顶元素），计算出 3+4 的值，得 7，再将 7 入栈</li><li>接下来是 × 运算符，因此弹出 7 和 5，计算出 7×5=35，将 35 入栈</li><li>最后是 - 运算符，计算出 35-6 的值，即 29，由此得出最终结果</li></ol><h2 id="2-中缀表达式"><a class="markdownIt-Anchor" href="#2-中缀表达式">#</a> 2、中缀表达式</h2><p>（1）、中缀表达式就是常见的运算表达式，如 (3+4)×5-6<br>（2）、中缀表达式的求值是我们人最熟悉的，但是对计算机来说却不好操作 (前面我们讲的案例就能看的这个问题)，因此，在计算结果时，往往会将中缀表达式转成其它表达式来操作 (一般转成后缀表达式.)</p><h2 id="3-后缀表达式逆波兰式"><a class="markdownIt-Anchor" href="#3-后缀表达式逆波兰式">#</a> 3、后缀表达式（逆波兰式）</h2><p>（1）、后缀表达式又称逆波兰表达式，与前缀表达式相似，只是运算符位于操作数之后<br>（2）、中举例说明： (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 –<br>（3）、再比如：<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200819154438442.png#pic_center" alt="在这里插入图片描述"><br><strong>后缀表达式的计算机求值：</strong><br>从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素 和 栈顶元素），并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果<br><strong>例如: (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 - , 针对后缀表达式求值步骤如下:</strong></p><ol><li>从左至右扫描 &quot;3 4 + 5 × 6 -&quot;，将 3 和 4 压入堆栈；</li><li>遇到 + 运算符，因此弹出 4 和 3（4 为栈顶元素，3 为次顶元素），计算出 3+4 的值，得 7，再将 7 入栈；</li><li>将 5 入栈；</li><li>接下来是 × 运算符，因此弹出 5 和 7，计算出 7×5=35，将 35 入栈；</li><li>将 6 入栈；</li><li>最后是 - 运算符，计算出 35-6（次顶 - 栈顶）的值，即 29，由此得出最终结果</li></ol><h1 id="4-逆波兰计算器"><a class="markdownIt-Anchor" href="#4-逆波兰计算器">#</a> 4、逆波兰计算器</h1><h2 id="1-中缀表达式转为后缀表达式"><a class="markdownIt-Anchor" href="#1-中缀表达式转为后缀表达式">#</a> 1、中缀表达式转为后缀表达式</h2><p>后缀表达式适合计算式进行运算，但是人却不太容易写出来，尤其是表达式很长的情况下，因此在开发中，我们需要将 <strong>中缀表达式转成后缀表达式</strong><br>具体步骤：<br>1、初始化两个栈：运算符栈 s1 和储存中间结果的栈 s2；<br>2、从左至右扫描中缀表达式；<br>3、遇到操作数时，将其压入 s2<br>4、遇到运算符时，比较其与 s1 栈顶运算符的优先级：</p><ol><li>如果 s1 为空，或栈顶运算符为左括号 “(”，则直接将此运算符入栈；</li><li>否则，若优先级比栈顶运算符的高，也将运算符压入 s1；</li><li>否则，将 s1 栈顶的运算符弹出并压入到 s2 中，再次转到 (4.1 的操作) 与 s1 中新的栈顶运算符相比较；</li></ol><p>5、遇到括号时：<br>6、重复步骤 2 至 5，直到表达式的最右边<br> 7、将 s1 中剩余的运算符依次弹出并压入 s2<br>8、依次弹出 s2 中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式<br> *<em> 例如：将中缀表达式 “1+((2+3)<em> 4)-5” 转 换为后缀表达式的过程如下：</em></em><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020081917095222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>因此结果为：&quot;1 2 3 + 4 * + 5 –&quot;</strong></p><h2 id="2-将得到的后缀表达式进行运算"><a class="markdownIt-Anchor" href="#2-将得到的后缀表达式进行运算">#</a> 2、将得到的后缀表达式进行运算</h2><p><strong>后缀表达式：“1 2 3 + 4 * + 5 –”<br> 运算过程（即后缀表达式的运算过程）：</strong></p><ol><li>从左至右扫描 &quot;1 2 3 + 4 * + 5 –&quot;，将 1、2、3 压入堆栈；</li><li>遇到 + 运算符，因此弹出 3 和 2（3 为栈顶元素，2 为次顶元素），计算出 2+3 的值，得 5，再将 5 入栈；</li><li>将 4 入栈；</li><li>接下来是 * 运算符，因此弹出 4 和 5，计算出 4×5=20，将 20 入栈；</li><li>遇到 + 运算符，因此弹出 20 和 1（20 为栈顶元素，1 为次顶元素），计算出 20+1 的值，得 21，再将 21 入栈；</li><li>将 5 入栈；</li><li>最后是 - 运算符，弹出 5 和 21（5 为栈顶元素，21 为次顶元素）21-5（次顶 - 栈顶）的值，即 16，由此得出最终结果</li></ol><h2 id="3-代码实现"><a class="markdownIt-Anchor" href="#3-代码实现">#</a> 3、代码实现：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolandNotation</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//完成将一个中缀表达式转成后缀表达式的功能</span></span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">//1. 1+((2+3)×4)-5 =&gt; 转成  1 2 3 + 4 × + 5 –</span></span><br><span class="line"><span class="comment">//2. 因为直接对str 进行操作，不方便，因此 先将  &quot;1+((2+3)×4)-5&quot; =》 中缀的表达式对应的List</span></span><br><span class="line"><span class="comment">//   即 &quot;1+((2+3)×4)-5&quot; =&gt; ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]</span></span><br><span class="line"><span class="comment">//3. 将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List</span></span><br><span class="line"><span class="comment">//   即 ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]  =》 ArrayList [1,2,3,+,4,*,+,5,–]</span></span><br><span class="line">String expression = <span class="string">&quot;1+((2+3)*4)-5&quot;</span>;<span class="comment">//注意表达式 </span></span><br><span class="line">List&lt;String&gt; infixExpressionList = toInfixExpressionList(expression);</span><br><span class="line">System.out.println(<span class="string">&quot;中缀表达式对应的List=&quot;</span> + infixExpressionList); <span class="comment">// ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]</span></span><br><span class="line">List&lt;String&gt; suffixExpreesionList = parseSuffixExpreesionList(infixExpressionList);</span><br><span class="line">System.out.println(<span class="string">&quot;后缀表达式对应的List&quot;</span> + suffixExpreesionList); <span class="comment">//ArrayList [1,2,3,+,4,*,+,5,–] </span></span><br><span class="line">System.out.printf(<span class="string">&quot;运算结果=%d&quot;</span>, calculate(suffixExpreesionList)); <span class="comment">// ?</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//即 ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]  =》 ArrayList [1,2,3,+,4,*,+,5,–]</span></span><br><span class="line"><span class="comment">//方法：将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">parseSuffixExpreesionList</span><span class="params">(List&lt;String&gt; ls)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义两个栈</span></span><br><span class="line">Stack&lt;String&gt; s1 = <span class="keyword">new</span> Stack&lt;String&gt;(); <span class="comment">// 符号栈</span></span><br><span class="line"><span class="comment">//说明：因为s2 这个栈，在整个转换过程中，没有pop操作，而且后面我们还需要逆序输出</span></span><br><span class="line"><span class="comment">//因此比较麻烦，这里我们就不用 Stack&lt;String&gt; 直接使用 List&lt;String&gt; s2</span></span><br><span class="line">List&lt;String&gt; s2 = <span class="keyword">new</span> ArrayList&lt;String&gt;(); <span class="comment">// 储存中间结果的Lists2</span></span><br><span class="line"><span class="comment">//遍历ls</span></span><br><span class="line"><span class="keyword">for</span>(String item: ls) &#123;</span><br><span class="line"><span class="comment">//如果是一个数，加入s2</span></span><br><span class="line"><span class="keyword">if</span>(item.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123;</span><br><span class="line">s2.add(item);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;(&quot;</span>)) &#123;</span><br><span class="line">s1.push(item);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;)&quot;</span>)) &#123;</span><br><span class="line"><span class="comment">//如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</span></span><br><span class="line"><span class="keyword">while</span>(!s1.peek().equals(<span class="string">&quot;(&quot;</span>)) &#123;</span><br><span class="line">s2.add(s1.pop());</span><br><span class="line">&#125;</span><br><span class="line">s1.pop();<span class="comment">//!!! 将 ( 弹出 s1栈， 消除小括号</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//当item的优先级小于等于s1栈顶运算符, 将s1栈顶的运算符弹出并加入到s2中，再次转到(4.1)与s1中新的栈顶运算符相比较</span></span><br><span class="line"><span class="comment">//问题：我们缺少一个比较优先级高低的方法</span></span><br><span class="line"><span class="keyword">while</span>(s1.size() != <span class="number">0</span> &amp;&amp; Operation.getValue(s1.peek()) &gt;= Operation.getValue(item) ) &#123;</span><br><span class="line">s2.add(s1.pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还需要将item压入栈</span></span><br><span class="line">s1.push(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将s1中剩余的运算符依次弹出并加入s2</span></span><br><span class="line"><span class="keyword">while</span>(s1.size() != <span class="number">0</span>) &#123;</span><br><span class="line">s2.add(s1.pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s2; <span class="comment">//注意因为是存放到List, 因此按顺序输出就是对应的后缀表达式对应的List</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法：将 中缀表达式转成对应的List</span></span><br><span class="line"><span class="comment">//  s=&quot;1+((2+3)×4)-5&quot;;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">toInfixExpressionList</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个List,存放中缀表达式 对应的内容</span></span><br><span class="line">List&lt;String&gt; ls = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">//这时是一个指针，用于遍历 中缀表达式字符串</span></span><br><span class="line">String str; <span class="comment">// 对多位数的拼接</span></span><br><span class="line"><span class="keyword">char</span> c; <span class="comment">// 每遍历到一个字符，就放入到c</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">//如果c是一个非数字，我需要加入到ls</span></span><br><span class="line"><span class="keyword">if</span>((c=s.charAt(i)) &lt; <span class="number">48</span> ||  (c=s.charAt(i)) &gt; <span class="number">57</span>) &#123;</span><br><span class="line">ls.add(<span class="string">&quot;&quot;</span> + c);</span><br><span class="line">i++; <span class="comment">//i需要后移</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//如果是一个数，需要考虑多位数</span></span><br><span class="line">str = <span class="string">&quot;&quot;</span>; <span class="comment">//先将str 置成&quot;&quot; &#x27;0&#x27;[48]-&gt;&#x27;9&#x27;[57]</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; s.length() &amp;&amp; (c=s.charAt(i)) &gt;= <span class="number">48</span> &amp;&amp; (c=s.charAt(i)) &lt;= <span class="number">57</span>) &#123;</span><br><span class="line">str += c;<span class="comment">//拼接</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">ls.add(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt; s.length());</span><br><span class="line"><span class="keyword">return</span> ls;<span class="comment">//返回</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将一个逆波兰表达式， 依次将数据和运算符放入到 ArrayList中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getListString</span><span class="params">(String suffixExpression)</span> </span>&#123;</span><br><span class="line"><span class="comment">//将 suffixExpression 分割</span></span><br><span class="line">String[] split = suffixExpression.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">for</span>(String ele: split) &#123;</span><br><span class="line">list.add(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(List&lt;String&gt; ls)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建给栈, 只需要一个栈即可</span></span><br><span class="line">Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;String&gt;();</span><br><span class="line"><span class="comment">// 遍历 ls</span></span><br><span class="line"><span class="keyword">for</span> (String item : ls) &#123;</span><br><span class="line"><span class="comment">// 这里使用正则表达式来取出数</span></span><br><span class="line"><span class="keyword">if</span> (item.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123; <span class="comment">// 匹配的是多位数</span></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line">stack.push(item);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// pop出两个数，并运算， 再入栈</span></span><br><span class="line"><span class="keyword">int</span> num2 = Integer.parseInt(stack.pop());</span><br><span class="line"><span class="keyword">int</span> num1 = Integer.parseInt(stack.pop());</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (item.equals(<span class="string">&quot;+&quot;</span>)) &#123;</span><br><span class="line">res = num1 + num2;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;-&quot;</span>)) &#123;</span><br><span class="line">res = num1 - num2;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;*&quot;</span>)) &#123;</span><br><span class="line">res = num1 * num2;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">res = num1 / num2;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;运算符有误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把res 入栈</span></span><br><span class="line">stack.push(<span class="string">&quot;&quot;</span> + res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后留在stack中的数据是运算结果</span></span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(stack.pop());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编写一个类 Operation 可以返回一个运算符 对应的优先级</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ADD = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> SUB = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MUL = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> DIV = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//写一个方法，返回对应的优先级数字</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(String operation)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (operation) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">result = ADD;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">result = SUB;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">result = MUL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">result = DIV;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;(&quot;</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;)&quot;</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;不存在该运算符&quot;</span> + operation);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">中缀表达式对应的List=[<span class="number">1</span>, +, (, (, <span class="number">2</span>, +, <span class="number">3</span>, ), *, <span class="number">4</span>, ), -, <span class="number">5</span>]</span><br><span class="line">后缀表达式对应的List[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, +, <span class="number">4</span>, *, +, <span class="number">5</span>, -]</span><br><span class="line">运算结果=<span class="number">16</span></span><br></pre></td></tr></table></figure><hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">]]></content>
      
      
      <categories>
          
          <category> 数据结构(Java实现) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 栈 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 逆波兰表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习-类的隐藏机制（封装性）</title>
      <link href="/2020/08/21/Java%E5%AD%A6%E4%B9%A0-%E7%B1%BB%E7%9A%84%E9%9A%90%E8%97%8F%E6%9C%BA%E5%88%B6(%E5%B0%81%E8%A3%85%E6%80%A7)/"/>
      <url>/2020/08/21/Java%E5%AD%A6%E4%B9%A0-%E7%B1%BB%E7%9A%84%E9%9A%90%E8%97%8F%E6%9C%BA%E5%88%B6(%E5%B0%81%E8%A3%85%E6%80%A7)/</url>
      
        <content type="html"><![CDATA[<h1 id="1-封装的含义"><a class="markdownIt-Anchor" href="#1-封装的含义">#</a> 1、封装的含义</h1><p><strong>封装</strong>（encapsulation）是面向对象的三要素之一（其它两个是<strong>继承</strong>和<strong>多态</strong>），它有两成含义：<br>1、将数据（属性）和函数（行为）放在一个独立的类中，使类成为一个独立的单元。<br>2、通过访问限定符（private 等）实现对<strong>信息的隐藏或公开</strong>，隐藏类的内部实现。而留下一些接口（public 的成员函数）与外界进行信息交换（外界要想访问某个成员只能通过接口实现）当类的设计者改变了类的内部实现时，但只要接口不变，对于类的使用者而言，没有任何影响。这就是所谓的 “<strong>接口和实现的分离</strong>”<br><strong> 那么什么是封装？</strong> 简单地说，封装就是将数据和函数放在一起，将不想让外界看到的内容（通常是数据）声明为 private 的，不允许外界存取。外界要想访问的话，就只能通过类留给外部的接口。<br><strong>为了更好的理解为什么要对对象进行封装，下面举个例子进行说明</strong><br>先写两个类  ：</p><ul><li>Person 类</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package day01</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">public int age;</span><br><span class="line">public <span class="keyword">void</span> printAge()</span><br><span class="line">&#123; </span><br><span class="line">System.out.println(<span class="string">&quot;年龄是：&quot;</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Test 测试类</li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package day01</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"> public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args)</span><br><span class="line"> &#123;</span><br><span class="line"> Person p = <span class="keyword">new</span> Person();</span><br><span class="line"> p.age = <span class="number">-100</span>;</span><br><span class="line"> p.printAge();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后打印结果为：年龄是：-100<br><strong> 分析一下代码：</strong><br>程序是没问题的也能正常运行，但是年龄为 - 100 显然不符合正常逻辑。从代码可以看出在 new 完一个 person 对象后用户可以对它的 age 属性随便赋值。像这种情况是把类的属性开放出来，让调用者随意使用，这样就会出现问题，它们很容易被一些粗心的或不知情的客户端程序员所毁坏。<br>所以我们需要对这样不能让调用者随意使用的属性做封装和隐藏以减少程序的 bug。这意味着类的创建者可以任意修改被隐藏的部分，而不用担心对其他调用者造成影响。<br>代码修改后如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package day01</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">private int age;</span><br><span class="line">public <span class="keyword">void</span> setAge(int a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a &lt;=<span class="number">150</span> &amp;&amp; a&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">this</span>.age = a;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;输入的年龄：&quot;</span>+a+<span class="string">&quot;不在0到150之间&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public int getAge()</span><br><span class="line">&#123; <span class="keyword">return</span> <span class="built_in">this</span>.age;&#125;</span><br><span class="line">public <span class="keyword">void</span> showAge()</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;年龄是：&quot;</span>+<span class="built_in">this</span>.getAge());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package day01</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"> public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args)</span><br><span class="line"> &#123;</span><br><span class="line"> Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line"> Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line"> p1.setAge(<span class="number">55</span>);</span><br><span class="line"> p1.showAge();</span><br><span class="line"> p2.setAge(<span class="number">60</span>);</span><br><span class="line"> p2.showAge();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到修改过后的对象不能直接通过 p.age 进行赋值操作，因为此时的 age 属性已经是被 private 限制，只能由类内部的成员函数调用并进行传参。</p><h1 id="2-类的setxxx-和-getxxx"><a class="markdownIt-Anchor" href="#2-类的setxxx-和-getxxx">#</a> 2、类的 setXXX 和 getXXX</h1><p>封装的一个原则是：“信息的最小化公开”, 所以在理想状态下，通常将所有的数据都声明为 private（因为随便对类的内部数据进行更改是很危险的），如果想改变和得到某个数据的话，那么使用相应的接口进行访问</p><ul><li>通常设置数据的接口命名为 setXXX（如 public void setAge () ）</li><li>将得到数据的接口命名为 getXXX（如 public int getAge () ）<br><strong>? 考虑这样两个问题：</strong><br><strong>问题一：</strong> 使用 Person 类来定义的两个对象 p1 和 p2, 那么 p1 和 p2 两个对象在内存中的存储状态是怎么样的呢？即数据成员和成员函数是否都存放在对象中呢？<br><strong>问题二：</strong> p1 和 p2 调用相同的成员函数，为什么显示结果不一样？它们调用的是同一段代码吗？<br>其实对象空间中仅存储数据成员，而类的成员函数代码不会存储在对象中，用一个类的不同的对象调用成员函数时，调用的是同一段函数代码。<br><strong>成员函数和普通函数的区别：</strong><br>在编译器的角度来看，成员函数和普通函数是没有本质区别的，成员函数只不过是为了封装的需要，而在形式上放在类中。最主要的区别是：<br><em>成员函数暗自具备了一个从编译器传过来的指向类对象的 this（当前对象的引用），通过它成员函数就可以操作当前对象的数据成员。</em></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.setAge(<span class="number">55</span>);<span class="comment">//在这里this指向p1</span></span><br><span class="line">p2.setAge(<span class="number">60</span>);<span class="comment">//在这里this指向p2</span></span><br></pre></td></tr></table></figure><h1 id="3-this关键字"><a class="markdownIt-Anchor" href="#3-this关键字">#</a> 3、this 关键字</h1><ul><li>在类的方法定义中使用的 this 关键字表示使用该方法对象的引用。</li><li>当必须指出当前使用方法对象是谁时要使用 this</li><li>this 可以看作是一个变量，它的值是当前对象的引用</li><li>当处理方法中成员变量和局部变量重名时要用 this</li></ul><h1 id="4-总结"><a class="markdownIt-Anchor" href="#4-总结">#</a> 4、总结</h1><p>java 中类的封装和隐藏就是：<br>通过将类的成员数据声明为私有的（private），再提供公共的（public）方法：getXXX () 和 setXXX () 实现对该属性的操作。以实现以下目的。</p><ul><li>隐藏一个类中不需要对外提供的实现细节</li><li>使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑，限制对属性的不合理操作；</li><li>便于修改，增强代码的可维护性</li></ul>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 类 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
