<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2020/08/20/java/Java%E5%AD%A6%E4%B9%A0-%E7%B1%BB%E7%9A%84%E9%9A%90%E8%97%8F%E6%9C%BA%E5%88%B6(%E5%B0%81%E8%A3%85%E6%80%A7)/"/>
      <url>/2020/08/20/java/Java%E5%AD%A6%E4%B9%A0-%E7%B1%BB%E7%9A%84%E9%9A%90%E8%97%8F%E6%9C%BA%E5%88%B6(%E5%B0%81%E8%A3%85%E6%80%A7)/</url>
      
        <content type="html"><![CDATA[<p>title: Java 学习 - 类的隐藏机制（封装性）</p><h1 id="1-封装的含义"><a class="anchor" href="#1-封装的含义">#</a> 1、封装的含义</h1><p><strong>封装</strong>（encapsulation）是面向对象的三要素之一（其它两个是<strong>继承</strong>和<strong>多态</strong>），它有两成含义：<br />1、将数据（属性）和函数（行为）放在一个独立的类中，使类成为一个独立的单元。<br />2、通过访问限定符（private 等）实现对<strong>信息的隐藏或公开</strong>，隐藏类的内部实现。而留下一些接口（public 的成员函数）与外界进行信息交换（外界要想访问某个成员只能通过接口实现）当类的设计者改变了类的内部实现时，但只要接口不变，对于类的使用者而言，没有任何影响。这就是所谓的 “<strong>接口和实现的分离</strong>”<br /><strong> 那么什么是封装？</strong> 简单地说，封装就是将数据和函数放在一起，将不想让外界看到的内容（通常是数据）声明为 private 的，不允许外界存取。外界要想访问的话，就只能通过类留给外部的接口。<br /><strong>为了更好的理解为什么要对对象进行封装，下面举个例子进行说明</strong><br />先写两个类  ：</p><ul><li>Person 类<br /> &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package day01&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public int age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; printAge ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;{ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println (&lt;span class=&quot;string&quot;&gt;&quot;年龄是：&quot;&lt;/span&gt;+age);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</li><li>Test 测试类<br /> &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package day01&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; public &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; main (&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;[] args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Person p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; p.age = &lt;span class=&quot;number&quot;&gt;-100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; p.printAge ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;<br /> 运行后打印结果为：年龄是：-100<br /><strong> 分析一下代码：</strong><br />程序是没问题的也能正常运行，但是年龄为 - 100 显然不符合正常逻辑。从代码可以看出在 new 完一个 person 对象后用户可以对它的 age 属性随便赋值。像这种情况是把类的属性开放出来，让调用者随意使用，这样就会出现问题，它们很容易被一些粗心的或不知情的客户端程序员所毁坏。<br />所以我们需要对这样不能让调用者随意使用的属性做封装和隐藏以减少程序的 bug。这意味着类的创建者可以任意修改被隐藏的部分，而不用担心对其他调用者造成影响。<br />代码修改后如下：<br />&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package day01&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private int age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; setAge (int a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a &lt;=&lt;span class=&quot;number&quot;&gt;150&lt;/span&gt; &amp;&amp; a&gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;){&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.age = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println (&lt;span class=&quot;string&quot;&gt;&quot;输入的年龄：&quot;&lt;/span&gt;+a+&lt;span class=&quot;string&quot;&gt;&quot;不在 0 到 150 之间&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public int getAge ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;{ &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.age;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; showAge ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println (&lt;span class=&quot;string&quot;&gt;&quot;年龄是：&quot;&lt;/span&gt;+&lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.getAge ());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;<br />&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package day01&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; public &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; main(&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;[] args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Person p1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Person p2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; p1.setAge(&lt;span class=&quot;number&quot;&gt;55&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; p1.showAge();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; p2.setAge(&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; p2.showAge();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;<br /> 可以看到修改过后的对象不能直接通过 p.age 进行赋值操作，因为此时的 age 属性已经是被 private 限制，只能由类内部的成员函数调用并进行传参。</li></ul><h1 id="2-类的setxxx-和-getxxx"><a class="anchor" href="#2-类的setxxx-和-getxxx">#</a> 2、类的 setXXX 和 getXXX</h1><p>封装的一个原则是：&quot;信息的最小化公开&quot;, 所以在理想状态下，通常将所有的数据都声明为 private（因为随便对类的内部数据进行更改是很危险的），如果想改变和得到某个数据的话，那么使用相应的接口进行访问</p><ul><li>通常设置数据的接口命名为 setXXX（如 public void setAge () ）</li><li>将得到数据的接口命名为 getXXX（如 public int getAge () ）<br /><strong>? 考虑这样两个问题：</strong><br /><strong>问题一：</strong> 使用 Person 类来定义的两个对象 p1 和 p2, 那么 p1 和 p2 两个对象在内存中的存储状态是怎么样的呢？即数据成员和成员函数是否都存放在对象中呢？<br /><strong>问题二：</strong> p1 和 p2 调用相同的成员函数，为什么显示结果不一样？它们调用的是同一段代码吗？<br />其实对象空间中仅存储数据成员，而类的成员函数代码不会存储在对象中，用一个类的不同的对象调用成员函数时，调用的是同一段函数代码。<br /><strong>成员函数和普通函数的区别：</strong><br />在编译器的角度来看，成员函数和普通函数是没有本质区别的，成员函数只不过是为了封装的需要，而在形式上放在类中。最主要的区别是：<br /><em>成员函数暗自具备了一个从编译器传过来的指向类对象的 this（当前对象的引用），通过它成员函数就可以操作当前对象的数据成员。</em><br />&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Person p1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person p2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p1.setAge (&lt;span class=&quot;number&quot;&gt;55&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 在这里 this 指向 p1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p2.setAge (&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 在这里 this 指向 p2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</li></ul><h1 id="3-this关键字"><a class="anchor" href="#3-this关键字">#</a> 3、this 关键字</h1><ul><li>在类的方法定义中使用的 this 关键字表示使用该方法对象的引用。</li><li>当必须指出当前使用方法对象是谁时要使用 this</li><li>this 可以看作是一个变量，它的值是当前对象的引用</li><li>当处理方法中成员变量和局部变量重名时要用 this</li></ul><h1 id="4-总结"><a class="anchor" href="#4-总结">#</a> 4、总结</h1><p>java 中类的封装和隐藏就是：<br />通过将类的成员数据声明为私有的（private），再提供公共的（public）方法：getXXX () 和 setXXX () 实现对该属性的操作。以实现以下目的。</p><ul><li>隐藏一个类中不需要对外提供的实现细节</li><li>使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑，限制对属性的不合理操作；</li><li>便于修改，增强代码的可维护性</li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
