<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://yoursite.com</id>
    <title>jQueryZK Blog</title>
    <link href="http://yoursite.com" />
    <updated>2020-08-20T16:02:45.399Z</updated>
    <entry>
        <id>http://yoursite.com/2020/08/21/java/Java%E5%AD%A6%E4%B9%A0-%E7%B1%BB%E7%9A%84%E9%9A%90%E8%97%8F%E6%9C%BA%E5%88%B6(%E5%B0%81%E8%A3%85%E6%80%A7)/</id>
        <title></title>
        <link rel="alternate" href="http://yoursite.com/2020/08/21/java/Java%E5%AD%A6%E4%B9%A0-%E7%B1%BB%E7%9A%84%E9%9A%90%E8%97%8F%E6%9C%BA%E5%88%B6(%E5%B0%81%E8%A3%85%E6%80%A7)/"/>
        <content type="html">&lt;p&gt;title: Java 学习 - 类的隐藏机制（封装性）&lt;/p&gt;
&lt;h1 id=&#34;1-封装的含义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-封装的含义&#34;&gt;#&lt;/a&gt; 1、封装的含义&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;封装&lt;/strong&gt;（encapsulation）是面向对象的三要素之一（其它两个是&lt;strong&gt;继承&lt;/strong&gt;和&lt;strong&gt;多态&lt;/strong&gt;），它有两成含义：&lt;br /&gt;
1、将数据（属性）和函数（行为）放在一个独立的类中，使类成为一个独立的单元。&lt;br /&gt;
2、通过访问限定符（private 等）实现对&lt;strong&gt;信息的隐藏或公开&lt;/strong&gt;，隐藏类的内部实现。而留下一些接口（public 的成员函数）与外界进行信息交换（外界要想访问某个成员只能通过接口实现）当类的设计者改变了类的内部实现时，但只要接口不变，对于类的使用者而言，没有任何影响。这就是所谓的 “&lt;strong&gt;接口和实现的分离&lt;/strong&gt;”&lt;br /&gt;
&lt;strong&gt; 那么什么是封装？&lt;/strong&gt; 简单地说，封装就是将数据和函数放在一起，将不想让外界看到的内容（通常是数据）声明为 private 的，不允许外界存取。外界要想访问的话，就只能通过类留给外部的接口。&lt;br /&gt;
&lt;strong&gt;为了更好的理解为什么要对对象进行封装，下面举个例子进行说明&lt;/strong&gt;&lt;br /&gt;
先写两个类  ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Person 类&lt;br /&gt;
 &amp;lt;!--hexoPostRenderEscape:&amp;lt;figure class=&amp;quot;highlight javascript&amp;quot;&amp;gt;&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td class=&amp;quot;gutter&amp;quot;&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;3&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;4&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;5&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;6&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;7&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;8&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;package day01&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;public &amp;lt;span class=&amp;quot;class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;title&amp;quot;&amp;gt;Person&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;{&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	public int age;&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	public &amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; printAge ()&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	{ &amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;		System.out.println (&amp;lt;span class=&amp;quot;string&amp;quot;&amp;gt;&amp;quot;年龄是：&amp;quot;&amp;lt;/span&amp;gt;+age);&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	}&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;/figure&amp;gt;:hexoPostRenderEscape--&amp;gt;&lt;/li&gt;
&lt;li&gt;Test 测试类&lt;br /&gt;
 &amp;lt;!--hexoPostRenderEscape:&amp;lt;figure class=&amp;quot;highlight javascript&amp;quot;&amp;gt;&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td class=&amp;quot;gutter&amp;quot;&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;3&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;4&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;5&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;6&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;7&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;8&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;9&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;package day01&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;public &amp;lt;span class=&amp;quot;class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;title&amp;quot;&amp;gt;Test&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;{&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	 public &amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; main (&amp;lt;span class=&amp;quot;built_in&amp;quot;&amp;gt;String&amp;lt;/span&amp;gt;[] args)&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	 {&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	 	Person p = &amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Person ();&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	 	p.age = &amp;lt;span class=&amp;quot;number&amp;quot;&amp;gt;-100&amp;lt;/span&amp;gt;;&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	 	p.printAge ();&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	 }&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;/figure&amp;gt;:hexoPostRenderEscape--&amp;gt;&lt;br /&gt;
 运行后打印结果为：年龄是：-100&lt;br /&gt;
&lt;strong&gt; 分析一下代码：&lt;/strong&gt;&lt;br /&gt;
程序是没问题的也能正常运行，但是年龄为 - 100 显然不符合正常逻辑。从代码可以看出在 new 完一个 person 对象后用户可以对它的 age 属性随便赋值。像这种情况是把类的属性开放出来，让调用者随意使用，这样就会出现问题，它们很容易被一些粗心的或不知情的客户端程序员所毁坏。&lt;br /&gt;
所以我们需要对这样不能让调用者随意使用的属性做封装和隐藏以减少程序的 bug。这意味着类的创建者可以任意修改被隐藏的部分，而不用担心对其他调用者造成影响。&lt;br /&gt;
代码修改后如下：&lt;br /&gt;
&amp;lt;!--hexoPostRenderEscape:&amp;lt;figure class=&amp;quot;highlight javascript&amp;quot;&amp;gt;&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td class=&amp;quot;gutter&amp;quot;&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;3&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;4&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;5&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;6&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;7&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;8&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;9&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;10&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;11&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;12&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;13&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;14&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;15&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;16&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;17&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;18&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;19&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;package day01&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;public &amp;lt;span class=&amp;quot;class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;title&amp;quot;&amp;gt;Person&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;{&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	private int age;&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	public &amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; setAge (int a)&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	{&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;		&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt;(a &amp;lt;=&amp;lt;span class=&amp;quot;number&amp;quot;&amp;gt;150&amp;lt;/span&amp;gt; &amp;amp;&amp;amp; a&amp;gt;=&amp;lt;span class=&amp;quot;number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;){&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;			&amp;lt;span class=&amp;quot;built_in&amp;quot;&amp;gt;this&amp;lt;/span&amp;gt;.age = a;	&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;		}&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;else&amp;lt;/span&amp;gt;{&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;			System.out.println (&amp;lt;span class=&amp;quot;string&amp;quot;&amp;gt;&amp;quot;输入的年龄：&amp;quot;&amp;lt;/span&amp;gt;+a+&amp;lt;span class=&amp;quot;string&amp;quot;&amp;gt;&amp;quot;不在 0 到 150 之间&amp;quot;&amp;lt;/span&amp;gt;);&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;		}&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	}&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	public int getAge ()&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	{ &amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;built_in&amp;quot;&amp;gt;this&amp;lt;/span&amp;gt;.age;}&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	public &amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; showAge ()&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	{&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;		System.out.println (&amp;lt;span class=&amp;quot;string&amp;quot;&amp;gt;&amp;quot;年龄是：&amp;quot;&amp;lt;/span&amp;gt;+&amp;lt;span class=&amp;quot;built_in&amp;quot;&amp;gt;this&amp;lt;/span&amp;gt;.getAge ());&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	}&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;/figure&amp;gt;:hexoPostRenderEscape--&amp;gt;&lt;br /&gt;
&amp;lt;!--hexoPostRenderEscape:&amp;lt;figure class=&amp;quot;highlight javascript&amp;quot;&amp;gt;&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td class=&amp;quot;gutter&amp;quot;&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;3&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;4&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;5&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;6&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;7&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;8&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;9&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;10&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;11&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;12&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;package day01&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;public &amp;lt;span class=&amp;quot;class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;title&amp;quot;&amp;gt;Test&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;{&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	 public &amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; main(&amp;lt;span class=&amp;quot;built_in&amp;quot;&amp;gt;String&amp;lt;/span&amp;gt;[] args)&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	 {&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	 	Person p1 = &amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Person();&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	 	Person p2 = &amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Person();&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	 	p1.setAge(&amp;lt;span class=&amp;quot;number&amp;quot;&amp;gt;55&amp;lt;/span&amp;gt;);&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	 	p1.showAge();&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	 	p2.setAge(&amp;lt;span class=&amp;quot;number&amp;quot;&amp;gt;60&amp;lt;/span&amp;gt;);&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	 	p2.showAge();&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;	 }&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;/figure&amp;gt;:hexoPostRenderEscape--&amp;gt;&lt;br /&gt;
 可以看到修改过后的对象不能直接通过 p.age 进行赋值操作，因为此时的 age 属性已经是被 private 限制，只能由类内部的成员函数调用并进行传参。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-类的setxxx-和-getxxx&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-类的setxxx-和-getxxx&#34;&gt;#&lt;/a&gt; 2、类的 setXXX 和 getXXX&lt;/h1&gt;
&lt;p&gt;封装的一个原则是：&amp;quot;信息的最小化公开&amp;quot;, 所以在理想状态下，通常将所有的数据都声明为 private（因为随便对类的内部数据进行更改是很危险的），如果想改变和得到某个数据的话，那么使用相应的接口进行访问&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常设置数据的接口命名为 setXXX（如 public void setAge () ）&lt;/li&gt;
&lt;li&gt;将得到数据的接口命名为 getXXX（如 public int getAge () ）&lt;br /&gt;
&lt;strong&gt;? 考虑这样两个问题：&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;问题一：&lt;/strong&gt; 使用 Person 类来定义的两个对象 p1 和 p2, 那么 p1 和 p2 两个对象在内存中的存储状态是怎么样的呢？即数据成员和成员函数是否都存放在对象中呢？&lt;br /&gt;
&lt;strong&gt;问题二：&lt;/strong&gt; p1 和 p2 调用相同的成员函数，为什么显示结果不一样？它们调用的是同一段代码吗？&lt;br /&gt;
其实对象空间中仅存储数据成员，而类的成员函数代码不会存储在对象中，用一个类的不同的对象调用成员函数时，调用的是同一段函数代码。&lt;br /&gt;
&lt;strong&gt;成员函数和普通函数的区别：&lt;/strong&gt;&lt;br /&gt;
在编译器的角度来看，成员函数和普通函数是没有本质区别的，成员函数只不过是为了封装的需要，而在形式上放在类中。最主要的区别是：&lt;br /&gt;
&lt;em&gt;成员函数暗自具备了一个从编译器传过来的指向类对象的 this（当前对象的引用），通过它成员函数就可以操作当前对象的数据成员。&lt;/em&gt;&lt;br /&gt;
&amp;lt;!--hexoPostRenderEscape:&amp;lt;figure class=&amp;quot;highlight javascript&amp;quot;&amp;gt;&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td class=&amp;quot;gutter&amp;quot;&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;3&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;4&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;Person p1 = &amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Person ();&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;Person p2 = &amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Person ();&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;p1.setAge (&amp;lt;span class=&amp;quot;number&amp;quot;&amp;gt;55&amp;lt;/span&amp;gt;);&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;// 在这里 this 指向 p1&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;span class=&amp;quot;line&amp;quot;&amp;gt;p2.setAge (&amp;lt;span class=&amp;quot;number&amp;quot;&amp;gt;60&amp;lt;/span&amp;gt;);&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;// 在这里 this 指向 p2&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;/figure&amp;gt;:hexoPostRenderEscape--&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-this关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-this关键字&#34;&gt;#&lt;/a&gt; 3、this 关键字&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在类的方法定义中使用的 this 关键字表示使用该方法对象的引用。&lt;/li&gt;
&lt;li&gt;当必须指出当前使用方法对象是谁时要使用 this&lt;/li&gt;
&lt;li&gt;this 可以看作是一个变量，它的值是当前对象的引用&lt;/li&gt;
&lt;li&gt;当处理方法中成员变量和局部变量重名时要用 this&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-总结&#34;&gt;#&lt;/a&gt; 4、总结&lt;/h1&gt;
&lt;p&gt;java 中类的封装和隐藏就是：&lt;br /&gt;
通过将类的成员数据声明为私有的（private），再提供公共的（public）方法：getXXX () 和 setXXX () 实现对该属性的操作。以实现以下目的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐藏一个类中不需要对外提供的实现细节&lt;/li&gt;
&lt;li&gt;使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑，限制对属性的不合理操作；&lt;/li&gt;
&lt;li&gt;便于修改，增强代码的可维护性&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2020-08-20T16:02:45.399Z</updated>
    </entry>
</feed>
