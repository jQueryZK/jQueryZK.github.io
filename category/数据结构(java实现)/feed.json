{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog • All posts by \"数据结构(java实现)\" category",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/2020/09/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%B0%88%E5%93%88%E5%B8%8C%E8%A1%A8(Hash%20Table)/",
            "url": "http://yoursite.com/2020/09/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%B0%88%E5%93%88%E5%B8%8C%E8%A1%A8(Hash%20Table)/",
            "title": "数据结构（Java实现）-详谈哈希表(Hash Table)",
            "date_published": "2020-09-10T08:28:30.810Z",
            "content_html": "<h1 id=\"1-哈希表介绍\"><a class=\"markdownIt-Anchor\" href=\"#1-哈希表介绍\">#</a> 1、哈希表介绍</h1>\n<p>散列表（Hash table，也叫哈希表），是根据<strong>关键码值 (Key value)<strong> 而</strong>直接进行访问</strong>的<strong>数据结构</strong>。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p>\n<p>（<font color=red>哈希表的底层是数组</font>）<br>\n实现哈希表的两种方法：<br>\n1、数组 + 链表<br>\n 2、数组 + 红黑二叉树</p>\n<h1 id=\"2-哈希函数hk\"><a class=\"markdownIt-Anchor\" href=\"#2-哈希函数hk\">#</a> 2、哈希函数 H（k）</h1>\n<p><strong>哈希函数</strong>：建立起数据元素的存放位置与数据元素的关键字之间的对应关系的函数。即<strong>使用哈希函数可将被查找的键转换为数组的索引</strong>。理想情况下它应该运算简单并且保证任何两个不同的关键字映射到不同的单元（索引值）。但是，这是不可能的，很多时候我们都需要处理<strong>多个键被哈希到同一个索引值的情况，即哈希碰撞冲突</strong></p>\n<p><strong>哈希函数的构造方法：</strong><br>\n（1）直接定址法<br>\n取关键字或关键字的某个线性函数值为哈希地址。即 H (key)=key 或 H (key)=a*key+b   (a,b 为常数)。<br>\n举例 1：统计 1-100 岁的人口，其中年龄作为关键字，哈希函数取关键字自身。查找年龄 25 岁的人口有多少，则直接查表中第 25 项。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020090816234099.png#\" alt=\"在这里插入图片描述\"><br>\n举例 2：统计解放以后出生人口，其中年份作为关键字，哈希函数取关键字自身加一个常数 H (key)=key+(-1948). 查找 1970 年出生的人数，则直接查 (1970-1948)=22 项即可<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200908162408198.png#\" alt=\"在这里插入图片描述\"><br>\n（2）数字分析法<br>\n若关键字是以 r 为基的数（如：以 10 为基的十进制数），并且哈希表中可能出现的关键字都是事先知道的，则可取关键字的若干数位组成哈希地址。<br>\n举例：有 80 个记录，其关键字为 8 位十进制数，假设哈希表长 1000，则可取两位十进制数组成哈希地址，为了尽量避免冲突，可先分析关键字。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200908162558912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#\" alt=\"在这里插入图片描述\"><br>\n经分析，发现第一位、第二位都是 8,1，第三位只可能取 3 或 4，第八位只可能取 2,5 或 7，所以这四位不可取，那么对于第四、五、六、七位可看成是随机的，因此，可取其中任意两位，或取其中两位与另外两位的叠加求和舍去进位作为哈希地址。<br>\n（3）平方取中法<br>\n取关键字平方后的中间几位为哈希地址。（较常用的一种）</p>\n<p>举例：为 BASIC 源程序中的标识符键一个哈希表（假设 BASIC 语言允许的标识符为一个字母或者一个字母和一个数字两种情况，在计算机内可用两位八进制数表示字母和数字），假设表长为 512=2^{9}，则可取关键字平方后的中间 9 位二进制数为哈希地址。（每 3 个二进制位可表示 1 位八进制位，即 3 个八进制位为 9 个二进制位）<br>\nA ：01 （A 的 ASCII 码值为 65,65 的八进制为 101，取后两位表示关键字）<br>\nB：02 （B 的 ASCII 码值为 66,66 的八进制为 102，取后两位表示关键字）<br>\n…<br>\nZ：32（Z 的 ASCII 码值为 90,90 的八进制为 132，取后两位表示关键字）<br>\n…<br>\n0：60（0 的 ASCII 码值为 48,48 的八进制为 60，取后两位表示关键字）<br>\n…<br>\n9：71（9 的 ASCII 码值为 57,57 的八进制为 71，取后两位表示关键字）<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200908162656701.png#\" alt=\"在这里插入图片描述\"><br>\n（4）折叠法<br>\n将关键字分割成位数相同的几部分（最后一部分的位数可不同），然后取这几部分的叠加和（舍去进位）作为哈希地址。适用于关键字位数比较多，且关键字中每一位上数字分布大致均匀时。<br>\n举例：根据国际标准图书编号（ISBN）建立一个哈希表。如一个国际标准图书编号  0-442-20586-4 的哈希地址为：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200908162727824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n（5）除留余数法<br>\n取关键字被某个不大于哈希表表长 m 的数 p 除后所得余数为哈希地址（p 为素数）<br>\nH（key）=key  MOD  p，p&lt;=m   （最简单，最常用）p 的选取很重要<br>\n一般情况，p 可以选取为质数或者不包含小于 20 的质因数的合数（合数指自然数中除了能被 1 和本身整除外，还能被其他数（0 除外）整除的数）。<br>\n（6）随机数法<br>\n选择一个随机函数，取关键字的随机函数值为它的哈希地址。即 H（key）=random（key），其中 random 为随机函数。适用于关键字长度不等时。<br>\n总结：实际工作中根据情况不同选用的哈希函数不同，通常，考虑因素如下：<br>\n（1）计算哈希函数所需时间（包括硬件指令的因素）<br>\n（2）关键字的长度<br>\n（3）哈希表的大小<br>\n（4）关键字的分布情况<br>\n（5）记录的查找频率</p>\n<h1 id=\"3-解决哈希碰撞\"><a class=\"markdownIt-Anchor\" href=\"#3-解决哈希碰撞\">#</a> 3、解决哈希碰撞</h1>\n<h2 id=\"1-开放地址法\"><a class=\"markdownIt-Anchor\" href=\"#1-开放地址法\">#</a> 1、开放地址法</h2>\n<p><strong>开放地址法</strong>：通过系统的方法找到系统的空位（三种：<strong>线性探测、二次探测、再哈希法</strong>），并将待插入的元素填入，而不再使用用 hash 函数得到数字作为数组的下标。</p>\n<ul>\n<li><strong>线性探测</strong>：假若当前要插入的位置已经被占用了之后，沿数组下标递增方向查找，直到找到空位为止</li>\n<li><strong>二次探测</strong>：二次探测和线性探测的区别在于二次探测的步长是，若计算的原始下标是 x 则二次探测的过程是 x+12，x+22，x+32，x+42，x+52 随着探测次数的增加，探测的步长是探测次数的二次方（因此名为二次探测）。二次探测会产生二次聚集：即当插入的几个数经过 hash 后的下标相同的话，那么这一串数字插入的探测步长会增加很快</li>\n<li><strong>再 hash 法</strong>：为了消除原始聚集和二次聚集，把关键字用不同的 hash 函数<strong>再做一遍 hash 化</strong>，用过这个结果作为探测的步长，这样对于特定的关键字在整个探测中步长不变，但是不同的关键字会使用不同的步长。<strong>stepSize = constant - （key % constant）</strong> 这个 hash 函数求步长比较实用，constant 是小于数组容量的质数。（注意：第二个 hash 函数必须和第一个 hash 函数不同，步长 hash 函数输出的结果值不能为 0）</li>\n</ul>\n<p><strong>哈希表的扩容</strong>：<br>\n<strong>关于开放寻址也有个疑问，那就是如果一直找不到空的位置怎么办？</strong><br>\n这种情况不存在，为啥嘞？你这样想，是因为你考虑了一个前提，那就是位置已经被占光了，没有空位置了，但是实际情况是位置不会被占光的，因为有一定量的位置被占了的时候就会发生扩容。当哈希表被占的位置比较多的时候，出现哈希冲突的概率也就变高了，所以很有必要进行扩容。<br>\n<strong>那么这个扩容是怎么扩的呢？</strong><br>\n这里一般会有一个<strong>增长因子</strong>的概念，也叫作负载因子，简单点说就是已经被占的位置与总位置的一个百分比，比如一共十个位置，现在已经占了七个位置，就触发了扩容机制，因为它的增长因子是 0.7，也就是达到了总位置的百分之七十就需要扩容。拿 HashMap 来说，当它当前的容量占总容量的百分之七十五的时候就需要扩容了。而且这个扩容也不是简单的把数组扩大，而是新创建一个数组是原来的 2 倍，然后把原数组的所有元素都重新 Hash 一遍放到新的数组。</p>\n<h2 id=\"2-链地址法\"><a class=\"markdownIt-Anchor\" href=\"#2-链地址法\">#</a> 2、链地址法</h2>\n<p><strong>链地址法</strong>  ：创建一个存放单词链表的数组，数组内不直接存放元素，而是存储元素的链表。发生冲突的时候，数据项直接接到这个数组下标所指的链表中即可。<br>\n　　优势：填入过程允许重复，所有关键值相同的项放在同一链表中，找到所有项就需要查找整个是链表，稍微有点影响性能。删除只需要找到正确的链表，从链表中删除对应的数据即可。表容量是质数的要求不像在二次探测和再 hash 法中那么重要，由于没有探测的操作，所以无需担心容量被步长整除，从而陷入无限循环中。</p>\n<p><strong>如果冲突的很多，那这个增加的链表岂不是很长？</strong><br>\n如果冲突过多的话，这个 key 对应的链表会变得比较长，怎么处理呢？这里举个例子吧，拿 java 集合类中的 HashMap 来说吧，如果这里的链表<strong>长度大于等于 8</strong> 的话，链表就会转换成<strong>红黑树结构</strong>，当然如果<strong>长度小于等于 6</strong> 的话，就会<strong>还原链表</strong>。以此来解决链表过长导致的性能问题。这样设计是因为中间有个 7 作为一个差值，来避免频繁的进行树和链表的转换，因为转换频繁也是影响性能的啊。</p>\n<h1 id=\"5-使用哈希表管理雇员信息\"><a class=\"markdownIt-Anchor\" href=\"#5-使用哈希表管理雇员信息\">#</a> 5、使用哈希表管理雇员信息</h1>\n<p><strong>题目</strong>：有一个公司，当有新的员工来报道时，要求将该员工的信息加入 (id、姓名，性别，电话), 当输入该员工的 id 时，要求查找到该员工的所有信息.<br>\n 要求：</p>\n<ul>\n<li>不使用数据库，速度越快越好</li>\n<li>添加时，保证按照 id 从低到高插入</li>\n<li>使用链表来实现哈希表，该链表不带表头</li>\n</ul>\n<p>思路分析：<br>\n添加雇员信息</p>\n<ol>\n<li>创建一个节点类存储雇员的信息（id，name，sex，phone）</li>\n<li>创建一个定长数组为哈希表，哈希表的每个数组元素储存一条链表头节点</li>\n<li>根据散列函数将要添加的雇员 id 进行散列（比如：散列函数构造采用简单的取模法：H (k)=id % size  假如 id=1001 数组长度为 7 则取余后的 key 为 0 对应的数组下标为 0）</li>\n<li>根据 id 散列后的 key 值将对应 id 的雇员节点链接到对应的数组下标下的链表后面</li>\n</ol>\n<p>查找对应 id 的雇员信息：</p>\n<ol>\n<li>根据 id 散列得到 key 值</li>\n<li>到 key 值对应的数组下标的链表中进行查询<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200908165519112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashTabDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建哈希表</span></span><br><span class=\"line\">\t\tHashTab hashTab = <span class=\"keyword\">new</span> HashTab(<span class=\"number\">7</span>);\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//写一个简单的菜单</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;1:  添加雇员&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;2: 显示雇员&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;3: 查找雇员&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;4: 退出系统&quot;</span>);\t\t\t</span><br><span class=\"line\">\t\t\tn = scanner.nextInt();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (n) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;输入id&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> id = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;输入名字&quot;</span>);</span><br><span class=\"line\">\t\t\t\tString name = scanner.next();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;输入性别&quot;</span>);</span><br><span class=\"line\">\t\t\t\tString sex = scanner.next();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;输入电话&quot;</span>);</span><br><span class=\"line\">\t\t\t\tString phone = scanner.next();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//创建 雇员</span></span><br><span class=\"line\">\t\t\t\tEmp emp = <span class=\"keyword\">new</span> Emp(id, name,sex,phone);</span><br><span class=\"line\">\t\t\t\thashTab.add(emp);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\thashTab.list();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入要查找的id&quot;</span>);</span><br><span class=\"line\">\t\t\t\tid = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\thashTab.findEmpById(id);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\t\tscanner.close();</span><br><span class=\"line\">\t\t\t\tSystem.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建HashTab 管理多条链表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashTab</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> EmpLinkedList[] empLinkedListArray;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size; <span class=\"comment\">//表示有多少条链表\t</span></span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashTab</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.size = size;</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化empLinkedListArray</span></span><br><span class=\"line\">\t\tempLinkedListArray = <span class=\"keyword\">new</span> EmpLinkedList[size];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\tempLinkedListArray[i] = <span class=\"keyword\">new</span> EmpLinkedList();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//添加雇员</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Emp emp)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//根据员工的id ,得到该员工应当添加到哪条链表</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> empLinkedListNO = hashFun(emp.id);</span><br><span class=\"line\">\t\t<span class=\"comment\">//将emp 添加到对应的链表中</span></span><br><span class=\"line\">\t\tempLinkedListArray[empLinkedListNO].add(emp);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历所有的链表,遍历hashtab</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\tempLinkedListArray[i].list(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//根据输入的id,查找雇员</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">findEmpById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用散列函数确定到哪条链表查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> empLinkedListNO = hashFun(id);</span><br><span class=\"line\">\t\tEmp emp = empLinkedListArray[empLinkedListNO].findEmpById(id);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(emp != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;在第%d条链表中找到 雇员 id = %d name = %s sex = %s phone = %s&quot;</span>, (empLinkedListNO + <span class=\"number\">1</span>), id,emp.name,emp.sex,emp.phone);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;在哈希表中，没有找到该雇员~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//编写散列函数, 使用一个简单取模法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashFun</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id % size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表示一个雇员</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Emp</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String sex;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String phone;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Emp next; <span class=\"comment\">//next 默认为 null</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Emp</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name,String sex,String phone)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.phone = phone;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建EmpLinkedList ,表示链表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmpLinkedList</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//头指针，指向第一个Emp,因此我们这个链表的head 是直接指向第一个Emp</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Emp head; <span class=\"comment\">//默认null\t</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//添加雇员到链表</span></span><br><span class=\"line\">\t<span class=\"comment\">//说明</span></span><br><span class=\"line\">\t<span class=\"comment\">//1. 假定，当添加雇员时，id 是自增长，即id的分配总是从小到大</span></span><br><span class=\"line\">\t<span class=\"comment\">//   因此我们将该雇员直接加入到本链表的最后即可</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Emp emp)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果是添加第一个雇员</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\thead = emp;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果不是第一个雇员，则使用一个辅助的指针，帮助定位到最后</span></span><br><span class=\"line\">\t\tEmp curEmp = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curEmp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明到链表最后</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcurEmp = curEmp.next; <span class=\"comment\">//后移</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//退出时直接将emp 加入链表</span></span><br><span class=\"line\">\t\tcurEmp.next = emp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//遍历链表的雇员信息</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//说明链表为空</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;第 &quot;</span>+(no+<span class=\"number\">1</span>)+<span class=\"string\">&quot; 链表为空&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">&quot;第 &quot;</span>+(no+<span class=\"number\">1</span>)+<span class=\"string\">&quot; 链表的信息为&quot;</span>);</span><br><span class=\"line\">\t\tEmp curEmp = head; <span class=\"comment\">//辅助指针</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot; =&gt; id=%d name=%s sex=%s phone=%s\\t&quot;</span>, curEmp.id, curEmp.name,curEmp.sex,curEmp.phone);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curEmp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明curEmp已经是最后结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcurEmp = curEmp.next; <span class=\"comment\">//后移，遍历</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//根据id查找雇员</span></span><br><span class=\"line\">\t<span class=\"comment\">//如果查找到，就返回Emp, 如果没有找到，就返回null</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Emp <span class=\"title\">findEmpById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断链表是否为空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//辅助指针</span></span><br><span class=\"line\">\t\tEmp curEmp = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curEmp.id == id) &#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;<span class=\"comment\">//这时curEmp就指向要查找的雇员</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//退出</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curEmp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明遍历当前链表没有找到该雇员</span></span><br><span class=\"line\">\t\t\t\tcurEmp = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcurEmp = curEmp.next;<span class=\"comment\">//以后</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> curEmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>:  添加雇员</span><br><span class=\"line\"><span class=\"number\">2</span>: 显示雇员</span><br><span class=\"line\"><span class=\"number\">3</span>: 查找雇员</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出系统</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">输入id</span><br><span class=\"line\"><span class=\"number\">1001</span></span><br><span class=\"line\">输入名字</span><br><span class=\"line\">张三</span><br><span class=\"line\">输入性别</span><br><span class=\"line\">男</span><br><span class=\"line\">输入电话</span><br><span class=\"line\"><span class=\"number\">12345674512</span></span><br><span class=\"line\"><span class=\"number\">1</span>:  添加雇员</span><br><span class=\"line\"><span class=\"number\">2</span>: 显示雇员</span><br><span class=\"line\"><span class=\"number\">3</span>: 查找雇员</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出系统</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">输入id</span><br><span class=\"line\"><span class=\"number\">1002</span></span><br><span class=\"line\">输入名字</span><br><span class=\"line\">李强</span><br><span class=\"line\">输入性别</span><br><span class=\"line\">男</span><br><span class=\"line\">输入电话</span><br><span class=\"line\"><span class=\"number\">14578214573</span></span><br><span class=\"line\"><span class=\"number\">1</span>:  添加雇员</span><br><span class=\"line\"><span class=\"number\">2</span>: 显示雇员</span><br><span class=\"line\"><span class=\"number\">3</span>: 查找雇员</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出系统</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">输入id</span><br><span class=\"line\"><span class=\"number\">1009</span></span><br><span class=\"line\">输入名字</span><br><span class=\"line\">王文</span><br><span class=\"line\">输入性别</span><br><span class=\"line\">女</span><br><span class=\"line\">输入电话</span><br><span class=\"line\"><span class=\"number\">14789654233</span></span><br><span class=\"line\"><span class=\"number\">1</span>:  添加雇员</span><br><span class=\"line\"><span class=\"number\">2</span>: 显示雇员</span><br><span class=\"line\"><span class=\"number\">3</span>: 查找雇员</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出系统</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">第 <span class=\"number\">1</span> 链表的信息为 =&gt; id=<span class=\"number\">1001</span> name=张三 sex=男 phone=<span class=\"number\">12345674512</span>\t</span><br><span class=\"line\">第 <span class=\"number\">2</span> 链表的信息为 =&gt; id=<span class=\"number\">1002</span> name=李强 sex=男 phone=<span class=\"number\">14578214573</span>\t =&gt; id=<span class=\"number\">1009</span> name=王文 sex=女 phone=<span class=\"number\">14789654233</span>\t</span><br><span class=\"line\">第 <span class=\"number\">3</span> 链表为空</span><br><span class=\"line\">第 <span class=\"number\">4</span> 链表为空</span><br><span class=\"line\">第 <span class=\"number\">5</span> 链表为空</span><br><span class=\"line\">第 <span class=\"number\">6</span> 链表为空</span><br><span class=\"line\">第 <span class=\"number\">7</span> 链表为空</span><br><span class=\"line\"><span class=\"number\">1</span>:  添加雇员</span><br><span class=\"line\"><span class=\"number\">2</span>: 显示雇员</span><br><span class=\"line\"><span class=\"number\">3</span>: 查找雇员</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出系统</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">请输入要查找的id</span><br><span class=\"line\"><span class=\"number\">1009</span></span><br><span class=\"line\">在第<span class=\"number\">2</span>条链表中找到 雇员 id = <span class=\"number\">1009</span> name = 王文 sex = 女 phone = <span class=\"number\">14789654233</span></span><br><span class=\"line\"><span class=\"number\">1</span>:  添加雇员</span><br><span class=\"line\"><span class=\"number\">2</span>: 显示雇员</span><br><span class=\"line\"><span class=\"number\">3</span>: 查找雇员</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出系统</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "哈希表",
                "开放地址法",
                "链地址法",
                "哈希函数"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E5%8D%95%E9%93%BE%E8%A1%A8%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E6%96%B0%E6%B5%AA%E3%80%81%E7%99%BE%E5%BA%A6%E3%80%81%E8%85%BE%E8%AE%AF%EF%BC%89/",
            "url": "http://yoursite.com/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E5%8D%95%E9%93%BE%E8%A1%A8%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E6%96%B0%E6%B5%AA%E3%80%81%E7%99%BE%E5%BA%A6%E3%80%81%E8%85%BE%E8%AE%AF%EF%BC%89/",
            "title": "数据结构（Java实现）-单链表常见面试题（新浪、百度、腾讯）",
            "date_published": "2020-08-24T13:56:07.823Z",
            "content_html": "<h1 id=\"1-求单链表中有效节点个数\"><a class=\"markdownIt-Anchor\" href=\"#1-求单链表中有效节点个数\">#</a> 1、求单链表中有效节点个数</h1>\n<p><strong>思路：</strong> 遍历链表获取单链表的节点的个数（如果是带头节点的链表，不能统计头节点）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">(LinkNode head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head.next==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//空链表</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//定义一个辅助的变量，这里我们没有统计头节点</span></span><br><span class=\"line\">    LinkNode cur = head.next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        length++;</span><br><span class=\"line\">        cur = cur.next;<span class=\"comment\">//继续向下遍历</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-查找单链表中的倒数第k个节点新浪面试题\"><a class=\"markdownIt-Anchor\" href=\"#2-查找单链表中的倒数第k个节点新浪面试题\">#</a> 2、查找单链表中的倒数第 k 个节点（新浪面试题）</h1>\n<p><strong>思路：</strong></p>\n<ol>\n<li>编写一个方法，接收 head 节点，同时接收一个 index 值（即 k 的值）</li>\n<li>先把链表从头到尾遍历，得到链表的总长度，用上一题的 getLength（）方法</li>\n<li>得到长度 size 后，我们从链表的第一个开始遍历（size-index）个，就可以得到</li>\n<li>如果找到了，返回该节点，否则返回 null</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LinkNode <span class=\"title\">findLastIndexNode</span><span class=\"params\">(LinkNode head,<span class=\"keyword\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//判断如果链表为空，返回null</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//第一遍遍历得到长度</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> size = getLength(head);</span><br><span class=\"line\">\t<span class=\"comment\">//第二次遍历size-index位置，就是倒数的第K个节点</span></span><br><span class=\"line\">\t<span class=\"comment\">//先做一个index校验</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(index &lt;= <span class=\"number\">0</span> || index &gt; size)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//定义一个辅助变量cur，for循环定位到倒数的index</span></span><br><span class=\"line\">\tLinkNode cur = head.next;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;size-index;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcur = cur.next;<span class=\"comment\">//向后遍历</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-单链表的反转腾讯面试题\"><a class=\"markdownIt-Anchor\" href=\"#3-单链表的反转腾讯面试题\">#</a> 3、单链表的反转 (腾讯面试题）</h1>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081416344023.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200814163450550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>思路：</strong></p>\n<ol>\n<li>先定义一个新的头节点 reverseHead = new LinkNode ();</li>\n<li>从头到尾遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表头 reverseHead.next 上</li>\n<li>原来的链表头 head.next = reverseHead.next</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reversetList</span><span class=\"params\">(LinkNode head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果当前链表为空，或者只有一个节点，无需反转，直接返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span> || head.next.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//定义一个辅助变量，帮助我们遍历原来的链表</span></span><br><span class=\"line\">\tLinkNode cur = head.next;</span><br><span class=\"line\">\tStudentLinkNode temp = <span class=\"keyword\">null</span>;<span class=\"comment\">//定义一个空的temp节点</span></span><br><span class=\"line\">\tLinkNode reverseHead = <span class=\"keyword\">new</span> LinkNode();</span><br><span class=\"line\">\t<span class=\"comment\">//遍历原来的链表，每遍历一个节点，就将其取出并放在新的reverseHead的后面第一个节点的位置</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttemp = cur.next;<span class=\"comment\">//空的temp节点暂时储存当前节点cur的下一个节点</span></span><br><span class=\"line\">\t\tcur.next = reverseHead.next;<span class=\"comment\">//将cur的下一个节点指向新的链表的最前端</span></span><br><span class=\"line\">\t\treverseHead.next = cur;<span class=\"comment\">//将cur连接到新的链表上</span></span><br><span class=\"line\">\t\tcur = cur.next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//将head.next指向reverseHead,next实现单链表的反转</span></span><br><span class=\"line\">\thead.next = reverseHead.next;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-从尾到头打印单链表\"><a class=\"markdownIt-Anchor\" href=\"#4-从尾到头打印单链表\">#</a> 4、从尾到头打印单链表</h1>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200814172922544.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>思路：</strong></p>\n<ol>\n<li>这道题目要求的是逆序打印单链表</li>\n<li>方式一：先将单链表进行反转操作，然后进行遍历即可，但是这样做的问题是会破坏原来的单链表的结构（不建议）</li>\n<li>方式二：可以利用<strong>栈</strong>这个数据结构，将<strong>各个节点压入到栈中</strong>，然后利用栈的<strong>先进后出</strong>的特点，就实现了逆序打印的效果。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reversePrint</span><span class=\"params\">(LinkNode head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;<span class=\"comment\">//空链表，不能打印</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//创建一个栈，将各个节点压入栈中</span></span><br><span class=\"line\">\tStack&lt;LinkNode&gt; Stack = <span class=\"keyword\">new</span> Stack&lt;LinkNode&gt;();</span><br><span class=\"line\">\tLinkNode cur = head.next;</span><br><span class=\"line\">\t<span class=\"comment\">//将链表的所有节点压入栈中</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstack.push(cur);</span><br><span class=\"line\">\t\tcur = cur.next;<span class=\"comment\">//cur后移，这样就可以压入下一个节点</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//将栈中的节点进行打印，pop出栈</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(stack.size()&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tSystem,out.println(stack.pop());<span class=\"comment\">//stack的特点就是先进的后出</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-合并两个有序的单链表合并之后的链表依然有序\"><a class=\"markdownIt-Anchor\" href=\"#5-合并两个有序的单链表合并之后的链表依然有序\">#</a> 5、合并两个有序的单链表，合并之后的链表依然有序</h1>\n<p><strong>思路：</strong></p>\n<ol>\n<li>cur1 和 cur2 分别是两条有序链表的辅助引用（指针）方便两个链表的遍历，result 则为合并之后的结果链表，tail 为结果链表的最后一个节点，方便尾插</li>\n<li>cur1 和 cur2 同时往后走，两个引用所指的数分别比较，拿出来的节点尾插在 result 链表中<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200814211820459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LinkNode <span class=\"title\">mergeList</span><span class=\"params\">(LinkNode node1,LinkNode node2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//定义一个辅助变量cur1，帮助我们遍历第一条链表</span></span><br><span class=\"line\">    LinkNode cur1 = node1;</span><br><span class=\"line\">\t<span class=\"comment\">//定义一个辅助变量cur2，帮助我们遍历第二条链表</span></span><br><span class=\"line\">    LinkNode cur2 = node2;</span><br><span class=\"line\">    LinkNode result = <span class=\"keyword\">new</span> LinkNode();<span class=\"comment\">//定义节点temp为合并后产生的新链表的头节点</span></span><br><span class=\"line\">\t<span class=\"comment\">//result 则为合并之后的结果链表头节点，tail为结果链表的最后一个节点，方便尾插</span></span><br><span class=\"line\">    result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ListNode tail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//定义一个空的temp节点</span></span><br><span class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((cur1 != <span class=\"keyword\">null</span>)  &amp;&amp;  (cur2 != <span class=\"keyword\">null</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(cur1.data &lt;= cur2.data)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(result != <span class=\"keyword\">null</span>)<span class=\"comment\">//当结果链表不为空时</span></span><br><span class=\"line\">\t\t\t&#123;   </span><br><span class=\"line\">\t\t\t\ttemp = cur1.next;  <span class=\"comment\">// temp节点保存链表1的下一个节点，让循环可以继续</span></span><br><span class=\"line\">                tail.next = cur1;   <span class=\"comment\">// 插入过程</span></span><br><span class=\"line\">                cur1.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                tail = cur1;  <span class=\"comment\">//保存结果链表的最后一个节点</span></span><br><span class=\"line\">                cur1 = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;   <span class=\"comment\">// 结果链表为空时</span></span><br><span class=\"line\">                temp = cur1.next;</span><br><span class=\"line\">                result = cur1;</span><br><span class=\"line\">                cur1.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"comment\">//保存新的最后一个节点</span></span><br><span class=\"line\">                tail = cur1;</span><br><span class=\"line\">                cur1 = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">                temp = cur2.next;</span><br><span class=\"line\">                tail.next = cur2;</span><br><span class=\"line\">                cur2.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                tail = cur2;</span><br><span class=\"line\">                cur2 = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">                temp = cur2.next;</span><br><span class=\"line\">                result = cur2;</span><br><span class=\"line\">                cur2.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"comment\">//保存新的最后一个节点</span></span><br><span class=\"line\">                tail = cur2;</span><br><span class=\"line\">                cur2 = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//其中一个链表为空之后</span></span><br><span class=\"line\">    <span class=\"comment\">//第一条链表的cur1走完以后，第二条链表的cur2还没走完就直接插到结果链表的尾部</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur1 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        tail.next = cur2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//第二条链表的cur2走完以后，第一条链表的cur1还没走完就直接插到结果链表的尾部</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur2 == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        tail.next = cur1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "单链表",
                "数据结构",
                "面试题"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E5%8D%95%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%89/",
            "url": "http://yoursite.com/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E5%8D%95%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%89/",
            "title": "数据结构（Java实现）-单链表（单链表实现学生成绩管理系统）",
            "date_published": "2020-08-24T13:42:22.763Z",
            "content_html": "<h1 id=\"1-链表\"><a class=\"markdownIt-Anchor\" href=\"#1-链表\">#</a> 1、链表</h1>\n<h2 id=\"11链表的基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#11链表的基本介绍\">#</a> 1.1 链表的基本介绍</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200814092724497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>链表是以节点的方式来存储，是链式存储，从图中发现，链表的各个节点不一定是连续存储</li>\n<li>每个节点包含 data 域：存储数据，next 域：指向下一个节点 链表分带头节点</li>\n<li>链表和没有头节点的链表，根据实际的需求来确定</li>\n</ul>\n<p><strong>没有头节点单链表：</strong> 也就是 phead 只是一个引用（指针），指向链表的第一个节点<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200814103326504.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>有头节点单链表：</strong> phead 是头节点只不过头节点的 data 不保存信息<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200814103521892.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>基本概念：</strong> 链表的每个元素称为一个节点，每个节点都可以存储在内存中的不同的位置，为了表示每个元素与后继元素的逻辑关系，以便构成 “一个节点链着一个节点” 的链式存储结构，除了存储元素本身的信息外，还要存储其直接后继信息，因此，每个节点都包含两个部分，第一部分称为链表的数据区域，用于存储元素本身的数据信息，这里用 data 表示，它不局限于一个成员数据，也可是多个成员数据，第二部分是一个结构体指针，称为链表的<strong>指针域</strong>  ，用于存储其直接后继的节点信息，这里用 next 表示，next 的值实际上就是<strong>下一个节点的地址</strong> ，当前节点为末节点时，next 的值设为空指针</p>\n<h2 id=\"12链表和数组的比较\"><a class=\"markdownIt-Anchor\" href=\"#12链表和数组的比较\">#</a> 1.2 链表和数组的比较</h2>\n<p><strong>数组：</strong> 数组（包括结构体数组）的实质是一种线性表的顺序表示方式，它的优点是使用直观，便于快速、随机地存取线性表中的任一元素，但缺点是对其进行 插入和删除操作时需要移动大量的数组元素，同时由于数组属于静态内存分配，定义数组时必须指定数组的长度，程序一旦运行，其长度就不能再改变，实际使用个数不能超过数组元素最大长度的限制，否则就会发生下标越界的错误，低于最大长度时又会造成系统资源的浪费，因此空间效率差。</p>\n<p><strong>链表：</strong> 链表实际上是线性表的链式存储结构，与数组不同的是，它是用一组任意的存储单元来存储线性表中的数据，存储单元不一定是连续的，且链表的长度不是固定的，链表数据的这一特点使其可以非常的方便地实现节点的插入和删除操作。链表的特性，使其在某些操作上比数组更加高效。例如当进行插入和删除操作时，链表操作的时间复杂度仅为 O (1)。另外，因为链表在内存中不是连续存储的，所以可以充分利用内存中的碎片空间。除此之外，链表还是很多算法的基础，最常见的哈希表就是基于链表来实现的。</p>\n<h1 id=\"2-单向链表的具体实现\"><a class=\"markdownIt-Anchor\" href=\"#2-单向链表的具体实现\">#</a> 2、单向链表的具体实现</h1>\n<p>本节将具体介绍单向链表（带头结点）的结构和各种操作的具体实现</p>\n<h2 id=\"21单链表带头节点逻辑结构示意图如下\"><a class=\"markdownIt-Anchor\" href=\"#21单链表带头节点逻辑结构示意图如下\">#</a> 2.1 单链表（带头节点）逻辑结构示意图如下</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200814095145397.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"22单链表的应用实例单链表实现学生成绩管理系统\"><a class=\"markdownIt-Anchor\" href=\"#22单链表的应用实例单链表实现学生成绩管理系统\">#</a> 2.2 单链表的应用实例（单链表实现学生成绩管理系统）</h2>\n<p>为了方便对链表各项操作的理解，把链表应用到具体的实例中：用带头节点的单链表实现学生成绩管理系统。对学生的成绩信息实现增删改查的操作，具体实现目标如下：</p>\n<ol>\n<li>添加学生成绩信息</li>\n<li>根据学号将学生信息插入到指定位置</li>\n<li>显示所有学生的信息</li>\n<li>删除指定学生成绩信息</li>\n<li>修改指定学生成绩信息</li>\n<li>查询当前链表中有多少为同学</li>\n<li>查询指定分数的学生个数，并输出查询的学生信息</li>\n<li>退出程序</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zhukun.LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentLinkNode</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> stuno;<span class=\"comment\">//学生学号</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String name;<span class=\"comment\">//学生姓名</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> score;<span class=\"comment\">//学生分数</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span>  StudentLinkNode next;<span class=\"comment\">//指向下一个结点的指针</span></span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StudentLinkNode</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StudentLinkNode</span><span class=\"params\">(<span class=\"keyword\">int</span> stuno,String name,<span class=\"keyword\">int</span> score)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.stuno = stuno;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.score = score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setInfo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">&quot;学号：&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.stuno = scanner.nextInt();</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">&quot;姓名：&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = scanner.next();</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">&quot;分数：&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.score = scanner.nextInt();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//为了显示方法，重写toString方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;学号:    &quot;</span>+stuno+<span class=\"string\">&quot;    &quot;</span>+<span class=\"string\">&quot;姓名&quot;</span>+name+<span class=\"string\">&quot;    &quot;</span>+<span class=\"string\">&quot;分数&quot;</span>+score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//先初始化一个头节点，头节点不要动，不存放具体的数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> StudentLinkNode head = <span class=\"keyword\">new</span> StudentLinkNode(<span class=\"number\">0</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//添加结点到单向链表</span></span><br><span class=\"line\">\t<span class=\"comment\">//当不考虑编号顺序时</span></span><br><span class=\"line\">\t<span class=\"comment\">//1、找到当前链表的最后结节点</span></span><br><span class=\"line\">\t<span class=\"comment\">//2、将最后这个节点的next 指向 新的结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(StudentLinkNode stuNode)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//因为head节点不能动，因此我们需要一个辅助遍历的节点  temp</span></span><br><span class=\"line\">\t\tStudentLinkNode temp = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//找到链表的最后的节点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果遍历的当前结点不是尾结点，将temp节点向后移动</span></span><br><span class=\"line\">\t\t\ttemp = temp.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//当退出while循环时，表示temp就指向了链表的尾节点</span></span><br><span class=\"line\">\t\ttemp.next = stuNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//第二种添加方式，在添加学生时根据学号将学生插入到指定位置</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBystuno</span><span class=\"params\">(StudentLinkNode stuNode)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//因为头节点不能动，因此我们仍然通过一个辅助指针(变量)来帮助找到添加的位置</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//因为是单链表，我们找的temp是位于添加位置的前一个节点，否则插入不了</span></span><br><span class=\"line\">\t\tStudentLinkNode temp = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;<span class=\"comment\">//flag标志添加的学号是否存在，默认为false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.next == <span class=\"keyword\">null</span>) <span class=\"comment\">//说明temp已经在链表的最后</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.next.stuno &gt; stuNode.stuno)<span class=\"comment\">//位置找到，就在temp的后面插入</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(temp.next.stuno == stuNode.stuno)<span class=\"comment\">//说明想要添加的</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"keyword\">true</span>;<span class=\"comment\">//说明编号存在\t</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttemp = temp.next;<span class=\"comment\">//后移\t</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断flag的值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">\t\t&#123;   <span class=\"comment\">//不能添加，说明编号存在</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;准备添加的学生的学号:&quot;</span>+stuNode.stuno+<span class=\"string\">&quot;已经存在不能添加了&quot;</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//插入到链表中，temp的后面</span></span><br><span class=\"line\">\t\t\tstuNode.next = temp.next;</span><br><span class=\"line\">\t\t\ttemp.next = stuNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历链表</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showlist</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断链表是否为空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//因为头节点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class=\"line\">\t\tStudentLinkNode temp = head.next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//判断是否到链表最后</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//输出节点的信息</span></span><br><span class=\"line\">\t\t\tSystem.out.print(temp);<span class=\"comment\">//前面StudentLinkNode类中已经重写toString方法</span></span><br><span class=\"line\">\t\t\tSystem.out.println();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//将temp后移</span></span><br><span class=\"line\">\t\t\ttemp = temp.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//返回链表中共有多少个学生的信息</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">len</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断链表是否为空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//因为头节点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class=\"line\">\t\tStudentLinkNode temp = head.next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//判断是否到链表最后</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//输出节点的信息</span></span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//将temp后移</span></span><br><span class=\"line\">\t\t\ttemp = temp.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//删除结点：根据学生学号删除指定学生节点</span></span><br><span class=\"line\">\t<span class=\"comment\">//1、head不能动，因此我们需要一个temp辅助节点找到待删除节点的前一个节点</span></span><br><span class=\"line\">\t<span class=\"comment\">//2、说明我们在比较时，是temp.next.stuno和需要删除的节点的stuno比较</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"keyword\">int</span> stuno)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStudentLinkNode temp = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> flag =<span class=\"keyword\">false</span>;<span class=\"comment\">//标志是否找到待删除的节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;<span class=\"comment\">//已经到链表的最后</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.next.stuno == stuno)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//找到待删除的节点的前一个节点temp</span></span><br><span class=\"line\">\t\t\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttemp = temp.next;<span class=\"comment\">//temp后移，遍历</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断flag</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">\t\t&#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//可以删除</span></span><br><span class=\"line\">\t\t\ttemp.next = temp.next.next;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;学号&quot;</span>+stuno+<span class=\"string\">&quot;的学生不存在&quot;</span>);</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//修改节点信息，根据stuno 编号来修改</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(StudentLinkNode stuNode)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断是否为空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//找到需要修改的节点，根据stuno编号</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//定义一个辅助变量</span></span><br><span class=\"line\">\t\tStudentLinkNode temp = head.next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> flag =<span class=\"keyword\">false</span>;<span class=\"comment\">//表示是否找到该节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;<span class=\"comment\">//已经遍历完链表</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.stuno == stuNode.stuno)<span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttemp = temp.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//根据flag判断是否找到要修改的节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag) &#123;</span><br><span class=\"line\">\t\t\ttemp.name = stuNode.name;</span><br><span class=\"line\">\t\t\ttemp.score = stuNode.score;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;没有找到学号为&quot;</span>+stuNode.stuno+<span class=\"string\">&quot;的学生&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//查询指定分数的学生个数，并输出查询的学生信息</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getbyScore</span><span class=\"params\">(<span class=\"keyword\">int</span> score)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStudentLinkNode temp = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;分数为&quot;</span>+score+<span class=\"string\">&quot;的学生有：&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(temp != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.score == score)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;学号：&quot;</span>+temp.stuno+<span class=\"string\">&quot;姓名：&quot;</span>+temp.name);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttemp = temp.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;共上面&quot;</span>+count+<span class=\"string\">&quot;个&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkListDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tLinkedList  list = <span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n;<span class=\"comment\">//接收用户输入</span></span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> loop = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出一个菜单</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(loop)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;|-----欢迎来到学生成绩管理系统-----|&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;1、添加学生成绩信息&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;2、根据学号将学生信息插入到指定位置&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;3、显示所有学生的信息&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;4、删除指定学生成绩信息&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;5、修改指定学生成绩信息&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;6、查询当前链表中有多少为同学&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;7、查询指定分数的学生个数，并输出查询的学生信息&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;8、退出程序&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入你的选择:&quot;</span>);</span><br><span class=\"line\">\t\t\tn = scanner.nextInt();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span>(n)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入学生信息&quot;</span>);</span><br><span class=\"line\">\t\t\t\tStudentLinkNode s1=<span class=\"keyword\">new</span> StudentLinkNode();</span><br><span class=\"line\">\t\t\t\ts1.setInfo();</span><br><span class=\"line\">\t\t\t\tlist.add(s1);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入学生信息&quot;</span>);</span><br><span class=\"line\">\t\t\t\tStudentLinkNode s2=<span class=\"keyword\">new</span> StudentLinkNode( );</span><br><span class=\"line\">\t\t\t\ts2.setInfo();</span><br><span class=\"line\">\t\t\t\tlist.addBystuno(s2);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\t\tlist.showlist();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"string\">&quot;请输入你要删除的学生学号&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> stuno = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\tlist.del(stuno);</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;删除成功&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入你要修改的学生的学号：&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> sno = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入修改后的姓名为：&quot;</span>);</span><br><span class=\"line\">\t\t\t\tString  sname = scanner.next();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入修改后的分数为：&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> sco = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\tStudentLinkNode s3 = <span class=\"keyword\">new</span> StudentLinkNode(sno,sname,sco);</span><br><span class=\"line\">\t\t\t\tlist.update(s3);</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;修改成功&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> num = list.len();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;当前链表中共记录了&quot;</span>+num+<span class=\"string\">&quot;位学生成绩信息&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入你要查询的分数:&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> sco2 = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\tlist.getbyScore(sco2);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">\t\t\t\tscanner.close();</span><br><span class=\"line\">\t\t\t\tloop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "单链表",
                "数据结构",
                "学生成绩管理系统"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%B0%88%E9%98%9F%E5%88%97/",
            "url": "http://yoursite.com/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%B0%88%E9%98%9F%E5%88%97/",
            "title": "数据结构（Java实现）-详谈队列",
            "date_published": "2020-08-24T13:28:56.885Z",
            "content_html": "<h1 id=\"1-队列介绍\"><a class=\"markdownIt-Anchor\" href=\"#1-队列介绍\">#</a> 1、队列介绍</h1>\n<ul>\n<li>队列是一个有序列表，可以用<strong>数组（顺序存储）</strong> 或是 <strong>链表（链式存储）</strong> 来实现</li>\n<li>遵循先入先出（<strong>从队尾进，队首出</strong>）的原则。即：先存入队列的数据，要先取出，后存入的要后取出。</li>\n</ul>\n<h1 id=\"2-队列的顺序存储数组实现\"><a class=\"markdownIt-Anchor\" href=\"#2-队列的顺序存储数组实现\">#</a> 2、队列的顺序存储（数组实现）</h1>\n<p>队列本身是<strong>有序列表</strong>，若使用数组的结构来存储队列的数据，则队列数组的声明如下图，其中 maxSize 是该队列的最大容量。 因为队列的输出、输入是分别从前后端来处理，因此需要两个<strong>变量 front 及 rear</strong> 分别记录队列<strong>前后端的下标</strong>，front 会随着数据输出而改变，而 rear 则是随着数据输入而改变。</p>\n<p>使用数组模拟队列示意图：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081020520374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"21队列的相关概念\"><a class=\"markdownIt-Anchor\" href=\"#21队列的相关概念\">#</a> 2.1 队列的相关概念</h2>\n<ol>\n<li>队头与队尾：允许元素插入的一端称为队尾，允许元素删除的一端称为队头。</li>\n<li>入队：队列的插入操作</li>\n<li>出队：队列的删除操作</li>\n</ol>\n<p>下面用两张图来理解入队和出队：<br>\n例如我们有一个存储整型元素的队列，我们依次入队：{1，2，3}：<br>\n添加元素时，元素只能从队尾一端进入队列，也即是 2 只能跟在 1 后面，3 只能跟在 2 后面。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200810210413281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n如果要出队：元素只能从队首出队列，出队列的顺序为：1、2、3，与入队时的顺序一致，这就是所谓的 “先进先出”。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200810210601254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"22队列的操作\"><a class=\"markdownIt-Anchor\" href=\"#22队列的操作\">#</a> 2.2 队列的操作</h2>\n<p>队列通常提供的操作：</p>\n<ol>\n<li>入队</li>\n<li>出队</li>\n<li>输出所有队列元素</li>\n<li>获取队首元素</li>\n<li>判断队满或队空</li>\n</ol>\n<h2 id=\"23代码实现\"><a class=\"markdownIt-Anchor\" href=\"#23代码实现\">#</a> 2.3 代码实现</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zhukun.ArrayListQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用数组模拟队列-编写一个ArrayQueue类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayQueue</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;<span class=\"comment\">//表示数组的最大容量</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> front;<span class=\"comment\">//队列头</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rear;<span class=\"comment\">//队列尾</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr;<span class=\"comment\">//该数据用于存放数据，模拟队列</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> length=<span class=\"number\">0</span>;<span class=\"comment\">//队列中实际元素的数量</span></span><br><span class=\"line\">\t<span class=\"comment\">//创建队列构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> arrMaxSize)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.maxSize = arrMaxSize;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[maxSize];</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.front = -<span class=\"number\">1</span>;<span class=\"comment\">//指向队列头部，分析出front是指向队列头的前一个位置</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.rear = -<span class=\"number\">1</span>;<span class=\"comment\">//指向队列的尾部，指向队列尾的数据(即就是队列最后一个数据)</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//判断队列是否满</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rear == maxSize-<span class=\"number\">1</span>;<span class=\"comment\">//如果成立则队满，即rear指向容量满足下最后一个数据</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//判断是否为空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rear == front;<span class=\"comment\">//如果成立则对空，即rear指向队首front说明队列为空</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//入队</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断队列是否为满</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isFull()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;队列已满，不能加入数据&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\trear++;<span class=\"comment\">//rear后移</span></span><br><span class=\"line\">\t\tarr[rear] = num;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//出队</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断队列是否为空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//抛出异常</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;队列为空，不能取数据&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfront++;<span class=\"comment\">//front 后移\t</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr[front];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//显示队列的所有元素</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;队列空的，没有数据~&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=front+<span class=\"number\">1</span>;i&lt;rear+<span class=\"number\">1</span>;i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;arr[%d]=%d\\n&quot;</span>,i,arr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//显示队列的头数据，注意不是提取数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">headQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num;<span class=\"comment\">//记录队首元素</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//判断</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;队列空的，没有数据&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnum = arr[front+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//获取当前队列的元素个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rear-front;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayQueueDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个队列</span></span><br><span class=\"line\">\t\tArrayQueue queue = <span class=\"keyword\">new</span> ArrayQueue(<span class=\"number\">6</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n;<span class=\"comment\">//接收用户输入</span></span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> loop = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出一个菜单</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(loop)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;1、输出队列&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;2、退出程序&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;3、入队&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;4、出队&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;5、查看队头数据&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;6、输出队列的元素数量&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入你的选择:&quot;</span>);</span><br><span class=\"line\">\t\t\tn = scanner.nextInt();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span>(n)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tqueue.showQueue();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\tscanner.close();</span><br><span class=\"line\">\t\t\t\tloop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"string\">&quot;请输入要入队的数据：&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> value = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\tqueue.addQueue(value);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> res = queue.getQueue();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;取出的数据是:&quot;</span>+res);</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(e.getMessage());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> res = queue.headQueue();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;队列头的数据为：&quot;</span>+res);</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(e.getMessage());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> l = queue.getLength();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;队列中元素个数为：&quot;</span>+l);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-队列的链式存储链表实现\"><a class=\"markdownIt-Anchor\" href=\"#3-队列的链式存储链表实现\">#</a> 3、队列的链式存储（链表实现）</h1>\n<p>类似于使用链式结构保存线性表，也可以采用链式结构来保存队列的元素，采用链式存储结构的队列也被称为链队列。<br>\n对于链队列而言，由于程序需要从 rear 端添加元素，然后从 front 端删除元素，因此考虑对链队列增加 front、rear 两个引用变量，使他们分别指向链队列的头、尾两个节点。如下图所示：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200811155745290.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n注意：<strong>由于链队列采用链式存储结构保存数据元素，该队列允许添加无限多个数据元素，因此链队列不会出现列满的问题。</strong></p>\n<h2 id=\"31链式队列的入队\"><a class=\"markdownIt-Anchor\" href=\"#31链式队列的入队\">#</a> 3.1 链式队列的入队</h2>\n<p>对于链队列而言，插入操作的实现非常简单，只要创建一个新节点，让原 rear 节点的 next 指向新节点，在让 rear 指向新节点即可。如下图所示链队列的插入操作：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200811155852960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"32链式队列的出队\"><a class=\"markdownIt-Anchor\" href=\"#32链式队列的出队\">#</a> 3.2 链式队列的出队</h2>\n<p>对于链队列而言，删除操作的实现也是非常的简单，只要将原 front 节点指向原 front 节点的 next 节点，当然不要忘记释放原 front 节点的引用。如下图所示链队列的移除操纵：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200811155931243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"33代码实现\"><a class=\"markdownIt-Anchor\" href=\"#33代码实现\">#</a> 3.3 代码实现：</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zhukun.Queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkQueue</span> &lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//创建一个私有的结点类，一个链式结点有数据域和指针域</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> T data;      <span class=\"comment\">//T类型的数据</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> Node next;   <span class=\"comment\">//结点类型的指针 指向下一个结点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//无参构造函数</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(T element, Node next)</span></span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.data = element;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//代表链式队列的大小</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">\t<span class=\"comment\">//链式队列的链队首</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node front;</span><br><span class=\"line\">\t<span class=\"comment\">//链式队列的链队尾</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node rear;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//初始化链式队列</span></span><br><span class=\"line\">\t<span class=\"comment\">//链式队列无参构造函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tsize = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tfront = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\trear = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//链式队列含参构造函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkQueue</span><span class=\"params\">(T element)</span></span>&#123;</span><br><span class=\"line\">\t\trear = <span class=\"keyword\">new</span> Node(element, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\tfront = rear;</span><br><span class=\"line\">\t\tsize ++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//返回链式队列的长度</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//判断队列是否为空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size == <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//向rear端队尾插入元素，入队</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addQueue</span><span class=\"params\">(T element)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty())&#123;</span><br><span class=\"line\">\t\t\trear = <span class=\"keyword\">new</span> Node(element, <span class=\"keyword\">null</span>);\t</span><br><span class=\"line\">\t\t\tfront = rear;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\trear.next = <span class=\"keyword\">new</span> Node(element, <span class=\"keyword\">null</span>);\t\t</span><br><span class=\"line\">\t\t\trear = rear.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsize ++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//从front端队首移除元素</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">removeQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty())&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">&quot;链式队列为空异常&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tNode oldNode = front;</span><br><span class=\"line\">\t\tfront = front.next;</span><br><span class=\"line\">\t\toldNode.next = <span class=\"keyword\">null</span>;<span class=\"comment\">//释放要移除的结点</span></span><br><span class=\"line\">\t\tsize --;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> oldNode.data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//返回链式队列的堆首元素，但不删除</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">headQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> front.data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//清空链式队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tfront = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\trear = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tsize = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历队列里的全部数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tNode p = front;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (p!= <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(p.data);</span><br><span class=\"line\">\t\t\tp=p.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkQueueDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个队列</span></span><br><span class=\"line\">\t\tLinkQueue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> LinkQueue&lt;Integer&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n;<span class=\"comment\">//接收用户输入</span></span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> loop = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出一个菜单</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(loop)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;1、输出队列&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;2、退出程序&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;3、入队&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;4、出队&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;5、查看队头数据&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;6、输出队列的元素数量&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入你的选择:&quot;</span>);</span><br><span class=\"line\">\t\t\tn = scanner.nextInt();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span>(n)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tqueue.showQueue();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\tscanner.close();</span><br><span class=\"line\">\t\t\t\tqueue.clear();</span><br><span class=\"line\">\t\t\t\tloop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"string\">&quot;请输入要入队的数据：&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> value = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\tqueue.addQueue(value);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> res = queue.removeQueue();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;取出的数据是:&quot;</span>+res);</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(e.getMessage());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> res = queue.headQueue();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;队列头的数据为：&quot;</span>+res);</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(e.getMessage());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> l = queue.getLength();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;队列中元素个数为：&quot;</span>+l);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-循环队列\"><a class=\"markdownIt-Anchor\" href=\"#4-循环队列\">#</a> 4、循环队列</h1>\n<h2 id=\"41顺序队列假溢出问题引出循环队列\"><a class=\"markdownIt-Anchor\" href=\"#41顺序队列假溢出问题引出循环队列\">#</a> 4.1 顺序队列假溢出问题引出循环队列：</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200811161402730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li>初始建立空队列时，令 front = rear  = 0</li>\n<li>每当插入新的队列元素时，rear+1</li>\n<li>每当删除队列头元素时，front+1</li>\n</ol>\n<p><strong>缺陷：</strong> 假设当前队列分配的最大空间为 6，队列处于（d）状态时不可再继续入队操作，但实际上数组中还有空的位置，这种现象就叫做 <strong>“假溢出”</strong> ，解决假溢出的途径 --------<strong> 采用循环队列</strong></p>\n<h2 id=\"42何谓循环队列\"><a class=\"markdownIt-Anchor\" href=\"#42何谓循环队列\">#</a> 4.2 何谓循环队列？</h2>\n<p>首先我们要说明的是<strong>循环队列仍然是基于数组实现</strong>的。但是为了形象化的说明问题，我们如下图所示：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200811162530492.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li>图中有两个<strong>指针 (其实就是两个整数型变量，因为在这里有指示作用，所以这里理解为指针) front、rear,</strong> 一个指示队头，一个指示队尾。</li>\n<li>rear 和 front 互相追赶着，这个追赶过程就是队列添加和删除的过程，如果 rear 追到 front 说明队列满了，如果 front 追到 rear 说明队列为空。</li>\n<li>令队列空间中的一个单元闲置，使得队列非空时，Q.rear 与 Q.front 之间至少间隔一个空闲单。我们把它掰弯，用的是求余，这样两个值就不会跑出最大范围，并且可以实现弯曲的效果，所以说对于<strong>循环队列我们必须给定最大值 MAXSIZE。</strong></li>\n</ol>\n<h2 id=\"43循环队列的实现过程\"><a class=\"markdownIt-Anchor\" href=\"#43循环队列的实现过程\">#</a> 4.3 循环队列的实现过程</h2>\n<p>我们分析可以发现当 front==rear 时可能队满也可能队空<br>\n此时我们人为浪费一个单元，令队满特征<strong> front=（rear+1）% maxSize</strong>   ---------<strong> 空闲单元法</strong></p>\n<ul>\n<li>对空条件：front == rear</li>\n<li>队满条件：front == （rear+1）% maxsize</li>\n<li>队列长度：L=（N+rear-front）% maxsize</li>\n</ul>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zhukun.Queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用数组模拟队列-编写一个ArrayQueue类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircularArrayQueue</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;<span class=\"comment\">//表示数组的最大容量</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> front;<span class=\"comment\">//队列头</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rear;<span class=\"comment\">//队列尾</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr;<span class=\"comment\">//该数据用于存放数据，模拟队列</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> length=<span class=\"number\">0</span>;<span class=\"comment\">//队列中实际元素的数量</span></span><br><span class=\"line\">\t<span class=\"comment\">//创建队列构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircularArrayQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> arrMaxSize)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.maxSize = arrMaxSize;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[maxSize];</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.front = <span class=\"number\">0</span>;<span class=\"comment\">//指向队列头部，分析出front是指向队列头的前一个位置</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.rear = <span class=\"number\">0</span>;<span class=\"comment\">//指向队列的尾部，指向队列尾的数据(即就是队列最后一个数据)</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//判断队列是否满</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (rear+<span class=\"number\">1</span>)%maxSize == front;<span class=\"comment\">//如果成立则队满，即rear指向容量满足下最后一个数据</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//判断是否为空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rear == front;<span class=\"comment\">//如果成立则对空，即rear指向队首front说明队列为空</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//入队</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断队列是否为满</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isFull()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;队列已满，不能加入数据&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tarr[rear] = num;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将rear后移，这里要考虑取模</span></span><br><span class=\"line\">\t\trear = (rear+<span class=\"number\">1</span>)%maxSize;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//出队</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断队列是否为空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//抛出异常</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;队列为空，不能取数据&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将front对应的值保留到一个临时变量，将front后移，考虑取模，将临时保存的变量返回</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value = arr[front];</span><br><span class=\"line\">\t\tfront =(front +<span class=\"number\">1</span>)%maxSize;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//显示队列的所有元素</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;队列空的，没有数据~&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=front;i&lt;(rear+maxSize)%maxSize;i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;arr[%d]=%d\\n&quot;</span>,i,arr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//显示队列的头数据，注意不是提取数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">headQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num;<span class=\"comment\">//记录队首元素</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//判断</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;队列空的，没有数据&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnum = arr[front];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//获取当前队列的元素个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (rear+maxSize-front)%maxSize;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircularArrayQueueDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个队列</span></span><br><span class=\"line\">\t\tArrayQueue queue = <span class=\"keyword\">new</span> ArrayQueue(<span class=\"number\">6</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n;<span class=\"comment\">//接收用户输入</span></span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> loop = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出一个菜单</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(loop)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;1、输出队列&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;2、退出程序&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;3、入队&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;4、出队&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;5、查看队头数据&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;6、输出队列的元素数量&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入你的选择:&quot;</span>);</span><br><span class=\"line\">\t\t\tn = scanner.nextInt();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span>(n)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tqueue.showQueue();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\tscanner.close();</span><br><span class=\"line\">\t\t\t\tloop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"string\">&quot;请输入要入队的数据：&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> value = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\tqueue.addQueue(value);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> res = queue.getQueue();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;取出的数据是:&quot;</span>+res);</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(e.getMessage());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> res = queue.headQueue();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;队列头的数据为：&quot;</span>+res);</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(e.getMessage());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> l = queue.getLength();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;队列中元素个数为：&quot;</span>+l);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "队列",
                "循环队列"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%20%E7%A8%80%E7%96%8Fsparsearray%E6%95%B0%E7%BB%84/",
            "url": "http://yoursite.com/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%20%E7%A8%80%E7%96%8Fsparsearray%E6%95%B0%E7%BB%84/",
            "title": "数据结构（Java实现）- 稀疏sparsearray数组",
            "date_published": "2020-08-24T13:07:09.607Z",
            "content_html": "<h1 id=\"1-先看一个实际的需求\"><a class=\"markdownIt-Anchor\" href=\"#1-先看一个实际的需求\">#</a> 1、先看一个实际的需求</h1>\n<p>在编写的五子棋程序中，有存盘退出和续上盘的功能。<br>\n这时候就要求我们要使用二维数组来记录棋盘，如下图所示：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200809170541675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n在上图的二维数组中用 1 表示黑棋，用 2 表示蓝棋</p>\n<p><strong>分析问题：</strong> 我们可以发现该二维数组的很多值是默认值 0，因此记录了很多没有意义的数据。这时候就需要用稀疏数组对这个二维数组进行压缩。</p>\n<h1 id=\"2-基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#2-基本介绍\">#</a> 2、基本介绍</h1>\n<p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。<br>\n<strong>稀疏数组的处理方法是:</strong></p>\n<ol>\n<li>记录数组一共有几行几列，有多少个不同的值</li>\n<li>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模而得到的<strong>这个小规模的数组就是稀疏数组</strong></li>\n</ol>\n<p>举例如下：<br>\n<strong>一个原始二维数组：</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200809172309748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>转换为稀疏数组后：</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200809172320881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>分析一下稀疏数组的数据特征：</strong><br>\n首先这个稀疏数组是  ： 9x3 （9 行 3 列）的二维数组 <strong>（稀疏数组都是 3 列，也就是 l 里面数据的列序号下标的最大值为 3-1=2）</strong><br>\n第一行数据 6   7   8 ：表示原二维数组一共 6 行 、7 列、8 个不同数值<br>\n第二行数据 0   3   22：0 和 3 分别表示，数值 22 在原二维数组中的行序号下标和列序号下标（表示在原二维数组的 0+1 行 3+1 列）<br>\n（后面各行的数据特征和第二行的一样）<br>\n原始二维数组：6x7=42  <strong>转换</strong>    稀疏数组：9x3=27<br>\n 可以看出稀疏数组起到了一个把原始二维数组规模变小的作用</p>\n<h1 id=\"3-实现\"><a class=\"markdownIt-Anchor\" href=\"#3-实现\">#</a> 3、实现</h1>\n<h2 id=\"31二维数组转稀疏数组\"><a class=\"markdownIt-Anchor\" href=\"#31二维数组转稀疏数组\">#</a> 3.1 二维数组转稀疏数组</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200809180304145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>思路：</strong></p>\n<ol>\n<li>遍历原始二维数组，得到有效数据的个数 sum</li>\n<li>根据 sum 就可以创建稀疏数组 sparseArr int [sum+1][3]</li>\n<li>将二维数组的有效数据存入到稀疏数组中</li>\n</ol>\n<h2 id=\"32稀疏数组转二维数组\"><a class=\"markdownIt-Anchor\" href=\"#32稀疏数组转二维数组\">#</a> 3.2 稀疏数组转二维数组</h2>\n<p><strong>思路：</strong><br>\n先读取稀疏数组的第一行，根据第一行的数据，创建原始二维数组，比如上面棋盘中的 chessArr = int [11][11]<br>\n 然后读取稀疏数组的后几行的数据，并赋值给创建好的原始二维数组即可</p>\n<h1 id=\"4-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#4-代码实现\">#</a> 4、代码实现：</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zhukun.SparseArray;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.Desktop;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStreamWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SparseArray</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先创建一个二维数组 11*11</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//0:表示没有棋子，1表示黑子  2表示蓝子</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> chessArr1[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">11</span>][<span class=\"number\">11</span>];</span><br><span class=\"line\">\t\tchessArr1[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tchessArr1[<span class=\"number\">2</span>][<span class=\"number\">3</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出原始二维数组</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;输出原始二维数组&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>[] row: chessArr1)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> data: row)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(data+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//原始二维数组转稀疏数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//1、先遍历原始二维数组，得到有效数据的个数sum</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>[] row:chessArr1) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> data:row) &#123;</span><br><span class=\"line\">\t\t\t\tsum=data!=<span class=\"number\">0</span>?sum+<span class=\"number\">1</span>:sum;  <span class=\"comment\">//三元运算符判断 如果不为0则sum+1</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;有效数据个数：&quot;</span>+sum);  <span class=\"comment\">//输出不为零的个数</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2、根据sum就可以创建稀疏数组 sparseArr int[sum+1][3]</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sparseArr[][]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[sum+<span class=\"number\">1</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\tsparseArr[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=chessArr1.length;   <span class=\"comment\">//原二维数组的行数</span></span><br><span class=\"line\">\t\tsparseArr[<span class=\"number\">0</span>][<span class=\"number\">1</span>]=chessArr1[<span class=\"number\">0</span>].length;  <span class=\"comment\">//原二维数组的列数</span></span><br><span class=\"line\">\t\tsparseArr[<span class=\"number\">0</span>][<span class=\"number\">2</span>]=sum;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历二维数组，将不为0的数放入稀疏数组中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count=<span class=\"number\">0</span>;     <span class=\"comment\">//用于记录第几个非零数据    </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;chessArr1.length;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;chessArr1.length;j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(chessArr1[i][j]!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t\t\tsparseArr[count][<span class=\"number\">0</span>]=i;</span><br><span class=\"line\">\t\t\t\t\tsparseArr[count][<span class=\"number\">1</span>]=j;</span><br><span class=\"line\">\t\t\t\t\tsparseArr[count][<span class=\"number\">2</span>]=chessArr1[i][j];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//打印稀疏数组</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;稀疏数组为:&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>[] row:sparseArr) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> data:row) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(data+<span class=\"string\">&quot;   &quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//稀疏数组还原成原二维数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//1、先根据稀疏数组第一行的数据，创建原始二维数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> chessArr2[][]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[sparseArr[<span class=\"number\">0</span>][<span class=\"number\">0</span>]][sparseArr[<span class=\"number\">0</span>][<span class=\"number\">1</span>]];</span><br><span class=\"line\">\t\t<span class=\"comment\">//2、再读取稀疏数组的数据，将其赋值给二维数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;sparseArr.length;i++) &#123;</span><br><span class=\"line\">\t\t\t\tchessArr2[sparseArr[i][<span class=\"number\">0</span>]][sparseArr[i][<span class=\"number\">1</span>]]=sparseArr[i][<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//打印还原后的二维数组</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;还原后的二维数组为:&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>[] row:chessArr2) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> data:row) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(data+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//将稀疏数组保存到硬盘上</span></span><br><span class=\"line\">\t\tFile file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;C:\\\\Users\\\\zhukun\\\\Desktop\\\\app\\\\map.txt&quot;</span>);</span><br><span class=\"line\">\t\tFileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(file);</span><br><span class=\"line\">\t\tOutputStreamWriter write = <span class=\"keyword\">new</span> OutputStreamWriter(fos, <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 输出稀疏数组的形式</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;得到的稀疏数组为&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sparseArr.length; i++) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;%d\\t%d\\t%d\\t\\n&quot;</span>, sparseArr[i][<span class=\"number\">0</span>], sparseArr[i][<span class=\"number\">1</span>], sparseArr[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == sparseArr.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\twrite.append(sparseArr[i][<span class=\"number\">0</span>] + <span class=\"string\">&quot;,&quot;</span> + sparseArr[i][<span class=\"number\">1</span>] + <span class=\"string\">&quot;,&quot;</span> + sparseArr[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\twrite.append(sparseArr[i][<span class=\"number\">0</span>] + <span class=\"string\">&quot;,&quot;</span> + sparseArr[i][<span class=\"number\">1</span>] + <span class=\"string\">&quot;,&quot;</span> + sparseArr[i][<span class=\"number\">2</span>] + <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;写入文件中...&quot;</span>);</span><br><span class=\"line\">\t\twrite.close();</span><br><span class=\"line\">\t\tfos.close();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;打开文件中...&quot;</span>);</span><br><span class=\"line\">\t\tDesktop.getDesktop().open(file);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------------------------先读取_map.txt&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建 FileReader 对象</span></span><br><span class=\"line\">\t\tFileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">\t\tInputStreamReader reader = <span class=\"keyword\">new</span> InputStreamReader(fis, <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">\t\tStringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (reader.ready())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsb.append((<span class=\"keyword\">char</span>) reader.read());<span class=\"comment\">// 转成char加到StringBuffer对象中</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sb.toString());</span><br><span class=\"line\">\t\treader.close();<span class=\"comment\">// 关闭读取流</span></span><br><span class=\"line\">\t\tfis.close();<span class=\"comment\">// 关闭输入流,释放系统资源</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------------------------恢复成稀疏数组_sparseArrHf&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.创建对应的稀疏数组</span></span><br><span class=\"line\">\t\tString[] str = sb.toString().split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sparseArrHf[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[str.length / <span class=\"number\">3</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.给稀疏数组赋值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String s : str) &#123;</span><br><span class=\"line\">\t\t\tsparseArrHf[i/<span class=\"number\">3</span>][i % <span class=\"number\">3</span>]=Integer.parseInt(s);</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------------------------再恢复成二维数组_chessArr22&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将稀疏数组 --&gt;恢复成 原始的二维数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 1. 读取稀疏数组的第一行,根据第一行的数据,创建原始的二维数组,比如上面的 chessArr2 = int[11][11];</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 2. 在读取稀疏数组后几行的数据,并赋给 原始的二维数组 即可.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1. 读取稀疏数组的第一行,根据第一行的数据,创建原始的二维数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> chessArr22[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[sparseArrHf[<span class=\"number\">0</span>][<span class=\"number\">0</span>]][sparseArrHf[<span class=\"number\">0</span>][<span class=\"number\">1</span>]];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2. 在读取稀疏数组后几行的数据,并赋给 原始的二维数组 即可.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i3 = <span class=\"number\">1</span>; i3 &lt; sparseArrHf.length; i3++) &#123;</span><br><span class=\"line\">\t\t\tchessArr22[sparseArrHf[i3][<span class=\"number\">0</span>]][sparseArrHf[i3][<span class=\"number\">1</span>]] = sparseArrHf[i3][<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 输出恢复的二维数组</span></span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] row : chessArr22) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> data : row) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.printf(<span class=\"string\">&quot;%d\\t&quot;</span>, data);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;--------------------------------------------------------恢复完成&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "数组",
                "数据结构",
                "sparsearray",
                "稀疏数组"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%A7%A3%E6%A0%88-%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/",
            "url": "http://yoursite.com/2020/08/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%A7%A3%E6%A0%88-%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/",
            "title": "数据结构（Java实现）-详解栈（实现中缀表达式计算器、逆波兰计算器   中缀表达式转逆波兰表达式过程）",
            "date_published": "2020-08-23T08:04:57.561Z",
            "content_html": "<h1 id=\"1-栈stack的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1-栈stack的介绍\">#</a> 1、栈（stack）的介绍：</h1>\n<ol>\n<li>栈是一个先入后出、后入先出的<strong>有序列表。</strong></li>\n<li>栈是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端为变化端，称为<strong>栈顶（Top）</strong>，另一端为固定端，称为<strong>栈底（Bottom）</strong>。</li>\n<li>根据栈的定义可知，最先放入栈中的元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除     （类似于子弹匣）</li>\n</ol>\n<h2 id=\"11例如\"><a class=\"markdownIt-Anchor\" href=\"#11例如\">#</a> 1.1 例如</h2>\n<p>1、入栈：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818202743623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 2、出栈：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081820280271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"12栈的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#12栈的应用场景\">#</a> 1.2 栈的应用场景</h2>\n<ol>\n<li>子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。</li>\n<li>处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。</li>\n<li>表达式的转换 [中缀表达式转后缀表达式] 与求值 (实际解决)。</li>\n<li>二叉树的遍历。</li>\n<li>图形的深度优先 (depth 一 first) 搜索法。</li>\n</ol>\n<h2 id=\"13栈的快速入门\"><a class=\"markdownIt-Anchor\" href=\"#13栈的快速入门\">#</a> 1.3 栈的快速入门</h2>\n<p>用数组模拟栈的使用，由于栈是一种有序列表， 当然可以使用数组的结构来储存栈的数据内容， 下面我们就用数组模拟栈的出栈，入栈等操作。<br>\n<strong>实现思路和示意图：</strong></p>\n<ol>\n<li>使用数组来模拟栈</li>\n<li>定义一个 top 来表示栈顶，初始化为 - 1</li>\n<li><strong>入栈</strong>的操作，当数据加入到栈是，top++；stack [top] = data；</li>\n<li><strong>出栈</strong>的操作，int value = stack [top];top–; return value;<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818203832795.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>代码：</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStackDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一下ArrayStack 是否正确</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//先创建一个ArrayStack对象-&gt;表示栈</span></span><br><span class=\"line\">\t\tArrayStack stack = <span class=\"keyword\">new</span> ArrayStack(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> key;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> loop = <span class=\"keyword\">true</span>; <span class=\"comment\">//控制是否退出菜单</span></span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(loop) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;1: 遍历栈中的所有元素&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;2: 表示添加数据到栈(入栈)&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;3: 表示从栈取出数据(出栈)&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;4: 退出程序&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入你的选择&quot;</span>);</span><br><span class=\"line\">\t\t\tkey = scanner.nextInt();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (key) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tstack.list();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入一个数&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> value = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\tstack.push(value);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> res = stack.pop();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.printf(<span class=\"string\">&quot;出栈的数据是 %d\\n&quot;</span>, res);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(e.getMessage());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\t\tscanner.close();</span><br><span class=\"line\">\t\t\t\tloop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;程序退出~~~&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义一个 ArrayStack 表示栈</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStack</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize; <span class=\"comment\">// 栈的大小</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] stack; <span class=\"comment\">// 数组，数组模拟栈，数据就放在该数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top = -<span class=\"number\">1</span>;<span class=\"comment\">// top表示栈顶，初始化为-1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">\t\tstack = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"keyword\">this</span>.maxSize];<span class=\"comment\">//初始化这个数组</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//栈满</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> top == maxSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//栈空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> top == -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//入栈-push</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断栈是否满</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isFull()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;栈满&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttop++;</span><br><span class=\"line\">\t\tstack[top] = value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//出栈-pop, 将栈顶的数据返回</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断栈是否空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//抛出异常</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;栈空，没有数据~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value = stack[top];</span><br><span class=\"line\">\t\ttop--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;栈空，没有数据~~&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//需要从栈顶开始显示数据</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = top; i &gt;= <span class=\"number\">0</span> ; i--) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;stack[%d]=%d\\n&quot;</span>, i, stack[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>测试：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">请输入一个数</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">请输入一个数</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">请输入一个数</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">stack[<span class=\"number\">2</span>]=<span class=\"number\">8</span></span><br><span class=\"line\">stack[<span class=\"number\">1</span>]=<span class=\"number\">6</span></span><br><span class=\"line\">stack[<span class=\"number\">0</span>]=<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">出栈的数据是 <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">程序退出~~~</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-栈实现计算器运算中缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#2-栈实现计算器运算中缀表达式\">#</a> 2、栈实现计算器（运算中缀表达式)</h1>\n<h2 id=\"1-提出问题\"><a class=\"markdownIt-Anchor\" href=\"#1-提出问题\">#</a> 1、提出问题</h2>\n<p><strong>计算式：[7<em>2</em>2-5+1-5+3-3]</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819091212282.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n请问：计算机底层是如何运算得到结果的？注意不是简单的把算式列出运算，<strong>思考计算机是怎么理解这个算式的</strong>（对计算机而言，它接收到的就是一个字符串）—— 栈</p>\n<h2 id=\"2-使用栈完成表达式的思路\"><a class=\"markdownIt-Anchor\" href=\"#2-使用栈完成表达式的思路\">#</a> 2、使用栈完成表达式的思路</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819094050556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 1、创建两个栈，分别为数栈（存放数）符号栈（存放符号）</p>\n<p>2、使用一个 index  值（索引），来遍历扫描我们的表达式</p>\n<p>3、如果扫描的是一个数字就直接入栈</p>\n<p>4、如果扫描的是一个符号，就分如下情况：</p>\n<pre><code>  a、如果发现当前的符号栈为空，就直接入栈\n\n  b、如果符号栈有操作符，就进行比较：\n</code></pre>\n<ul>\n<li>如果当前的操作符的优先级小于或者等于栈中的操作符， 就需要从数栈中 pop 出两个数，在从符号栈中 pop 出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈，</li>\n<li>如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.<br>\n5、当表达式扫描完毕，就顺序的从 数栈和符号栈中 pop 出相应的数和符号，并进行运算.</li>\n</ul>\n<p>6、最后在数栈中只有一个数字，就是表达式的结果</p>\n<h2 id=\"3-按照思路图解验证一个表达式的运算\"><a class=\"markdownIt-Anchor\" href=\"#3-按照思路图解验证一个表达式的运算\">#</a> 3、按照思路图解验证一个表达式的运算</h2>\n<p>验证：3+2<em>6-2=13<br>\n1、index 扫描到数字 3 直接入栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819095936939.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n 2、index 扫描到符号 +，判断当前的符号栈为空，就直接入栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819100152671.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n 3、index 扫描到 2，直接进栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819100346288.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n 4、扫描到</em>，<em>的优先级大于 +，直接进栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819100533648.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n 5、扫描到 6，直接进栈。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819100736986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 6、扫描到 -，- 的优先级小于栈中的</em>，从数栈中 pop 出两个数 6 和 2，从符号栈中 pop 出 *<br>\n 运算：2*6=12 ，将 12 进栈，- 进栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819101231934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 7、扫描到 2，直接进栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819101413213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 8、依次 pop 出两个数和一个符号进行运算（后一个数   符号   前一个数）<br>\n数栈 pop 出 2 和 12    符号栈 pop 出 -       运算：12-2=10   将 10 入栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819101709987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n数栈 pop 出 10 和 3     符号栈 pop 出 +     运算：3+10=13  将 13 入栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819101853220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 9、此时数栈中的 13 为最终运算结果，而符号栈栈空<br>\n<font color=red>注意：在测试过程中发现如果表达式中有多位数运算就会出问题。比如表达式中如果有数字 13 的话这里的 1 和 3 就会当成两个数分开入栈，后面的运算自然也会出问题。<br>\n解决方法：</p>\n<ol>\n<li><strong>在扫描到一个字符是数时不能立即入栈，向表达式中看向 index 指向字符的下一位，注意只是看 index 指向字符的后一位而不是 index++4、 掌握循环语句</strong></li>\n<li><strong>如果 index 指向字符的下一位还是数就继续扫描并将该数和之前的数进行字符拼接，如果下一位是符号就能入栈</strong></li>\n<li><strong>定义一个字符串变量，用于拼接</strong></li>\n</ol>\n<h2 id=\"4-实现代码\"><a class=\"markdownIt-Anchor\" href=\"#4-实现代码\">#</a> 4、实现代码：</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;请输入一个仅限于加减乘除的数学表达式：&quot;</span>);</span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\tString expression = scanner.next(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建两个栈，数栈，一个符号栈</span></span><br><span class=\"line\">\t\tCalculatorStack numStack = <span class=\"keyword\">new</span> CalculatorStack (<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tCalculatorStack  operStack = <span class=\"keyword\">new</span> CalculatorStack (<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义需要的相关变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;<span class=\"comment\">//用于扫描</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num1 = <span class=\"number\">0</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> oper = <span class=\"number\">0</span>;<span class=\"comment\">//保存运算符</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;<span class=\"comment\">//保存每次的运算结果</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> ch = <span class=\"string\">&#x27; &#x27;</span>; <span class=\"comment\">//将每次扫描得到char保存到ch</span></span><br><span class=\"line\">\t\tString keepNum = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">//用于拼接 多位数</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//开始while循环的扫描expression</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//依次得到expression 的每一个字符</span></span><br><span class=\"line\">\t\t\tch = expression.substring(index, index+<span class=\"number\">1</span>).charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//判断ch是什么，然后做相应的处理</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(operStack.isOper(ch)) &#123;<span class=\"comment\">//如果是运算符</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//判断当前的符号栈是否为空</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!operStack.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符,就需要从数栈中pop出两个数,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(operStack.priority(ch) &lt;= operStack.priority(operStack.peek())) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum1 = numStack.pop();</span><br><span class=\"line\">\t\t\t\t\t\tnum2 = numStack.pop();</span><br><span class=\"line\">\t\t\t\t\t\toper = operStack.pop();</span><br><span class=\"line\">\t\t\t\t\t\tres = numStack.cal(num1, num2, oper);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//把运算的结果入数栈</span></span><br><span class=\"line\">\t\t\t\t\t\tnumStack.push(res);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//然后将当前的操作符入符号栈</span></span><br><span class=\"line\">\t\t\t\t\t\toperStack.push(ch);</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.</span></span><br><span class=\"line\">\t\t\t\t\t\toperStack.push(ch);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//如果为空直接入符号栈..</span></span><br><span class=\"line\">\t\t\t\t\toperStack.push(ch); <span class=\"comment\">// 1 + 3</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果是数有以下分析</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//分析思路</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//1. 当处理多位数时，不能发现是一个数就立即入栈，因为他可能是多位数</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//2. 在处理数，需要向expression的表达式的index 后再看一位,如果是数就进行扫描，如果是符号才入栈</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//3. 因此我们需要定义一个变量 字符串，用于拼接\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//处理多位数</span></span><br><span class=\"line\">\t\t\t\tkeepNum += ch;\t\t<span class=\"comment\">//拼接\t\t</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果ch已经是expression的最后一位，就直接入栈</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (index == expression.length() - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tnumStack.push(Integer.parseInt(keepNum));</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//判断下一个字符是不是数字，如果是数字，就继续扫描，如果是运算符，则入栈</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//注意是看后一位，不是index++</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (operStack.isOper(expression.substring(index+<span class=\"number\">1</span>,index+<span class=\"number\">2</span>).charAt(<span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//如果后一位是运算符，则入栈 keepNum = &quot;1&quot; 或者 &quot;123&quot;</span></span><br><span class=\"line\">\t\t\t\t\t\tnumStack.push(Integer.parseInt(keepNum));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//重要的!!!!!!, keepNum清空,方便后面再次扫描到多位数时的使用</span></span><br><span class=\"line\">\t\t\t\t\t\tkeepNum = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//让index + 1, 并判断是否扫描到expression最后.</span></span><br><span class=\"line\">\t\t\tindex++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (index &gt;= expression.length()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//当表达式扫描完毕，就顺序的从 数栈和符号栈中pop出相应的数和符号，并运行.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果符号栈为空，则计算到最后的结果, 数栈中只有一个数字【结果】</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(operStack.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tnum1 = numStack.pop();</span><br><span class=\"line\">\t\t\tnum2 = numStack.pop();</span><br><span class=\"line\">\t\t\toper = operStack.pop();</span><br><span class=\"line\">\t\t\tres = numStack.cal(num1, num2, oper);</span><br><span class=\"line\">\t\t\tnumStack.push(res);<span class=\"comment\">//入栈</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将数栈的最后数，pop出，就是结果</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> res2 = numStack.pop();</span><br><span class=\"line\">\t\tSystem.out.printf(<span class=\"string\">&quot;表达式 %s = %d&quot;</span>, expression, res2);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先创建一个栈,直接使用前面创建好</span></span><br><span class=\"line\"><span class=\"comment\">//定义一个 ArrayStack2 表示栈, 需要扩展功能</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculatorStack</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize; <span class=\"comment\">// 栈的大小</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] stack; <span class=\"comment\">// 数组，数组模拟栈，数据就放在该数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top = -<span class=\"number\">1</span>;<span class=\"comment\">// top表示栈顶，初始化为-1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CalculatorStack</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">\t\tstack = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"keyword\">this</span>.maxSize];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//增加一个方法，可以返回当前栈顶的值, 但是不是真正的pop</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> stack[top];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//栈满</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> top == maxSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//栈空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> top == -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//入栈-push</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断栈是否满</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isFull()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;栈满&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttop++;</span><br><span class=\"line\">\t\tstack[top] = value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//出栈-pop, 将栈顶的数据返回</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断栈是否空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//抛出异常</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;栈空，没有数据~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value = stack[top];</span><br><span class=\"line\">\t\ttop--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;栈空，没有数据~~&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//需要从栈顶开始显示数据</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = top; i &gt;= <span class=\"number\">0</span> ; i--) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;stack[%d]=%d\\n&quot;</span>, i, stack[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//返回运算符的优先级，优先级是程序员来确定, 优先级使用数字表示</span></span><br><span class=\"line\">\t<span class=\"comment\">//数字越大，则优先级就越高.</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">priority</span><span class=\"params\">(<span class=\"keyword\">int</span> oper)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(oper == <span class=\"string\">&#x27;*&#x27;</span> || oper == <span class=\"string\">&#x27;/&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oper == <span class=\"string\">&#x27;+&#x27;</span> || oper == <span class=\"string\">&#x27;-&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>; <span class=\"comment\">// 假定目前的表达式只有 +, - , * , /</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//判断是不是一个运算符</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOper</span><span class=\"params\">(<span class=\"keyword\">char</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> val == <span class=\"string\">&#x27;+&#x27;</span> || val == <span class=\"string\">&#x27;-&#x27;</span> || val == <span class=\"string\">&#x27;*&#x27;</span> || val == <span class=\"string\">&#x27;/&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//计算方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2, <span class=\"keyword\">int</span> oper)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>; <span class=\"comment\">// res 用于存放计算的结果</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (oper) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">\t\t\tres = num2 + num1;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">\t\t\tres = num2 - num1;<span class=\"comment\">// 注意顺序</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">\t\t\tres = num2 * num1;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">\t\t\tres = num2 / num1;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请输入一个仅限于加减乘除的数学表达式：</span><br><span class=\"line\"><span class=\"number\">2</span>+<span class=\"number\">4</span>*<span class=\"number\">12</span>-<span class=\"number\">4</span>+<span class=\"number\">6</span>*<span class=\"number\">14</span></span><br><span class=\"line\">表达式 <span class=\"number\">2</span>+<span class=\"number\">4</span>*<span class=\"number\">12</span>-<span class=\"number\">4</span>+<span class=\"number\">6</span>*<span class=\"number\">14</span> = <span class=\"number\">130</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-前缀-中缀和后缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#3-前缀-中缀和后缀表达式\">#</a> 3、前缀、中缀和后缀表达式</h1>\n<h2 id=\"1-前缀表达式波兰式\"><a class=\"markdownIt-Anchor\" href=\"#1-前缀表达式波兰式\">#</a> 1、前缀表达式（波兰式）</h2>\n<p>（1）、前缀表达式又称波兰式，前缀表达式的运算符位于操作数之前</p>\n<p>（2）、举例说明： (3+4)×5-6 对应的前缀表达式就是 - × + 3 4 5 6<br>\n<font color=blue>前缀表达式的计算机求值：<br>\n<font color=red>从右至左<font color=black>扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（栈顶元素和次顶元素），并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果<br>\n例如: (3+4)×5-6 对应的前缀表达式就是 - × + 3 4 5 6 , 针对前缀表达式求值步骤如下:</p>\n<ol>\n<li>从右至左扫描表达式 &quot;- × + 3 4 5 6&quot;，将 6、5、4、3 压入堆栈</li>\n<li>遇到 + 运算符，因此弹出 3 和 4（3 为栈顶元素，4 为次顶元素），计算出 3+4 的值，得 7，再将 7 入栈</li>\n<li>接下来是 × 运算符，因此弹出 7 和 5，计算出 7×5=35，将 35 入栈</li>\n<li>最后是 - 运算符，计算出 35-6 的值，即 29，由此得出最终结果</li>\n</ol>\n<h2 id=\"2-中缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#2-中缀表达式\">#</a> 2、中缀表达式</h2>\n<p>（1）、中缀表达式就是常见的运算表达式，如 (3+4)×5-6<br>\n（2）、中缀表达式的求值是我们人最熟悉的，但是对计算机来说却不好操作 (前面我们讲的案例就能看的这个问题)，因此，在计算结果时，往往会将中缀表达式转成其它表达式来操作 (一般转成后缀表达式.)</p>\n<h2 id=\"3-后缀表达式逆波兰式\"><a class=\"markdownIt-Anchor\" href=\"#3-后缀表达式逆波兰式\">#</a> 3、后缀表达式（逆波兰式）</h2>\n<p>（1）、后缀表达式又称逆波兰表达式，与前缀表达式相似，只是运算符位于操作数之后<br>\n（2）、中举例说明： (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 –<br>\n（3）、再比如：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819154438442.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>后缀表达式的计算机求值：</strong><br>\n从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素 和 栈顶元素），并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果<br>\n<strong>例如: (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 - , 针对后缀表达式求值步骤如下:</strong></p>\n<ol>\n<li>从左至右扫描 &quot;3 4 + 5 × 6 -&quot;，将 3 和 4 压入堆栈；</li>\n<li>遇到 + 运算符，因此弹出 4 和 3（4 为栈顶元素，3 为次顶元素），计算出 3+4 的值，得 7，再将 7 入栈；</li>\n<li>将 5 入栈；</li>\n<li>接下来是 × 运算符，因此弹出 5 和 7，计算出 7×5=35，将 35 入栈；</li>\n<li>将 6 入栈；</li>\n<li>最后是 - 运算符，计算出 35-6（次顶 - 栈顶）的值，即 29，由此得出最终结果</li>\n</ol>\n<h1 id=\"4-逆波兰计算器\"><a class=\"markdownIt-Anchor\" href=\"#4-逆波兰计算器\">#</a> 4、逆波兰计算器</h1>\n<h2 id=\"1-中缀表达式转为后缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#1-中缀表达式转为后缀表达式\">#</a> 1、中缀表达式转为后缀表达式</h2>\n<p>后缀表达式适合计算式进行运算，但是人却不太容易写出来，尤其是表达式很长的情况下，因此在开发中，我们需要将 <strong>中缀表达式转成后缀表达式</strong><br>\n具体步骤：<br>\n1、初始化两个栈：运算符栈 s1 和储存中间结果的栈 s2；<br>\n2、从左至右扫描中缀表达式；<br>\n3、遇到操作数时，将其压入 s2<br>\n4、遇到运算符时，比较其与 s1 栈顶运算符的优先级：</p>\n<ol>\n<li>如果 s1 为空，或栈顶运算符为左括号 “(”，则直接将此运算符入栈；</li>\n<li>否则，若优先级比栈顶运算符的高，也将运算符压入 s1；</li>\n<li>否则，将 s1 栈顶的运算符弹出并压入到 s2 中，再次转到 (4.1 的操作) 与 s1 中新的栈顶运算符相比较；</li>\n</ol>\n<p>5、遇到括号时：<br>\n6、重复步骤 2 至 5，直到表达式的最右边<br>\n 7、将 s1 中剩余的运算符依次弹出并压入 s2<br>\n8、依次弹出 s2 中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式<br>\n *<em> 例如：将中缀表达式 “1+((2+3)<em> 4)-5” 转 换为后缀表达式的过程如下：</em></em><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081917095222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>因此结果为：&quot;1 2 3 + 4 * + 5 –&quot;</strong></p>\n<h2 id=\"2-将得到的后缀表达式进行运算\"><a class=\"markdownIt-Anchor\" href=\"#2-将得到的后缀表达式进行运算\">#</a> 2、将得到的后缀表达式进行运算</h2>\n<p><strong>后缀表达式：“1 2 3 + 4 * + 5 –”<br>\n 运算过程（即后缀表达式的运算过程）：</strong></p>\n<ol>\n<li>从左至右扫描 &quot;1 2 3 + 4 * + 5 –&quot;，将 1、2、3 压入堆栈；</li>\n<li>遇到 + 运算符，因此弹出 3 和 2（3 为栈顶元素，2 为次顶元素），计算出 2+3 的值，得 5，再将 5 入栈；</li>\n<li>将 4 入栈；</li>\n<li>接下来是 * 运算符，因此弹出 4 和 5，计算出 4×5=20，将 20 入栈；</li>\n<li>遇到 + 运算符，因此弹出 20 和 1（20 为栈顶元素，1 为次顶元素），计算出 20+1 的值，得 21，再将 21 入栈；</li>\n<li>将 5 入栈；</li>\n<li>最后是 - 运算符，弹出 5 和 21（5 为栈顶元素，21 为次顶元素）21-5（次顶 - 栈顶）的值，即 16，由此得出最终结果</li>\n</ol>\n<h2 id=\"3-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#3-代码实现\">#</a> 3、代码实现：</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PolandNotation</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//完成将一个中缀表达式转成后缀表达式的功能</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//说明</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 1+((2+3)×4)-5 =&gt; 转成  1 2 3 + 4 × + 5 –</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 因为直接对str 进行操作，不方便，因此 先将  &quot;1+((2+3)×4)-5&quot; =》 中缀的表达式对应的List</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//   即 &quot;1+((2+3)×4)-5&quot; =&gt; ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//3. 将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//   即 ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]  =》 ArrayList [1,2,3,+,4,*,+,5,–]\t</span></span><br><span class=\"line\">\t\tString expression = <span class=\"string\">&quot;1+((2+3)*4)-5&quot;</span>;<span class=\"comment\">//注意表达式 </span></span><br><span class=\"line\">\t\tList&lt;String&gt; infixExpressionList = toInfixExpressionList(expression);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;中缀表达式对应的List=&quot;</span> + infixExpressionList); <span class=\"comment\">// ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]</span></span><br><span class=\"line\">\t\tList&lt;String&gt; suffixExpreesionList = parseSuffixExpreesionList(infixExpressionList);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;后缀表达式对应的List&quot;</span> + suffixExpreesionList); <span class=\"comment\">//ArrayList [1,2,3,+,4,*,+,5,–] \t</span></span><br><span class=\"line\">\t\tSystem.out.printf(<span class=\"string\">&quot;运算结果=%d&quot;</span>, calculate(suffixExpreesionList)); <span class=\"comment\">// ?\t</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//即 ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]  =》 ArrayList [1,2,3,+,4,*,+,5,–]</span></span><br><span class=\"line\">\t<span class=\"comment\">//方法：将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">parseSuffixExpreesionList</span><span class=\"params\">(List&lt;String&gt; ls)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义两个栈</span></span><br><span class=\"line\">\t\tStack&lt;String&gt; s1 = <span class=\"keyword\">new</span> Stack&lt;String&gt;(); <span class=\"comment\">// 符号栈</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//说明：因为s2 这个栈，在整个转换过程中，没有pop操作，而且后面我们还需要逆序输出</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//因此比较麻烦，这里我们就不用 Stack&lt;String&gt; 直接使用 List&lt;String&gt; s2</span></span><br><span class=\"line\">\t\tList&lt;String&gt; s2 = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(); <span class=\"comment\">// 储存中间结果的Lists2\t\t</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历ls</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(String item: ls) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果是一个数，加入s2</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(item.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\ts2.add(item);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;(&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\ts1.push(item);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;)&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(!s1.peek().equals(<span class=\"string\">&quot;(&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\ts2.add(s1.pop());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\ts1.pop();<span class=\"comment\">//!!! 将 ( 弹出 s1栈， 消除小括号</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//当item的优先级小于等于s1栈顶运算符, 将s1栈顶的运算符弹出并加入到s2中，再次转到(4.1)与s1中新的栈顶运算符相比较</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//问题：我们缺少一个比较优先级高低的方法</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(s1.size() != <span class=\"number\">0</span> &amp;&amp; Operation.getValue(s1.peek()) &gt;= Operation.getValue(item) ) &#123;</span><br><span class=\"line\">\t\t\t\t\ts2.add(s1.pop());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//还需要将item压入栈</span></span><br><span class=\"line\">\t\t\t\ts1.push(item);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//将s1中剩余的运算符依次弹出并加入s2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(s1.size() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\ts2.add(s1.pop());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s2; <span class=\"comment\">//注意因为是存放到List, 因此按顺序输出就是对应的后缀表达式对应的List\t</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//方法：将 中缀表达式转成对应的List</span></span><br><span class=\"line\">\t<span class=\"comment\">//  s=&quot;1+((2+3)×4)-5&quot;;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">toInfixExpressionList</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义一个List,存放中缀表达式 对应的内容</span></span><br><span class=\"line\">\t\tList&lt;String&gt; ls = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; <span class=\"comment\">//这时是一个指针，用于遍历 中缀表达式字符串</span></span><br><span class=\"line\">\t\tString str; <span class=\"comment\">// 对多位数的拼接</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c; <span class=\"comment\">// 每遍历到一个字符，就放入到c</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果c是一个非数字，我需要加入到ls</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>((c=s.charAt(i)) &lt; <span class=\"number\">48</span> ||  (c=s.charAt(i)) &gt; <span class=\"number\">57</span>) &#123;</span><br><span class=\"line\">\t\t\t\tls.add(<span class=\"string\">&quot;&quot;</span> + c);</span><br><span class=\"line\">\t\t\t\ti++; <span class=\"comment\">//i需要后移</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果是一个数，需要考虑多位数</span></span><br><span class=\"line\">\t\t\t\tstr = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">//先将str 置成&quot;&quot; &#x27;0&#x27;[48]-&gt;&#x27;9&#x27;[57]</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(i &lt; s.length() &amp;&amp; (c=s.charAt(i)) &gt;= <span class=\"number\">48</span> &amp;&amp; (c=s.charAt(i)) &lt;= <span class=\"number\">57</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tstr += c;<span class=\"comment\">//拼接</span></span><br><span class=\"line\">\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tls.add(str);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">while</span>(i &lt; s.length());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ls;<span class=\"comment\">//返回</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//将一个逆波兰表达式， 依次将数据和运算符放入到 ArrayList中</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getListString</span><span class=\"params\">(String suffixExpression)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将 suffixExpression 分割</span></span><br><span class=\"line\">\t\tString[] split = suffixExpression.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\tList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(String ele: split) &#123;</span><br><span class=\"line\">\t\t\tlist.add(ele);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(List&lt;String&gt; ls)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建给栈, 只需要一个栈即可</span></span><br><span class=\"line\">\t\tStack&lt;String&gt; stack = <span class=\"keyword\">new</span> Stack&lt;String&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历 ls</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String item : ls) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 这里使用正则表达式来取出数</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (item.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>)) &#123; <span class=\"comment\">// 匹配的是多位数</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 入栈</span></span><br><span class=\"line\">\t\t\t\tstack.push(item);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// pop出两个数，并运算， 再入栈</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> num2 = Integer.parseInt(stack.pop());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> num1 = Integer.parseInt(stack.pop());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;+&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\tres = num1 + num2;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;-&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\tres = num1 - num2;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;*&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\tres = num1 * num2;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\tres = num1 / num2;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;运算符有误&quot;</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//把res 入栈</span></span><br><span class=\"line\">\t\t\t\tstack.push(<span class=\"string\">&quot;&quot;</span> + res);</span><br><span class=\"line\">\t\t\t&#125;\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//最后留在stack中的数据是运算结果</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Integer.parseInt(stack.pop());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//编写一个类 Operation 可以返回一个运算符 对应的优先级</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Operation</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ADD = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> SUB = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MUL = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DIV = <span class=\"number\">2</span>;\t</span><br><span class=\"line\">\t<span class=\"comment\">//写一个方法，返回对应的优先级数字</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">(String operation)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (operation) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;+&quot;</span>:</span><br><span class=\"line\">\t\t\tresult = ADD;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;-&quot;</span>:</span><br><span class=\"line\">\t\t\tresult = SUB;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;*&quot;</span>:</span><br><span class=\"line\">\t\t\tresult = MUL;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;/&quot;</span>:</span><br><span class=\"line\">\t\t\tresult = DIV;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;(&quot;</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;)&quot;</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;不存在该运算符&quot;</span> + operation);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">中缀表达式对应的List=[<span class=\"number\">1</span>, +, (, (, <span class=\"number\">2</span>, +, <span class=\"number\">3</span>, ), *, <span class=\"number\">4</span>, ), -, <span class=\"number\">5</span>]</span><br><span class=\"line\">后缀表达式对应的List[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, +, <span class=\"number\">4</span>, *, +, <span class=\"number\">5</span>, -]</span><br><span class=\"line\">运算结果=<span class=\"number\">16</span></span><br></pre></td></tr></table></figure>\n<hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\">\n",
            "tags": [
                "java",
                "数据结构",
                "栈",
                "逆波兰表达式"
            ]
        }
    ]
}