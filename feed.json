{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/2020/09/27/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88Java%E5%BC%82%E5%B8%B8%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "url": "http://yoursite.com/2020/09/27/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88Java%E5%BC%82%E5%B8%B8%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "title": "Java学习-详谈Java异常和异常处理",
            "date_published": "2020-09-27T06:29:34.088Z",
            "content_html": "<h1 id=\"1-异常\"><a class=\"markdownIt-Anchor\" href=\"#1-异常\">#</a> 1、异常</h1>\n<h2 id=\"11异常概念\"><a class=\"markdownIt-Anchor\" href=\"#11异常概念\">#</a> 1.1 异常概念</h2>\n<p>异常，就是不正常的意思。在生活中：医生说，你的身体某个部位有异常，该部位和正常相比有点不同，该部位的功能将 受影响。在程序中的意思就是：</p>\n<ul>\n<li><strong>异常</strong> ：指的是程序在执行过程中，出现的非正常的情况，最终会导致 JVM 的非正常停止。 ( <strong>异常机制其实是帮助我们找到程序中的问题</strong> )</li>\n</ul>\n<p>在 Java 等面向对象的编程语言中，<strong>异常本身是一个类</strong>，<strong>产生异常就是创建异常对象并抛出了一个异常对象</strong>。Java 处理异常的方式是<font color=red>中断处理</font>。</p>\n<h1 id=\"2-异常体系\"><a class=\"markdownIt-Anchor\" href=\"#2-异常体系\">#</a> 2、异常体系</h1>\n<h2 id=\"21throwable类\"><a class=\"markdownIt-Anchor\" href=\"#21throwable类\">#</a> 2.1Throwable 类</h2>\n<p>异常的<strong>根类</strong>：  <code>java.lang.Throwable</code> <br>\n (Java 中的所有不正常类都继承于 Throwable 类)</p>\n<p><strong>Throwable 中的常用方法</strong>：</p>\n<ul>\n<li><code>public void printStackTrace()</code>  : 打印异常的详细信息。 包含了异常的类型，异常的原因，还包括异常出现的位置，在开发和调试阶段，都得使用 printStackTrace。</li>\n<li><code>public String getMessage()</code>  : 获取发生异常的原因。 提示给用户的时候，就提示错误原因。</li>\n<li><code>public String toString()</code>  : 获取异常的类型和异常描述信息 (不用)。</li>\n</ul>\n<p><strong>出现异常，不要紧张，把异常的简单类名，拷贝到 API 中去查</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913150055239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong> Throwable 类</strong>下有两个子类：  <code>java.lang.Error</code>  与  <code>java.lang.Exception</code> <br>\n（注意：<font color=red>平常所说的异常指<strong> Exception</strong> 异常</font>）<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913143745634.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"22error类\"><a class=\"markdownIt-Anchor\" href=\"#22error类\">#</a> 2.2Error 类</h2>\n<p><code>java.lang.Error</code>  ：Error 类中包括<strong>虚拟机错误</strong>和<strong>线程死锁</strong>，<font color=blue>一旦 Error 出现了，程序就彻底的挂了，被称为程序终结者</font><br>\n（严重错误 Error，无法通过处理的错误，只能事先避免，好比绝症。）<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913144920753.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"23exception类\"><a class=\"markdownIt-Anchor\" href=\"#23exception类\">#</a> 2.3Exception 类</h2>\n<p><code>java.lang.Exception</code> ：Exception 类，也就是通常所说的 “异常”。主要指<strong>编码、环境、用户操作输入</strong>出现问题，Exception 主要包括两大类，<strong>非检查异常（RuntimeException）</strong> 和 <strong>检查异常（其他的一些异常）</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913145240967.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong> 1、RuntimeException 异常</strong>（<font color=blue>运行时期异常</font>）<br>\n<strong>在运行时期，检查异常。在编译时期，运行异常不会被编译器检测 (不报错)</strong><br>\n 主要包括以下四种异常（其实还有很多其他异常，这里不一一列出）：</p>\n<ul>\n<li>空指针异常</li>\n<li>数组下标越界异常</li>\n<li>类型转换异常</li>\n<li>算术异常。</li>\n</ul>\n<p>RuntimeException 异常会由<strong> java 虚拟机自动抛出并自动捕获</strong>（<font color=red>就算我们没写异常捕获语句运行时也会抛出错误！！</font>），此类异常的出现绝大数情况是<strong>代码本身有问题应该从逻辑上去解决并改进代码</strong>。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913145422898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong> 2、检查异常</strong>（<font color=blue>编译时期异常</font>）<br>\n在编译时期，就会检查，如果没有处理异常，则编译失败 (如日期格式化异常)<br>\n 引起该异常的原因多种多样，比如说<strong>文件不存在、或者是连接错误</strong>等。跟它的 “兄弟” RuntimeException 运行异常不同，该异常<strong>我们必须手动在代码里添加捕获语句来处理该异常</strong>，这也<font color=red>是我们学习 java 异常语句中主要处理的异常对象</font>。</p>\n<p><strong>总结图</strong>：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913151851131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"3-异常的产生过程解析\"><a class=\"markdownIt-Anchor\" href=\"#3-异常的产生过程解析\">#</a> 3、异常的产生过程解析</h1>\n<p>先运行下面的程序，程序会产生一个数组索引越界异常 ArrayIndexOfBoundsException</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayTools</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">// 对给定的数组通过给定的角标获取元素。 </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> element = arr[index]; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> element; </span><br><span class=\"line\">\t&#125; \t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionDemo</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">67</span> &#125;; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num = ArrayTools.getElement(arr, <span class=\"number\">4</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;num=&quot;</span> + num); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;over&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过图解来解析下 异常产生的过程。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913152518503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"4-异常处理\"><a class=\"markdownIt-Anchor\" href=\"#4-异常处理\">#</a> 4、异常处理</h1>\n<h2 id=\"41捕获异常try-catch语句\"><a class=\"markdownIt-Anchor\" href=\"#41捕获异常try-catch语句\">#</a> 4.1 捕获异常 try-catch 语句</h2>\n<p>如果异常出现的话，会立刻终止程序，所以我们得处理异常:</p>\n<ol>\n<li>该方法不处理，而是声明抛出，由该方法的调用者来处理 (throws)。</li>\n<li>在方法中使用 try-catch 的语句块来处理异常。</li>\n</ol>\n<p><strong>try-catch</strong> 的方式就是捕获异常。</p>\n<ul>\n<li>捕获异常：Java 中对异常有针对性的语句进行捕获，可以对出现的异常进行指定方式的处理。 捕获异常语法如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123; </span><br><span class=\"line\">\t编写可能会出现异常的代码 </span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型 e)&#123; </span><br><span class=\"line\">\t处理异常的代码 </span><br><span class=\"line\">\t<span class=\"comment\">//记录日志/打印异常信息/继续抛出异常 </span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>（Exception e）&#123;</span><br><span class=\"line\">\t处理该异常的代码块</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（1）<strong>try 块：</strong> 负责捕获异常，一旦 try 中发现异常，程序的控制权将被移交给 catch 块中的异常处理程序。<br>\n(<font color=blue>try 语句块不可以独立存在，必须与 catch 或者 finally 块同存</font>)<br>\n（2）<strong>catch 块：</strong> 如何处理？比如发出警告：提示、检查配置、网络连接，记录错误等。执行完 catch 块之后程序跳出 catch 块，继续执行后面的代码。<br>\n(<font color=blue>编写 catch 块的注意事项：多个 catch 块处理的异常类，要按照先 catch 子类后 catch 父类的处理方式，因为会【就近处理】异常（由上自下）</font>)</p>\n<p>当异常出现时，程序将终止执行，交由异常处理程序（抛出提醒或记录日志等），异常代码块外代码正常执行。 try 会抛出很多种类型的异常，由多个 catch 块捕获多钟错误。<br>\n多重异常处理代码块顺序问题：<strong>先子类再父类</strong>（顺序不对编译器会提醒错误）<br>\n<strong>代码演示：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 当产生异常时，必须有处理方式。要么捕获，要么声明。 </span></span><br><span class=\"line\">\t\t\tread(<span class=\"string\">&quot;b.txt&quot;</span>); </span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 括号中需要定义什么呢？ </span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//try中抛出的是什么异常，在括号中就定义什么异常类型 </span></span><br><span class=\"line\">\t\t\tSystem.out.println(e); &#125;System.out.println(<span class=\"string\">&quot;over&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * ** 我们 当前的这个方法中 有异常 有编译期异常 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> FileNotFoundException </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!path.equals(<span class=\"string\">&quot;a.txt&quot;</span>)) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果不是 a.txt这个文件</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 我假设 如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常 throw </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FileNotFoundException(<span class=\"string\">&quot;文件不存在&quot;</span>); </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020091316261476.png#\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"42finally-代码块\"><a class=\"markdownIt-Anchor\" href=\"#42finally-代码块\">#</a> 4.2finally 代码块</h2>\n<p><strong>finally：</strong> 有一些特定的代码<strong>无论异常是否发生，都需要执行</strong>。另外，因为异常会引发程序跳转，导致有些语句执行不到。而 finally 就是解决这个问题的，在 finally 代码块中存放的代码都是<strong>一定会被执行</strong>的。<strong>同时用于关闭和释放资源</strong>。<br>\n什么时候的代码必须最终执行？<br>\n当我们在 try 语句块中打开了一些物理资源 (磁盘文件 / 网络连接 / 数据库连接等), 我们都得在使用完之后，最终关闭打开 的资源。<br>\n<strong>finally 的语法:</strong><br>\ntry…catch…finally: 自身需要处理异常，最终还得关闭资源。<br>\n(<font color=red>注意:finally 不能单独使用。</font>)</p>\n<p>比如在我们之后学习的 IO 流中，当打开了一个关联文件的资源，最后程序不管结果如何，都需要把这个资源关闭掉。<br>\n<strong>代码演示：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> divider=<span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> result=<span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(divider&gt;-<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tdivider--;</span><br><span class=\"line\">                result=result+<span class=\"number\">100</span>/divider;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">             e.printStackTrace();</span><br><span class=\"line\">             System.out.println(<span class=\"string\">&quot;异常抛出了！！&quot;</span>);</span><br><span class=\"line\">             <span class=\"keyword\">return</span> result=<span class=\"number\">999</span>;</span><br><span class=\"line\">         &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">             System.out.println(<span class=\"string\">&quot;result的值为：&quot;</span>+result);</span><br><span class=\"line\">         &#125;       </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">         test t1=<span class=\"keyword\">new</span> test();</span><br><span class=\"line\">         t1.test2();</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;test2方法执行完毕！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913164024619.png#\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"43throw和thows关键字\"><a class=\"markdownIt-Anchor\" href=\"#43throw和thows关键字\">#</a> 4.3throw 和 thows 关键字</h2>\n<p>java 中的异常抛出通常使用<strong> throw</strong> 和<strong> throws</strong> 关键字来实现。</p>\n<ul>\n<li><strong>throw 关键字</strong></li>\n</ul>\n<p><strong>抛出异常 throw</strong>—— 将产生的异常抛出，是抛出异常的一个<font color=red>动作</font></p>\n<p>在编写程序时，我们必须要考虑程序出现问题的情况。比如，在定义方法时，方法需要接受参数。那么，当调用方法使用接受到的参数时，首先需要先对参数数据进行合法的判断，数据若不合法，就应该告诉调用者，传递合法的数据进来。这时需要使用抛出异常的方式来告诉调用者。<br>\n在 java 中，提供了一个 throw 关键字，它用来抛出一个指定的异常对象。<br>\n<strong>具体操作</strong>：</p>\n<ol>\n<li>创建一个异常对象。封装一些提示信息 (信息可以自己编写)。</li>\n<li>需要将这个异常对象告知给调用者。怎么告知呢？怎么将这个异常对象传递到调用者处呢？通过关键字 throw 就可以完成。throw 异常对象。</li>\n</ol>\n<p>（<font color=blue>throw 用在方法内，用来抛出一个异常对象，将这个异常对象传递到调用者处，并结束当前方法的执行</font>）</p>\n<p><strong>使用格式：</strong></p>\n<blockquote>\n<p>throw new 异常类名 (参数);</p>\n</blockquote>\n<p><strong>例如：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">&quot;要访问的arr数组不存在&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArrayIndexOutOfBoundsException(<span class=\"string\">&quot;该索引在数组中不存在，已超出范围&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>代码演示：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个数组 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">52</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//根据索引找对应的元素 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">4</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> element = getElement(arr, index);</span><br><span class=\"line\">\t\tSystem.out.println(element);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;over&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * * 根据 索引找到数组中对应的元素 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//判断 索引是否越界 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index&lt;<span class=\"number\">0</span> || index&gt;arr.length-<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*判断条件如果满足，当执行完throw抛出异常对象后，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t 方法已经无法继续运算。 这时就会结束当前方法的执行，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t  并将异常告知给调用者。这时就需要通过异常来解决。 */</span> </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArrayIndexOutOfBoundsException(<span class=\"string\">&quot;哥们，角标越界了~~~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> element = arr[index];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> element; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913154612166.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>注意</strong>：如果产生了问题，我们就会 throw 将问题描述类即异常进行抛出，也就是<strong>将问题返回给该方法的调用者</strong>。<br>\n那么对于调用者来说，该怎么处理呢？一种是进行捕获处理，另一种就是<strong>继续讲问题声明出去，使用 throws 声明处理</strong>。</p>\n<ul>\n<li><strong>throws 关键字</strong></li>\n</ul>\n<p><strong>声明异常 throws</strong>—— 将要抛出何种类型的异常进行<font color=red>声明</font><br>\n<strong>声明异常</strong>：将问题标识出来，报告给调用者。如果方法内通过 throw 抛出了编译时异常，而没有捕获处理（稍后讲 解该方式），那么必须通过 throws 进行声明，让调用者去处理。<br>\n（<font color=blue>关键字 throws 运用于方法声明之上，用于表示当前方法不处理异常，而是提醒该方法的调用者来处理异常 (抛出异常)</font>）<br>\n<strong>声明异常格式</strong>：</p>\n<blockquote>\n<p>修饰符 返回值类型 方法名 (参数) throws 异常类名 1, 异常类名 2…</p>\n</blockquote>\n<p><strong>声明异常的代码演示：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\tread(<span class=\"string\">&quot;a.txt&quot;</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果定义功能时有问题发生需要报告给调用者。可以通过在方法上使用throws关键字进行声明 </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> FileNotFoundException </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!path.equals(<span class=\"string\">&quot;a.txt&quot;</span>)) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果不是 a.txt这个文件</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 假设如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常 throw</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FileNotFoundException(<span class=\"string\">&quot;文件不存在&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>throws 用于进行异常类的声明，若该方法可能有多种异常情况产生，那么在 throws 后面<strong>可以写多个异常类，用逗 号隔开</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\tread(<span class=\"string\">&quot;a.txt&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(String path)</span><span class=\"keyword\">throws</span> FileNotFoundException, IOException </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!path.equals(<span class=\"string\">&quot;a.txt&quot;</span>)) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果不是 a.txt这个文件 </span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常 throw </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FileNotFoundException(<span class=\"string\">&quot;文件不存在&quot;</span>); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!path.equals(<span class=\"string\">&quot;b.txt&quot;</span>)) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>throw 与 throws 的比较：</strong><br>\n1、throws 出现在方法函数头；而 throw 出现在函数体。<br>\n2、throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw 则是抛出了异常，执行 throw 则一定抛出了某种异常对象。<br>\n3、两者都是消极处理异常的方式（这里的消极并不是说这种方式不好），只是抛出或者可能抛出异常，但是不会由函数去处理异常，真正的处理异常由函数的上层调用处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doA</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> <span class=\"title\">throws</span> <span class=\"params\">(Exception1,Exception2,Exception3)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">          ......</span><br><span class=\"line\">   </span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception1 e)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception2 e)&#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;出错了！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(a!=b)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception3(<span class=\"string\">&quot;自定义异常&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>分析:</strong><br>\n1. 代码块中可能会产生 3 个异常，(Exception1,Exception2,Exception3)。<br>\n2. 如果产生 Exception1 异常，则捕获之后再抛出，由该方法的调用者去处理。<br>\n3. 如果产生 Exception2 异常，则该方法自己处理了（即 System.out.println (“出错了！”);）。所以该方法就不会再向外抛出 Exception2 异常了，void doA () throws Exception1,Exception3 里面的 Exception2 也就不用写了。因为已经用 try-catch 语句捕获并处理了。<br>\n4.Exception3 异常是该方法的某段逻辑出错，程序员自己做了处理，在该段逻辑错误的情况下抛出异常 Exception3，则该方法的调用者也要处理此异常。</p>\n<p><strong>使用 throw 和 throws 关键字需要注意以下几点：</strong></p>\n<ul>\n<li>throws 的异常列表可以是抛出一条异常，也可以是抛出多条异常，每个类型的异常中间用逗号隔开</li>\n<li>方法体中调用会抛出异常的方法或者是先抛出一个异常：用 throw new Exception（） throw 写在方法体里，表示 “抛出异常” 这个动作。</li>\n<li>如果某个方法调用了抛出异常的方法，那么必须添加 try catch 语句去尝试捕获这种异常， 或者添加声明，将异常抛出给更上一层的调用者进行处理</li>\n</ul>\n<h1 id=\"5-自定义异常\"><a class=\"markdownIt-Anchor\" href=\"#5-自定义异常\">#</a> 5、自定义异常</h1>\n<h2 id=\"51概述\"><a class=\"markdownIt-Anchor\" href=\"#51概述\">#</a> 5.1 概述</h2>\n<p><strong>为什么需要自定义异常类</strong>:<br>\n 我们说了 Java 中不同的异常类，分别表示着某一种具体的异常情况，那么在开发中总是有些异常情况是 SUN 没有定义 好的，此时我们根据自己业务的异常情况来定义异常类。例如年龄负数问题，考试成绩负数问题等等。 在上述代码中，发现这些异常都是 JDK 内部定义好的，但是实际开发中也会出现很多异常，这些异常很可能在 JDK 中 没有定义过，例如年龄负数问题，考试成绩负数问题。那么能不能自己定义异常呢？<br>\n<strong>什么是自定义异常类</strong>:<br>\n 在开发中根据自己业务的异常情况来定义异常类。自定义一个业务逻辑异常: RegisterException。一个注册异常类。<br>\n<strong>异常类如何定义</strong>:</p>\n<ol>\n<li>自定义一个编译期异常：自定义类 并继承于  <code>java.lang.Exception</code></li>\n<li>自定义一个运行时期的异常类：自定义类 并继承于  <code>java.lang.RuntimeException</code></li>\n</ol>\n<p><strong>练习</strong>：模拟注册操作，如果用户名已存在，则抛出异常并提示：亲，该用户名已经被注册。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegisterException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*** 空参构造 */</span> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RegisterException</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**** <span class=\"doctag\">@param</span> message 表示异常提示 */</span> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RegisterException</span><span class=\"params\">(String message)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 模拟数据库中已存在账号 </span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] names = &#123;<span class=\"string\">&quot;bill&quot;</span>,<span class=\"string\">&quot;hill&quot;</span>,<span class=\"string\">&quot;jill&quot;</span>&#125;; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> LoginException </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//调用方法 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 可能出现异常的代码 </span></span><br><span class=\"line\">\t\t\tcheckUsername(<span class=\"string\">&quot;bill&quot;</span>); </span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;注册成功&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果没有异常就是注册成功</span></span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">catch</span>(RegisterException e)&#123; </span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//处理异常 </span></span><br><span class=\"line\">\t\t\t\te.printStackTrace(); </span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//判断当前注册账号是否存在 </span></span><br><span class=\"line\">\t<span class=\"comment\">//因为是编译期异常，又想调用者去处理 所以声明该异常 </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkUsername</span><span class=\"params\">(String uname)</span> <span class=\"keyword\">throws</span> LoginException, RegisterException</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String name : names) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(name.equals(uname))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果名字在这里面 就抛出登陆异常 </span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RegisterException(<span class=\"string\">&quot;亲&quot;</span>+name+<span class=\"string\">&quot;已经被注册了！&quot;</span>); </span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/202009131703557.png\" alt=\"在这里插入图片描述\"><br>\n在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。</p>\n<ul>\n<li>所有异常都必须是 Throwable 的子类。</li>\n<li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li>\n<li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li>\n</ul>\n",
            "tags": [
                "java",
                "异常",
                "异常处理"
            ]
        },
        {
            "id": "http://yoursite.com/2020/09/12/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88Map%E9%9B%86%E5%90%88%EF%BC%88HashMap%E3%80%81LinkedHashMap%E3%80%81TreeMap%EF%BC%89/",
            "url": "http://yoursite.com/2020/09/12/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88Map%E9%9B%86%E5%90%88%EF%BC%88HashMap%E3%80%81LinkedHashMap%E3%80%81TreeMap%EF%BC%89/",
            "title": "Java学习-详谈Map集合（HashMap、LinkedHashMap、TreeMap）",
            "date_published": "2020-09-12T07:32:59.727Z",
            "content_html": "<h1 id=\"1-map集合\"><a class=\"markdownIt-Anchor\" href=\"#1-map集合\">#</a> 1、Map 集合</h1>\n<h2 id=\"11map集合介绍\"><a class=\"markdownIt-Anchor\" href=\"#11map集合介绍\">#</a> 1.1Map 集合介绍</h2>\n<p>现实生活中，我们常会看到这样的一种集合：IP 地址与主机名，身份证号与个人，系统用户名与系统用户对象等， 这种<strong>一一对应的关系</strong>，就叫做<strong>映射</strong>。Java 提供了专门的集合类用来存放这种对象关系的对象，即  <code>java.util.Map</code>  接 口。</p>\n<h2 id=\"12map继承关系\"><a class=\"markdownIt-Anchor\" href=\"#12map继承关系\">#</a> 1.2Map 继承关系</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200912120652291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n（1）： <code>AbstractMap</code>  是一个<strong>抽象类</strong>， 继承 Map，实现了 Map 的大部分 API，它的作用 Map 的实现类继承它，可以减少重复编码！<br>\n（2）： <code>SortedMap</code>  是一个<strong>接口</strong> 继承 Map，自己也封装一下方法，SortedMap 中的内容是<strong>排序的键值对</strong>，排序的方法是<strong>通过比较器 (Comparator)</strong>。SortedMap 的排序方式有两种：<strong>自然排序</strong> 或者 <strong>用户指定比较器</strong>。<br>\n（3）： <code>ConcurrentMap</code>  是一个接口，并且继承 Map 接口，在 <code>java.util.concurrent</code>  包下！<br>\n（4）： <code>HashMap</code>  继承于 AbstractMap，HashMap 的内容是 “<strong>键值对，但不保证次序</strong>”！<br>\n（5）：  <code>TreeMap</code>  继承于 AbstractMap，且实现了 NavigableMap 接口；因此，TreeMap 中的内容是键值对，<strong>有序</strong>的键值对！<br>\n（6）： <code>ConcurrentHashMap</code>  继承 AbstractMap 实现 ConcurrentMap，是一个<strong>并发的哈希表</strong>！此类与 Hashtable 相似，但与 HashMap 不同，它<strong>不允许将 null 用作键或值</strong>。<strong>线程安全</strong>，但是实现方法和 Hashtable 完全不同（并发情况可以使用） 。<br>\n（7）： <code>Dictionary</code>  是一个抽象类（数据字典），HashTable 继承 Dictionary 并实现 Map 接口，也是键值对，但不保证次序！ <code>Hashtable</code>  是<strong>线程安全</strong>的，而且它支持通过 Enumeration 去遍历。（现在使用很少，并发操作效率太低）</p>\n<h2 id=\"13map集合与collection集合存储形式的不同\"><a class=\"markdownIt-Anchor\" href=\"#13map集合与collection集合存储形式的不同\">#</a> 1.3Map 集合与 Collection 集合存储形式的不同</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200912122042130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><code>Collection</code>  中的集合，<strong>元素是孤立存在</strong>的（理解为单身），向集合中存储元素采用一个个元素的方式存储。</li>\n<li><code>Map</code>  中的集合，元素是<strong>成对存在</strong>的 (理解为夫妻)。每个元素由<strong>键与值</strong>两部分组成，<font color=red>通过键可以找对所对应的值</font>。</li>\n<li>Collection 中的集合称为<strong>单列集合</strong>， Map 中的集合称为<strong>双列集合</strong>。</li>\n<li>需要注意的是， Map 中的集合<font color=blue><strong>不能包含重复的键，值可以重复；每个键只能对应一个值</strong></font>。</li>\n</ul>\n<h2 id=\"14map常用方法\"><a class=\"markdownIt-Anchor\" href=\"#14map常用方法\">#</a> 1.4Map 常用方法</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         从此映射中移除所有映射关系（可选操作）。 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">containsKey</span><span class=\"params\">(Object key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         如果此映射包含指定键的映射关系，则返回 <span class=\"keyword\">true</span>。 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">containsValue</span><span class=\"params\">(Object value)</span> </span></span><br><span class=\"line\"><span class=\"function\">         如果此映射将一个或多个键映射到指定值，则返回 <span class=\"keyword\">true</span>。 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span></span><br><span class=\"line\"><span class=\"function\">         比较指定的对象与此映射是否相等。 </span></span><br><span class=\"line\"><span class=\"function\">V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回 <span class=\"keyword\">null</span>。 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射的哈希码值。 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         如果此映射未包含键-值映射关系，则返回 <span class=\"keyword\">true</span>。  </span></span><br><span class=\"line\"><span class=\"function\">V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span></span><br><span class=\"line\"><span class=\"function\">         将指定的值与此映射中的指定键关联（可选操作）。 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">putAll</span><span class=\"params\">(Map&lt;? extends K,? extends V&gt; m)</span> </span></span><br><span class=\"line\"><span class=\"function\">         从指定映射中将所有映射关系复制到此映射中（可选操作）。 </span></span><br><span class=\"line\"><span class=\"function\">V <span class=\"title\">remove</span><span class=\"params\">(Object key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         如果存在一个键的映射关系，则将其从此映射中移除（可选操作）。 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射中的键-值映射关系数。 </span></span><br><span class=\"line\"><span class=\"function\">Set&lt;K&gt; <span class=\"title\">keySet</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         用于返回Key集的Set合       </span></span><br><span class=\"line\"><span class=\"function\">Set&lt;Map.Entry&lt;K,V&gt;&gt; <span class=\"title\">entrySet</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         用于返回&lt;Key——Value&gt; 集的Set集合 </span></span><br><span class=\"line\"><span class=\"function\">Collection&lt;V&gt; <span class=\"title\">values</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         用于返回value集的Collection集合。 </span></span><br></pre></td></tr></table></figure>\n<p>Map 接口常用方法演示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建 map对象 </span></span><br><span class=\"line\">\t\tHashMap&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//添加元素到集合 </span></span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&quot;黄晓明&quot;</span>, <span class=\"string\">&quot;杨颖&quot;</span>); </span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&quot;文章&quot;</span>, <span class=\"string\">&quot;马伊琍&quot;</span>); </span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&quot;邓超&quot;</span>, <span class=\"string\">&quot;孙俪&quot;</span>); </span><br><span class=\"line\">\t\tSystem.out.println(map); </span><br><span class=\"line\">\t\t<span class=\"comment\">//String remove(String key) </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的 值</span></span><br><span class=\"line\">\t\tSystem.out.println(map.remove(<span class=\"string\">&quot;文章&quot;</span>));</span><br><span class=\"line\">\t\tSystem.out.println(map); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据指定的键，在Map集合中获取对应的值</span></span><br><span class=\"line\">\t\tSystem.out.println(map.get(<span class=\"string\">&quot;黄晓明&quot;</span>)); </span><br><span class=\"line\">\t\tSystem.out.println(map.get(<span class=\"string\">&quot;邓超&quot;</span>)); </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;邓超=孙俪, 文章=马伊琍, 黄晓明=杨颖&#125;</span><br><span class=\"line\">马伊琍</span><br><span class=\"line\">&#123;邓超=孙俪, 黄晓明=杨颖&#125;</span><br><span class=\"line\">杨颖</span><br><span class=\"line\">孙俪</span><br></pre></td></tr></table></figure>\n<p>（注意：在使用 put 方法时，若指定的键 (key) 在集合中没有，则没有这个键对应的值，返回 null，并把指定的键值添加到 集合中； 若指定的键 (key) 在集合中存在，则返回值为集合中键对应的值（该值为替换前的值），并把指定键所对应的 值，替换成指定的新值。）</p>\n<h2 id=\"15map集合遍历键找值方式\"><a class=\"markdownIt-Anchor\" href=\"#15map集合遍历键找值方式\">#</a> 1.5Map 集合遍历键找值方式</h2>\n<p>键找值方式：即<strong>通过元素中的键，获取键所对应的值</strong><br>\n操作步骤：</p>\n<ol>\n<li>获取 Map 中所有的键，由于键是唯一的，所以返回一个 Set 集合存储所有的键。方法提示: keyset ()</li>\n<li>遍历键的 Set 集合，得到每一个键。</li>\n<li>根据键，获取键所对应的值。方法提示: get (K key)</li>\n</ol>\n<p>（<font color=red>Map 集合不能直接使用迭代器或者 foreach 进行遍历。但是转成 Set 之后就可以使用了</font>）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建Map集合对象 </span></span><br><span class=\"line\">\t\tHashMap&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//添加元素到集合 </span></span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&quot;胡歌&quot;</span>, <span class=\"string\">&quot;霍建华&quot;</span>); </span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&quot;郭德纲&quot;</span>, <span class=\"string\">&quot;于谦&quot;</span>); </span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&quot;薛之谦&quot;</span>, <span class=\"string\">&quot;大张伟&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">//获取所有的键 获取键集</span></span><br><span class=\"line\">\t\tSet&lt;String&gt; keys = map.keySet(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历键集 得到 每一个键 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String key : keys) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//key 就是键 </span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//获取对应值 </span></span><br><span class=\"line\">\t\t\tString value = map.get(key); </span><br><span class=\"line\">\t\t\tSystem.out.println(key+<span class=\"string\">&quot;的CP是：&quot;</span>+value); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">郭德纲的CP是：于谦</span><br><span class=\"line\">薛之谦的CP是：大张伟</span><br><span class=\"line\">胡歌的CP是：霍建华</span><br></pre></td></tr></table></figure>\n<p><strong>遍历图解</strong>：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200912132121145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"16entry键值对对象\"><a class=\"markdownIt-Anchor\" href=\"#16entry键值对对象\">#</a> 1.6Entry 键值对对象</h2>\n<p>我们已经知道， Map 中存放的是两种对象，一种称为<strong> key (键)</strong>，一种称为<strong> value (值)</strong>，它们在在 Map 中是 <code>一一对应关 系</code> ，这一对对象又称做 Map 中的一个  <code>Entry(项)</code>  。 <strong>Entry 将键值对的对应关系封装成了对象。即键值对对象</strong>，这 样我们在遍历 Map 集合时，就可以从每一个键值对（ Entry ）对象中获取对应的键与对应的值。 既然 Entry 表示了一对键和值，那么也同样提供了获取对应键和对应值得方法：</p>\n<ul>\n<li><code>public K getKey()</code>  ：获取 Entry 对象中的键。</li>\n<li><code>public V getValue()</code>  ：获取 Entry 对象中的值。</li>\n</ul>\n<p>在 Map 集合中也提供了获取所有 Entry 对象的方法：</p>\n<ul>\n<li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>  : 获取到 Map 集合中所有的键值对对象的集合 (Set 集合)。</li>\n</ul>\n<h2 id=\"17map集合遍历键值对方式\"><a class=\"markdownIt-Anchor\" href=\"#17map集合遍历键值对方式\">#</a> 1.7Map 集合遍历键值对方式</h2>\n<p>遍历键值对方式：即<strong>通过集合中每个键值对 (Entry) 对象，获取键值对 (Entry) 对象中的键与值</strong>。<br>\n操作步骤：</p>\n<ol>\n<li>获取 Map 集合中，所有的键值对 (Entry) 对象，以 Set 集合形式返回。方法提示: entrySet () 。</li>\n<li>遍历包含键值对 (Entry) 对象的 Set 集合，得到每一个键值对 (Entry) 对象。</li>\n<li>通过键值对 (Entry) 对象，获取 Entry 对象中的键与值。 方法提示: getkey () getValue ()</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map.Entry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建Map集合对象 </span></span><br><span class=\"line\">\t\tHashMap&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加元素到集合 </span></span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&quot;胡歌&quot;</span>, <span class=\"string\">&quot;霍建华&quot;</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&quot;郭德纲&quot;</span>, <span class=\"string\">&quot;于谦&quot;</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&quot;薛之谦&quot;</span>, <span class=\"string\">&quot;大张伟&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取 所有的 entry对象 entrySet </span></span><br><span class=\"line\">\t\tSet&lt;Entry&lt;String,String&gt;&gt; entrySet = map.entrySet(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历得到每一个entry对象 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Entry&lt;String, String&gt; entry : entrySet) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 解析 </span></span><br><span class=\"line\">\t\t\tString key = entry.getKey(); </span><br><span class=\"line\">\t\t\tString value = entry.getValue(); </span><br><span class=\"line\">\t\t\tSystem.out.println(key+<span class=\"string\">&quot;的CP是:&quot;</span>+value);</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">郭德纲的CP是:于谦</span><br><span class=\"line\">薛之谦的CP是:大张伟</span><br><span class=\"line\">胡歌的CP是:霍建华</span><br></pre></td></tr></table></figure>\n<p><strong>遍历图解：</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200912133618347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"18map集合练习\"><a class=\"markdownIt-Anchor\" href=\"#18map集合练习\">#</a> 1.8Map 集合练习</h2>\n<p>题目：计算一个字符串中每个字符出现次数。<br>\n分析：</p>\n<ol>\n<li>获取一个字符串对象</li>\n<li>创建一个 Map 集合，键代表字符，值代表次数。</li>\n<li>遍历字符串得到每个字符。</li>\n<li>判断 Map 中是否有该键。</li>\n<li>如果没有，第一次出现，存储次数为</li>\n<li>打印最终结果</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;请录入一个字符串:&quot;</span>);</span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\tString s = scanner.next();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义 每个字符出现次数的方法 </span></span><br><span class=\"line\">\t\tfindChar(s);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">findChar</span><span class=\"params\">(String line)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//1:创建一个集合 存储 字符 以及其出现的次数 </span></span><br><span class=\"line\">\t\tHashMap&lt;Character, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;Character, Integer&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//2:遍历字符串 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; line.length(); i++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> c = line.charAt(i); </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//判断 该字符 是否在键集中</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!map.containsKey(c)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//说明这个字符没有出现过 </span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//那就是第一次 </span></span><br><span class=\"line\">\t\t\t\tmap.put(c, <span class=\"number\">1</span>); </span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//先获取之前的次数 </span></span><br><span class=\"line\">\t\t\t\t\tInteger count = map.get(c); </span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//count++;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//再次存入 更新</span></span><br><span class=\"line\">\t\t\t\t\tmap.put(c, ++count);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(map); &#125;\t\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请录入一个字符串:</span><br><span class=\"line\">aaabbbbsda</span><br><span class=\"line\">&#123;a=<span class=\"number\">4</span>, b=<span class=\"number\">4</span>, s=<span class=\"number\">1</span>, d=<span class=\"number\">1</span>&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-hashmap集合\"><a class=\"markdownIt-Anchor\" href=\"#2-hashmap集合\">#</a> 2、HashMap 集合</h1>\n<h2 id=\"21hashmap介绍\"><a class=\"markdownIt-Anchor\" href=\"#21hashmap介绍\">#</a> 2.1HashMap 介绍</h2>\n<p>HashMap 是基于<strong>哈希表</strong>的 Map 实现的的，<strong>一个 Key 对应一个 Value</strong>，允许使用 null 键和 null 值，元素的<strong>存取顺序不能保证一致</strong>。由于要<font color=red><strong>保证键的唯一、不重复，需要重写键的 hashCode () 方法、equals () 方法</strong></font>。</p>\n<p><font color=blue>不保证映射的顺序，特别是它不保证该顺序恒久不变！也不是同步的</font>：<br>\n（当哈希表中的条目数超出了加载因子与当前容量的乘积时的时候，哈希表进行 rehash 操作（即重建内部数据结构），此时映射顺序可能会被打乱！）</p>\n<h2 id=\"22hashmap的存储结构数组链表红黑树\"><a class=\"markdownIt-Anchor\" href=\"#22hashmap的存储结构数组链表红黑树\">#</a> 2.2HashMap 的存储结构（数组 + 链表 + 红黑树）</h2>\n<p>HashMap 根据<font color=blue><strong>键的 hashCode 值</strong></font>存储数据，大多数情况下可以<strong>直接定位</strong>到它的值，因而<strong>具有很快的访问速度</strong>，但遍历顺序却是不确定的。 HashMap 最多<strong>只允许一条记录的键为 null，允许多条记录的值为 null</strong>。</p>\n<p>HashMap <strong>非线程安全</strong>，即任一时刻可以有多个线程同时写 HashMap，可能会导致数据的不一致。如果需要满足线程安全有以下两种办法 ：</p>\n<ul>\n<li>使用 Collections 的 synchronizedMap 方法使 HashMap 具有线程安全的能力</li>\n<li>使用 ConcurrentHashMap 接口</li>\n</ul>\n<p><strong>Java7 的 HashMap 结构：</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020091212423071.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n大方向上，<strong>HashMap 里面是一个数组，然后数组中每个元素是一个单向链表</strong>。上图中，每个绿色的实体是嵌套类 Entry 的实例，Entry 包含四个属性：key, value, hash 值和用于单向链表的 next。</p>\n<ol>\n<li>capacity：当前数组容量，始终保持 2^n，可以扩容，扩容后数组大小为当前的 2 倍。</li>\n<li>loadFactor：负载因子，默认为 0.75。</li>\n<li>threshold：扩容的阈值，等于 capacity * loadFactor</li>\n</ol>\n<p><strong>Java8 的 HashMap 结构：</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200912124525563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n Java8 对 HashMap 进行了一些修改，最大的不同就是利用了红黑树，所以其由 <strong>数组 + 链表 + 红黑树</strong> 组成。<br>\n<font color=red>为什么要加入红黑树结构？</font><br>\n根据 Java7 HashMap 的介绍，我们知道，查找的时候，根据 hash 值我们能够快速定位到数组的具体下标，但是之后的话，需要顺着链表一个个比较下去才能找到我们需要的，<strong>时间复杂度取决于链表的长度为 O (n)</strong>。为了降低这部分的开销，在 Java8 中，当链表中的元素超过了 8 个以后，会将链表转换为红黑树，在这些位置进行查找的时候可以降低<strong>时间复杂度为 O (logN</strong>)。</p>\n<h2 id=\"23hashmap的继承关系和api方法\"><a class=\"markdownIt-Anchor\" href=\"#23hashmap的继承关系和api方法\">#</a> 2.3HashMap 的继承关系和 API 方法</h2>\n<p><strong>HashMap 的继承关系：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类 HashMap&lt;K,V&gt;</span><br><span class=\"line\">java.lang.Object</span><br><span class=\"line\">  继承者 java.util.AbstractMap&lt;K,V&gt;</span><br><span class=\"line\">      继承者 java.util.HashMap&lt;K,V&gt;</span><br><span class=\"line\">类型参数：</span><br><span class=\"line\">    K - 此映射所维护的键的类型</span><br><span class=\"line\">    V - 所映射值的类型</span><br><span class=\"line\">所有已实现的接口： </span><br><span class=\"line\">    Serializable, Cloneable, Map&lt;K,V&gt; </span><br></pre></td></tr></table></figure>\n<p><strong>HashMap 的 API:</strong><br>\n（1）构造函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashMap() </span><br><span class=\"line\">          构造一个具有默认初始容量 (<span class=\"number\">16</span>) 和默认加载因子 (<span class=\"number\">0.75</span>) 的空 HashMap。 </span><br><span class=\"line\">HashMap(<span class=\"keyword\">int</span> initialCapacity) </span><br><span class=\"line\">          构造一个带指定初始容量和默认加载因子 (<span class=\"number\">0.75</span>) 的空 HashMap。 </span><br><span class=\"line\">HashMap(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor) </span><br><span class=\"line\">          构造一个带指定初始容量和加载因子的空 HashMap。 </span><br><span class=\"line\">HashMap(Map&lt;? extends K,? extends V&gt; m) </span><br><span class=\"line\">          构造一个映射关系与指定 Map 相同的新 HashMap。 </span><br></pre></td></tr></table></figure>\n<p>（2）方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         从此映射中移除所有映射关系。 </span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 HashMap 实例的浅表副本：并不复制键和值本身。 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">containsKey</span><span class=\"params\">(Object key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         如果此映射包含对于指定键的映射关系，则返回 <span class=\"keyword\">true</span>。 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">containsValue</span><span class=\"params\">(Object value)</span> </span></span><br><span class=\"line\"><span class=\"function\">         如果此映射将一个或多个键映射到指定值，则返回 <span class=\"keyword\">true</span>。 </span></span><br><span class=\"line\"><span class=\"function\">Set&lt;Map.Entry&lt;K,V&gt;&gt; <span class=\"title\">entrySet</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射所包含的映射关系的 Set 视图。 </span></span><br><span class=\"line\"><span class=\"function\">V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回指定键所映射的值；如果对于该键来说，此映射不包含任何映射关系，则返回 <span class=\"keyword\">null</span>。 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         如果此映射不包含键-值映射关系，则返回 <span class=\"keyword\">true</span>。 </span></span><br><span class=\"line\"><span class=\"function\">Set&lt;K&gt; <span class=\"title\">keySet</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射中所包含的键的 Set 视图。 </span></span><br><span class=\"line\"><span class=\"function\">V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span></span><br><span class=\"line\"><span class=\"function\">         在此映射中关联指定值与指定键。 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">putAll</span><span class=\"params\">(Map&lt;? extends K,? extends V&gt; m)</span> </span></span><br><span class=\"line\"><span class=\"function\">         将指定映射的所有映射关系复制到此映射中，这些映射关系将替换此映射目前针对指定映射中所有键的所有映射关系。 </span></span><br><span class=\"line\"><span class=\"function\">V <span class=\"title\">remove</span><span class=\"params\">(Object key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         从此映射中移除指定键的映射关系（如果存在）。 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射中的键-值映射关系数。 </span></span><br><span class=\"line\"><span class=\"function\">Collection&lt;V&gt; <span class=\"title\">values</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射所包含的值的 Collection 视图。 </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"24hashmap存储自定义类型键值\"><a class=\"markdownIt-Anchor\" href=\"#24hashmap存储自定义类型键值\">#</a> 2.4HashMap 存储自定义类型键值</h2>\n<p>练习：每位学生（姓名，年龄）都有自己的家庭住址。那么，既然有对应关系，则将学生对象和家庭住址存储到 map 集合中。学生作为键，家庭住址作为值。<br>\n注意：学生姓名相同并且年龄相同视为同一名学生。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span> </span><br><span class=\"line\">\t<span class=\"comment\">//重写equals方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == o) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span> || getClass() != o.getClass()) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; </span><br><span class=\"line\">\t\tStudent student = (Student) o; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age == student.age &amp;&amp; Objects.equals(name, student.name); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span> </span><br><span class=\"line\">\t<span class=\"comment\">//重写hashCode方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Objects.hash(name, age); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span> </span><br><span class=\"line\">\t<span class=\"comment\">//重写toString方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Studen:&quot;</span> + name +<span class=\"string\">&quot;      &quot;</span>+ <span class=\"string\">&quot;年龄:&quot;</span> +age+<span class=\"string\">&quot;     &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"comment\">//1,创建Hashmap集合对象。 </span></span><br><span class=\"line\">\t\tMap&lt;Student,String&gt;map = <span class=\"keyword\">new</span> HashMap&lt;Student,String&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//2,添加元素。 </span></span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">28</span>), <span class=\"string\">&quot;上海&quot;</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">22</span>), <span class=\"string\">&quot;北京&quot;</span>); </span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">24</span>), <span class=\"string\">&quot;成都&quot;</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;谢六&quot;</span>,<span class=\"number\">25</span>), <span class=\"string\">&quot;广州&quot;</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;刘强&quot;</span>,<span class=\"number\">22</span>), <span class=\"string\">&quot;南京&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">//3,取出元素。键找值方式 </span></span><br><span class=\"line\">\t\tSet&lt;Student&gt;keySet = map.keySet(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Student key: keySet)</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tString value = map.get(key); </span><br><span class=\"line\">\t\t\tSystem.out.println(key.toString()+<span class=\"string\">&quot;来自&quot;</span>+value); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Studen:李四      年龄:<span class=\"number\">22</span>     来自北京</span><br><span class=\"line\">Studen:谢六      年龄:<span class=\"number\">25</span>     来自广州</span><br><span class=\"line\">Studen:张三      年龄:<span class=\"number\">28</span>     来自上海</span><br><span class=\"line\">Studen:刘强      年龄:<span class=\"number\">22</span>     来自南京</span><br><span class=\"line\">Studen:王五      年龄:<span class=\"number\">24</span>     来自成都</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当给 HashMap 中存放自定义对象时，如果自定义对象<strong>作为 key 存在</strong>，<strong>这时要保证对象唯一</strong>，必须复写对象的 hashCode 和 equals 方法。</li>\n<li>如果要保证 map 中存放的 key 和取出的顺序一致，可以使用  <code>java.util.LinkedHashMap</code>  集合来存放。</li>\n</ul>\n<h2 id=\"25linkedhashmap集合\"><a class=\"markdownIt-Anchor\" href=\"#25linkedhashmap集合\">#</a> 2.5LinkedHashMap 集合</h2>\n<p>我们知道 HashMap 保证成对元素唯一，并且查询速度很快，可是成对元素存放进去是没有顺序的，那么我们要<strong>保证有序，还要速度快</strong>怎么办呢？<br>\n在<strong> HashMap 下面有一个子类</strong>  <code>LinkedHashMap</code> ，它是链表和哈希表组合的一个数据存储结构。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedHashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map.Entry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\tLinkedHashMap&lt;String, String&gt; map = <span class=\"keyword\">new</span> LinkedHashMap&lt;String, String&gt;(); </span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;李四&quot;</span>); </span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历键值对</span></span><br><span class=\"line\">\t\tSet&lt;Entry&lt;String, String&gt;&gt; entrySet = map.entrySet(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Entry&lt;String, String&gt; entry : entrySet) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(entry.getKey() + <span class=\"string\">&quot; &quot;</span> + entry.getValue()); </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> 张三</span><br><span class=\"line\"><span class=\"number\">2</span> 李四</span><br><span class=\"line\"><span class=\"number\">3</span> 王五</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-treemap集合\"><a class=\"markdownIt-Anchor\" href=\"#3-treemap集合\">#</a> 3、TreeMap 集合</h1>\n<h2 id=\"31treemap介绍\"><a class=\"markdownIt-Anchor\" href=\"#31treemap介绍\">#</a> 3.1TreeMap 介绍</h2>\n<p>TreeMap 是一个<strong>有序的 key-value 集合</strong>，基于<strong>红黑树（Red-Black tree</strong>）的 NavigableMap 实现。该映射根据其键的<strong>自然顺序进行排序</strong>，<strong>或者根据创建映射时提供的 Comparator 进行排序</strong>，具体<strong>取决于使用的构造方法</strong>。</p>\n<h2 id=\"32treemap的继承关系和api\"><a class=\"markdownIt-Anchor\" href=\"#32treemap的继承关系和api\">#</a> 3.2TreeMap 的继承关系和 API</h2>\n<p><strong>TreeMap 的继承关系：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类 TreeMap&lt;K,V&gt;</span><br><span class=\"line\">java.lang.Object</span><br><span class=\"line\">  继承者 java.util.AbstractMap&lt;K,V&gt;</span><br><span class=\"line\">      继承者 java.util.TreeMap&lt;K,V&gt;</span><br><span class=\"line\">类型参数：</span><br><span class=\"line\">K - 此映射维护的键的类型</span><br><span class=\"line\">V - 映射值的类型</span><br></pre></td></tr></table></figure>\n<ul>\n<li>继承 <code>AbstactMap</code>  类，则 TreeMap 是一个 Map，具体 key-value 特性的集合！</li>\n<li>实现了 <code>Navigable</code>  接口，意味着它支持一系列的导航方法，如<strong>有序的 key 返回</strong>。</li>\n<li>实现了 <code>Cloneable</code>  接口，意味着它<strong>能被克隆</strong>。</li>\n<li>实现了 <code>Serializable</code>  接口，意味着它<strong>支持序列化</strong>。</li>\n</ul>\n<p><strong>TreeMap 的 API:</strong><br>\n1：构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TreeMap() </span><br><span class=\"line\">          使用键的自然顺序构造一个新的、空的树映射。</span><br><span class=\"line\">TreeMap(Comparator&lt;? <span class=\"keyword\">super</span> K&gt; comparator) </span><br><span class=\"line\">          构造一个新的、空的树映射，该映射根据给定比较器进行排序。</span><br><span class=\"line\">TreeMap(Map&lt;? extends K,? extends V&gt; m) </span><br><span class=\"line\">          构造一个与给定映射具有相同映射关系的新的树映射，该映射根据其键的自然顺序 进行排序。</span><br><span class=\"line\">TreeMap(SortedMap&lt;K,? extends V&gt; m) </span><br><span class=\"line\">          构造一个与指定有序映射具有相同映射关系和相同排序顺序的新的树映射。</span><br></pre></td></tr></table></figure>\n<p>2：常用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map.<span class=\"function\">Entry&lt;K,V&gt; <span class=\"title\">ceilingEntry</span><span class=\"params\">(K key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回一个键-值映射关系，它与大于等于给定键的最小键关联；如果不存在这样的键，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">K  <span class=\"title\">ceilingKey</span><span class=\"params\">(K key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回大于等于给定键的最小键；如果不存在这样的键，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>   <span class=\"title\">clear</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         从此映射中移除所有映射关系。</span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 TreeMap 实例的浅表副本。</span></span><br><span class=\"line\"><span class=\"function\">Comparator&lt;? <span class=\"keyword\">super</span> K&gt;  <span class=\"title\">comparator</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回对此映射中的键进行排序的比较器；如果此映射使用键的自然顺序，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>    <span class=\"title\">containsKey</span><span class=\"params\">(Object key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         如果此映射包含指定键的映射关系，则返回 <span class=\"keyword\">true</span>。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>    <span class=\"title\">containsValue</span><span class=\"params\">(Object value)</span> </span></span><br><span class=\"line\"><span class=\"function\">         如果此映射为指定值映射一个或多个键，则返回 <span class=\"keyword\">true</span>。</span></span><br><span class=\"line\"><span class=\"function\">NavigableSet&lt;K&gt;    <span class=\"title\">descendingKeySet</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射中所包含键的逆序 NavigableSet 视图。</span></span><br><span class=\"line\"><span class=\"function\">NavigableMap&lt;K,V&gt;  <span class=\"title\">descendingMap</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射中所包含映射关系的逆序视图。</span></span><br><span class=\"line\"><span class=\"function\">Set&lt;Map.Entry&lt;K,V&gt;&gt;    <span class=\"title\">entrySet</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射中包含的映射关系的 Set 视图。</span></span><br><span class=\"line\"><span class=\"function\">Map.Entry&lt;K,V&gt; <span class=\"title\">firstEntry</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回一个与此映射中的最小键关联的键-值映射关系；如果映射为空，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">K  <span class=\"title\">firstKey</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射中当前第一个（最低）键。</span></span><br><span class=\"line\"><span class=\"function\">Map.Entry&lt;K,V&gt; <span class=\"title\">floorEntry</span><span class=\"params\">(K key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回一个键-值映射关系，它与小于等于给定键的最大键关联；如果不存在这样的键，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">K  <span class=\"title\">floorKey</span><span class=\"params\">(K key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回小于等于给定键的最大键；如果不存在这样的键，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">V  <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回指定键所映射的值，如果对于该键而言，此映射不包含任何映射关系，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">SortedMap&lt;K,V&gt; <span class=\"title\">headMap</span><span class=\"params\">(K toKey)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射的部分视图，其键值严格小于 toKey。</span></span><br><span class=\"line\"><span class=\"function\">NavigableMap&lt;K,V&gt;  <span class=\"title\">headMap</span><span class=\"params\">(K toKey, <span class=\"keyword\">boolean</span> inclusive)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射的部分视图，其键小于（或等于，如果 inclusive 为 <span class=\"keyword\">true</span>）toKey。</span></span><br><span class=\"line\"><span class=\"function\">Map.Entry&lt;K,V&gt; <span class=\"title\">higherEntry</span><span class=\"params\">(K key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回一个键-值映射关系，它与严格大于给定键的最小键关联；如果不存在这样的键，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">K  <span class=\"title\">higherKey</span><span class=\"params\">(K key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回严格大于给定键的最小键；如果不存在这样的键，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">Set&lt;K&gt; <span class=\"title\">keySet</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射包含的键的 Set 视图。</span></span><br><span class=\"line\"><span class=\"function\">Map.Entry&lt;K,V&gt; <span class=\"title\">lastEntry</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回与此映射中的最大键关联的键-值映射关系；如果映射为空，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">K  <span class=\"title\">lastKey</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回映射中当前最后一个（最高）键。</span></span><br><span class=\"line\"><span class=\"function\">Map.Entry&lt;K,V&gt; <span class=\"title\">lowerEntry</span><span class=\"params\">(K key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回一个键-值映射关系，它与严格小于给定键的最大键关联；如果不存在这样的键，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">K  <span class=\"title\">lowerKey</span><span class=\"params\">(K key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回严格小于给定键的最大键；如果不存在这样的键，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">NavigableSet&lt;K&gt;    <span class=\"title\">navigableKeySet</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射中所包含键的 NavigableSet 视图。</span></span><br><span class=\"line\"><span class=\"function\">Map.Entry&lt;K,V&gt; <span class=\"title\">pollFirstEntry</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         移除并返回与此映射中的最小键关联的键-值映射关系；如果映射为空，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">Map.Entry&lt;K,V&gt; <span class=\"title\">pollLastEntry</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         移除并返回与此映射中的最大键关联的键-值映射关系；如果映射为空，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">V  <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span></span><br><span class=\"line\"><span class=\"function\">         将指定值与此映射中的指定键进行关联。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>   <span class=\"title\">putAll</span><span class=\"params\">(Map&lt;? extends K,? extends V&gt; map)</span> </span></span><br><span class=\"line\"><span class=\"function\">         将指定映射中的所有映射关系复制到此映射中。</span></span><br><span class=\"line\"><span class=\"function\">V  <span class=\"title\">remove</span><span class=\"params\">(Object key)</span> </span></span><br><span class=\"line\"><span class=\"function\">         如果此 TreeMap 中存在该键的映射关系，则将其删除。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>    <span class=\"title\">size</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射中的键-值映射关系数。</span></span><br><span class=\"line\"><span class=\"function\">NavigableMap&lt;K,V&gt;  <span class=\"title\">subMap</span><span class=\"params\">(K fromKey, <span class=\"keyword\">boolean</span> fromInclusive, K toKey, <span class=\"keyword\">boolean</span> toInclusive)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射的部分视图，其键的范围从 fromKey 到 toKey。</span></span><br><span class=\"line\"><span class=\"function\">SortedMap&lt;K,V&gt; <span class=\"title\">subMap</span><span class=\"params\">(K fromKey, K toKey)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射的部分视图，其键值的范围从 fromKey（包括）到 toKey（不包括）。</span></span><br><span class=\"line\"><span class=\"function\">SortedMap&lt;K,V&gt; <span class=\"title\">tailMap</span><span class=\"params\">(K fromKey)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射的部分视图，其键大于等于 fromKey。</span></span><br><span class=\"line\"><span class=\"function\">NavigableMap&lt;K,V&gt;  <span class=\"title\">tailMap</span><span class=\"params\">(K fromKey, <span class=\"keyword\">boolean</span> inclusive)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射的部分视图，其键大于（或等于，如果 inclusive 为 <span class=\"keyword\">true</span>）fromKey。</span></span><br><span class=\"line\"><span class=\"function\">Collection&lt;V&gt;  <span class=\"title\">values</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此映射包含的值的 Collection 视图。</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map.Entry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeMap;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\tTreeMap&lt;Integer, String&gt; tmap = <span class=\"keyword\">new</span> TreeMap&lt;&gt;();</span><br><span class=\"line\">\t\ttmap.put(<span class=\"number\">14</span>, <span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">\t\ttmap.put(<span class=\"number\">2</span>, <span class=\"string\">&quot;李四&quot;</span>); </span><br><span class=\"line\">\t\ttmap.put(<span class=\"number\">32</span>, <span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">\t\ttmap.put(<span class=\"number\">24</span>, <span class=\"string\">&quot;刘强&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历键值对</span></span><br><span class=\"line\">\t\tSet&lt;Entry&lt;Integer, String&gt;&gt; entrySet = tmap.entrySet(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Entry&lt;Integer, String&gt; entry : entrySet) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(entry.getKey() + <span class=\"string\">&quot; &quot;</span> + entry.getValue()); </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;size of tmap is: &quot;</span> + tmap.size());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;tmap contains value 张三: &quot;</span> + tmap.containsValue(<span class=\"string\">&quot;张三&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;tmap contains key 32: &quot;</span> + tmap.containsKey(<span class=\"number\">32</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;last key in tmap is: &quot;</span> + tmap.lastKey());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;key is 14 &amp; value is &quot;</span> + tmap.get(<span class=\"number\">14</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;remove key 14&quot;</span>);</span><br><span class=\"line\">        tmap.remove(<span class=\"number\">14</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;tmap contains key : &quot;</span> + tmap.containsKey(<span class=\"number\">14</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;key in tmap:&quot;</span>);</span><br><span class=\"line\">        Iterator&lt;Integer&gt; iterator = tmap.keySet().iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;clear tmap&quot;</span>);</span><br><span class=\"line\">        tmap.clear();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;size of tmap: &quot;</span> + tmap.size());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> 李四</span><br><span class=\"line\"><span class=\"number\">14</span> 张三</span><br><span class=\"line\"><span class=\"number\">24</span> 刘强</span><br><span class=\"line\"><span class=\"number\">32</span> 王五</span><br><span class=\"line\">size of tmap is: <span class=\"number\">4</span></span><br><span class=\"line\">tmap contains value 张三: <span class=\"keyword\">true</span></span><br><span class=\"line\">tmap contains key <span class=\"number\">32</span>: <span class=\"keyword\">true</span></span><br><span class=\"line\">last key in tmap is: <span class=\"number\">32</span></span><br><span class=\"line\">key is <span class=\"number\">14</span> &amp; value is 张三</span><br><span class=\"line\">remove key <span class=\"number\">14</span></span><br><span class=\"line\">tmap contains key : <span class=\"keyword\">false</span></span><br><span class=\"line\">key in tmap:</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"number\">32</span></span><br><span class=\"line\">clear tmap</span><br><span class=\"line\">size of tmap: <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>3.3TreeMap 和比较器<br>\n<a href=\"https://blog.csdn.net/weixin_44279178/article/details/108511537\"> Java 比较器</a><br>\n<strong> TreeMap 和内部比较器：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zhukun;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeMap;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span> </span><br><span class=\"line\">\t<span class=\"comment\">//重写equals方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == o) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span> || getClass() != o.getClass()) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; </span><br><span class=\"line\">\t\tStudent student = (Student) o; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age == student.age &amp;&amp; Objects.equals(name, student.name); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span> </span><br><span class=\"line\">\t<span class=\"comment\">//重写hashCode方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Objects.hash(name, age); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//内部重写比较器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Object o)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStudent stu =((Student)o);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age-stu.age;  <span class=\"comment\">//按照年龄升序排序</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span> </span><br><span class=\"line\">\t<span class=\"comment\">//重写toString方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Studen:&quot;</span> + name +<span class=\"string\">&quot;      &quot;</span>+ <span class=\"string\">&quot;年龄:&quot;</span> +age+<span class=\"string\">&quot;     &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\tMap&lt;Student,String&gt; map = <span class=\"keyword\">new</span> TreeMap&lt;&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//2,添加元素。 </span></span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">28</span>), <span class=\"string\">&quot;上海&quot;</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">22</span>), <span class=\"string\">&quot;北京&quot;</span>); </span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">24</span>), <span class=\"string\">&quot;成都&quot;</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;谢六&quot;</span>,<span class=\"number\">25</span>), <span class=\"string\">&quot;广州&quot;</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;刘强&quot;</span>,<span class=\"number\">23</span>), <span class=\"string\">&quot;南京&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">//3,取出元素。键找值方式 </span></span><br><span class=\"line\">\t\tSet&lt;Student&gt;keySet = map.keySet(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Student key: keySet)</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tString value = map.get(key); </span><br><span class=\"line\">\t\t\tSystem.out.println(key.toString()+<span class=\"string\">&quot;来自&quot;</span>+value); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Studen:李四      年龄:<span class=\"number\">22</span>     来自北京</span><br><span class=\"line\">Studen:刘强      年龄:<span class=\"number\">23</span>     来自南京</span><br><span class=\"line\">Studen:王五      年龄:<span class=\"number\">24</span>     来自成都</span><br><span class=\"line\">Studen:谢六      年龄:<span class=\"number\">25</span>     来自广州</span><br><span class=\"line\">Studen:张三      年龄:<span class=\"number\">28</span>     来自上海</span><br></pre></td></tr></table></figure>\n<p><strong>TreeMap 和外部比较器：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeMap;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span> </span><br><span class=\"line\">\t<span class=\"comment\">//重写equals方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == o) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span> || getClass() != o.getClass()) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; </span><br><span class=\"line\">\t\tStudent student = (Student) o; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age == student.age &amp;&amp; Objects.equals(name, student.name); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span> </span><br><span class=\"line\">\t<span class=\"comment\">//重写hashCode方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Objects.hash(name, age); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span> </span><br><span class=\"line\">\t<span class=\"comment\">//重写toString方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Studen:&quot;</span> + name +<span class=\"string\">&quot;      &quot;</span>+ <span class=\"string\">&quot;年龄:&quot;</span> +age+<span class=\"string\">&quot;     &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//外部比较器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OutsideCompare</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Object o1, Object o2)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStudent st1 = ((Student) o1);</span><br><span class=\"line\">\t\tStudent st2 = ((Student) o2);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> st1.getAge()-st2.getAge();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\tOutsideCompare com = <span class=\"keyword\">new</span> OutsideCompare();</span><br><span class=\"line\">\t\tMap&lt;Student,String&gt; map = <span class=\"keyword\">new</span> TreeMap&lt;&gt;(com); </span><br><span class=\"line\">\t\t<span class=\"comment\">//2,添加元素。 </span></span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">28</span>), <span class=\"string\">&quot;上海&quot;</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">22</span>), <span class=\"string\">&quot;北京&quot;</span>); </span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">24</span>), <span class=\"string\">&quot;成都&quot;</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;谢六&quot;</span>,<span class=\"number\">25</span>), <span class=\"string\">&quot;广州&quot;</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;刘强&quot;</span>,<span class=\"number\">23</span>), <span class=\"string\">&quot;南京&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">//3,取出元素。键找值方式 </span></span><br><span class=\"line\">\t\tSet&lt;Student&gt;keySet = map.keySet(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Student key: keySet)</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tString value = map.get(key); </span><br><span class=\"line\">\t\t\tSystem.out.println(key.toString()+<span class=\"string\">&quot;来自&quot;</span>+value); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Studen:李四      年龄:<span class=\"number\">22</span>     来自北京</span><br><span class=\"line\">Studen:刘强      年龄:<span class=\"number\">23</span>     来自南京</span><br><span class=\"line\">Studen:王五      年龄:<span class=\"number\">24</span>     来自成都</span><br><span class=\"line\">Studen:谢六      年龄:<span class=\"number\">25</span>     来自广州</span><br><span class=\"line\">Studen:张三      年龄:<span class=\"number\">28</span>     来自上海</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Map集合",
                "HashMap",
                "LinkedHashMap",
                "TreeMap"
            ]
        },
        {
            "id": "http://yoursite.com/2020/09/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%B0%88%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E6%9E%84/",
            "url": "http://yoursite.com/2020/09/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%B0%88%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E6%9E%84/",
            "title": "",
            "date_published": "2020-09-11T13:07:39.960Z",
            "content_html": "<h1 id=\"1-树\"><a class=\"markdownIt-Anchor\" href=\"#1-树\">#</a> 1、树</h1>\n<h2 id=\"11树的基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#11树的基本介绍\">#</a> 1.1 树的基本介绍</h2>\n<p>树（tree）是一种抽象数据类型（ADT），用来模拟具有树状结构性质的数据集合。它是由 n（n&gt;0）个有限节点通过连接它们的边组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200911133653982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n①、<strong>节点</strong>：上图的圆圈，比如 A,B,C 等都是表示节点。节点一般代表一些<strong>实体</strong>，在 java 面向对象编程中，<strong>节点一般代表对象</strong>。<br>\n②、<strong>边</strong>：连接节点的线称为边，边表示节点的<strong>关联关系</strong>。一般从一个节点到另一个节点的唯一方法就是沿着一条顺着有边的道路前进。在 Java 当中<strong>通常表示引用</strong>。</p>\n<h2 id=\"12树的常用术语\"><a class=\"markdownIt-Anchor\" href=\"#12树的常用术语\">#</a> 1.2 树的常用术语</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200911134146926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><strong>路径</strong>：顺着节点的边从一个节点走到另一个节点，所经过的节点的顺序排列就称为 “路径”。</li>\n<li><strong>根</strong>：树顶端的节点称为根。一棵树只有一个根，如果要把一个节点和边的集合称为树，那么从根到其他任何一个节点都必须有且只有一条路径。A 是根节点。</li>\n<li><strong>父节点</strong>：若一个节点含有子节点，则这个节点称为其子节点的父节点；B 是 D 的父节点。</li>\n<li><strong>子节点</strong>：一个节点含有的子树的根节点称为该节点的子节点；D 是 B 的子节点。</li>\n<li><strong>兄弟节点</strong>：具有相同父节点的节点互称为兄弟节点；比如上图的 D 和 E 就互称为兄弟节点。</li>\n<li><strong>叶节点</strong>：没有子节点的节点称为叶节点，也叫叶子节点，比如上图的 H、E、F、G 都是叶子节点。</li>\n<li><strong>子树</strong>：每个节点都可以作为子树的根，它和它所有的子节点、子节点的子节点等都包含在子树中。</li>\n<li><strong>节点的层次</strong>：从根开始定义，根为第一层，根的子节点为第二层，以此类推。</li>\n<li><strong>深度</strong>：对于任意节点 n,n 的深度为从根到 n 的唯一路径长，根的深度为 0；</li>\n<li><strong>高度</strong>：对于任意节点 n,n 的高度为从 n 到一片树叶的最长路径长，所有树叶的高度为 0；</li>\n</ul>\n<h2 id=\"13为什么需要树这种结构\"><a class=\"markdownIt-Anchor\" href=\"#13为什么需要树这种结构\">#</a> 1.3 为什么需要树这种结构</h2>\n<p><strong>数组存储方式分析：</strong></p>\n<ul>\n<li><strong>优点</strong>：通过下标可以直接访问元素，速度快。对于有序数组还可以使用二分查找提高检索速度。</li>\n<li><strong>缺点</strong>：如果要检索某个具体的值，或者<strong>插入值（按一定的顺序）会整体移动</strong>，效率较低（数组在创建的时候就已经确定了容量，如果超出了容量还要进行扩容操作）<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200911135408537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></li>\n</ul>\n<p><strong>链式存储方式分析：</strong></p>\n<ul>\n<li><strong>优点</strong>：在一定程度上对数组存储方式有了<strong>优化</strong>（比如：插入一个数值节点，只需要将待插入节点直接链接到链表中即可，删除效率也很高）</li>\n<li><strong>缺点</strong>：在进行检索时，效率仍然很低（比如检索某个特定的值，需要从头节点开始往后一个一个遍历）</li>\n</ul>\n<p><strong>树存储方式分析：</strong><br>\n在数组和链式的存储方式上都有了一定的优化，能提高<strong>数据存储，读取</strong>的效率。（比如利用<strong>二叉排序树</strong>，既可以保证数据的<strong>检索速度</strong>，同时又保证了数据的<strong>插入、删除、修改</strong>的速度）</p>\n<h1 id=\"2-二叉树\"><a class=\"markdownIt-Anchor\" href=\"#2-二叉树\">#</a> 2、二叉树</h1>\n<h2 id=\"21二叉树的基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#21二叉树的基本介绍\">#</a> 2.1 二叉树的基本介绍</h2>\n<p><strong>二叉树：</strong> 树有很多种，每个节点<strong>最多</strong>只能有<strong>两个子节点</strong>的一种形式称为二叉树。二叉树的子节点分为左节点和右节点。<br>\n<strong>二叉树的五种基本形态：</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200911140815649.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>二叉树的性质：</strong></p>\n<ul>\n<li>性质 1：二叉树第 i 层上的结点数目最多为 2^(i-1) (i&gt;=1)</li>\n<li>性质 2：深度为 k 的二叉树至多有 2^k-1 个结点（k&gt;=1）</li>\n<li>性质 3：包含 n 个结点的完全二叉树的深度至少为 (log2^n)+1</li>\n<li>性质 4：在任意一棵二叉树中，若终端结点的个数为 n0，度为 2 的结点数为 n2，则 n0=n2+1</li>\n</ul>\n<h2 id=\"22满二叉树和完全二叉树\"><a class=\"markdownIt-Anchor\" href=\"#22满二叉树和完全二叉树\">#</a> 2.2 满二叉树和完全二叉树</h2>\n<p><strong>满二叉树</strong>：从形象上来说满二叉树是一个绝对的三角形，也就是说它的最后一层全部是叶子节点，其余各层全部是非叶子节点，如果用数学公式表示那么其节点数 n=2^k-1 其中 k 表示深度，也就是层数。也就是说满二叉树的节点数是一系列固定的数，比如说，1,3,7,15… 如果节点数不是这个序列中的数，那么他肯定不是满二叉树，当然了，反之，是不成立的。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200911142422231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n由于满二叉树的节点数必须是一个确定的数，而非任意数，他的使用受到了某些限制，为了打破另一个限制，我们定义一种特殊的满二叉树 —— 完全二叉树。<br>\n<strong>完全二叉树</strong>：完全二叉树的节点个数是任意的，从形式上来说他是一个可能有缺失的三角形，但所缺部分肯定是<strong>右下角的某个连续部分</strong>。这样说不玩整，更准确来说，我们可以说他和满二叉树的区别是，他的最后一行可能不是完整的，但绝对是右方的连续部分缺失。可能听起来有点乱，用数学公式讲，对于 K 层的完全二叉树，其节点数的范围是 2 ^ (k-1)-1&lt;N&lt;2^k-1;<br>\n（若设二叉树的深度为 h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。）<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200911142732942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"23二叉树的遍历\"><a class=\"markdownIt-Anchor\" href=\"#23二叉树的遍历\">#</a> 2.3 二叉树的遍历</h2>\n<p>二叉树的遍历：<br>\n使用前序、中序和后序对二叉树进行遍历</p>\n<ul>\n<li>前序遍历：先输出父节点，再遍历左子树和右子树</li>\n<li>中序遍历：先遍历左子树，再输出父节点，再遍历右子树</li>\n<li>后序遍历：先遍历左子树，再遍历右子树，最后输出父节点<br>\n（<strong>看输出父节点的顺序，就确定是前序，中序还是后序</strong>）</li>\n</ul>\n<p>案例：创建学生节点（包含学生 ID 和姓名），将节点创建为以下二叉树并进行遍历<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200911143501820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zhukun;</span><br><span class=\"line\"><span class=\"comment\">//先创建StudentNode 结点类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentNode</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> no;<span class=\"comment\">//学生ID</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;<span class=\"comment\">//学生姓名</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> StudentNode left; <span class=\"comment\">//默认null</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> StudentNode right; <span class=\"comment\">//默认null</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StudentNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> no;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNo</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> StudentNode <span class=\"title\">getLeft</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeft</span><span class=\"params\">(StudentNode left)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> StudentNode <span class=\"title\">getRight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRight</span><span class=\"params\">(StudentNode right)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;StudentNode [no=&quot;</span> + no + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//编写前序遍历的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>); <span class=\"comment\">//先输出父结点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向左子树前序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.preOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向右子树前序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.preOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向左子树中序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出父结点</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向右子树中序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.postOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.postOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t&#125;\t\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义BinaryTree 二叉树</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> StudentNode root;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRoot</span><span class=\"params\">(StudentNode root)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.root = root;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//前序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.root.preOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.root.infixOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.root.postOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//先需要创建一颗二叉树</span></span><br><span class=\"line\">\t\tBinaryTree binaryTree = <span class=\"keyword\">new</span> BinaryTree();</span><br><span class=\"line\">    \t<span class=\"comment\">//创建需要的结点</span></span><br><span class=\"line\">    \tStudentNode root = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">1</span>, <span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node2 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">2</span>, <span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node3 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">3</span>, <span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node4 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">4</span>, <span class=\"string\">&quot;谢六&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node5 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">5</span>, <span class=\"string\">&quot;黄梅&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node6 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">6</span>, <span class=\"string\">&quot;刘尚&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node7 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">7</span>, <span class=\"string\">&quot;钟馗&quot;</span>);</span><br><span class=\"line\">    \t\t\t</span><br><span class=\"line\">    \t<span class=\"comment\">//根据上面的二叉树图手动创建该二叉树</span></span><br><span class=\"line\">    \tbinaryTree.setRoot(root);</span><br><span class=\"line\">    \troot.setLeft(node2);</span><br><span class=\"line\">    \troot.setRight(node5);</span><br><span class=\"line\">    \tnode2.setLeft(node3);</span><br><span class=\"line\">    \tnode2.setRight(node4);</span><br><span class=\"line\">    \tnode5.setLeft(node6);</span><br><span class=\"line\">    \tnode6.setRight(node7);</span><br><span class=\"line\">    \t<span class=\"comment\">//测试遍历</span></span><br><span class=\"line\">    \tSystem.out.println(<span class=\"string\">&quot;前序遍历&quot;</span>); <span class=\"comment\">// 1、2、3、4、5、6、7</span></span><br><span class=\"line\">   \t\tbinaryTree.preOrder();\t</span><br><span class=\"line\">    \tSystem.out.println(<span class=\"string\">&quot;中序遍历&quot;</span>);<span class=\"comment\">//3、2、4、1、6、7、5</span></span><br><span class=\"line\">    \tbinaryTree.infixOrder();\t\t\t</span><br><span class=\"line\">    \tSystem.out.println(<span class=\"string\">&quot;后序遍历&quot;</span>);<span class=\"comment\">//3、4、2、7、6、5、1</span></span><br><span class=\"line\">    \tbinaryTree.postOrder();  \t</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前序遍历</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">1</span>, name=张三]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">2</span>, name=李四]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">3</span>, name=王五]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">4</span>, name=谢六]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">5</span>, name=黄梅]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">6</span>, name=刘尚]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">7</span>, name=钟馗]</span><br><span class=\"line\">中序遍历</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">3</span>, name=王五]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">2</span>, name=李四]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">4</span>, name=谢六]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">1</span>, name=张三]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">6</span>, name=刘尚]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">7</span>, name=钟馗]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">5</span>, name=黄梅]</span><br><span class=\"line\">后序遍历</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">3</span>, name=王五]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">4</span>, name=谢六]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">2</span>, name=李四]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">7</span>, name=钟馗]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">6</span>, name=刘尚]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">5</span>, name=黄梅]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">1</span>, name=张三]</span><br></pre></td></tr></table></figure>\n<h2 id=\"23二叉树查找指定节点\"><a class=\"markdownIt-Anchor\" href=\"#23二叉树查找指定节点\">#</a> 2.3 二叉树查找指定节点</h2>\n<p>案例要求：<br>\n编写前序查找，中序查找和后序查找的方法。分别使用三种查找方法，查找 no = 5 的节点，并分析各种查找方式，分别比较了几次。<br>\n<strong>思路分析</strong>：<br>\n使用前序，中序，后序的方式来查询指定的结点<br>\n<strong>前序查找思路</strong>：<br>\n1. 先判断当前结点的 no 是否等于要查找的<br>\n 2. 如果是相等，则返回当前结点<br>\n 3. 如果不等，则判断当前结点的左子节点是否为空，如果不为空，则递归前序查找<br>\n 4. 如果左递归前序查找，找到结点，则返回，否则继续判断当前结点的右子节点是否为空，如果不空，则继续向右递归前序查找.<br>\n<strong> 中序查找思路</strong>：<br>\n1. 判断当前结点的左子节点是否为空，如果不为空，则递归中序查找<br>\n 2. 如果找到，则返回，如果没有找到，就和当前结点比较，如果是则返回当前结点，否则继续进行右子节点的递归中序查找<br>\n 3. 如果右子节点的递归中序查找找到，就直接返回，否则返回 null<br>\n<strong> 后序查找思路</strong>：<br>\n1. 判断当前结点的左子节点是否为空，如果不为空，则递归后序查找<br>\n 2. 如果找到，就返回，如果没有找到，就判断当前结点的右子节点是否为空，如果不为空，则右递归进行后序查找，如果找到，就返回<br>\n 3. 如果没找到，最后和当前结点进行，比如，如果是则返回，否则返回 null</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200911144521644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zhukun;</span><br><span class=\"line\"><span class=\"comment\">//先创建StudentNode 结点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentNode</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> StudentNode left; <span class=\"comment\">//默认null</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> StudentNode right; <span class=\"comment\">//默认null</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StudentNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> no;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNo</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> StudentNode <span class=\"title\">getLeft</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeft</span><span class=\"params\">(StudentNode left)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> StudentNode <span class=\"title\">getRight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRight</span><span class=\"params\">(StudentNode right)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;StudentNode [no=&quot;</span> + no + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//前序查找</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> no 查找no</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果找到就返回该Node ,如果没有找到返回 null</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> StudentNode <span class=\"title\">preOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;进入前序查找&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//比较当前结点是不是</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1.否则判断当前结点的左子节点是否为空，如果不为空，则递归前序查找</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2.如果左递归前序查找，找到结点，则返回</span></span><br><span class=\"line\">\t\tStudentNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.left.preOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明我们左子树找到</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1.左递归前序查找，找到结点，则返回，否继续判断，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2.当前的结点的右子节点是否为空，如果不空，则继续向右递归前序查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.right.preOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历查找</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> StudentNode <span class=\"title\">infixOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断当前结点的左子节点是否为空，如果不为空，则递归中序查找</span></span><br><span class=\"line\">\t\tStudentNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.left.infixOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;进入中序查找&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果找到，则返回，如果没有找到，就和当前结点比较，如果是则返回当前结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//否则继续进行右递归的中序查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.right.infixOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resNode;\t</span><br><span class=\"line\">\t&#125;\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历查找</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> StudentNode <span class=\"title\">postOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断当前结点的左子节点是否为空，如果不为空，则递归后序查找</span></span><br><span class=\"line\">\t\tStudentNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.left.postOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明在左子树找到</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果左子树没有找到，则向右子树递归进行后序遍历查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.right.postOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;进入后序查找&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果左右子树都没有找到，就比较当前结点是不是</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义BinaryTree 二叉树</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> StudentNode root;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRoot</span><span class=\"params\">(StudentNode root)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.root = root;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//前序查找</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> StudentNode <span class=\"title\">preOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.preOrderSearch(no);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//中序查找</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> StudentNode <span class=\"title\">infixOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.infixOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//后序查找</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> StudentNode <span class=\"title\">postOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.root.postOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//先需要创建一颗二叉树</span></span><br><span class=\"line\">\t\tBinaryTree binaryTree = <span class=\"keyword\">new</span> BinaryTree();</span><br><span class=\"line\">    \t<span class=\"comment\">//创建需要的结点</span></span><br><span class=\"line\">    \tStudentNode root = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">1</span>, <span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node2 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">2</span>, <span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node3 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">3</span>, <span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node4 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">4</span>, <span class=\"string\">&quot;谢六&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node5 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">5</span>, <span class=\"string\">&quot;黄梅&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node6 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">6</span>, <span class=\"string\">&quot;刘尚&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node7 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">7</span>, <span class=\"string\">&quot;钟馗&quot;</span>);</span><br><span class=\"line\">    \t\t\t</span><br><span class=\"line\">    \t<span class=\"comment\">//先手动创建该二叉树，后面用递归的方式创建二叉树</span></span><br><span class=\"line\">    \tbinaryTree.setRoot(root);</span><br><span class=\"line\">    \troot.setLeft(node2);</span><br><span class=\"line\">    \troot.setRight(node5);</span><br><span class=\"line\">    \tnode2.setLeft(node3);</span><br><span class=\"line\">    \tnode2.setRight(node4);</span><br><span class=\"line\">    \tnode5.setLeft(node6);</span><br><span class=\"line\">    \tnode6.setRight(node7);</span><br><span class=\"line\"></span><br><span class=\"line\">    \t<span class=\"comment\">//测试查找</span></span><br><span class=\"line\">    \t<span class=\"comment\">//前序查找</span></span><br><span class=\"line\">    \t<span class=\"comment\">//前序查找比较的次数 ：5</span></span><br><span class=\"line\">    \tSystem.out.println(<span class=\"string\">&quot;前序查找~~~&quot;</span>);</span><br><span class=\"line\">    \tStudentNode resNode1 = binaryTree.preOrderSearch(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (resNode1 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;找到了，信息为 no=%d name=%s\\n&quot;</span>, resNode1.getNo(), resNode1.getName());</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;没有找到 no = %d 的学生&quot;</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">\t\t&#125;  \t\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//中序遍历查找</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//中序遍历7次</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;中序遍历方式~~~&quot;</span>);</span><br><span class=\"line\">\t\tStudentNode resNode2 = binaryTree.infixOrderSearch(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (resNode2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;找到了，信息为 no=%d name=%s\\n&quot;</span>, resNode2.getNo(), resNode2.getName());</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;没有找到 no = %d 的学生&quot;</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//后序遍历查找</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//后序遍历查找的次数  6次</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;后序遍历方式~~~&quot;</span>);</span><br><span class=\"line\">\t\tStudentNode resNode3 = binaryTree.postOrderSearch(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (resNode3 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;找到了，信息为 no=%d name=%s\\n&quot;</span>, resNode3.getNo(), resNode3.getName());</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \t\t\t\tSystem.out.printf(<span class=\"string\">&quot;没有找到 no = %d 的学生&quot;</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">   \t\t&#125; \t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前序查找~~~</span><br><span class=\"line\">进入前序查找</span><br><span class=\"line\">进入前序查找</span><br><span class=\"line\">进入前序查找</span><br><span class=\"line\">进入前序查找</span><br><span class=\"line\">进入前序查找</span><br><span class=\"line\">找到了，信息为 no=<span class=\"number\">5</span> name=黄梅</span><br><span class=\"line\">中序遍历方式~~~</span><br><span class=\"line\">进入中序查找</span><br><span class=\"line\">进入中序查找</span><br><span class=\"line\">进入中序查找</span><br><span class=\"line\">进入中序查找</span><br><span class=\"line\">进入中序查找</span><br><span class=\"line\">进入中序查找</span><br><span class=\"line\">进入中序查找</span><br><span class=\"line\">找到了，信息为 no=<span class=\"number\">5</span> name=黄梅</span><br><span class=\"line\">后序遍历方式~~~</span><br><span class=\"line\">进入后序查找</span><br><span class=\"line\">进入后序查找</span><br><span class=\"line\">进入后序查找</span><br><span class=\"line\">进入后序查找</span><br><span class=\"line\">进入后序查找</span><br><span class=\"line\">进入后序查找</span><br><span class=\"line\">找到了，信息为 no=<span class=\"number\">5</span> name=黄梅</span><br></pre></td></tr></table></figure>\n<h2 id=\"23二叉树删除指定节点\"><a class=\"markdownIt-Anchor\" href=\"#23二叉树删除指定节点\">#</a> 2.3 二叉树删除指定节点</h2>\n<p>要求：</p>\n<ul>\n<li>如果删除的节点是叶子节点，则删除该节点</li>\n<li>如果删除的节点是非叶子节点，则删除该子树.</li>\n</ul>\n<p><strong>思路分析</strong>：<br>\n首先先处理:<br>\n 考虑如果树是空树 root, 如果只有一个 root 结点，则等价将二叉树置空<br>\n // 然后进行下面步骤<br>\n 1. 因为我们的二叉树是单向的，所以我们是判断当前结点的子结点是否是需要删除节点，而不能去判断当前这个结点是不是需要删除的节点.<br>\n2. 如果当前节点的左子节点不为空，并且左子结点就是要删除结点，就将 his.left=null; 并且返回 (结束递归删除)<br>\n 3. 如果当前结点的右子结点不为空，并且右子结点就是要删除结点，就将 this.right=null; 并且返回 (结束递归删除)<br>\n 4. 如果第 2 和第 3 步没有删除结点，那么我们就需要向左子树进行递归删除<br>\n 5. 如果第 4 步也没有删除结点，则应当向右子树进行递归删除.</p>\n<p><strong>初始二叉树：</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200911195212530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>删除 3 号叶子节点和 6 号子树</strong>：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200911195517434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先创建StudentNode 结点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentNode</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> StudentNode left; <span class=\"comment\">//默认null</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> StudentNode right; <span class=\"comment\">//默认null</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StudentNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> no;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNo</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> StudentNode <span class=\"title\">getLeft</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeft</span><span class=\"params\">(StudentNode left)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> StudentNode <span class=\"title\">getRight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRight</span><span class=\"params\">(StudentNode right)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;StudentNode [no=&quot;</span> + no + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>); <span class=\"comment\">//先输出父结点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向左子树前序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.preOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向右子树前序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.preOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//递归删除结点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//1.如果删除的节点是叶子节点，则删除该节点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2.如果删除的节点是非叶子节点，则删除该子树</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//思路</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t * \t1. 因为我们的二叉树是单向的，所以我们是判断当前结点的子结点是否需要删除结点，而不能去判断当前这个结点是不是需要删除结点.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t3. 如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t4. 如果第2和第3步没有删除结点，那么我们就需要向左子树进行递归删除</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t5.  如果第4步也没有删除结点，则应当向右子树进行递归删除.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t */</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.left.no == no) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//3.如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.right.no == no) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//4.我们就需要向左子树进行递归删除</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.left.delNode(no);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//5.则应当向右子树进行递归删除</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.right.delNode(no);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义BinaryTree 二叉树</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> StudentNode root;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRoot</span><span class=\"params\">(StudentNode root)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.root = root;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.root.preOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//删除结点</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果只有一个root结点, 这里立即判断root是不是就是要删除结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(root.getNo() == no) &#123;</span><br><span class=\"line\">\t\t\t\t\troot = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//递归删除</span></span><br><span class=\"line\">\t\t\t\t\troot.delNode(no);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;空树，不能删除~&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//先需要创建一颗二叉树</span></span><br><span class=\"line\">\t\tBinaryTree binaryTree = <span class=\"keyword\">new</span> BinaryTree();</span><br><span class=\"line\">    \t<span class=\"comment\">//创建需要的结点</span></span><br><span class=\"line\">    \tStudentNode root = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">1</span>, <span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node2 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">2</span>, <span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node3 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">3</span>, <span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node4 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">4</span>, <span class=\"string\">&quot;谢六&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node5 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">5</span>, <span class=\"string\">&quot;黄梅&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node6 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">6</span>, <span class=\"string\">&quot;刘尚&quot;</span>);</span><br><span class=\"line\">    \tStudentNode node7 = <span class=\"keyword\">new</span> StudentNode(<span class=\"number\">7</span>, <span class=\"string\">&quot;钟馗&quot;</span>);\t\t\t</span><br><span class=\"line\">    \t<span class=\"comment\">//先手动创建该二叉树，后面用递归的方式创建二叉树</span></span><br><span class=\"line\">    \tbinaryTree.setRoot(root);</span><br><span class=\"line\">    \troot.setLeft(node2);</span><br><span class=\"line\">    \troot.setRight(node5);</span><br><span class=\"line\">    \tnode2.setLeft(node3);</span><br><span class=\"line\">    \tnode2.setRight(node4);</span><br><span class=\"line\">    \tnode5.setLeft(node6);</span><br><span class=\"line\">    \tnode6.setRight(node7);</span><br><span class=\"line\">    \t<span class=\"comment\">//删除前</span></span><br><span class=\"line\">    \tSystem.out.println(<span class=\"string\">&quot;删除前，前序遍历&quot;</span>); </span><br><span class=\"line\">\t\tbinaryTree.preOrder();</span><br><span class=\"line\">\t\t<span class=\"comment\">//删除</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;删除no=3的节点和no=6子树&quot;</span>);</span><br><span class=\"line\">\t\tbinaryTree.delNode(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tbinaryTree.delNode(<span class=\"number\">6</span>);\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//删除后</span></span><br><span class=\"line\">    \tSystem.out.println(<span class=\"string\">&quot;删除后，前序遍历&quot;</span>); </span><br><span class=\"line\">\t\tbinaryTree.preOrder();\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">删除前，前序遍历</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">1</span>, name=张三]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">2</span>, name=李四]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">3</span>, name=王五]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">4</span>, name=谢六]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">5</span>, name=黄梅]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">6</span>, name=刘尚]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">7</span>, name=钟馗]</span><br><span class=\"line\">删除no=<span class=\"number\">3</span>的节点和no=<span class=\"number\">6</span>子树</span><br><span class=\"line\">删除后，前序遍历</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">1</span>, name=张三]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">2</span>, name=李四]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">4</span>, name=谢六]</span><br><span class=\"line\">StudentNode [no=<span class=\"number\">5</span>, name=黄梅]</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://yoursite.com/2020/09/10/Java%E5%AD%A6%E4%B9%A0-Collections%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%92%8CJava%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E6%AF%94%E8%BE%83%E5%99%A8/",
            "url": "http://yoursite.com/2020/09/10/Java%E5%AD%A6%E4%B9%A0-Collections%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%92%8CJava%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E6%AF%94%E8%BE%83%E5%99%A8/",
            "title": "Java学习-Collections工具类和Java常见的几种比较器",
            "date_published": "2020-09-10T08:28:30.819Z",
            "content_html": "<h1 id=\"1-collections集合工具类\"><a class=\"markdownIt-Anchor\" href=\"#1-collections集合工具类\">#</a> 1、Collections 集合工具类</h1>\n<h2 id=\"11基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#11基本介绍\">#</a> 1.1 基本介绍</h2>\n<p><code>java.utils.Collections</code>  是 Java 提供的一个操作  <code>Set</code> 、 <code>List</code>  和  <code>Map</code>  等集合的工具类。Collections 类提供了许多<strong>操作集合的静态方法</strong>，借助这些静态方法可以实现集合元素的<strong>排序、查找替换和复制</strong> 等操作。</p>\n<h2 id=\"12collections常用方法\"><a class=\"markdownIt-Anchor\" href=\"#12collections常用方法\">#</a> 1.2Collections 常用方法</h2>\n<p><strong>排序（正向和逆向）</strong><br>\nCollections 提供了如下方法用于对 List 集合元素进行排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(List list)</span>：</span></span><br><span class=\"line\"><span class=\"function\">对指定 List 集合元素进行逆向排序。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shuffle</span><span class=\"params\">(List list)</span>：</span></span><br><span class=\"line\"><span class=\"function\">对 List 集合元素进行随机排序（shuffle 方法模拟了“洗牌”动作）。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(List list)</span>：</span></span><br><span class=\"line\"><span class=\"function\">根据元素的自然顺序对指定 List 集合的元素按升序进行排序。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(List list, Comparator c)</span>：</span></span><br><span class=\"line\"><span class=\"function\">根据指定 Comparator 产生的顺序对 List 集合元素进行排序。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(List list, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span>：</span></span><br><span class=\"line\"><span class=\"function\">将指定 List 集合中的 i 处元素和 j 处元素进行交换。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(List list, <span class=\"keyword\">int</span> distance)</span>：</span></span><br><span class=\"line\"><span class=\"function\">当 distance 为正数时，将 list 集合的后 distance 个元素“整体”移到前面；当 distance 为负数时，</span></span><br><span class=\"line\"><span class=\"function\">将 list 集合的前 distance 个元素“整体”移到后面。该方法不会改变集合的长度。</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;(); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">13</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">2</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">35</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">24</span>); </span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//对指定 List 集合元素进行逆向排序。</span></span><br><span class=\"line\">\t\tCollections.reverse(list);</span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//对 List 集合元素进行随机排序（shuffle 方法模拟了“洗牌”动作）</span></span><br><span class=\"line\">\t\tCollections.shuffle(list);</span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//根据元素的自然顺序对指定 List 集合的元素按升序进行排序。</span></span><br><span class=\"line\">\t\tCollections.sort(list);</span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//将指定 List 集合中的 i 处元素和 j 处元素进行交换。</span></span><br><span class=\"line\">\t\tCollections.swap(list, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//将集合后2个元素移到前面</span></span><br><span class=\"line\">\t\tCollections.rotate(list, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//将集合前3个元素移到后面</span></span><br><span class=\"line\">\t\tCollections.rotate(list, -<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tSystem.out.println(list);\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">13</span>, <span class=\"number\">2</span>, <span class=\"number\">35</span>, <span class=\"number\">24</span>]</span><br><span class=\"line\">[<span class=\"number\">24</span>, <span class=\"number\">35</span>, <span class=\"number\">2</span>, <span class=\"number\">13</span>]</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">35</span>, <span class=\"number\">24</span>]</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">24</span>, <span class=\"number\">35</span>]</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">35</span>, <span class=\"number\">24</span>]</span><br><span class=\"line\">[<span class=\"number\">35</span>, <span class=\"number\">24</span>, <span class=\"number\">2</span>, <span class=\"number\">13</span>]</span><br><span class=\"line\">[<span class=\"number\">13</span>, <span class=\"number\">35</span>, <span class=\"number\">24</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<p><strong>查找、替换</strong><br>\n Collections 还提供了如下常用的用于查找、替换集合元素的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(List list, Object key)</span>：</span></span><br><span class=\"line\"><span class=\"function\">使用二分搜索法搜索指定的 List 集合，以获得指定对象在 List 集合中的索引。如果要使该方法可以正常工作，则必须保证 List 中的元素已经处于有序状态。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">max</span><span class=\"params\">(Collection coll)</span>：</span></span><br><span class=\"line\"><span class=\"function\">根据元素的自然顺序，返回给定集合中的最大元素。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">max</span><span class=\"params\">(Collection coll, Comparator comp)</span>：</span></span><br><span class=\"line\"><span class=\"function\">根据 Comparator 指定的顺序，返回给定集合中的最大元素。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">min</span><span class=\"params\">(Collection coll)</span>：</span></span><br><span class=\"line\"><span class=\"function\">根据元素的自然顺序，返回给定集合中的最小元素。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">min</span><span class=\"params\">(Collection coll, Comparator comp)</span>：</span></span><br><span class=\"line\"><span class=\"function\">根据 Comparator 指定的顺序，返回给定集合中的最小元素。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fill</span><span class=\"params\">(List list, Object obj)</span>：</span></span><br><span class=\"line\"><span class=\"function\">使用指定元素 obj 替换指定 List 集合中的所有元素。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">frequency</span><span class=\"params\">(Collection c, Object o)</span>：</span></span><br><span class=\"line\"><span class=\"function\">返回指定集合中指定元素的出现次数。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOfSubList</span><span class=\"params\">(List source, List target)</span>：</span></span><br><span class=\"line\"><span class=\"function\">返回子 List 对象在父 List 对象中第一次出现的位置索引；如果父 List 中没有出现这样的子 List，则返回 -1。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastIndexOfSubList</span><span class=\"params\">(List source, List target)</span>：</span></span><br><span class=\"line\"><span class=\"function\">返回子 List 对象在父 List 对象中最后一次出现的位置索引；如果父 List 中没有岀现这样的子 List，则返回 -1。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">replaceAll</span><span class=\"params\">(List list, Object oldVal, Object newVal)</span>：</span></span><br><span class=\"line\"><span class=\"function\">使用一个新值 newVal 替换 List 对象的所有旧值 oldVal。</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;(); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">13</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">2</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">35</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">24</span>); </span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//先按升序排序</span></span><br><span class=\"line\">\t\tCollections.sort(list);</span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//用二分搜索法搜索24返回其索引</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = Collections.binarySearch(list, <span class=\"number\">24</span>);</span><br><span class=\"line\">\t\tSystem.out.println(index);</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回集合中最大元素</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> max = Collections.max(list);</span><br><span class=\"line\">\t\tSystem.out.println(max);</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用38替换集合中的35</span></span><br><span class=\"line\">\t\tCollections.replaceAll(list, <span class=\"number\">35</span>, <span class=\"number\">38</span>);</span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回24元素在集合中出现的次数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num =Collections.frequency(list, <span class=\"number\">24</span>);</span><br><span class=\"line\">\t\tSystem.out.println(num);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">13</span>, <span class=\"number\">2</span>, <span class=\"number\">35</span>, <span class=\"number\">24</span>]</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">24</span>, <span class=\"number\">35</span>]</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">35</span></span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">24</span>, <span class=\"number\">38</span>]</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"2-java的比较器\"><a class=\"markdownIt-Anchor\" href=\"#2-java的比较器\">#</a> 2、Java 的比较器</h1>\n<h2 id=\"21常用比较方法介绍\"><a class=\"markdownIt-Anchor\" href=\"#21常用比较方法介绍\">#</a> 2.1 常用比较方法介绍</h2>\n<p>对于 JDK8 而言，有三种实现对象比较的方法：<br>\n1、覆写 Object 类的 <code>equals（）</code> 方法；<br>\n2、继承 <code>Comparable接口</code> ， <code>并实现compareTo（）</code> 方法；<br>\n3、定义一个单独的对象比较器，继承自 <code>Comparator接口</code> ， <code>实现compare（）</code> 方法。<br>\n由于使用的排序方式的不同，具体选择哪种方法来实现对象的比较也会有所不同。</p>\n<h2 id=\"22comparable比较器\"><a class=\"markdownIt-Anchor\" href=\"#22comparable比较器\">#</a> 2.2Comparable 比较器</h2>\n<p><code>java.lang.Comparable</code>  接口，是一个给排序方法使用的接口， 这是一个<strong>自比较器</strong>接口。用于指定一个对象如何去比较大小。</p>\n<p><strong>方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(T obj)</span> ：比较当前对象与传入进来对象的大小</span></span><br><span class=\"line\"><span class=\"function\">参数：obj 表示要比较的对象返回值：</span></span><br><span class=\"line\"><span class=\"function\">    *如果当前的对象大于obj，返回正整数。</span></span><br><span class=\"line\"><span class=\"function\">    *如果当前的对象等于obj，返回0</span></span><br><span class=\"line\"><span class=\"function\">    *如果当前对象小于obj，返回负整</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">当排序的<span class=\"title\">sort</span><span class=\"params\">()</span>方法在对集合中的元素两两进行比较的时候会调用我们实现的<span class=\"title\">compareTo</span><span class=\"params\">(T obj)</span>方法。</span></span><br><span class=\"line\"><span class=\"function\">如果<span class=\"title\">compareTo</span><span class=\"params\">()</span>返回正整数，则表示当前元素大于和它比较的元素；</span></span><br><span class=\"line\"><span class=\"function\">如果返回负整数则表示当前元素小于和它比较的元素；</span></span><br><span class=\"line\"><span class=\"function\">如果返回0，则表示两者相等。</span></span><br></pre></td></tr></table></figure>\n<p>例：创建一个员工类，存储到 ArrayList 集合中并根据员工的工资进行升序排序操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Employee</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> salary;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">(<span class=\"keyword\">int</span> id,String name,<span class=\"keyword\">int</span> salary)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.id=id;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.salary=salary;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Employee o)</span> </span>&#123;  <span class=\"comment\">//告诉sort()方法比较规则</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.salary-o.salary;<span class=\"comment\">//工资升序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123; </span><br><span class=\"line\">\t   <span class=\"keyword\">return</span> <span class=\"string\">&quot;employee&#123;&quot;</span> + <span class=\"string\">&quot;id=&#x27;&quot;</span> + id+ <span class=\"string\">&#x27;\\&#x27;&#x27;</span> + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> + <span class=\"string\">&quot;,salary=&quot;</span>+salary+<span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    \tArrayList&lt;Employee&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Employee&gt;();</span><br><span class=\"line\">    \tlist.add(<span class=\"keyword\">new</span> Employee(<span class=\"number\">1</span>, <span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">7000</span>)); </span><br><span class=\"line\">    \tlist.add(<span class=\"keyword\">new</span> Employee(<span class=\"number\">2</span>, <span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">5000</span>)); </span><br><span class=\"line\">    \tlist.add(<span class=\"keyword\">new</span> Employee(<span class=\"number\">3</span>, <span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">6000</span>)); </span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;排序前：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Employee employee : list) &#123;</span><br><span class=\"line\">            System.out.println(employee);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//排序</span></span><br><span class=\"line\">      <span class=\"comment\">//要求 该list中元素类型 必须实现比较器Comparable接口</span></span><br><span class=\"line\">        Collections.sort(list);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Employee employee : list) &#123;</span><br><span class=\"line\">            System.out.println(employee);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"23comparator比较器\"><a class=\"markdownIt-Anchor\" href=\"#23comparator比较器\">#</a> 2.3Comparator 比较器</h2>\n<p><code>java.util.Comparator</code>  接口，创建一个比较器的接口，一个类实现这个接口，相当于指定了一个排序的规则。</p>\n<p>Comparator 接口中的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String o1, String o2)</span> ：</span></span><br><span class=\"line\"><span class=\"function\">比较o1和o2这两个对象如果：</span></span><br><span class=\"line\"><span class=\"function\">    obj1 &gt; obj2，这个方法返回正整数</span></span><br><span class=\"line\"><span class=\"function\">    obj2 </span>== obj1， 返回<span class=\"number\">0</span></span><br><span class=\"line\">    obj1 &lt; obj2，这个方法返回负整数</span><br></pre></td></tr></table></figure>\n<p>例：创建一个员工类，存储到 ArrayList 集合中并分别写一个 Id 比较器接口根据 Id 升序排列<br>\n和一个 Salary 比较器根据 Salary 升序排列</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Employee</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> salary;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSalary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> salary;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSalary</span><span class=\"params\">(<span class=\"keyword\">int</span> salary)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.salary = salary;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">(<span class=\"keyword\">int</span> id,String name,<span class=\"keyword\">int</span> salary)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.id=id;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.salary=salary;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Employee o)</span> </span>&#123;  <span class=\"comment\">//告诉sort()方法比较规则</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.salary-o.salary;<span class=\"comment\">//工资升序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123; </span><br><span class=\"line\">\t   <span class=\"keyword\">return</span> <span class=\"string\">&quot;employee&#123;&quot;</span> + <span class=\"string\">&quot;id=&#x27;&quot;</span> + id+ <span class=\"string\">&#x27;\\&#x27;&#x27;</span> + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> + <span class=\"string\">&quot;,salary=&quot;</span>+salary+<span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Id比较器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IdComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Employee</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Employee o1, Employee o2)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> o1.getId()-o2.getId();<span class=\"comment\">//根据Id升序</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//salary比较器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SalaryComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Employee</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Employee o1, Employee o2)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> o1.getSalary()-o2.getSalary();<span class=\"comment\">//根据salary升序</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    \tArrayList&lt;Employee&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Employee&gt;();</span><br><span class=\"line\">    \tlist.add(<span class=\"keyword\">new</span> Employee(<span class=\"number\">1</span>, <span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">7000</span>)); </span><br><span class=\"line\">    \tlist.add(<span class=\"keyword\">new</span> Employee(<span class=\"number\">4</span>, <span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">5000</span>)); </span><br><span class=\"line\">    \tlist.add(<span class=\"keyword\">new</span> Employee(<span class=\"number\">3</span>, <span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">6000</span>)); </span><br><span class=\"line\">    \tlist.add(<span class=\"keyword\">new</span> Employee(<span class=\"number\">2</span>, <span class=\"string\">&quot;谢六&quot;</span>,<span class=\"number\">3000</span>));</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;排序前：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Employee employee : list) &#123;</span><br><span class=\"line\">            System.out.println(employee);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//根据Id比较器排序</span></span><br><span class=\"line\">        Collections.sort(list, <span class=\"keyword\">new</span> IdComparator());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;根据Id排序后：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Employee employee : list) &#123;</span><br><span class=\"line\">            System.out.println(employee);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//根据Salary比较器排序</span></span><br><span class=\"line\">        Collections.sort(list, <span class=\"keyword\">new</span> SalaryComparator());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;根据Salary排序后：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Employee employee : list) &#123;</span><br><span class=\"line\">            System.out.println(employee);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">排序前：</span><br><span class=\"line\">employee&#123;id=<span class=\"string\">&#x27;1&#x27;</span>, name=张三<span class=\"string\">&#x27;,salary=7000&#125;</span></span><br><span class=\"line\"><span class=\"string\">employee&#123;id=&#x27;</span><span class=\"number\">4</span><span class=\"string\">&#x27;, name=李四&#x27;</span>,salary=<span class=\"number\">5000</span>&#125;</span><br><span class=\"line\">employee&#123;id=<span class=\"string\">&#x27;3&#x27;</span>, name=王五<span class=\"string\">&#x27;,salary=6000&#125;</span></span><br><span class=\"line\"><span class=\"string\">employee&#123;id=&#x27;</span><span class=\"number\">2</span><span class=\"string\">&#x27;, name=谢六&#x27;</span>,salary=<span class=\"number\">3000</span>&#125;</span><br><span class=\"line\">根据Id排序后：</span><br><span class=\"line\">employee&#123;id=<span class=\"string\">&#x27;1&#x27;</span>, name=张三<span class=\"string\">&#x27;,salary=7000&#125;</span></span><br><span class=\"line\"><span class=\"string\">employee&#123;id=&#x27;</span><span class=\"number\">2</span><span class=\"string\">&#x27;, name=谢六&#x27;</span>,salary=<span class=\"number\">3000</span>&#125;</span><br><span class=\"line\">employee&#123;id=<span class=\"string\">&#x27;3&#x27;</span>, name=王五<span class=\"string\">&#x27;,salary=6000&#125;</span></span><br><span class=\"line\"><span class=\"string\">employee&#123;id=&#x27;</span><span class=\"number\">4</span><span class=\"string\">&#x27;, name=李四&#x27;</span>,salary=<span class=\"number\">5000</span>&#125;</span><br><span class=\"line\">根据Salary排序后：</span><br><span class=\"line\">employee&#123;id=<span class=\"string\">&#x27;2&#x27;</span>, name=谢六<span class=\"string\">&#x27;,salary=3000&#125;</span></span><br><span class=\"line\"><span class=\"string\">employee&#123;id=&#x27;</span><span class=\"number\">4</span><span class=\"string\">&#x27;, name=李四&#x27;</span>,salary=<span class=\"number\">5000</span>&#125;</span><br><span class=\"line\">employee&#123;id=<span class=\"string\">&#x27;3&#x27;</span>, name=王五<span class=\"string\">&#x27;,salary=6000&#125;</span></span><br><span class=\"line\"><span class=\"string\">employee&#123;id=&#x27;</span><span class=\"number\">1</span><span class=\"string\">&#x27;, name=张三&#x27;</span>,salary=<span class=\"number\">7000</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>扩展</strong>：如果在使用的时候，想要独立的定义规则去使用 可以采用 <code>Collections.sort(List list,Comparetor c)</code>  方式，自己定义 规则：<br>\n比如上面的代码直接写成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collections.sort(list, <span class=\"keyword\">new</span> Comparator&lt;Employee&gt;() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Employee o1, Employee o2)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> o1.getId()-o2.getId();<span class=\"comment\">//根据Id升序</span></span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Collections.sort(list, <span class=\"keyword\">new</span> Comparator&lt;Employee&gt;() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Employee o1, Employee o2)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> o1.getSalary()-o2.getSalary();<span class=\"comment\">//根据salary升序</span></span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"24comparable和comparator的区别\"><a class=\"markdownIt-Anchor\" href=\"#24comparable和comparator的区别\">#</a> 2.4Comparable 和 Comparator 的区别</h2>\n<p>Comparable &amp; Comparator 都是用来实现集合中的排序的，<br>\n只是 Comparable 是在对象内部定义的方法实现的排序，Comparator 是在集合外部实现的排序。</p>\n<ol>\n<li>Comparable 位于包 <code>java.lang</code>  下，Comparator 位于包 <code>java.util</code>  下。<br>\nComparable 接口将比较代码<strong>嵌入自身类</strong>中，而 Comparator<strong> 在一个独立的类中实现比较</strong>。</li>\n<li>如果类的设计师没有考虑到 Compare 的问题而没有实现 Comparable 接口，<br>\n可以通过 Comparator 来实现比较算法进行排序。</li>\n<li>Comparator 为了使用不同的排序规则做准备。比如：升序、降序或按不同的属性进行排序。</li>\n</ol>\n<p>Comparable：强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的 compareTo 方法 被称为它的自然比较方法。只能在类中实现 compareTo () 一次，不能经常修改类的代码实现自己想要的排序。实现 此接口的对象列表（和数组）可以通过</p>\n<p>Collections.sort（和 Arrays.sort）进行自动排序，对象可以用作有序映射中 的键或有序集合中的元素，无需指定比较器。 Comparator 强行对某个对象进行整体排序。可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort），从而允许在排序顺序上实现精确控制。还可以使用 Comparator 来控制某些数据结构（如有序 set 或 有序映射）的顺序，或者为那些没有自然顺序的对象 collection 提供排序。</p>\n",
            "tags": [
                "Collections",
                "Comparable",
                "Comparator"
            ]
        },
        {
            "id": "http://yoursite.com/2020/09/10/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88Set%E9%9B%86%E5%90%88%EF%BC%88HashSet%E3%80%81TreeSet%E3%80%81LinkedHashSet%EF%BC%89/",
            "url": "http://yoursite.com/2020/09/10/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88Set%E9%9B%86%E5%90%88%EF%BC%88HashSet%E3%80%81TreeSet%E3%80%81LinkedHashSet%EF%BC%89/",
            "title": "Java学习-详谈Set集合（HashSet、TreeSet、LinkedHashSet）",
            "date_published": "2020-09-10T08:28:30.815Z",
            "content_html": "<h1 id=\"1-set接口\"><a class=\"markdownIt-Anchor\" href=\"#1-set接口\">#</a> 1、Set 接口</h1>\n<p><code>java.util.Set</code>  接口和  <code>java.util.List</code>  接口一样，同样<strong>继承自 Collection 接口</strong>，它与 Collection 接口中的方法基本一致，并没有对 Collection 接口进行功能上的扩充，只是比 Collection 接口更加严格了。与 List 接口不同的是， Set 接口中<font color=red><strong>元素无序</strong></font>，并且都会以某种规则保证存入的<font color=red><strong>元素不出现重复</strong></font>。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200909152554478.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>1. 继承于 Collection 接口，具有<strong>增删查改</strong>的方法！<br>\n2.AbstractCollection 抽象类，实现了 Collection 接口，并实现了里面的一些方法，如 isEmpty、contains 等。<br>\n3.Set 的两个实现类， <code>HashSet</code>  和 <code>TreeSet</code></p>\n<ul>\n<li>HashSet 实现本质其实就是 HashMap，HashSet 里面的元素是无序的。</li>\n<li>TreeSet 实现本质其实就是 TreeSet,TreeSet 里面的元素是有序的。</li>\n</ul>\n<p>（Set 集合遍历元素的方式可以采用：<strong>迭代器，foreach</strong>）</p>\n<h1 id=\"2-hashset集合\"><a class=\"markdownIt-Anchor\" href=\"#2-hashset集合\">#</a> 2、HashSet 集合</h1>\n<h2 id=\"21hashset介绍\"><a class=\"markdownIt-Anchor\" href=\"#21hashset介绍\">#</a> 2.1HashSet 介绍</h2>\n<p><code>java.util.HashSet</code>  是 Set 接口的一个实现类，它所存储的<font color=red><strong>元素是不可重复的</strong></font>，并且<font color=red><strong>元素都是无序</strong></font>的 (即存取顺序 不一致)。  <code>java.util.HashSet</code>  <strong>底层</strong>的实现其实是一个  <code>java.util.HashMap</code>  支持.<br>\n <code>HashSet</code>  是根据<strong>对象的哈希值</strong>来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。<strong>保证元素唯一性 的方式依赖于</strong>：  <code>hashCode</code>  与  <code>equals</code>  方法。<br>\n<strong>HashSet 的继承关系</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类 HashSet&lt;E&gt;</span><br><span class=\"line\">java.lang.Object</span><br><span class=\"line\">  继承者 java.util.AbstractCollection&lt;E&gt;</span><br><span class=\"line\">      继承者 java.util.AbstractSet&lt;E&gt;</span><br><span class=\"line\">          继承者 java.util.HashSet&lt;E&gt;</span><br><span class=\"line\">类型参数：</span><br><span class=\"line\">E - 此 set 所维护的元素的类型</span><br><span class=\"line\">所有已实现的接口：</span><br><span class=\"line\">Serializable, Cloneable, Iterable&lt;E&gt;, Collection&lt;E&gt;, Set&lt;E&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>构造方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashSet() </span><br><span class=\"line\">构造一个新的空 set，其底层 HashMap 实例的默认初始容量是 <span class=\"number\">16</span>，加载因子是 <span class=\"number\">0.75</span>。</span><br><span class=\"line\">HashSet(Collection&lt;? extends E&gt; c) </span><br><span class=\"line\">构造一个包含指定 collection 中的元素的新 set。</span><br><span class=\"line\">HashSet(<span class=\"keyword\">int</span> initialCapacity) </span><br><span class=\"line\">构造一个新的空 set，其底层 HashMap 实例具有指定的初始容量和默认的加载因子（<span class=\"number\">0.75</span>）。</span><br><span class=\"line\">HashSet(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor) </span><br><span class=\"line\">构造一个新的空 set，其底层 HashMap 实例具有指定的初始容量和指定的加载因子。</span><br></pre></td></tr></table></figure>\n<p><strong>常用方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>  <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span></span><br><span class=\"line\"><span class=\"function\">          如果此 set 中尚未包含指定元素，则添加指定元素。</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">void</span>   <span class=\"title\">clear</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">          从此 set 中移除所有元素。</span></span><br><span class=\"line\"><span class=\"function\"> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">          返回此 HashSet 实例的浅表副本：并没有复制这些元素本身。</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">boolean</span>    <span class=\"title\">contains</span><span class=\"params\">(Object o)</span> </span></span><br><span class=\"line\"><span class=\"function\">          如果此 set 包含指定元素，则返回 <span class=\"keyword\">true</span>。</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">boolean</span>    <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">          如果此 set 不包含任何元素，则返回 <span class=\"keyword\">true</span>。</span></span><br><span class=\"line\"><span class=\"function\"> Iterator&lt;E&gt;    <span class=\"title\">iterator</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">          返回对此 set 中元素进行迭代的迭代器。</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">boolean</span>    <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span></span><br><span class=\"line\"><span class=\"function\">          如果指定元素存在于此 set 中，则将其移除。</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">int</span>   <span class=\"title\">size</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">          返回此 set 中的元素的数量（set 的容量）。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"22hashset集合存储数据的结构哈希表\"><a class=\"markdownIt-Anchor\" href=\"#22hashset集合存储数据的结构哈希表\">#</a> 2.2HashSet 集合存储数据的结构（哈希表）</h2>\n<p><strong>关于数据结构哈希表详解：</strong> <a href=\"https://blog.csdn.net/weixin_44279178/article/details/108469778\">哈希表详解</a><br>\n这里简单介绍一下：<br>\n在 JDK1.8 之前，哈希表底层采用<strong>数组 + 链表</strong>实现，即<strong>使用链表处理冲突</strong>，同一 hash 值的链表都存储在一个链表里。 但是当位于一个桶中的元素较多，即 hash 值相等的元素较多时，通过 key 值依次查找的效率较低。而 JDK1.8 中，哈希表存储采用<strong>数组 + 链表 + 红黑树</strong>实现，当链表长度 ** 超过阈值（8）** 时，<strong>将链表转换为红黑树</strong>，这样大大减少了查找 时间。 简单的来说，哈希表是由数组 + 链表 + 红黑树（JDK1.8 增加了红黑树部分）实现的，如下图所示。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020090915481578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong> HashSet 存储原理：</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200909155041686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n JDK1.8 引入红黑树大程度优化了 HashMap 的性能，那么对于我们来讲保证 HashSet 集合元素的唯一， 其实就是根据对象的 hashCode 和 equals 方法来决定的。如果我们往集合中存放自定义的对象，那么 <strong>保证其唯一， 就必须复写</strong>  <code>hashCode</code>  和 <code>equals</code>  <strong>方法建立属于当前对象的比较方式</strong></p>\n<h2 id=\"23hashset集合特点\"><a class=\"markdownIt-Anchor\" href=\"#23hashset集合特点\">#</a> 2.3HashSet 集合特点</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span> </span>&#123;</span><br><span class=\"line\">\t\tHashSet&lt;Integer&gt; hs = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">\t\ths.add(<span class=\"number\">17</span>);</span><br><span class=\"line\">\t\ths.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\ths.add(<span class=\"number\">78</span>);</span><br><span class=\"line\">\t\ths.add(<span class=\"number\">24</span>);</span><br><span class=\"line\">\t\ths.add(<span class=\"number\">13</span>);</span><br><span class=\"line\">\t\tSystem.out.println(hs.add(<span class=\"number\">4</span>));</span><br><span class=\"line\">\t\tSystem.out.println(hs.add(<span class=\"number\">4</span>));  <span class=\"comment\">//检验HashSet是否允许重复元素加入</span></span><br><span class=\"line\">\t\tSystem.out.println(hs);    <span class=\"comment\">//检验HashSet是否有序\t</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\">[<span class=\"number\">17</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">24</span>, <span class=\"number\">13</span>, <span class=\"number\">78</span>]</span><br></pre></td></tr></table></figure>\n<p>第二个输出 false 说明<strong>不允许元素重复</strong>，[17, 3, 4, 24, 13, 78] 说明<strong>存储的元素无序</strong></p>\n<h2 id=\"24-hashset存储自定义类型元素\"><a class=\"markdownIt-Anchor\" href=\"#24-hashset存储自定义类型元素\">#</a> 2.4 HashSet 存储自定义类型元素</h2>\n<p>给 HashSet 中存放自定义类型元素时，需要重写对象中的 hashCode 和 equals 方法，建立自己的比较方式，才能保 证 HashSet 集合中的对象唯一</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> id)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Student [name=&quot;</span> + name + <span class=\"string\">&quot;, id=&quot;</span> + id + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"comment\">//重写hashCode方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> prime = <span class=\"number\">31</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tresult = prime * result + id;</span><br><span class=\"line\">\t\tresult = prime * result + ((name == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : name.hashCode());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"comment\">//重写equals方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == obj)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (getClass() != obj.getClass())</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\tStudent other = (Student) obj;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (id != other.id)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (name == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (other.name != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!name.equals(other.name))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span> </span>&#123;</span><br><span class=\"line\">\t\tHashSet&lt;Student&gt; hs = <span class=\"keyword\">new</span> HashSet&lt;&gt;();\t</span><br><span class=\"line\">\t\ths.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">\t\ths.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\">\t\ths.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\">\t\ths.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">1</span>));<span class=\"comment\">//因为重写了equals方法和hashCode方法所以实际上集合中只有一个张三1</span></span><br><span class=\"line\">\t\tSystem.out.println(hs.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;谢六&quot;</span>,<span class=\"number\">4</span>)));\t</span><br><span class=\"line\">\t\tSystem.out.println(hs.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;谢六&quot;</span>,<span class=\"number\">4</span>)));</span><br><span class=\"line\">\t\t<span class=\"comment\">//第一种打印方式，利用重写的toString（）方法和Println（）直接打印</span></span><br><span class=\"line\">\t\tSystem.out.println(hs); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------&quot;</span>);</span><br><span class=\"line\">\t\t <span class=\"comment\">//第二种打印方式，foreach增强for循环</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Student s : hs) &#123;  </span><br><span class=\"line\">\t\t\tSystem.out.println(s);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------&quot;</span>);   </span><br><span class=\"line\">\t\t<span class=\"comment\">//第三种打印方式，利用Iteator迭代器</span></span><br><span class=\"line\">\t\tIterator&lt;Student&gt; it = hs.iterator();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(it.hasNext()) &#123;</span><br><span class=\"line\">\t\t\t\tStudent s = it.next();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(s);</span><br><span class=\"line\">\t\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\">[Student [name=李四, id=<span class=\"number\">2</span>], Student [name=张三, id=<span class=\"number\">1</span>], Student [name=王五, id=<span class=\"number\">3</span>], Student [name=谢六, id=<span class=\"number\">4</span>]]</span><br><span class=\"line\">------------</span><br><span class=\"line\">Student [name=李四, id=<span class=\"number\">2</span>]</span><br><span class=\"line\">Student [name=张三, id=<span class=\"number\">1</span>]</span><br><span class=\"line\">Student [name=王五, id=<span class=\"number\">3</span>]</span><br><span class=\"line\">Student [name=谢六, id=<span class=\"number\">4</span>]</span><br><span class=\"line\">------------</span><br><span class=\"line\">Student [name=李四, id=<span class=\"number\">2</span>]</span><br><span class=\"line\">Student [name=张三, id=<span class=\"number\">1</span>]</span><br><span class=\"line\">Student [name=王五, id=<span class=\"number\">3</span>]</span><br><span class=\"line\">Student [name=谢六, id=<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"25hashset的子类linkedhashset\"><a class=\"markdownIt-Anchor\" href=\"#25hashset的子类linkedhashset\">#</a> 2.5HashSet 的子类 LinkedHashSet</h2>\n<p>我们知道 HashSet 保证元素唯一，可是元素存放进去是没有顺序的，那么我们要<strong>保证有序</strong>，怎么办呢？ 在 HashSet 下面有一个子类  <code>java.util.LinkedHashSet</code>  ，它是链表和哈希表组合的一个数据存储结构。<br>\n特点：<strong>存取有序，唯一，效率高</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200909162955387.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedHashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\tSet&lt;String&gt; set = <span class=\"keyword\">new</span> LinkedHashSet&lt;String&gt;(); </span><br><span class=\"line\">\t\tset.add(<span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">\t\tset.add(<span class=\"string\">&quot;aaa&quot;</span>); </span><br><span class=\"line\">\t\tset.add(<span class=\"string\">&quot;Love&quot;</span>);</span><br><span class=\"line\">\t\tset.add(<span class=\"string\">&quot;abc&quot;</span>); </span><br><span class=\"line\">\t\tset.add(<span class=\"string\">&quot;bbc&quot;</span>); </span><br><span class=\"line\">\t\tIterator&lt;String&gt; it = set.iterator(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (it.hasNext())</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(it.next()); </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bbb</span><br><span class=\"line\">aaa</span><br><span class=\"line\">Love</span><br><span class=\"line\">abc</span><br><span class=\"line\">bbc</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-treeset集合\"><a class=\"markdownIt-Anchor\" href=\"#3-treeset集合\">#</a> 3、TreeSet 集合</h1>\n<h2 id=\"31treeset介绍\"><a class=\"markdownIt-Anchor\" href=\"#31treeset介绍\">#</a> 3.1TreeSet 介绍</h2>\n<p>基于 TreeMap 的 NavigableSet 实现。使用<strong>元素的自然顺序对元素进行排序</strong>，或者根据创建 set 时提供的 Comparator 进行排序，具体取决于使用的构造方法。<br>\n在存储了大量的需要进行快速检索的排序信息的情况下，TreeSet 是一个不错的选择<br>\n<strong> TreeSet 继承关系</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类 TreeSet&lt;E&gt;</span><br><span class=\"line\">java.lang.Object</span><br><span class=\"line\">  继承者 java.util.AbstractCollection&lt;E&gt;</span><br><span class=\"line\">      继承者 java.util.AbstractSet&lt;E&gt;</span><br><span class=\"line\">          继承者 java.util.TreeSet&lt;E&gt;</span><br><span class=\"line\">类型参数：</span><br><span class=\"line\">E - 此 set 维护的元素的类型</span><br><span class=\"line\">所有已实现的接口：</span><br><span class=\"line\">Serializable, Cloneable, Iterable&lt;E&gt;, Collection&lt;E&gt;, NavigableSet&lt;E&gt;, Set&lt;E&gt;, SortedSet&lt;E&gt;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200909163924833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">继承于AbstractSet,AbstractSet实现了equals和hashcode方法。</span><br><span class=\"line\">实现了NavigableSet接口，意味着它支持一系列的导航方法。比如查找与指定目标最匹配项。</span><br><span class=\"line\">实现了Cloneable接口，意味着它能被克隆。</span><br><span class=\"line\">实现了java.io.Serializable接口，意味着它支持序列化。</span><br></pre></td></tr></table></figure>\n<p><strong>构造方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TreeSet() </span><br><span class=\"line\">          构造一个新的空 set，该 set 根据其元素的自然顺序进行排序。</span><br><span class=\"line\">TreeSet(Collection&lt;? extends E&gt; c) </span><br><span class=\"line\">          构造一个包含指定 collection 元素的新 TreeSet，它按照其元素的自然顺序进行排序。</span><br><span class=\"line\">TreeSet(Comparator&lt;? <span class=\"keyword\">super</span> E&gt; comparator) </span><br><span class=\"line\">          构造一个新的空 TreeSet，它根据指定比较器进行排序。</span><br><span class=\"line\">TreeSet(SortedSet&lt;E&gt; s) </span><br><span class=\"line\">          构造一个与指定有序 set 具有相同映射关系和相同排序的新 TreeSet</span><br></pre></td></tr></table></figure>\n<p><strong>常用方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>    <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span></span><br><span class=\"line\"><span class=\"function\">         将指定的元素添加到此 set（如果该元素尚未存在于 set 中）。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>    <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span></span><br><span class=\"line\"><span class=\"function\">         将指定 collection 中的所有元素添加到此 set 中。</span></span><br><span class=\"line\"><span class=\"function\">E  <span class=\"title\">ceiling</span><span class=\"params\">(E e)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 中大于等于给定元素的最小元素；如果不存在这样的元素，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>   <span class=\"title\">clear</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         移除此 set 中的所有元素。</span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回 TreeSet 实例的浅表副本。</span></span><br><span class=\"line\"><span class=\"function\">Comparator&lt;? <span class=\"keyword\">super</span> E&gt;  <span class=\"title\">comparator</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回对此 set 中的元素进行排序的比较器；如果此 set 使用其元素的自然顺序，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>    <span class=\"title\">contains</span><span class=\"params\">(Object o)</span> </span></span><br><span class=\"line\"><span class=\"function\">         如果此 set 包含指定的元素，则返回 <span class=\"keyword\">true</span>。</span></span><br><span class=\"line\"><span class=\"function\">Iterator&lt;E&gt;    <span class=\"title\">descendingIterator</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回在此 set 元素上按降序进行迭代的迭代器。</span></span><br><span class=\"line\"><span class=\"function\">NavigableSet&lt;E&gt;    <span class=\"title\">descendingSet</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 中所包含元素的逆序视图。</span></span><br><span class=\"line\"><span class=\"function\">E  <span class=\"title\">first</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 中当前第一个（最低）元素。</span></span><br><span class=\"line\"><span class=\"function\">E  <span class=\"title\">floor</span><span class=\"params\">(E e)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 中小于等于给定元素的最大元素；如果不存在这样的元素，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">SortedSet&lt;E&gt;   <span class=\"title\">headSet</span><span class=\"params\">(E toElement)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 的部分视图，其元素严格小于 toElement。</span></span><br><span class=\"line\"><span class=\"function\">NavigableSet&lt;E&gt;    <span class=\"title\">headSet</span><span class=\"params\">(E toElement, <span class=\"keyword\">boolean</span> inclusive)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 的部分视图，其元素小于（或等于，如果 inclusive 为 <span class=\"keyword\">true</span>）toElement。</span></span><br><span class=\"line\"><span class=\"function\">E  <span class=\"title\">higher</span><span class=\"params\">(E e)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 中严格大于给定元素的最小元素；如果不存在这样的元素，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>    <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         如果此 set 不包含任何元素，则返回 <span class=\"keyword\">true</span>。</span></span><br><span class=\"line\"><span class=\"function\">Iterator&lt;E&gt;    <span class=\"title\">iterator</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回在此 set 中的元素上按升序进行迭代的迭代器。</span></span><br><span class=\"line\"><span class=\"function\">E  <span class=\"title\">last</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 中当前最后一个（最高）元素。</span></span><br><span class=\"line\"><span class=\"function\">E  <span class=\"title\">lower</span><span class=\"params\">(E e)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 中严格小于给定元素的最大元素；如果不存在这样的元素，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">E  <span class=\"title\">pollFirst</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         获取并移除第一个（最低）元素；如果此 set 为空，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">E  <span class=\"title\">pollLast</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         获取并移除最后一个（最高）元素；如果此 set 为空，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>    <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span></span><br><span class=\"line\"><span class=\"function\">         将指定的元素从 set 中移除（如果该元素存在于此 set 中）。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>    <span class=\"title\">size</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回 set 中的元素数（set 的容量）。</span></span><br><span class=\"line\"><span class=\"function\">NavigableSet&lt;E&gt;    <span class=\"title\">subSet</span><span class=\"params\">(E fromElement, <span class=\"keyword\">boolean</span> fromInclusive, E toElement, <span class=\"keyword\">boolean</span> toInclusive)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 的部分视图，其元素范围从 fromElement 到 toElement。</span></span><br><span class=\"line\"><span class=\"function\">SortedSet&lt;E&gt;   <span class=\"title\">subSet</span><span class=\"params\">(E fromElement, E toElement)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 的部分视图，其元素从 fromElement（包括）到 toElement（不包括）。</span></span><br><span class=\"line\"><span class=\"function\">SortedSet&lt;E&gt;   <span class=\"title\">tailSet</span><span class=\"params\">(E fromElement)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 的部分视图，其元素大于等于 fromElement。</span></span><br><span class=\"line\"><span class=\"function\">NavigableSet&lt;E&gt;    <span class=\"title\">tailSet</span><span class=\"params\">(E fromElement, <span class=\"keyword\">boolean</span> inclusive)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 的部分视图，其元素大于（或等于，如果 inclusive 为 <span class=\"keyword\">true</span>）fromElement。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"32treeset特点\"><a class=\"markdownIt-Anchor\" href=\"#32treeset特点\">#</a> 3.2TreeSet 特点</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;Integer&gt; st = <span class=\"keyword\">new</span> TreeSet&lt;&gt;();</span><br><span class=\"line\">\t\tst.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"number\">4</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tSystem.out.println(st.add(<span class=\"number\">2</span>)); <span class=\"comment\">//验证是否可以添加重复元素</span></span><br><span class=\"line\">\t\tSystem.out.println(st);\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>false 说明 TreeSet 集合不允许重复</li>\n<li>[1, 2, 4, 5] 说明，TreeSet 对 Integer 数据类型进行升序排列</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeSet;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;String&gt; st = <span class=\"keyword\">new</span> TreeSet&lt;&gt;();</span><br><span class=\"line\">\t\tst.add(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"string\">&quot;谢六&quot;</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(st.add(<span class=\"string\">&quot;王五&quot;</span>));</span><br><span class=\"line\">\t\tSystem.out.println(st);\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\">[a, b, c, d, 张三, 李四, 王五, 谢六]</span><br></pre></td></tr></table></figure>\n<p>Java 在 String 和 Integer 类里<strong>重写了 comparaTo 方法</strong>，因此 TreeSet 可以对其进行升序排列。当我们对自定义的 TreeSet 进行排序时，就需要自己<strong>重写比较方法</strong>。如果说<strong>没有重写任何比较器（内部或者外部）时，使用 TreeSet 进行操作会报错</strong>。</p>\n<h2 id=\"33treeset与比较器\"><a class=\"markdownIt-Anchor\" href=\"#33treeset与比较器\">#</a> 3.3TreeSet 与比较器</h2>\n<p><strong>TreeSet 与内部比较器</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeSet;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span></span>&#123;\t</span><br><span class=\"line\">\t String name;</span><br><span class=\"line\">\t <span class=\"keyword\">int</span> age; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"comment\">//内部重写比较器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Object o)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStudent stu =((Student)o);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age-stu.age;  <span class=\"comment\">//按照年龄升序排序</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Student [name=&quot;</span> + name + <span class=\"string\">&quot;, age=&quot;</span> + age + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;Student&gt; st = <span class=\"keyword\">new</span> TreeSet&lt;&gt;();</span><br><span class=\"line\">\t\tst.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>));</span><br><span class=\"line\">\t\tst.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">19</span>));</span><br><span class=\"line\">\t\tst.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">20</span>));</span><br><span class=\"line\">\t\tst.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;谢六&quot;</span>,<span class=\"number\">10</span>));</span><br><span class=\"line\">\t\tIterator&lt;Student&gt; it = st.iterator(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (it.hasNext())</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(it.next()); </span><br><span class=\"line\">\t\t&#125; \t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student [name=谢六, age=<span class=\"number\">10</span>]</span><br><span class=\"line\">Student [name=张三, age=<span class=\"number\">18</span>]</span><br><span class=\"line\">Student [name=李四, age=<span class=\"number\">19</span>]</span><br><span class=\"line\">Student [name=王五, age=<span class=\"number\">20</span>]</span><br></pre></td></tr></table></figure>\n<p><strong>TreeSet 与外部比较器</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeSet;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;\t</span><br><span class=\"line\">\t String name;</span><br><span class=\"line\">\t <span class=\"keyword\">int</span> age; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Student [name=&quot;</span> + name + <span class=\"string\">&quot;, age=&quot;</span> + age + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//外部比较器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OutsideCompare</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Object o1, Object o2)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStudent st1 = ((Student) o1);</span><br><span class=\"line\">\t\tStudent st2 = ((Student) o2);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> st1.age-st2.age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tOutsideCompare com = <span class=\"keyword\">new</span> OutsideCompare();</span><br><span class=\"line\">\t\tSet&lt;Student&gt; st = <span class=\"keyword\">new</span> TreeSet&lt;&gt;(com);<span class=\"comment\">//根据指定的比较器定义的构造方法</span></span><br><span class=\"line\">\t\tst.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>));</span><br><span class=\"line\">\t\tst.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">19</span>));</span><br><span class=\"line\">\t\tst.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">20</span>));</span><br><span class=\"line\">\t\tst.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;谢六&quot;</span>,<span class=\"number\">10</span>));</span><br><span class=\"line\">\t\tIterator&lt;Student&gt; it = st.iterator(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (it.hasNext())</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(it.next()); </span><br><span class=\"line\">\t\t&#125; \t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Set集合",
                "HashSet",
                "TreeSet",
                "LinkedHashSet"
            ]
        },
        {
            "id": "http://yoursite.com/2020/09/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%B0%88%E5%93%88%E5%B8%8C%E8%A1%A8(Hash%20Table)/",
            "url": "http://yoursite.com/2020/09/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%B0%88%E5%93%88%E5%B8%8C%E8%A1%A8(Hash%20Table)/",
            "title": "数据结构（Java实现）-详谈哈希表(Hash Table)",
            "date_published": "2020-09-10T08:28:30.810Z",
            "content_html": "<h1 id=\"1-哈希表介绍\"><a class=\"markdownIt-Anchor\" href=\"#1-哈希表介绍\">#</a> 1、哈希表介绍</h1>\n<p>散列表（Hash table，也叫哈希表），是根据<strong>关键码值 (Key value)<strong> 而</strong>直接进行访问</strong>的<strong>数据结构</strong>。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p>\n<p>（<font color=red>哈希表的底层是数组</font>）<br>\n实现哈希表的两种方法：<br>\n1、数组 + 链表<br>\n 2、数组 + 红黑二叉树</p>\n<h1 id=\"2-哈希函数hk\"><a class=\"markdownIt-Anchor\" href=\"#2-哈希函数hk\">#</a> 2、哈希函数 H（k）</h1>\n<p><strong>哈希函数</strong>：建立起数据元素的存放位置与数据元素的关键字之间的对应关系的函数。即<strong>使用哈希函数可将被查找的键转换为数组的索引</strong>。理想情况下它应该运算简单并且保证任何两个不同的关键字映射到不同的单元（索引值）。但是，这是不可能的，很多时候我们都需要处理<strong>多个键被哈希到同一个索引值的情况，即哈希碰撞冲突</strong></p>\n<p><strong>哈希函数的构造方法：</strong><br>\n（1）直接定址法<br>\n取关键字或关键字的某个线性函数值为哈希地址。即 H (key)=key 或 H (key)=a*key+b   (a,b 为常数)。<br>\n举例 1：统计 1-100 岁的人口，其中年龄作为关键字，哈希函数取关键字自身。查找年龄 25 岁的人口有多少，则直接查表中第 25 项。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020090816234099.png#\" alt=\"在这里插入图片描述\"><br>\n举例 2：统计解放以后出生人口，其中年份作为关键字，哈希函数取关键字自身加一个常数 H (key)=key+(-1948). 查找 1970 年出生的人数，则直接查 (1970-1948)=22 项即可<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200908162408198.png#\" alt=\"在这里插入图片描述\"><br>\n（2）数字分析法<br>\n若关键字是以 r 为基的数（如：以 10 为基的十进制数），并且哈希表中可能出现的关键字都是事先知道的，则可取关键字的若干数位组成哈希地址。<br>\n举例：有 80 个记录，其关键字为 8 位十进制数，假设哈希表长 1000，则可取两位十进制数组成哈希地址，为了尽量避免冲突，可先分析关键字。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200908162558912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#\" alt=\"在这里插入图片描述\"><br>\n经分析，发现第一位、第二位都是 8,1，第三位只可能取 3 或 4，第八位只可能取 2,5 或 7，所以这四位不可取，那么对于第四、五、六、七位可看成是随机的，因此，可取其中任意两位，或取其中两位与另外两位的叠加求和舍去进位作为哈希地址。<br>\n（3）平方取中法<br>\n取关键字平方后的中间几位为哈希地址。（较常用的一种）</p>\n<p>举例：为 BASIC 源程序中的标识符键一个哈希表（假设 BASIC 语言允许的标识符为一个字母或者一个字母和一个数字两种情况，在计算机内可用两位八进制数表示字母和数字），假设表长为 512=2^{9}，则可取关键字平方后的中间 9 位二进制数为哈希地址。（每 3 个二进制位可表示 1 位八进制位，即 3 个八进制位为 9 个二进制位）<br>\nA ：01 （A 的 ASCII 码值为 65,65 的八进制为 101，取后两位表示关键字）<br>\nB：02 （B 的 ASCII 码值为 66,66 的八进制为 102，取后两位表示关键字）<br>\n…<br>\nZ：32（Z 的 ASCII 码值为 90,90 的八进制为 132，取后两位表示关键字）<br>\n…<br>\n0：60（0 的 ASCII 码值为 48,48 的八进制为 60，取后两位表示关键字）<br>\n…<br>\n9：71（9 的 ASCII 码值为 57,57 的八进制为 71，取后两位表示关键字）<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200908162656701.png#\" alt=\"在这里插入图片描述\"><br>\n（4）折叠法<br>\n将关键字分割成位数相同的几部分（最后一部分的位数可不同），然后取这几部分的叠加和（舍去进位）作为哈希地址。适用于关键字位数比较多，且关键字中每一位上数字分布大致均匀时。<br>\n举例：根据国际标准图书编号（ISBN）建立一个哈希表。如一个国际标准图书编号  0-442-20586-4 的哈希地址为：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200908162727824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n（5）除留余数法<br>\n取关键字被某个不大于哈希表表长 m 的数 p 除后所得余数为哈希地址（p 为素数）<br>\nH（key）=key  MOD  p，p&lt;=m   （最简单，最常用）p 的选取很重要<br>\n一般情况，p 可以选取为质数或者不包含小于 20 的质因数的合数（合数指自然数中除了能被 1 和本身整除外，还能被其他数（0 除外）整除的数）。<br>\n（6）随机数法<br>\n选择一个随机函数，取关键字的随机函数值为它的哈希地址。即 H（key）=random（key），其中 random 为随机函数。适用于关键字长度不等时。<br>\n总结：实际工作中根据情况不同选用的哈希函数不同，通常，考虑因素如下：<br>\n（1）计算哈希函数所需时间（包括硬件指令的因素）<br>\n（2）关键字的长度<br>\n（3）哈希表的大小<br>\n（4）关键字的分布情况<br>\n（5）记录的查找频率</p>\n<h1 id=\"3-解决哈希碰撞\"><a class=\"markdownIt-Anchor\" href=\"#3-解决哈希碰撞\">#</a> 3、解决哈希碰撞</h1>\n<h2 id=\"1-开放地址法\"><a class=\"markdownIt-Anchor\" href=\"#1-开放地址法\">#</a> 1、开放地址法</h2>\n<p><strong>开放地址法</strong>：通过系统的方法找到系统的空位（三种：<strong>线性探测、二次探测、再哈希法</strong>），并将待插入的元素填入，而不再使用用 hash 函数得到数字作为数组的下标。</p>\n<ul>\n<li><strong>线性探测</strong>：假若当前要插入的位置已经被占用了之后，沿数组下标递增方向查找，直到找到空位为止</li>\n<li><strong>二次探测</strong>：二次探测和线性探测的区别在于二次探测的步长是，若计算的原始下标是 x 则二次探测的过程是 x+12，x+22，x+32，x+42，x+52 随着探测次数的增加，探测的步长是探测次数的二次方（因此名为二次探测）。二次探测会产生二次聚集：即当插入的几个数经过 hash 后的下标相同的话，那么这一串数字插入的探测步长会增加很快</li>\n<li><strong>再 hash 法</strong>：为了消除原始聚集和二次聚集，把关键字用不同的 hash 函数<strong>再做一遍 hash 化</strong>，用过这个结果作为探测的步长，这样对于特定的关键字在整个探测中步长不变，但是不同的关键字会使用不同的步长。<strong>stepSize = constant - （key % constant）</strong> 这个 hash 函数求步长比较实用，constant 是小于数组容量的质数。（注意：第二个 hash 函数必须和第一个 hash 函数不同，步长 hash 函数输出的结果值不能为 0）</li>\n</ul>\n<p><strong>哈希表的扩容</strong>：<br>\n<strong>关于开放寻址也有个疑问，那就是如果一直找不到空的位置怎么办？</strong><br>\n这种情况不存在，为啥嘞？你这样想，是因为你考虑了一个前提，那就是位置已经被占光了，没有空位置了，但是实际情况是位置不会被占光的，因为有一定量的位置被占了的时候就会发生扩容。当哈希表被占的位置比较多的时候，出现哈希冲突的概率也就变高了，所以很有必要进行扩容。<br>\n<strong>那么这个扩容是怎么扩的呢？</strong><br>\n这里一般会有一个<strong>增长因子</strong>的概念，也叫作负载因子，简单点说就是已经被占的位置与总位置的一个百分比，比如一共十个位置，现在已经占了七个位置，就触发了扩容机制，因为它的增长因子是 0.7，也就是达到了总位置的百分之七十就需要扩容。拿 HashMap 来说，当它当前的容量占总容量的百分之七十五的时候就需要扩容了。而且这个扩容也不是简单的把数组扩大，而是新创建一个数组是原来的 2 倍，然后把原数组的所有元素都重新 Hash 一遍放到新的数组。</p>\n<h2 id=\"2-链地址法\"><a class=\"markdownIt-Anchor\" href=\"#2-链地址法\">#</a> 2、链地址法</h2>\n<p><strong>链地址法</strong>  ：创建一个存放单词链表的数组，数组内不直接存放元素，而是存储元素的链表。发生冲突的时候，数据项直接接到这个数组下标所指的链表中即可。<br>\n　　优势：填入过程允许重复，所有关键值相同的项放在同一链表中，找到所有项就需要查找整个是链表，稍微有点影响性能。删除只需要找到正确的链表，从链表中删除对应的数据即可。表容量是质数的要求不像在二次探测和再 hash 法中那么重要，由于没有探测的操作，所以无需担心容量被步长整除，从而陷入无限循环中。</p>\n<p><strong>如果冲突的很多，那这个增加的链表岂不是很长？</strong><br>\n如果冲突过多的话，这个 key 对应的链表会变得比较长，怎么处理呢？这里举个例子吧，拿 java 集合类中的 HashMap 来说吧，如果这里的链表<strong>长度大于等于 8</strong> 的话，链表就会转换成<strong>红黑树结构</strong>，当然如果<strong>长度小于等于 6</strong> 的话，就会<strong>还原链表</strong>。以此来解决链表过长导致的性能问题。这样设计是因为中间有个 7 作为一个差值，来避免频繁的进行树和链表的转换，因为转换频繁也是影响性能的啊。</p>\n<h1 id=\"5-使用哈希表管理雇员信息\"><a class=\"markdownIt-Anchor\" href=\"#5-使用哈希表管理雇员信息\">#</a> 5、使用哈希表管理雇员信息</h1>\n<p><strong>题目</strong>：有一个公司，当有新的员工来报道时，要求将该员工的信息加入 (id、姓名，性别，电话), 当输入该员工的 id 时，要求查找到该员工的所有信息.<br>\n 要求：</p>\n<ul>\n<li>不使用数据库，速度越快越好</li>\n<li>添加时，保证按照 id 从低到高插入</li>\n<li>使用链表来实现哈希表，该链表不带表头</li>\n</ul>\n<p>思路分析：<br>\n添加雇员信息</p>\n<ol>\n<li>创建一个节点类存储雇员的信息（id，name，sex，phone）</li>\n<li>创建一个定长数组为哈希表，哈希表的每个数组元素储存一条链表头节点</li>\n<li>根据散列函数将要添加的雇员 id 进行散列（比如：散列函数构造采用简单的取模法：H (k)=id % size  假如 id=1001 数组长度为 7 则取余后的 key 为 0 对应的数组下标为 0）</li>\n<li>根据 id 散列后的 key 值将对应 id 的雇员节点链接到对应的数组下标下的链表后面</li>\n</ol>\n<p>查找对应 id 的雇员信息：</p>\n<ol>\n<li>根据 id 散列得到 key 值</li>\n<li>到 key 值对应的数组下标的链表中进行查询<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200908165519112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashTabDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建哈希表</span></span><br><span class=\"line\">\t\tHashTab hashTab = <span class=\"keyword\">new</span> HashTab(<span class=\"number\">7</span>);\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//写一个简单的菜单</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;1:  添加雇员&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;2: 显示雇员&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;3: 查找雇员&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;4: 退出系统&quot;</span>);\t\t\t</span><br><span class=\"line\">\t\t\tn = scanner.nextInt();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (n) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;输入id&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> id = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;输入名字&quot;</span>);</span><br><span class=\"line\">\t\t\t\tString name = scanner.next();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;输入性别&quot;</span>);</span><br><span class=\"line\">\t\t\t\tString sex = scanner.next();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;输入电话&quot;</span>);</span><br><span class=\"line\">\t\t\t\tString phone = scanner.next();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//创建 雇员</span></span><br><span class=\"line\">\t\t\t\tEmp emp = <span class=\"keyword\">new</span> Emp(id, name,sex,phone);</span><br><span class=\"line\">\t\t\t\thashTab.add(emp);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\thashTab.list();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入要查找的id&quot;</span>);</span><br><span class=\"line\">\t\t\t\tid = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\thashTab.findEmpById(id);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\t\tscanner.close();</span><br><span class=\"line\">\t\t\t\tSystem.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建HashTab 管理多条链表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashTab</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> EmpLinkedList[] empLinkedListArray;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size; <span class=\"comment\">//表示有多少条链表\t</span></span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashTab</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.size = size;</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化empLinkedListArray</span></span><br><span class=\"line\">\t\tempLinkedListArray = <span class=\"keyword\">new</span> EmpLinkedList[size];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\tempLinkedListArray[i] = <span class=\"keyword\">new</span> EmpLinkedList();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//添加雇员</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Emp emp)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//根据员工的id ,得到该员工应当添加到哪条链表</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> empLinkedListNO = hashFun(emp.id);</span><br><span class=\"line\">\t\t<span class=\"comment\">//将emp 添加到对应的链表中</span></span><br><span class=\"line\">\t\tempLinkedListArray[empLinkedListNO].add(emp);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历所有的链表,遍历hashtab</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\tempLinkedListArray[i].list(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//根据输入的id,查找雇员</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">findEmpById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用散列函数确定到哪条链表查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> empLinkedListNO = hashFun(id);</span><br><span class=\"line\">\t\tEmp emp = empLinkedListArray[empLinkedListNO].findEmpById(id);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(emp != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;在第%d条链表中找到 雇员 id = %d name = %s sex = %s phone = %s&quot;</span>, (empLinkedListNO + <span class=\"number\">1</span>), id,emp.name,emp.sex,emp.phone);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;在哈希表中，没有找到该雇员~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//编写散列函数, 使用一个简单取模法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashFun</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id % size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表示一个雇员</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Emp</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String sex;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String phone;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Emp next; <span class=\"comment\">//next 默认为 null</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Emp</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name,String sex,String phone)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.phone = phone;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建EmpLinkedList ,表示链表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmpLinkedList</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//头指针，指向第一个Emp,因此我们这个链表的head 是直接指向第一个Emp</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Emp head; <span class=\"comment\">//默认null\t</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//添加雇员到链表</span></span><br><span class=\"line\">\t<span class=\"comment\">//说明</span></span><br><span class=\"line\">\t<span class=\"comment\">//1. 假定，当添加雇员时，id 是自增长，即id的分配总是从小到大</span></span><br><span class=\"line\">\t<span class=\"comment\">//   因此我们将该雇员直接加入到本链表的最后即可</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Emp emp)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果是添加第一个雇员</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\thead = emp;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果不是第一个雇员，则使用一个辅助的指针，帮助定位到最后</span></span><br><span class=\"line\">\t\tEmp curEmp = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curEmp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明到链表最后</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcurEmp = curEmp.next; <span class=\"comment\">//后移</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//退出时直接将emp 加入链表</span></span><br><span class=\"line\">\t\tcurEmp.next = emp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//遍历链表的雇员信息</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//说明链表为空</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;第 &quot;</span>+(no+<span class=\"number\">1</span>)+<span class=\"string\">&quot; 链表为空&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">&quot;第 &quot;</span>+(no+<span class=\"number\">1</span>)+<span class=\"string\">&quot; 链表的信息为&quot;</span>);</span><br><span class=\"line\">\t\tEmp curEmp = head; <span class=\"comment\">//辅助指针</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot; =&gt; id=%d name=%s sex=%s phone=%s\\t&quot;</span>, curEmp.id, curEmp.name,curEmp.sex,curEmp.phone);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curEmp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明curEmp已经是最后结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcurEmp = curEmp.next; <span class=\"comment\">//后移，遍历</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//根据id查找雇员</span></span><br><span class=\"line\">\t<span class=\"comment\">//如果查找到，就返回Emp, 如果没有找到，就返回null</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Emp <span class=\"title\">findEmpById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断链表是否为空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//辅助指针</span></span><br><span class=\"line\">\t\tEmp curEmp = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curEmp.id == id) &#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;<span class=\"comment\">//这时curEmp就指向要查找的雇员</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//退出</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curEmp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明遍历当前链表没有找到该雇员</span></span><br><span class=\"line\">\t\t\t\tcurEmp = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcurEmp = curEmp.next;<span class=\"comment\">//以后</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> curEmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>:  添加雇员</span><br><span class=\"line\"><span class=\"number\">2</span>: 显示雇员</span><br><span class=\"line\"><span class=\"number\">3</span>: 查找雇员</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出系统</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">输入id</span><br><span class=\"line\"><span class=\"number\">1001</span></span><br><span class=\"line\">输入名字</span><br><span class=\"line\">张三</span><br><span class=\"line\">输入性别</span><br><span class=\"line\">男</span><br><span class=\"line\">输入电话</span><br><span class=\"line\"><span class=\"number\">12345674512</span></span><br><span class=\"line\"><span class=\"number\">1</span>:  添加雇员</span><br><span class=\"line\"><span class=\"number\">2</span>: 显示雇员</span><br><span class=\"line\"><span class=\"number\">3</span>: 查找雇员</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出系统</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">输入id</span><br><span class=\"line\"><span class=\"number\">1002</span></span><br><span class=\"line\">输入名字</span><br><span class=\"line\">李强</span><br><span class=\"line\">输入性别</span><br><span class=\"line\">男</span><br><span class=\"line\">输入电话</span><br><span class=\"line\"><span class=\"number\">14578214573</span></span><br><span class=\"line\"><span class=\"number\">1</span>:  添加雇员</span><br><span class=\"line\"><span class=\"number\">2</span>: 显示雇员</span><br><span class=\"line\"><span class=\"number\">3</span>: 查找雇员</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出系统</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">输入id</span><br><span class=\"line\"><span class=\"number\">1009</span></span><br><span class=\"line\">输入名字</span><br><span class=\"line\">王文</span><br><span class=\"line\">输入性别</span><br><span class=\"line\">女</span><br><span class=\"line\">输入电话</span><br><span class=\"line\"><span class=\"number\">14789654233</span></span><br><span class=\"line\"><span class=\"number\">1</span>:  添加雇员</span><br><span class=\"line\"><span class=\"number\">2</span>: 显示雇员</span><br><span class=\"line\"><span class=\"number\">3</span>: 查找雇员</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出系统</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">第 <span class=\"number\">1</span> 链表的信息为 =&gt; id=<span class=\"number\">1001</span> name=张三 sex=男 phone=<span class=\"number\">12345674512</span>\t</span><br><span class=\"line\">第 <span class=\"number\">2</span> 链表的信息为 =&gt; id=<span class=\"number\">1002</span> name=李强 sex=男 phone=<span class=\"number\">14578214573</span>\t =&gt; id=<span class=\"number\">1009</span> name=王文 sex=女 phone=<span class=\"number\">14789654233</span>\t</span><br><span class=\"line\">第 <span class=\"number\">3</span> 链表为空</span><br><span class=\"line\">第 <span class=\"number\">4</span> 链表为空</span><br><span class=\"line\">第 <span class=\"number\">5</span> 链表为空</span><br><span class=\"line\">第 <span class=\"number\">6</span> 链表为空</span><br><span class=\"line\">第 <span class=\"number\">7</span> 链表为空</span><br><span class=\"line\"><span class=\"number\">1</span>:  添加雇员</span><br><span class=\"line\"><span class=\"number\">2</span>: 显示雇员</span><br><span class=\"line\"><span class=\"number\">3</span>: 查找雇员</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出系统</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">请输入要查找的id</span><br><span class=\"line\"><span class=\"number\">1009</span></span><br><span class=\"line\">在第<span class=\"number\">2</span>条链表中找到 雇员 id = <span class=\"number\">1009</span> name = 王文 sex = 女 phone = <span class=\"number\">14789654233</span></span><br><span class=\"line\"><span class=\"number\">1</span>:  添加雇员</span><br><span class=\"line\"><span class=\"number\">2</span>: 显示雇员</span><br><span class=\"line\"><span class=\"number\">3</span>: 查找雇员</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出系统</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "哈希表",
                "开放地址法",
                "链地址法",
                "哈希函数"
            ]
        },
        {
            "id": "http://yoursite.com/2020/09/10/%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E5%B8%B8%E7%94%A8%E7%9A%84%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%EF%BC%88%E7%BA%BF%E6%80%A7%E6%9F%A5%E6%89%BE%E3%80%81%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E3%80%81%E6%8F%92%E5%80%BC%E6%9F%A5%E6%89%BE%E3%80%81%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%9F%A5%E6%89%BE%EF%BC%89/",
            "url": "http://yoursite.com/2020/09/10/%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E5%B8%B8%E7%94%A8%E7%9A%84%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%EF%BC%88%E7%BA%BF%E6%80%A7%E6%9F%A5%E6%89%BE%E3%80%81%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E3%80%81%E6%8F%92%E5%80%BC%E6%9F%A5%E6%89%BE%E3%80%81%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%9F%A5%E6%89%BE%EF%BC%89/",
            "title": "算法（Java实现）-常用的查找算法（线性查找、二分查找、插值查找、斐波那契查找）",
            "date_published": "2020-09-10T08:28:30.706Z",
            "content_html": "<h1 id=\"1-线性查找算法\"><a class=\"markdownIt-Anchor\" href=\"#1-线性查找算法\">#</a> 1、线性查找算法</h1>\n<p><strong>介绍</strong>：线性查找算法就是在待查数据中进行顺序性轮询查找，当存在待查的数据时返回当前数据索引位置，如果不存在则返回不存在表示 - 1<br>\n<strong> 平均查找长度</strong>：1/2 (n+i)<br>\n 计算方式：当前元素找到的概率乘上所匹配的次数<br>\n<strong>时间复杂度</strong>：O (N)</p>\n<p>例： 有一个数列： {1, 9, 11, -1, 34, 89} ，判断数列中是否包含 11<br>\n 要求：如果找到了，就提示找到，并给出下标值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeqSearch</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> arr[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, -<span class=\"number\">1</span>, <span class=\"number\">34</span>, <span class=\"number\">89</span> &#125;;<span class=\"comment\">// 没有顺序的数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = seqSearch(arr, <span class=\"number\">11</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;没有找到到&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;找到，下标为=&quot;</span> + index);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 这里我们实现的线性查找是找到一个满足条件的值，就返回</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">seqSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 线性查找是逐一比对，发现有相同值，就返回下标</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[i] == value) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">找到，下标为=<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"2-二分查找\"><a class=\"markdownIt-Anchor\" href=\"#2-二分查找\">#</a> 2、二分查找</h1>\n<p><strong>优缺点：</strong><br>\n优点就是因为<strong>比较的次数大大减少索引效率很高</strong>，缺点就是要<strong>待查询的表必须为有序表</strong>，这就大大限制的所能操作的领域，并且只对查询效率有所优化，当修改和插入数据的时候这种效率就很低了。因为还有考虑修改或插入之后元素之间顺序的问题。</p>\n<p><strong>平均查找长度</strong>： (n+1/n)*(log2 (n+1))-1</p>\n<p><strong>时间复杂度</strong>： O (logN)</p>\n<p><strong>算法思路分析</strong>：<br>\n1、二分查找待查询的表为有序表<br>\n 2、设置一个左标记 left 初始值为 0，设置一个有标记 right 初始值为 length-1<br>\n3、确定该数组的中间下标：mid=(left+right)/2<br>\n4、让需要查找的数 findVal 和 arr [mid] 比较：</p>\n<ul>\n<li>findVal &gt; arr [mid]，说明要查找的数在 mid 的右边，因此递归向右查找</li>\n<li>findVal &lt;arr [mid]，说明你要查找的数在 mid 的左边，因此需要递归的向左查找</li>\n<li>findVal == arr [mid] 说明找到，就返回</li>\n</ul>\n<p>5、什么时候需要结束递归？</p>\n<ul>\n<li>找到要查询的数结束递归</li>\n<li>递归完整个数组，仍然没有找到 findVal，也需要结束递归 当 left&gt;right 就需要退出</li>\n</ul>\n<p>例：<strong>请对一个有序数组进行二分查找 {1,8, 10, 89, 1000, 1234} ，输入一个数看看该数组是否存在此数，并且求出下标，如果没有就提示 &quot;没有这个数&quot;</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> arr[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">89</span>,<span class=\"number\">1000</span>, <span class=\"number\">1234</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> resIndex = binarySearch(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( resIndex == -<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;没有找到该数&quot;</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;resIndex=&quot;</span> + resIndex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 二分查找算法</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">\t *            数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> left</span></span><br><span class=\"line\"><span class=\"comment\">\t *            左边的索引</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> right</span></span><br><span class=\"line\"><span class=\"comment\">\t *            右边的索引</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> findVal</span></span><br><span class=\"line\"><span class=\"comment\">\t *            要查找的值</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果找到就返回下标，如果没有找到，就返回 -1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> findVal)</span> </span>&#123;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 当 left &gt; right 时，说明递归整个数组，但是没有找到</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (left &gt; right) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> midVal = arr[mid];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (findVal &gt; midVal) &#123; <span class=\"comment\">// 向 右递归</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> binarySearch(arr, mid + <span class=\"number\">1</span>, right, findVal);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (findVal &lt; midVal) &#123; <span class=\"comment\">// 向左递归</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> binarySearch(arr, left, mid - <span class=\"number\">1</span>, findVal);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//找到findVal==midVal</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>思考</strong>： {1,8, 10, 89, 1000, 1000，1000，1234} 当一个有序数组中，有多个相同的数值时，如何将所有的数值索引都查找到，比如这里的 1000<br>\n<strong> 思路分析</strong>：</p>\n<ol>\n<li>在找到 mid 索引值，不要马上返回</li>\n<li>向 mid 索引值的左边扫描，将所有满足 1000， 的元素的下标，加入到集合 ArrayList</li>\n<li>将 mid 索引值本身加入到集合 ArrayList</li>\n<li>向 mid 索引值的右边扫描，将所有满足 1000， 的元素的下标，加入到集合 ArrayList</li>\n<li>将 Arraylist 返回</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"comment\">//注意：使用二分查找的前提是 该数组是有序的.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> arr[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">89</span>,<span class=\"number\">1000</span>,<span class=\"number\">1000</span>,<span class=\"number\">1000</span>, <span class=\"number\">1234</span> &#125;;</span><br><span class=\"line\">\t\tList&lt;Integer&gt; resIndexList = binarySearch(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;resIndexList=&quot;</span> + resIndexList);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Integer&gt; <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> findVal)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 当 left &gt; right 时，说明递归整个数组，但是没有找到</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (left &gt; right) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();<span class=\"comment\">//如果没找到返回空的ArrayList集合</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> midVal = arr[mid];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (findVal &gt; midVal) &#123; <span class=\"comment\">// 向 右递归</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> binarySearch(arr, mid + <span class=\"number\">1</span>, right, findVal);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (findVal &lt; midVal) &#123; <span class=\"comment\">// 向左递归</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> binarySearch(arr, left, mid - <span class=\"number\">1</span>, findVal);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tList&lt;Integer&gt; resIndexlist = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//向mid 索引值的左边扫描，将所有满足 1000， 的元素的下标，加入到集合ArrayList</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> temp = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (temp &lt; <span class=\"number\">0</span> || arr[temp] != findVal) &#123;<span class=\"comment\">//退出</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//否则，就temp 放入到 resIndexlist</span></span><br><span class=\"line\">\t\t\t\tresIndexlist.add(temp);</span><br><span class=\"line\">\t\t\t\ttemp -= <span class=\"number\">1</span>; <span class=\"comment\">//temp左移</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tresIndexlist.add(mid);  </span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//向mid 索引值的右边扫描，将所有满足 1000， 的元素的下标，加入到集合ArrayList</span></span><br><span class=\"line\">\t\t\ttemp = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (temp &gt; arr.length - <span class=\"number\">1</span> || arr[temp] != findVal) &#123;<span class=\"comment\">//退出</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//否则，就temp 放入到 resIndexlist</span></span><br><span class=\"line\">\t\t\t\tresIndexlist.add(temp);</span><br><span class=\"line\">\t\t\t\ttemp += <span class=\"number\">1</span>; <span class=\"comment\">//temp右移</span></span><br><span class=\"line\">\t\t\t&#125;\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resIndexlist;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resIndexList=[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-插值查找算法\"><a class=\"markdownIt-Anchor\" href=\"#3-插值查找算法\">#</a> 3、插值查找算法</h1>\n<p><strong>原理介绍</strong>：</p>\n<ol>\n<li>插值查找算法类似于二分查找（也要求数组有序），不同的是插值查找每次从自适应 mid 处开始查找</li>\n<li>将折半查找中的求 mid 索引的公式，low 表示左边索引 left, high 表示右边索引 right.\u000bkey 就是前面我们讲的  findVal<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200906183919988.png#pic_center\" alt=\"在这里插入图片描述\"></li>\n<li>即：<font color=red><strong>int mid = left + (right – left) * (findVal – arr[left]) / (arr[right] – arr[left])</strong></font></li>\n</ol>\n<p><strong>插值查找算法的举例说明</strong> ：<br>\n数组  arr = [1, 2, 3, …, 100]<br>\n 假如我们需要查找的值  1<br>\n 使用二分查找的话，我们需要多次递归，才能找到 1<br>\n 使用插值查找算法<br>\n int mid = left + (right – left) * (findVal – arr [left]) / (arr [right] – arr [left])<br>\nint mid = 0 + (99 - 0) * (1 - 1)/ (100 - 1) = 0 + 99 * 0 / 99 = 0<br>\n 比如我们查找的值 100<br>\nint mid = 0 + (99 - 0) * (100 - 1) / (100 - 1) = 0 + 99 * 99 / 99 = 0 + 99 = 99</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsertValueSearch</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> [] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tarr[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index =insertValueSearch(arr, <span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;index=&quot;</span>+index);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//编写插值查找算法</span></span><br><span class=\"line\">\t<span class=\"comment\">//说明：插值查找算法，也要求数组是有序的</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> arr 数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> left 左边索引</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> right 右边索引</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> findVal 查找值</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果找到，就返回对应的下标，如果没有找到，返回-1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">insertValueSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> findVal)</span> </span>&#123; \t</span><br><span class=\"line\">\t\t<span class=\"comment\">//注意：findVal &lt; arr[0]  和  findVal &gt; arr[arr.length - 1] 必须需要</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//否则我们得到的 mid 可能越界</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (left &gt; right || findVal &lt; arr[<span class=\"number\">0</span>] || findVal &gt; arr[arr.length - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 求出mid, 自适应</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = left + (right - left) * (findVal - arr[left]) / (arr[right] - arr[left]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> midVal = arr[mid];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (findVal &gt; midVal) &#123; <span class=\"comment\">// 说明应该向右边递归</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> insertValueSearch(arr, mid + <span class=\"number\">1</span>, right, findVal);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (findVal &lt; midVal) &#123; <span class=\"comment\">// 说明向左递归查找</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> insertValueSearch(arr, left, mid - <span class=\"number\">1</span>, findVal);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=<span class=\"number\">54</span></span><br></pre></td></tr></table></figure>\n<p><strong>插值查找注意事项</strong>：</p>\n<ul>\n<li>对于数据量较大，数组元素分布比较均匀的查找表来说，采用插值查找，速度较快.</li>\n<li>数组元素分布不均匀的情况下，该方法不一定比二分查找效果要好</li>\n</ul>\n<h1 id=\"4-斐波那契黄金分割法查找算法\"><a class=\"markdownIt-Anchor\" href=\"#4-斐波那契黄金分割法查找算法\">#</a> 4、斐波那契 (黄金分割法) 查找算法</h1>\n<p><strong>斐波那契 (黄金分割法) 查找基本介绍</strong>:<br>\n 黄金分割点是指<strong>把一条线段分割为两部分</strong>，使其中一部分与全长之比等于另一部分与这部分之比。取其前三位数字的近似值是 0.618。由于按此比例设计的造型十分美丽，因此称为黄金分割，也称为中外比。</p>\n<p><strong>斐波那契数列</strong>  如：{1, 1, 2, 3, 5, 8, 13, 21, 34, 55} 发现斐波那契数列的<strong>两个相邻数 的比例</strong>，无限接近 黄金分割值 0.618<br>\n（斐波那契数列的规律：<strong>f(k)=f(k - 1)+f(k - 2)</strong> )</p>\n<p><strong>斐波那契查找算法 (黄金分割法) 原理</strong>:<br>\n 斐波那契查找原理与前面的二分查找和插值查找相似（<strong>也要求数组有序</strong>），仅仅改变了中间结点（mid）的位置，<strong>mid 不再是中间或插值得到，而是位于黄金分割点附近</strong><br>\n即：<strong>mid=low+F(k-1)-1</strong>    （F 代表斐波那契数列）<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200907145642140.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>对 F (k-1)-1 的理解</strong>：</p>\n<ol>\n<li>由斐波那契数列 F [k]=F [k-1]+F [k-2] 的性质，可以得到 （F [k]-1）=（F [k-1]-1）+（F [k-2]-1）+1 。该式说明：只要顺序表的长度为 F [k]-1，则可以将该表分成长度为 F [k-1]-1 和 F [k-2]-1 的两段，即如上图所示。从而中间位置为 mid=low+F (k-1)-1</li>\n<li>同理，已经分割好的每一子段也可以用相同的方式分割（也就是递归分割）</li>\n<li>但<strong>顺序表长度 n 不一定刚好等于 F [k]-1</strong>，所以需要将原来的顺序表长度 n 增加至 F [k]-1。这里的 k 值只要能使得<strong> F [k]-1 恰好大于或等于 n 即可</strong>，由以下代码得到，顺序表长度增加后，新增的位置（从 n+1 到 F [k]-1 位置），都赋为 n 位置的值（即数组的最后一个值）即可。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(n&gt;fib(k)-<span class=\"number\">1</span>)</span><br><span class=\"line\">    k++;</span><br></pre></td></tr></table></figure>\n<p>斐波那契查找的核心是：</p>\n<ol>\n<li>当 **key=a [mid]** 时，查找成功；</li>\n<li>当 **key&lt;a [mid]** 时，新的查找范围是第 low 个到第 mid-1 个，此时范围个数为 F [k-1] - 1 个，即数组左边的长度，所以要在 [low, F [k - 1] - 1] 范围内查找；</li>\n<li>当 **key&gt;a [mid]** 时，新的查找范围是第 mid+1 个到第 high 个，此时范围个数为 F [k-2] - 1 个，即数组右边的长度，所以要在 [F [k - 2] - 1] 范围内查找<br>\n斐波那契查找应用案例：<br>\n请对一个有序数组进行斐波那契查找 {1,8, 10, 89, 1000, 1234} ，输入一个数看看该数组是否存在此数，并且求出下标，如果没有就提示 &quot;没有这个数&quot;。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FibonacciSearch</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> maxSize = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> [] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">89</span>, <span class=\"number\">1000</span>, <span class=\"number\">1234</span>&#125;;\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;index=&quot;</span> + fibSearch(arr, <span class=\"number\">1000</span>));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//因为后面我们mid=low+F(k-1)-1，需要使用到斐波那契数列，因此我们需要先获取到一个斐波那契数列</span></span><br><span class=\"line\">\t<span class=\"comment\">//非递归方法得到一个斐波那契数列</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] fib() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] f = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[maxSize];</span><br><span class=\"line\">\t\tf[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tf[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; maxSize; i++) &#123;</span><br><span class=\"line\">\t\t\tf[i] = f[i - <span class=\"number\">1</span>] + f[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> f;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//编写斐波那契查找算法</span></span><br><span class=\"line\">\t<span class=\"comment\">//使用非递归的方式编写算法</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> a  数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> key 我们需要查找的关键码(值)</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 返回对应的下标，如果没有-1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">fibSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> high = a.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; <span class=\"comment\">//表示斐波那契分割数值的下标</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = <span class=\"number\">0</span>; <span class=\"comment\">//存放mid值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> f[] = fib(); <span class=\"comment\">//获取到斐波那契数列</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//获取到斐波那契分割数值的下标</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(high &gt; f[k] - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tk++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//因为 f[k] 值 可能大于 a 的 长度，因此我们需要使用Arrays类，构造一个新的数组，并指向temp[]</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//不足的部分会使用0填充</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] temp = Arrays.copyOf(a, f[k]);</span><br><span class=\"line\">\t\t<span class=\"comment\">//举例：temp = &#123;1,8, 10, 89, 1000, 1234, 0, 0&#125;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//但是实际上需要使用a数组最后的数填充 temp</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//也就是  temp = &#123;1,8, 10, 89, 1000, 1234, 0, 0&#125;  =&gt; &#123;1,8, 10, 89, 1000, 1234, 1234, 1234,&#125;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = high + <span class=\"number\">1</span>; i &lt; temp.length; i++) &#123;</span><br><span class=\"line\">\t\t\ttemp[i] = a[high];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用while来循环处理，找到我们的数 key</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (low &lt;= high) &#123; <span class=\"comment\">// 只要这个条件满足，就可以找</span></span><br><span class=\"line\">\t\t\tmid = low + f[k - <span class=\"number\">1</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(key &lt; temp[mid]) &#123; <span class=\"comment\">//我们应该继续向数组的左边查找</span></span><br><span class=\"line\">\t\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//为什么是 k--</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//说明</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//1. 全部元素 = 前面的元素 + 后边元素</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//2. f[k] = f[k-1] + f[k-2]</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//因为 前面有 f[k-1]个元素,所以可以继续拆分 f[k-1] = f[k-2] + f[k-3]</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//即 在 f[k-1] 的前面继续查找 k=k-1</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//即下次循环 mid = f[k-1-1]-1</span></span><br><span class=\"line\">\t\t\t\tk=k-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( key &gt; temp[mid]) &#123; <span class=\"comment\">// 我们应该继续向数组的右边查找</span></span><br><span class=\"line\">\t\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//为什么是k=k-2</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//说明</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//1. 全部元素 = 前面的元素 + 后边元素</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//2. f[k] = f[k-1] + f[k-2]</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//3. 因为后面我们有f[k-2] 所以可以继续拆分 f[k-2] = f[k-3] + f[k-4]</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//4. 即在f[k-2] 的前面进行查找 k=k-2</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//5. 即下次循环 mid = f[k - 1 - 2] - 1</span></span><br><span class=\"line\">\t\t\t\tk=k-<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//需要确定，返回的是哪个下标</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(mid &lt;= high) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> high;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "线性查找",
                "二分查找",
                "插值查找",
                "斐波那契查找"
            ]
        },
        {
            "id": "http://yoursite.com/2020/09/06/%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/",
            "url": "http://yoursite.com/2020/09/06/%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/",
            "title": "算法（Java实现）-算法的时间复杂度和空间复杂度",
            "date_published": "2020-09-06T06:07:12.485Z",
            "content_html": "<h1 id=\"1-时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#1-时间复杂度\">#</a> 1、时间复杂度</h1>\n<h2 id=\"11度量一个程序算法执行时间的两种方法\"><a class=\"markdownIt-Anchor\" href=\"#11度量一个程序算法执行时间的两种方法\">#</a> 1.1 度量一个程序（算法）执行时间的两种方法</h2>\n<p><strong>事后统计的方法</strong></p>\n<p>这种方法可行，但是有两个问题：<br>\n一是要想对设计的算法的运行性能进行评测，需要实际运行该程序；<br>\n二是所得时间的统计量依赖于计算机的硬件、软件等环境因素，<strong>这种方式，要在同一台计算机的相同状态下运行，才能比较那个算法速度更快</strong>。</p>\n<ul>\n<li><strong>事前估计的方法</strong></li>\n</ul>\n<p>通过分析某个<strong>算法的时间复杂度</strong>来判断哪个算法更优。因事后统计方法更多的依赖于计算机的硬件、软件等环境因素，有时容易掩盖算法本身的优劣。<strong>因此人们常常采用事前分析估算的方法。</strong></p>\n<p>在编写程序前，依据统计方法对算法进行估算。一个用高级语言编写的程序在计算机上运行时所消耗的时间取决于下列因素：</p>\n<ol>\n<li>算法采用的策略、方法；</li>\n<li>编译产生的代码质量；</li>\n<li>问题的输入规模；</li>\n<li>机器执行指令的速度。<br>\n一个算法是由<strong>控制结构</strong>（顺序、分支和循环 3 种）和<strong>原操作</strong>（指固有数据类型的操作）构成的，则<strong>算法时间取决于两者的综合效果</strong>。为了便于比较同一个问题的不同算法，通常的做法是，从算法中选取一种对于所研究的问题（或算法类型）来说是基本操作的原操作，以该基本操作的<strong>重复执行的次数作为算法的时间量度</strong>。</li>\n</ol>\n<h2 id=\"12时间频度\"><a class=\"markdownIt-Anchor\" href=\"#12时间频度\">#</a> 1.2 时间频度</h2>\n<p><strong>时间频度</strong>：一个算法花费的时间与算法中语句的执行次数成正比例，<strong>哪个算法中语句执行次数多，它花费时间就多</strong>。<font color=red>一个算法中的语句执行次数</font>称为语句频度或<strong>时间频度</strong>。记为<strong> T (n)</strong>。<br>\n举例：<br>\n<strong>比如计算 1-100 所有数字之和，我们设计两种算法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> total=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> end=<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=end;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ttotal+=i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>T (n) = n+1；也就是要执行 101 次第 101 次也要判断一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total=（<span class=\"number\">1</span>+end）*end/<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>T (n)=1；也就是只需要执行一次</p>\n<p><strong>忽略常数项</strong>：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200903203501203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020090320350961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n观察图像分析：<br>\n2n+20 和 2n 随着 n 变大，执行曲线无限接近，20 可以忽略<br>\n 3n+10 和 3n 随着 n 变大，执行曲线无限接近，10 可以忽略<br>\n<strong>忽略低次项</strong>：<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200903204245124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200903204310327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n观察图像分析：<br>\n2n^2+3n+10 和 2n^2 随着 n 变大，执行曲线无限接近，可以忽略 3n+10<br>\nn^2+5n+20 和 n^2 随着 n 变大，执行曲线无限接近，可以忽略 5n+20<br>\n<strong> 忽略系数</strong>：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200903204444910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200903204453554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n观察图像分析：<br>\n随着 n 值变大，5n^2+7n 和 3n^2 + 2n ，执行曲线重合，说明  这种情况下，5 和 3 可以忽略。<br>\n而 n^3+5n 和 6n^3+4n  ，执行曲线分离，说明多少次方才是关键</p>\n<h2 id=\"13时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#13时间复杂度\">#</a> 1.3 时间复杂度</h2>\n<p>一般情况下，算法中的基本操作语句的重复执行次数是问题规模 n 的某个函数，用 T (n) 表示，若有某个辅助函数 f (n)，使得当 n 趋近于无穷大时，T (n) /f (n) 的极限值为不等于零的常数，则称 f (n) 是 T (n) 的同数量级函数。<strong>记作 T (n)=Ｏ( f (n) )，称Ｏ( f (n) )  为算法的渐进时间复杂度，简称时间复杂度</strong>。</p>\n<p><strong>T (n) 不同，但时间复杂度可能相同</strong>。<br>\n如：T (n)=n²+7n+6 与 T (n)=3n²+2n+2 它们的 T (n) 不同，但时间复杂度相同，都为 O (n²)。</p>\n<p><strong>计算时间复杂度的方法</strong>：<br>\n比如：计算 T (n)=3n²+2n+2 的时间复杂度</p>\n<ol>\n<li>用常数 1 代替运行时间中的所有加法常数：  T (n)=3n²+2n+2  =&gt; T (n)=3n²+2n+1</li>\n<li>修改后的运行次数函数中，只保留最高阶项  T (n)=3n²+2n+1 =&gt; T (n) = 3n²</li>\n<li>去除最高阶项的系数 T (n) = 3n² =&gt; T (n) = n² =&gt; <strong>O(n²)</strong></li>\n</ol>\n<h2 id=\"14常见的时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#14常见的时间复杂度\">#</a> 1.4 常见的时间复杂度</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200903211501685.png#\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200906102546620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n常见的算法时间复杂度由小到大依次为：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200903211622396.png#\" alt=\"在这里插入图片描述\"><br>\n随着问题规模 n 的不断增大，上述时间复杂度不断增大，算法的执行效率越低。从图中可见，<strong>我们应该尽可能避免使用指数阶的算法</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200903212308811.png#\" alt=\"在这里插入图片描述\"><br>\n无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是 O (1)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> j = <span class=\"number\">2</span>;</span><br><span class=\"line\">++i;</span><br><span class=\"line\">j++;</span><br><span class=\"line\"><span class=\"keyword\">int</span> m = i + j;</span><br></pre></td></tr></table></figure>\n<p>上述代码在执行的时候，它消耗的时候并不随着某个变量的增长而增长，那么无论这类代码有多长，即使有几万几十万行，都可以用 O (1) 来表示它的时间复杂度。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200906100358901.png#pic_cent\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i&lt;n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ti=i*<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：在 while 循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。假设循环 x 次之后，i 就大于 2 了，此时这个循环就退出了，也就是说 2 的 x 次方等于 n，那么 x = log2n 也就是说当循环 log2n 次以后，这个代码就结束了。因此这个代码的时间复杂度为：O (log2^n)  。 O (log2^n) 的这个 2 时间上是根据代码变化的，i = i * 3 ，则是 O (log3^n) .<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200906100705448.png#\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tj = i;</span><br><span class=\"line\">\tj++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：这段代码，for 循环里面的代码会执行 n 遍，因此它消耗的时间是随着 n 的变化而变化的，因此这类代码都可以用 O (n) 来表示它的时间复杂度<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200906102006267.png#pic\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(m=<span class=\"number\">1</span>;m&lt;n;m++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i&lt;n)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ti=i*<span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：线性<strong>对数阶 O (nlogN)</strong> 其实非常容易理解，将时间复杂度为 O (logn) 的代码循环 N 遍的话，那么它的时间复杂度就是 n * O (logN)，也就是了 O (nlogN)。比如上面的代码的时间复杂度就是 O (nlog2^ n) , 如果 i=i * 2 改为 i=i * 3 的话，时间复杂度就是 O (nlog3^ n)<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200906103400793.png#pic_cent\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(x=<span class=\"number\">1</span>; i&lt;=n; x++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tj = i;</span><br><span class=\"line\">\t\tj++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：平方阶 O (n²) 就更容易理解了，如果把 O (n) 的代码再嵌套循环一遍，它的时间复杂度就是 O (n²)，这段代码其实就是嵌套了 2 层 n 循环，它的时间复杂度就是 O (n<em>n)，即  O (n²) 如果将其中一层循环的 n 改成 m，那它的时间复杂度就变成了 O (m</em>n)<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020090613433984.png#pic_ce\" alt=\"在这里插入图片描述\"><br>\n O (n³) 相当于三层 n 循环<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200906134351820.png#pic_cent\" alt=\"在这里插入图片描述\"><br>\n O (n^k) 相当于 k 层循环</p>\n<h2 id=\"15平均时间复杂度和最坏时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#15平均时间复杂度和最坏时间复杂度\">#</a> 1.5 平均时间复杂度和最坏时间复杂度</h2>\n<ol>\n<li>平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间。</li>\n<li>最坏情况下的时间复杂度称最坏时间复杂度。一般讨论的时间复杂度均是最坏情况下的时间复杂度。这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的界限，这就保证了算法的运行时间不会比最坏情况更长。</li>\n<li>平均时间复杂度和最坏时间复杂度是否一致，和算法有关。</li>\n</ol>\n<p>比如下图为八大排序算法的时间复杂度：<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200906134845435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"2-算法的空间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#2-算法的空间复杂度\">#</a> 2、算法的空间复杂度</h1>\n<ul>\n<li>类似于时间复杂度的讨论，一个算法的空间复杂度 (Space Complexity) 定义为该算法所耗费的存储空间，它也是问题规模 n 的函数。</li>\n<li>空间复杂度 (Space Complexity) 是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数与解决问题的规模 n 有关，它随着 n 的增大而增大，当 n 较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况</li>\n<li>在做算法分析时，主要讨论的是时间复杂度。从用户使用体验上看，更看重的程序执行的速度。一些缓存产品 (redis,memcache) 和算法 (基数排序) 本质就是用空间换时间.</li>\n</ul>\n",
            "tags": [
                "算法",
                "时间复杂度",
                "空间复杂度"
            ]
        },
        {
            "id": "http://yoursite.com/2020/09/03/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%B3%9B%E5%9E%8B/",
            "url": "http://yoursite.com/2020/09/03/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%B3%9B%E5%9E%8B/",
            "title": "Java学习-详谈泛型",
            "date_published": "2020-09-03T05:14:58.270Z",
            "content_html": "<h1 id=\"泛型\"><a class=\"markdownIt-Anchor\" href=\"#泛型\">#</a> 泛型</h1>\n<h2 id=\"11泛型概述\"><a class=\"markdownIt-Anchor\" href=\"#11泛型概述\">#</a> 1.1 泛型概述</h2>\n<p><strong>泛型</strong>：即 <strong>参数化类型</strong> 。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？<br>\n<strong>参数化类型</strong>：就是<strong>将类型由原来的具体的类型参数化</strong>，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为<strong>类型形参</strong>），然后在<strong>使用 (调用) 时传入具体的类型（类型实参）</strong>。</p>\n<p>简而言之：（ <font color=red>泛型就是可以在类或方法中预支地使用未知的类型。一般在创建对象时，将未知的类型确定具体的类型。<strong>当没有指定泛型时，默认类型为 Object 类型</strong></font>）</p>\n<p><strong>泛型的本质</strong>：是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p>\n<p>在前面学习集合时，我们都知道集合中是可以存放任意对象的，只要把对象存储集合后，那么这时他们都会被提升成 Object 类型。当我们在取出每一个对象，并且进行相应的操作，这时必须采用类型转换。<br>\n<strong>观察下面代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tCollection coll = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">\t\tcoll.add(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">\t\tcoll.add(<span class=\"string\">&quot;itcast&quot;</span>);</span><br><span class=\"line\">\t\tcoll.add(<span class=\"number\">5</span>);<span class=\"comment\">//由于集合没有做任何限定，任何类型都可以给其中存放</span></span><br><span class=\"line\">\t\tIterator it = coll.iterator();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//需要打印每个字符串的长度,就要把迭代出来的对象转成String类型</span></span><br><span class=\"line\">\t\t\tString str = (String) it.next();</span><br><span class=\"line\">\t\t\tSystem.out.println(str.length());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果为：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200902160410661.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n程序在运行时发生了问题 <code>java.lang.ClassCastException</code> 。 为什么会发生<strong>类型转换异常</strong> 呢？ 我们来分析下：ArrayList 可以存放任意类型，例子中添加了 String 类型，又添加了 Integer 类型，再使用时都以 String 的方式使用，因此程序崩溃了。为了解决类似这样的问题（在编译阶段就可以解决），泛型应运而生。 Collection 虽然可以存储各种对象，但实际上通常 Collection 只存储同一类型对象。例如都是存储字符串对象。<strong>因此在 JDK5 之后，新增了泛型 (Generic) 语法，让你在设计 API 时可以指定类或方法支持泛型</strong>，这样我们使用 API 的时候也变得更为简洁，并得到了编译时期的语法检查。</p>\n<h2 id=\"12为什么要使用泛型\"><a class=\"markdownIt-Anchor\" href=\"#12为什么要使用泛型\">#</a> 1.2 为什么要使用泛型？</h2>\n<p>先看下面一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    \tList&lt;String&gt; stringArrayList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    \tList&lt;Integer&gt; integerArrayList = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">    \tClass classStringArrayList = stringArrayList.getClass();</span><br><span class=\"line\">    \tClass classIntegerArrayList = integerArrayList.getClass();</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(classStringArrayList.equals(classIntegerArrayList))</span><br><span class=\"line\">    \t&#123;</span><br><span class=\"line\">    \t    System.out.println(<span class=\"string\">&quot;泛型测试&quot;</span>+<span class=\"string\">&quot;类型相同&quot;</span>);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \tSystem.out.println(stringArrayList.getClass());</span><br><span class=\"line\">    \tSystem.out.println(integerArrayList.getClass());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">泛型测试类型相同</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">java</span>.<span class=\"title\">util</span>.<span class=\"title\">ArrayList</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">java</span>.<span class=\"title\">util</span>.<span class=\"title\">ArrayList</span></span></span><br></pre></td></tr></table></figure>\n<p>通过上面的例子可以证明，在编译之后程序会采取去泛型化的措施。也就是说 Java 中的泛型，只在<strong>编译阶段有效</strong>。<font color=blue><em>在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦除，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法</em>。</font>也就是说，<strong>泛型信息不会进入到运行时阶段</strong> ，很好地避免了类型强制转换的麻烦。<br>\n<strong>对此得出一个结论</strong>：<font color=red>泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。</font></p>\n<h2 id=\"13-泛型的定义与使用\"><a class=\"markdownIt-Anchor\" href=\"#13-泛型的定义与使用\">#</a> 1.3 泛型的定义与使用</h2>\n<p>泛型，用来灵活地将数据类型应用到不同的 <code>类、方法、接口</code> 当中。将数据类型作为参数进行传递。</p>\n<ul>\n<li><strong>定义和使用含有泛型的类</strong></li>\n</ul>\n<p>定义格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 <span class=\"class\"><span class=\"keyword\">class</span> 类名&lt;代表泛型的变量&gt; </span>&#123;  &#125;</span><br></pre></td></tr></table></figure>\n<p>例如，API 中的 ArrayList 集合：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>&#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123; &#125;</span><br><span class=\"line\">   \t....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用泛型： 即什么时候确定泛型？</strong><br>\n—— 在创建对象的时候确定泛型<br>\n例如： <code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</code> <br>\n 此时，变量 E 的值就是 String 类型，那么我们的类型就可以理解为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">String</span>&gt;</span>&#123; </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(String e)</span></span>&#123; &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;  &#125;</span><br><span class=\"line\">     ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再如： <code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</code> <br>\n 此时，变量 E 的值就是 Integer 类型，那么我们的类型就可以理解为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123; </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(Integer e)</span> </span>&#123; &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;  &#125;</span><br><span class=\"line\">     ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>举例自定义泛型类</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGenericClass</span>&lt;<span class=\"title\">MVP</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//没有MVP类型，在这里代表 未知的一种数据类型 未来传递什么就是什么类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> MVP mvp;   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMVP</span><span class=\"params\">(MVP mvp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mvp = mvp;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> MVP <span class=\"title\">getMVP</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mvp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericClassDemo</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;\t\t </span><br><span class=\"line\">         <span class=\"comment\">// 创建一个泛型为String的类</span></span><br><span class=\"line\">         MyGenericClass&lt;String&gt; my = <span class=\"keyword\">new</span> MyGenericClass&lt;String&gt;();    \t</span><br><span class=\"line\">         <span class=\"comment\">// 调用setMVP</span></span><br><span class=\"line\">         my.setMVP(<span class=\"string\">&quot;大胡子登登&quot;</span>);</span><br><span class=\"line\">         <span class=\"comment\">// 调用getMVP</span></span><br><span class=\"line\">         String mvp = my.getMVP();</span><br><span class=\"line\">         System.out.println(mvp);</span><br><span class=\"line\">         <span class=\"comment\">//创建一个泛型为Integer的类</span></span><br><span class=\"line\">         MyGenericClass&lt;Integer&gt; my2 = <span class=\"keyword\">new</span> MyGenericClass&lt;Integer&gt;(); </span><br><span class=\"line\">         my2.setMVP(<span class=\"number\">123</span>);   \t  </span><br><span class=\"line\">         Integer mvp2 = my2.getMVP();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>定义和使用含有泛型的方法</strong></li>\n</ul>\n<p><strong>定义格式：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数)&#123;  &#125;</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGenericMethod</span> </span>&#123;\t  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;MVP&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(MVP mvp)</span> </span>&#123;</span><br><span class=\"line\">    \tSystem.out.println(mvp.getClass());</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;MVP&gt; <span class=\"function\">MVP <span class=\"title\">show2</span><span class=\"params\">(MVP mvp)</span> </span>&#123;\t</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> mvp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用格式</strong>：调用方法时，确定泛型的类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericMethodDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建对象</span></span><br><span class=\"line\">        MyGenericMethod mm = <span class=\"keyword\">new</span> MyGenericMethod();</span><br><span class=\"line\">        <span class=\"comment\">// 演示看方法提示</span></span><br><span class=\"line\">        mm.show(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        mm.show(<span class=\"number\">123</span>);</span><br><span class=\"line\">        mm.show(<span class=\"number\">12.45</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">String</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">Integer</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">Double</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>定义和使用含有泛型的接口</li>\n</ul>\n<p><strong>定义格式</strong>： <code>修饰符 interface接口名&lt;代表泛型的变量&gt; &#123;  &#125;</code> <br>\n 例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyGenericInterface</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> E <span class=\"title\">getE</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用格式：<br>\n<strong>1、定义类时确定泛型的类型</strong><br>\n例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyImp1</span> <span class=\"keyword\">implements</span> <span class=\"title\">MyGenericInterface</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(String e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getE</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时，泛型 E 的值就是 String 类型<br>\n<strong> 2、始终不确定泛型的类型，直到创建对象时，确定泛型的类型</strong><br>\n例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyImp2</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">MyGenericInterface</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">       \t <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getE</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>确定泛型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyImp2&lt;String&gt;  my = <span class=\"keyword\">new</span> MyImp2&lt;String&gt;();  </span><br><span class=\"line\">        my.add(<span class=\"string\">&quot;aa&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>静态方法与泛型</strong><br>\n静态方法有一种情况需要注意一下，那就是在类中的静态方法使用泛型：静态方法无法访问类上定义的泛型；如果静态方法操作的引用数据类型不确定的时候，必须要将泛型定义在方法上。<br>\n即：如果静态方法要使用泛型的话，必须将静态方法也定义成泛型方法 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticGenerator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果在类中定义使用泛型的静态方法，需要添加额外的泛型声明（将这个方法定义成泛型方法）</span></span><br><span class=\"line\"><span class=\"comment\">     * 即使静态方法要使用泛型类中已经声明过的泛型也不可以。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如：public static void show(T t)&#123;..&#125;,此时编译器会提示错误信息：</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;StaticGenerator cannot be refrenced from static context&quot;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(T t)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"14泛型通配符\"><a class=\"markdownIt-Anchor\" href=\"#14泛型通配符\">#</a> 1.4 泛型通配符</h2>\n<p><strong>泛型通配符：</strong><br>\n当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符 &lt;?&gt; 表示。但是一旦使用泛型的通配符后，只能使用 Object 类中的共性方法，集合中元素自身方法无法使用。<br>\n<strong>通配符基本使用：</strong><br>\n泛型的通配符：不知道使用什么类型来接收的时候，此时可以使用？，？表示未知通配符。<br>\n(此时只能接受数据，不能往该集合中存储数据。)<br>\n 比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Collection&lt;Intger&gt; list1 = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">    getElement(list1);</span><br><span class=\"line\">    Collection&lt;String&gt; list2 = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    getElement(list2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getElement</span><span class=\"params\">(Collection&lt;?&gt; coll)</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//？代表可以接收任意类型</span></span><br></pre></td></tr></table></figure>\n<p>（泛型不存在继承关系 Collection (); 这种是错误的）</p>\n<p><strong>通配符高级使用 ---- 受限泛型</strong><br>\n之前设置泛型的时候，实际上是可以任意设置的，只要是类就可以设置。但是在 JAVA 的泛型中可以指定一个泛型的<strong>上限</strong> 和<strong>下限</strong>。</p>\n<p>泛型的上限：<br>\n格式：  <code>类型名称 &lt;? extends 类 &gt; 对象名称</code> <br>\n意义： 只能接收该类型及其子类</p>\n<p>泛型的下限：<br>\n格式：  <code>类型名称 &lt;? super 类 &gt; 对象名称</code> <br>\n意义： 只能接收该类型及其父类型</p>\n<p>比如：现已知 Object 类，String 类，Number 类，Integer 类，其中 Number 是 Integer 的父类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Collection&lt;Integer&gt; list1 = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">    Collection&lt;String&gt; list2 = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    Collection&lt;Number&gt; list3 = <span class=\"keyword\">new</span> ArrayList&lt;Number&gt;();</span><br><span class=\"line\">    Collection&lt;Object&gt; list4 = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();    </span><br><span class=\"line\">    getElement(list1);</span><br><span class=\"line\">    getElement(list2);<span class=\"comment\">//报错</span></span><br><span class=\"line\">    getElement(list3);</span><br><span class=\"line\">    getElement(list4);<span class=\"comment\">//报错</span></span><br><span class=\"line\">    getElement2(list1);<span class=\"comment\">//报错</span></span><br><span class=\"line\">    getElement2(list2);<span class=\"comment\">//报错</span></span><br><span class=\"line\">    getElement2(list3);</span><br><span class=\"line\">    getElement2(list4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 泛型的上限：此时的泛型?，必须是Number类型或者Number类型的子类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getElement1</span><span class=\"params\">(Collection&lt;? extends Number&gt; coll)</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 泛型的下限：此时的泛型?，必须是Number类型或者Number类型的父类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getElement2</span><span class=\"params\">(Collection&lt;? <span class=\"keyword\">super</span> Number&gt; coll)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "java",
                "泛型"
            ]
        },
        {
            "id": "http://yoursite.com/2020/09/03/Java%E5%AD%A6%E4%B9%A0-Collection%E9%9B%86%E5%90%88%E5%92%8CIterator%E8%BF%AD%E4%BB%A3%E5%99%A8/",
            "url": "http://yoursite.com/2020/09/03/Java%E5%AD%A6%E4%B9%A0-Collection%E9%9B%86%E5%90%88%E5%92%8CIterator%E8%BF%AD%E4%BB%A3%E5%99%A8/",
            "title": "Java学习-Collection集合和Iterator迭代器",
            "date_published": "2020-09-03T05:14:58.267Z",
            "content_html": "<h1 id=\"1-collection集合\"><a class=\"markdownIt-Anchor\" href=\"#1-collection集合\">#</a> 1、Collection 集合</h1>\n<h2 id=\"11集合概述\"><a class=\"markdownIt-Anchor\" href=\"#11集合概述\">#</a> 1.1 集合概述</h2>\n<ul>\n<li>集合：集合是 java 中提供的一种容器，可以用来存储多个数据。</li>\n</ul>\n<p><strong>集合和数组既然都是容器，它们有啥区别呢？</strong></p>\n<ul>\n<li>数组的长度是固定的。<strong>集合的长度是可变的。</strong></li>\n<li>数组中存储的是<strong>同一类型的元素</strong>，可以存储基本数据类型值。集合<strong>存储的都是对象</strong>。而且<strong>对象的类型可以不一致</strong>。在开发中一般当对象多的时候，使用集合进行存储。</li>\n</ul>\n<h2 id=\"12-集合框架\"><a class=\"markdownIt-Anchor\" href=\"#12-集合框架\">#</a> 1.2 集合框架</h2>\n<p>JAVASE 提供了满足各种需求的 API，在使用这些 API 前，先<strong>了解其继承与接口操作架构</strong>，才能了解何时采用哪个类，以及类之间如何彼此合作，从而达到灵活应用。<br>\n集合按照其存储结构可以分为两大类，分别是<strong>单列集合</strong>  <code>java.util.Collection</code>  和<strong>双列集合</strong> <code>java.util.Map</code></p>\n<p><strong>Collection：</strong> 单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是 <code>java.util.List</code>  和 <code>java.util.Set</code> 。其中，List 的特点是元素有序、元素可重复。Set 的特点是元素无序，而且不可重复。<strong>List 接口</strong>的主要实现类有 <code>java.util.ArrayList</code> 、 <code>java.util.LinkedList</code>  和 <code>java.util.Vector</code> ，<strong>Set 接口</strong>的主要实现类有 <code>java.util.HashSet</code>  和 <code>java.util.TreeSet</code> 。<br>\n从上面的描述可以看出 JDK 中提供了丰富的集合类库，为了便于初学者进行系统地学习，接下来通过一张图来描述整个集合类的继承体系。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200831161312724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200831161543196.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n集合本身是一个工具，它存放在 java.util 包中。在 Collection 接口定义着单列集合框架中最最共性的内容。</p>\n<h2 id=\"13-collection-常用功能\"><a class=\"markdownIt-Anchor\" href=\"#13-collection-常用功能\">#</a> 1.3 Collection 常用功能</h2>\n<p>Collection 是所有单列集合的父接口，因此在 Collection 中定义了单列集合 (List 和 Set) 通用的一些方法，这些方法可用于操作所有的单列集合。方法如下：</p>\n<ul>\n<li><code>public boolean add(E e)</code> ： 把给定的对象添加到当前集合中 。</li>\n<li><code>public void clear()</code>  : 清空集合中所有的元素。</li>\n<li><code>public boolean remove(E e)</code> : 把给定的对象在当前集合中删除。</li>\n<li><code>public boolean contains(E e)</code> : 判断当前集合中是否包含给定的对象。</li>\n<li><code>public boolean isEmpty()</code> : 判断当前集合是否为空。</li>\n<li><code>public int size()</code> : 返回集合中元素的个数。</li>\n<li><code>public Object[] toArray()</code> : 把集合中的元素，存储到数组中。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1Collection</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建集合对象 </span></span><br><span class=\"line\">    \t<span class=\"comment\">// 使用多态形式</span></span><br><span class=\"line\">    \tCollection&lt;String&gt; coll = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    \t<span class=\"comment\">// 使用方法</span></span><br><span class=\"line\">    \t<span class=\"comment\">// 添加功能  boolean  add(String s)</span></span><br><span class=\"line\">    \tcoll.add(<span class=\"string\">&quot;小李广&quot;</span>);</span><br><span class=\"line\">    \tcoll.add(<span class=\"string\">&quot;扫地僧&quot;</span>);</span><br><span class=\"line\">    \tcoll.add(<span class=\"string\">&quot;石破天&quot;</span>);</span><br><span class=\"line\">    \tSystem.out.println(coll);</span><br><span class=\"line\">    \t<span class=\"comment\">// boolean contains(E e) 判断o是否在集合中存在</span></span><br><span class=\"line\">    \tSystem.out.println(<span class=\"string\">&quot;判断  扫地僧 是否在集合中&quot;</span>+coll.contains(<span class=\"string\">&quot;扫地僧&quot;</span>));</span><br><span class=\"line\">    \t<span class=\"comment\">//boolean remove(E e) 删除在集合中的o元素</span></span><br><span class=\"line\">    \tSystem.out.println(<span class=\"string\">&quot;删除石破天：&quot;</span>+coll.remove(<span class=\"string\">&quot;石破天&quot;</span>));</span><br><span class=\"line\">    \tSystem.out.println(<span class=\"string\">&quot;操作之后集合中元素:&quot;</span>+coll);\t</span><br><span class=\"line\">    \t<span class=\"comment\">// size() 集合中有几个元素</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;集合中有&quot;</span>+coll.size()+<span class=\"string\">&quot;个元素&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// Object[] toArray()转换成一个Object数组</span></span><br><span class=\"line\">    \tObject[] objects = coll.toArray();</span><br><span class=\"line\">    \t<span class=\"comment\">// 遍历数组</span></span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(objects[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// void  clear() 清空集合</span></span><br><span class=\"line\">\t\tcoll.clear();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;集合中内容为：&quot;</span>+coll);</span><br><span class=\"line\">\t\t<span class=\"comment\">// boolean  isEmpty()  判断是否为空</span></span><br><span class=\"line\">\t\tSystem.out.println(coll.isEmpty());  \t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[小李广, 扫地僧, 石破天]</span><br><span class=\"line\">判断  扫地僧 是否在集合中<span class=\"keyword\">true</span></span><br><span class=\"line\">删除石破天：<span class=\"keyword\">true</span></span><br><span class=\"line\">操作之后集合中元素:[小李广, 扫地僧]</span><br><span class=\"line\">集合中有<span class=\"number\">2</span>个元素</span><br><span class=\"line\">小李广</span><br><span class=\"line\">扫地僧</span><br><span class=\"line\">集合中内容为：[]</span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"2-iterator迭代器\"><a class=\"markdownIt-Anchor\" href=\"#2-iterator迭代器\">#</a> 2、Iterator 迭代器</h1>\n<h2 id=\"21迭代器模式\"><a class=\"markdownIt-Anchor\" href=\"#21迭代器模式\">#</a> 2.1 迭代器模式</h2>\n<p>Java 集合框架的集合类，我们有时候称之为容器。容器的种类有很多种，比如 ArrayList、LinkedList、HashSet…，每种容器都有自己的特点，ArrayList 底层维护的是一个数组；LinkedList 是链表结构的；HashSet 依赖的是哈希表，<strong>每种容器都有自己特有的数据结构</strong>。<br>\n　　因为容器的内部结构不同，很多时候可能不知道该怎样去遍历一个容器中的元素。所以为了使对容器内元素的操作更为简单，Java 引入了<strong>迭代器模式！</strong></p>\n<p><strong>迭代器模式</strong>：<font color=red>提供一种方法对一个容器对象中的各个元素进行访问，而又不暴露该对象容器的内部细节。</font></p>\n<h2 id=\"22iterator迭代器\"><a class=\"markdownIt-Anchor\" href=\"#22iterator迭代器\">#</a> 2.2Iterator 迭代器</h2>\n<p>在程序开发中，经常需要遍历集合中的所有元素。针对这种需求，JDK 专门提供了一个接口 <code>java.util.Iterator</code> 。Iterator 接口也是 Java 集合中的一员，但它与 Collection、Map 接口有所不同，<strong>Collection 接口与 Map 接口主要用于存储元素</strong>，而 I<strong>terator 主要用于迭代访问</strong>（即遍历）Collection 中的元素，因此 Iterator 对象也被称为迭代器。<br>\n其接口定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.util;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;<span class=\"comment\">//判断是否存在下一个对象元素</span></span><br><span class=\"line\">    <span class=\"function\">E <span class=\"title\">next</span><span class=\"params\">()</span></span>;<span class=\"comment\">//获取下一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span></span>;<span class=\"comment\">//移除元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>获取迭代器的方法：</strong><br>\n <code>public Iterator iterator()</code> ： 获取集合对应的迭代器，用来遍历集合中的元素的。<br>\n<strong>下面介绍一下迭代的概念：</strong><br>\n迭代即 Collection 集合元素的通用获取方式。在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，继续在判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。<br>\n<strong>Iterator 接口的常用方法如下：</strong><br>\n <code>public E next()</code> ：返回迭代的下一个元素。<br>\n <code>public boolean hasNext()</code> ：如果仍有元素可以迭代，则返回 true。<br>\n <code>public void remove()</code> ：移除元素</p>\n<h2 id=\"23iterable\"><a class=\"markdownIt-Anchor\" href=\"#23iterable\">#</a> 2.3Iterable</h2>\n<p>Java 中还提供了一个 Iterable 接口，Iterable 接口实现后的功能是‘返回’一个迭代器，我们常用的实现了该接口的子接口有：Collection<E>、List<E>、Set<E>等。该接口的 iterator () 方法返回一个标准的 Iterator 实现。实现 Iterable 接口允许对象成为 foreach 语句的目标，就可以通过 foreach 语句来遍历你的底层序列。<br>\n<strong>Iterable 接口的具体实现:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Package java.lang;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Iterator&lt;T&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来我们通过案例学习如何使用 Iterator 迭代集合中元素：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IteratorDemo</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用多态方式 创建对象</span></span><br><span class=\"line\">        Collection&lt;String&gt; coll = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 添加元素到集合</span></span><br><span class=\"line\">        coll.add(<span class=\"string\">&quot;串串星人&quot;</span>);</span><br><span class=\"line\">        coll.add(<span class=\"string\">&quot;吐槽星人&quot;</span>);</span><br><span class=\"line\">        coll.add(<span class=\"string\">&quot;汪星人&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//遍历</span></span><br><span class=\"line\">        <span class=\"comment\">//使用迭代器 遍历   每个集合对象都有自己的迭代器</span></span><br><span class=\"line\">        Iterator&lt;String&gt; it = coll.iterator();</span><br><span class=\"line\">        <span class=\"comment\">//  泛型指的是 迭代出 元素的数据类型</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123; <span class=\"comment\">//判断是否有迭代元素</span></span><br><span class=\"line\">            String s = it.next();<span class=\"comment\">//获取迭代出的元素</span></span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">2</span>         List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"> <span class=\"number\">3</span>         list.add(<span class=\"string\">&quot;张三1&quot;</span>);</span><br><span class=\"line\"> <span class=\"number\">4</span>         list.add(<span class=\"string\">&quot;张三2&quot;</span>);</span><br><span class=\"line\"> <span class=\"number\">5</span>         list.add(<span class=\"string\">&quot;张三3&quot;</span>);</span><br><span class=\"line\"> <span class=\"number\">6</span>         list.add(<span class=\"string\">&quot;张三4&quot;</span>);</span><br><span class=\"line\"> <span class=\"number\">7</span>         </span><br><span class=\"line\"> <span class=\"number\">8</span>         List&lt;String&gt; linkList = <span class=\"keyword\">new</span> LinkedList&lt;String&gt;();</span><br><span class=\"line\"> <span class=\"number\">9</span>         linkList.add(<span class=\"string\">&quot;link1&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">10</span>         linkList.add(<span class=\"string\">&quot;link2&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">11</span>         linkList.add(<span class=\"string\">&quot;link3&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">12</span>         linkList.add(<span class=\"string\">&quot;link4&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">13</span>         </span><br><span class=\"line\"><span class=\"number\">14</span>         Set&lt;String&gt; set = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">15</span>         set.add(<span class=\"string\">&quot;set1&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">16</span>         set.add(<span class=\"string\">&quot;set2&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">17</span>         set.add(<span class=\"string\">&quot;set3&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">18</span>         set.add(<span class=\"string\">&quot;set4&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">19</span>         <span class=\"comment\">//使用迭代器遍历ArrayList集合</span></span><br><span class=\"line\"><span class=\"number\">20</span>         Iterator&lt;String&gt; listIt = list.iterator();</span><br><span class=\"line\"><span class=\"number\">21</span>         <span class=\"keyword\">while</span>(listIt.hasNext())&#123;</span><br><span class=\"line\"><span class=\"number\">22</span>             System.out.println(listIt.next());</span><br><span class=\"line\"><span class=\"number\">23</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">24</span>         <span class=\"comment\">//使用迭代器遍历Set集合</span></span><br><span class=\"line\"><span class=\"number\">25</span>         Iterator&lt;String&gt; setIt = set.iterator();</span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"keyword\">while</span>(setIt.hasNext())&#123;</span><br><span class=\"line\"><span class=\"number\">27</span>             System.out.println(listIt.next());</span><br><span class=\"line\"><span class=\"number\">28</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">29</span>         <span class=\"comment\">//使用迭代器遍历LinkedList集合</span></span><br><span class=\"line\"><span class=\"number\">30</span>         Iterator&lt;String&gt; linkIt = linkList.iterator();</span><br><span class=\"line\"><span class=\"number\">31</span>         <span class=\"keyword\">while</span>(linkIt.hasNext())&#123;</span><br><span class=\"line\"><span class=\"number\">32</span>             System.out.println(listIt.next());</span><br><span class=\"line\"><span class=\"number\">33</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">34</span> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"24for-each循环\"><a class=\"markdownIt-Anchor\" href=\"#24for-each循环\">#</a> 2.4for each 循环</h2>\n<p>增强 for 循环 (也称 for each 循环) 是 JDK1.5 以后出来的一个高级 for 循环，<strong>专门用来遍历数组和集合的</strong>。它的<strong>内部原理其实是个 Iterator 迭代器</strong>，所以<strong>在遍历的过程中，不能对集合中的元素进行增删操作。</strong><br>\n<strong>格式：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(元素的数据类型  变量 : Collection集合or数组)&#123; </span><br><span class=\"line\">  \t<span class=\"comment\">//写操作代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（<font color=red>它用于遍历 Collection 和数组。通常只进行遍历元素，不要在遍历的过程中对集合元素进行增删操作</font>）<br>\n<strong>练习 1：遍历数组</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NBForDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">87</span>&#125;;</span><br><span class=\"line\">       \t<span class=\"comment\">//使用增强for遍历数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a : arr)&#123;<span class=\"comment\">//a代表数组中的每个元素</span></span><br><span class=\"line\">\t\t\tSystem.out.println(a);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>练习 2: 遍历集合</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NBFor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;        </span><br><span class=\"line\">    \tCollection&lt;String&gt; coll = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    \tcoll.add(<span class=\"string\">&quot;小河神&quot;</span>);</span><br><span class=\"line\">    \tcoll.add(<span class=\"string\">&quot;老河神&quot;</span>);</span><br><span class=\"line\">    \tcoll.add(<span class=\"string\">&quot;神婆&quot;</span>);</span><br><span class=\"line\">    \t<span class=\"comment\">//使用增强for遍历</span></span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(String s :coll)&#123;<span class=\"comment\">//接收变量s代表 代表被遍历到的集合元素</span></span><br><span class=\"line\">    \t\tSystem.out.println(s);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "java",
                "Collection",
                "Iterator",
                "集合",
                "迭代器"
            ]
        },
        {
            "id": "http://yoursite.com/2020/09/03/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88List%E9%9B%86%E5%90%88%EF%BC%88ArrayList%E3%80%81LinkedList%E3%80%81Vector%E5%92%8CStack%EF%BC%89/",
            "url": "http://yoursite.com/2020/09/03/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88List%E9%9B%86%E5%90%88%EF%BC%88ArrayList%E3%80%81LinkedList%E3%80%81Vector%E5%92%8CStack%EF%BC%89/",
            "title": "Java学习-详谈List集合（ArrayList、LinkedList、Vector和Stack）",
            "date_published": "2020-09-03T05:14:52.685Z",
            "content_html": "<h1 id=\"1list接口介绍\"><a class=\"markdownIt-Anchor\" href=\"#1list接口介绍\">#</a> 1.List 接口介绍</h1>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020090219441391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n <code>java.util.List</code>  接口继承自 Collection 接口，是单列集合的一个重要分支，习惯性地会将实现了 List 接口的对象称为<strong> List 集合</strong>。<br>\n<strong>List 集合有以下特点：</strong></p>\n<ul>\n<li>在 List 集合中<strong>允许出现重复的元素</strong>（通过元素的 equals 方法来比较是否为重复的元素）</li>\n<li>所有的元素是以一种<strong>线性方式</strong>进行存储的</li>\n<li>它是一个带有<strong>索引的集合</strong>，在程序中可以通过索引来访问集合中的指定元素</li>\n<li>List 集合的<strong>元素有序</strong>，即元素的存入顺序和取出顺序一致</li>\n</ul>\n<h1 id=\"2list接口中常用的方法\"><a class=\"markdownIt-Anchor\" href=\"#2list接口中常用的方法\">#</a> 2.List 接口中常用的方法</h1>\n<p>List 作为 Collection 集合的子接口，不但<strong>继承了 Collection 接口中的全部方法</strong>，而且还增加了一些根据元素索引来操 作集合的特有方法，如下：</p>\n<ul>\n<li><code>public void add(int index, E element)</code>  : 将指定的元素，添加到该集合中的指定位置上。</li>\n<li><code>public E get(int index)</code>  : 返回集合中指定位置的元素。</li>\n<li><code>public E remove(int index)</code>  : 移除列表中指定位置的元素，返回的是被移除的元素。</li>\n<li><code>public E set(int index, E element)</code>  : 用指定元素替换集合中指定位置的元素，返回值的更新前的元素。</li>\n<li><code>public boolean  addAll(int index,Collection c)</code> ：将集合 c 所包含的所有元素都插入在 List 集合的 Index 处。</li>\n<li><code>public int  indexOf(Object o)</code> ：返回对象 o 在 List 集合中出现的位置索引。</li>\n<li><code>public int  lastIndexOf(Object o)</code> ：返回对象 o 在 List 集合中最后一次出现的位置索引。</li>\n<li><code>public List subList(int fromIndex,int toIndex)</code> ：返回从索引 fromIndex (包含) 到索引 toIndex (不包含) 处所有集合元素组成的子集合。</li>\n</ul>\n<h1 id=\"3arraylist集合\"><a class=\"markdownIt-Anchor\" href=\"#3arraylist集合\">#</a> 3.ArrayList 集合</h1>\n<h2 id=\"31引入对象数组\"><a class=\"markdownIt-Anchor\" href=\"#31引入对象数组\">#</a> 3.1 引入 —— 对象数组</h2>\n<p>下列代码，使用学生数组，存储三个学生对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age; </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; <span class=\"comment\">//创建学生数组 </span></span><br><span class=\"line\">\t\tStudent[] students = <span class=\"keyword\">new</span> Student[<span class=\"number\">3</span>]; </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建学生对象 </span></span><br><span class=\"line\">\t\tStudent s1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;曹操&quot;</span>,<span class=\"number\">40</span>); </span><br><span class=\"line\">\t\tStudent s2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;刘备&quot;</span>,<span class=\"number\">35</span>); </span><br><span class=\"line\">\t\tStudent s3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;孙权&quot;</span>,<span class=\"number\">30</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">//把学生对象作为元素赋值给学生数组 </span></span><br><span class=\"line\">\t\tstudents[<span class=\"number\">0</span>] = s1; </span><br><span class=\"line\">\t\tstudents[<span class=\"number\">1</span>] = s2; </span><br><span class=\"line\">\t\tstudents[<span class=\"number\">2</span>] = s3; </span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历学生数组 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;students.length; x++)</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tStudent s = students[x];</span><br><span class=\"line\">\t\t\tSystem.out.println(s.getName()+<span class=\"string\">&quot;‐‐‐&quot;</span>+s.getAge()); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们发现上述代码中存储对象数据，选择的容器是对象数组。而<strong>数组的长度是固定</strong>的，无法适应<strong>数据变化的需求</strong>。为了解决这个问题，Java 提供了另一个容器  <code>java.util.ArrayList</code>  集合类，让我们可以更便捷的存储和操作对 象数据。</p>\n<h2 id=\"32arraylist的简介\"><a class=\"markdownIt-Anchor\" href=\"#32arraylist的简介\">#</a> 3.2ArrayList 的简介</h2>\n<ul>\n<li>ArrayList 基于数组实现，是一个动态的数组队列。但是它和 Java 中的数组又不一样，它的<strong>容量可以自动增长</strong>，类似于 C 语言中动态申请内存，动态增长内存！</li>\n<li>ArrayList<strong> 继承</strong>了 <code>AbstractList</code> ，<strong>实现</strong>了 <code>RandomAccess</code> 、 <code>Cloneable</code>  和 <code>Serializable</code>  接口！</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>继承了 AbstractList， <code>AbstractList</code>  又<strong>继承</strong>了 <code>AbstractCollection</code> <strong> 实现</strong>了 <code>List</code>  接口，它是一个数组队列，提供了相关的<strong>添加、删除、修改、遍历</strong>等功能！</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCollection</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sole constructor.  (For invocation by subclass constructors, typically</span></span><br><span class=\"line\"><span class=\"comment\">     * implicit.)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">AbstractList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>实现了 <code>RandomAccess</code>  接口，提供了随机访问功能，实际上就是<strong>通过下标序号进行快速访问</strong>。</li>\n<li>实现了 <code>Cloneable</code>  接口，即覆盖了函数 clone ()，<strong>能被克隆</strong>。</li>\n<li>实现了 <code>Serializable</code>  接口，支持序列化，也就意味了 ArrayList<strong> 能够通过序列化传输</strong>。</li>\n</ul>\n<h2 id=\"33arraylist的使用\"><a class=\"markdownIt-Anchor\" href=\"#33arraylist的使用\">#</a> 3.3ArrayList 的使用</h2>\n<ul>\n<li><strong>查看类</strong>： <code>java.util.ArrayList &lt;E&gt;</code>  ：该类需要 import 导入使后使用。</li>\n</ul>\n<p><code>&lt;E&gt;</code>  ，表示一种指定的数据类型，叫做泛型。 E ，取自 Element（元素）的首字母。在出现 E 的地方，我们使用一种引用数据类型将其替换即可，表示我们将存储哪种引用类型的元素。比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt;，ArrayList&lt;Student&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>查看构造方法</strong>： <code>public ArrayList()</code>  构造一个内容为空的集合。</li>\n</ul>\n<p>基本格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure>\n<p>在 JDK 7 后，右侧泛型的尖括号之内可以留空，但是 &lt;&gt; 仍然要写。简化格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<h2 id=\"34arraylist的方法api\"><a class=\"markdownIt-Anchor\" href=\"#34arraylist的方法api\">#</a> 3.4ArrayList 的方法（API）</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Collection中定义的API</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">add</span><span class=\"params\">(E object)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; collection)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>                <span class=\"title\">clear</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">contains</span><span class=\"params\">(Object object)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">containsAll</span><span class=\"params\">(Collection&lt;?&gt; collection)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">equals</span><span class=\"params\">(Object object)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>                 <span class=\"title\">hashCode</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">Iterator&lt;E&gt;         <span class=\"title\">iterator</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">remove</span><span class=\"params\">(Object object)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">removeAll</span><span class=\"params\">(Collection&lt;?&gt; collection)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">retainAll</span><span class=\"params\">(Collection&lt;?&gt; collection)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>                 <span class=\"title\">size</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">&lt;T&gt; T[]             <span class=\"title\">toArray</span><span class=\"params\">(T[] array)</span></span></span><br><span class=\"line\"><span class=\"function\">Object[]            <span class=\"title\">toArray</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// AbstractCollection中定义的API</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>                <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> location, E object)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">addAll</span><span class=\"params\">(<span class=\"keyword\">int</span> location, Collection&lt;? extends E&gt; collection)</span></span></span><br><span class=\"line\"><span class=\"function\">E                   <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> location)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>                 <span class=\"title\">indexOf</span><span class=\"params\">(Object object)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>                 <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object object)</span></span></span><br><span class=\"line\"><span class=\"function\">ListIterator&lt;E&gt;     <span class=\"title\">listIterator</span><span class=\"params\">(<span class=\"keyword\">int</span> location)</span></span></span><br><span class=\"line\"><span class=\"function\">ListIterator&lt;E&gt;     <span class=\"title\">listIterator</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">E                   <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> location)</span></span></span><br><span class=\"line\"><span class=\"function\">E                   <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> location, E object)</span></span></span><br><span class=\"line\"><span class=\"function\">List&lt;E&gt;             <span class=\"title\">subList</span><span class=\"params\">(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// ArrayList新增的API</span></span></span><br><span class=\"line\"><span class=\"function\">Object               <span class=\"title\">clone</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>                 <span class=\"title\">ensureCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minimumCapacity)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>                 <span class=\"title\">trimToSize</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>                 <span class=\"title\">removeRange</span><span class=\"params\">(<span class=\"keyword\">int</span> fromIndex, <span class=\"keyword\">int</span> toIndex)</span></span></span><br></pre></td></tr></table></figure>\n<p>对于元素的操作，基本体现在 —— 增、删、查。常用的方法有：</p>\n<ul>\n<li><code>public boolean add(E e)</code>  ：将指定的元素添加到此集合的尾部。</li>\n<li><code>public E remove(int index)</code>  ：移除此集合中指定位置上的元素。返回被删除的元素。</li>\n<li><code>public E get(int index)</code>  ：返回此集合中指定位置上的元素。返回获取的元素。</li>\n<li><code>public int size()</code>  ：返回此集合中的元素数。遍历集合时，可以控制索引范围，防止越界。</li>\n</ul>\n<p>这些都是最基本的方法，操作非常简单，代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建集合对象 </span></span><br><span class=\"line\">\t\tArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//添加元素 </span></span><br><span class=\"line\">\t\tlist.add(<span class=\"string\">&quot;hello&quot;</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"string\">&quot;world&quot;</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"string\">&quot;java&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">//public E get(int index):返回指定索引处的元素 </span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;get:&quot;</span>+list.get(<span class=\"number\">0</span>)); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;get:&quot;</span>+list.get(<span class=\"number\">1</span>)); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;get:&quot;</span>+list.get(<span class=\"number\">2</span>)); </span><br><span class=\"line\">\t\t<span class=\"comment\">//public int size():返回集合中的元素的个数 </span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;size:&quot;</span>+list.size()); </span><br><span class=\"line\">\t\t<span class=\"comment\">//public E remove(int index):删除指定索引处的元素，返回被删除的元素 </span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;remove:&quot;</span>+list.remove(<span class=\"number\">0</span>)); </span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历输出 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++)</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(list.get(i)); </span><br><span class=\"line\">\t\t&#125; \t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get:hello</span><br><span class=\"line\">get:world</span><br><span class=\"line\">get:java</span><br><span class=\"line\">size:<span class=\"number\">3</span></span><br><span class=\"line\">remove:hello</span><br><span class=\"line\">world</span><br><span class=\"line\">java</span><br></pre></td></tr></table></figure>\n<h2 id=\"35-arraylist如何存储基本数据类型\"><a class=\"markdownIt-Anchor\" href=\"#35-arraylist如何存储基本数据类型\">#</a> 3.5 ArrayList 如何存储基本数据类型</h2>\n<p>ArrayList 对象<strong>不能存储基本类型</strong>，<strong>只能存储引用类型的数据</strong>。类似 <int> 不能写，但是存储基本数据类型<strong>对应的包装类型是可以的</strong>。所以，想要存储基本类型数据， <strong>&lt;&gt; 中的数据类型，必须转换后才能编写</strong>，转换写法如下：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200903101212592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;(); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">1</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">2</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">3</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">4</span>); </span><br><span class=\"line\">\t\tSystem.out.println(list); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"36-arraylist练习\"><a class=\"markdownIt-Anchor\" href=\"#36-arraylist练习\">#</a> 3.6 ArrayList 练习</h2>\n<p><strong>数值添加到集合</strong> ：生成 6 个 1~33 之间的随机整数，添加到集合，并遍历</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建Random 对象 </span></span><br><span class=\"line\">\t\tRandom random = <span class=\"keyword\">new</span> Random(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建ArrayList 对象 </span></span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加随机数到集合 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> r = random.nextInt(<span class=\"number\">33</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tlist.add(r); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历集合输出 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(list.get(i));</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">28</span></span><br><span class=\"line\"><span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">16</span></span><br></pre></td></tr></table></figure>\n<p><strong>对象添加到集合</strong>： 自定义 4 个学生对象，添加到集合，并遍历</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age; </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建集合对象 </span></span><br><span class=\"line\">\t\tArrayList&lt;Student&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Student&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建学生对象 </span></span><br><span class=\"line\">\t\tStudent s1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;赵丽颖&quot;</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">\t\tStudent s2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;唐嫣&quot;</span>,<span class=\"number\">20</span>); </span><br><span class=\"line\">\t\tStudent s3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;景甜&quot;</span>,<span class=\"number\">25</span>); </span><br><span class=\"line\">\t\tStudent s4 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;柳岩&quot;</span>,<span class=\"number\">19</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">//把学生对象作为元素添加到集合中</span></span><br><span class=\"line\">\t\tlist.add(s1); </span><br><span class=\"line\">\t\tlist.add(s2); </span><br><span class=\"line\">\t\tlist.add(s3); </span><br><span class=\"line\">\t\tlist.add(s4); </span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历集合</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; list.size(); x++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tStudent s = list.get(x); </span><br><span class=\"line\">\t\t\tSystem.out.println(s.getName()+<span class=\"string\">&quot;‐‐‐&quot;</span>+s.getAge()); </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">赵丽颖‐‐‐<span class=\"number\">18</span></span><br><span class=\"line\">唐嫣‐‐‐<span class=\"number\">20</span></span><br><span class=\"line\">景甜‐‐‐<span class=\"number\">25</span></span><br><span class=\"line\">柳岩‐‐‐<span class=\"number\">19</span></span><br></pre></td></tr></table></figure>\n<p><strong>打印集合方法</strong>： 定义以指定格式打印集合的方法 (ArrayList 类型作为参数)，使用 {} 扩起集合，使用 @分隔每个元素。格式参照 {元素 @元素 @元素}。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建集合对象 </span></span><br><span class=\"line\">\t\tArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加字符串到集合中</span></span><br><span class=\"line\">\t\tlist.add(<span class=\"string\">&quot;张三丰&quot;</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"string\">&quot;宋远桥&quot;</span>);</span><br><span class=\"line\">\t\tlist.add(<span class=\"string\">&quot;张无忌&quot;</span>); list.add(<span class=\"string\">&quot;殷梨亭&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">\t\tprintArrayList(list);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArrayList</span><span class=\"params\">(ArrayList&lt;String&gt; list)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 拼接左括号 </span></span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">&quot;&#123;&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历集合 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取元素 </span></span><br><span class=\"line\">\t\t\tString s = list.get(i); </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 拼接@符号 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i != list.size() - <span class=\"number\">1</span>) </span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\tSystem.out.print(s + <span class=\"string\">&quot;@&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 拼接右括号 </span></span><br><span class=\"line\">\t\t\t\tSystem.out.print(s + <span class=\"string\">&quot;&#125;&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;张三丰@宋远桥@张无忌@殷梨亭&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>获取集合方法</strong>： 定义获取所有偶数元素集合的方法 (ArrayList 类型作为返回值)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建Random 对象 </span></span><br><span class=\"line\">\t\tRandom random = <span class=\"keyword\">new</span> Random(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建ArrayList 对象 </span></span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加随机数到集合 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> r = random.nextInt(<span class=\"number\">1000</span>) + <span class=\"number\">1</span>; </span><br><span class=\"line\">\t\t\tlist.add(r); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用偶数集合的方法 </span></span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; arrayList = getArrayList(list); </span><br><span class=\"line\">\t\tSystem.out.println(arrayList); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayList&lt;Integer&gt; <span class=\"title\">getArrayList</span><span class=\"params\">(ArrayList&lt;Integer&gt; list)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建小集合,来保存偶数 </span></span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; smallList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历list </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取元素</span></span><br><span class=\"line\">\t\t\tInteger num = list.get(i); </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 判断为偶数,添加到小集合中 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (num % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\tsmallList.add(num);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 返回小集合 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> smallList;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">794</span>, <span class=\"number\">762</span>, <span class=\"number\">328</span>, <span class=\"number\">12</span>, <span class=\"number\">978</span>, <span class=\"number\">974</span>, <span class=\"number\">734</span>, <span class=\"number\">964</span>, <span class=\"number\">686</span>]</span><br></pre></td></tr></table></figure>\n<h1 id=\"4linkedlist集合\"><a class=\"markdownIt-Anchor\" href=\"#4linkedlist集合\">#</a> 4.LinkedList 集合</h1>\n<h2 id=\"41linklist简介\"><a class=\"markdownIt-Anchor\" href=\"#41linklist简介\">#</a> 4.1LinkList 简介</h2>\n<p><code>LinkedList</code>  是基于链表实现的，从源码可以看出<strong>是一个双向链表</strong>。除了<strong>当做链表</strong>使用外，它也可以被<strong>当作堆栈、队列或双端队列</strong>进行操作。<strong>不是线程安全的</strong>，<strong>继承</strong>  <code>AbstractSequentialList</code> <strong> 实现</strong>  <code>List</code> 、 <code>Deque</code> 、 <code>Cloneable</code> 、 <code>Serializable</code>  接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSequentialList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Deque</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>LinkedList 继承 <code>AbstractSequentialList</code> ，AbstractSequentialList 实现了 get (int index)、set (int index, E element)、add (int index, E element) 和 remove (int index) 这些函数，<strong>这些接口都是随机访问 List</strong> 的。</li>\n<li>LinkedList 实现  <code>List</code>  接口，<strong>能对它进行队列操作</strong>。</li>\n<li>LinkedList 实现  <code>Deque</code>  接口，即<strong>能将 LinkedList 当作双端队列使用</strong>。</li>\n<li>LinkedList 实现了 <code>Cloneable</code>  接口，即<strong>覆盖了函数 clone ()，能克隆</strong>。</li>\n<li>LinkedList 实现 <code>java.io.Serializable</code>  接口，这意味着 LinkedList<strong> 支持序列化，能通过序列化去传输</strong>。</li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200903105515631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"42linkedlist的常用方法\"><a class=\"markdownIt-Anchor\" href=\"#42linkedlist的常用方法\">#</a> 4.2LinkedList 的常用方法</h2>\n<p>实际开发中对一个集合元素的添加与删除经常涉及到<strong>首尾操作</strong>，而 LinkedList 提供了大量首尾操作的方法：</p>\n<ul>\n<li><code>public void addLast(E e)</code>  : 将指定元素添加到此列表的结尾。</li>\n<li><code>public E getFirst()</code>  : 返回此列表的第一个元素。</li>\n<li><code>public E getLast()</code>  : 返回此列表的最后一个元素。</li>\n<li><code>public E removeFirst()</code>  : 移除并返回此列表的第一个元素。</li>\n<li><code>public E removeLast()</code>  : 移除并返回此列表的最后一个元素。</li>\n<li><code>public E pop()</code>  : 从此列表所表示的堆栈处弹出一个元素。</li>\n<li><code>public void push(E e)</code>  : 将元素推入此列表所表示的堆栈。</li>\n<li><code>public boolean isEmpty()</code>  ：如果列表不包含元素，则返回 true。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\tLinkedList&lt;String&gt; link = <span class=\"keyword\">new</span> LinkedList&lt;String&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//添加元素 </span></span><br><span class=\"line\">\t\tlink.addFirst(<span class=\"string\">&quot;abc1&quot;</span>); </span><br><span class=\"line\">\t\tlink.addFirst(<span class=\"string\">&quot;abc2&quot;</span>); </span><br><span class=\"line\">\t\tlink.addFirst(<span class=\"string\">&quot;abc3&quot;</span>); </span><br><span class=\"line\">\t\tSystem.out.println(link); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取元素 </span></span><br><span class=\"line\">\t\tSystem.out.println(link.getFirst()); </span><br><span class=\"line\">\t\tSystem.out.println(link.getLast()); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 删除元素 </span></span><br><span class=\"line\">\t\tSystem.out.println(link.removeFirst()); </span><br><span class=\"line\">\t\tSystem.out.println(link.removeLast()); </span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (!link.isEmpty()) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//判断集合是否为空 </span></span><br><span class=\"line\">\t\t\tSystem.out.println(link.pop()); </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//弹出集合中的栈顶元素 &#125;</span></span><br><span class=\"line\">\t\t\tSystem.out.println(link); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[abc3, abc2, abc1]</span><br><span class=\"line\">abc3</span><br><span class=\"line\">abc1</span><br><span class=\"line\">abc3</span><br><span class=\"line\">abc1</span><br><span class=\"line\">abc2</span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure>\n<h1 id=\"5vector集合\"><a class=\"markdownIt-Anchor\" href=\"#5vector集合\">#</a> 5.Vector 集合</h1>\n<h2 id=\"51vector向量类的介绍\"><a class=\"markdownIt-Anchor\" href=\"#51vector向量类的介绍\">#</a> 5.1Vector（向量类）的介绍</h2>\n<p>Vector 类可以实现可增长的对象数组。<br>\n <code>java.util.vector</code>  提供了<strong>向量类 (Vector)</strong> 以实现类似动态数组的功能。与数组一样，它包含可以使用整数索引进行访问的组件。但是，Vector 的大小可以根据需要增大或缩小，以适应创建 Vector 后进行<strong>添加或移除</strong>项的操作。Vector <strong>是同步的</strong>，<strong>可用于多线程</strong>。<br>\n对于预先不知或者不愿预先定义数组大小，并且<strong>需要频繁地进行查找，插入，删除</strong>工作的情况，可以考虑使用向量类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Vector 继承了 <code>AbstractList</code> ，实现了 <code>List</code>  接口；所以，<strong>它是一个队列，支持相关的添加、删除、修改、遍历</strong>等功能。</li>\n<li>Vector 实现了 <code>RandmoAccess</code>  接口，即提供了随机访问功能。RandmoAccess 是 java 中用来被 List 实现，为 List 提供快速访问功能的。在 Vector 中，我们即<strong>可以通过元素的序号快速获取元素对象；这就是快速随机访问</strong>。</li>\n<li>Vector 实现了 <code>Cloneable</code>  接口，即<strong>实现 clone () 函数。它能被克隆</strong>。</li>\n<li>Vector 实现 <code>Serializable接</code> 口，<strong>支持序列化</strong>。</li>\n</ul>\n<h2 id=\"52vector的使用\"><a class=\"markdownIt-Anchor\" href=\"#52vector的使用\">#</a> 5.2Vector 的使用</h2>\n<p><strong>向量类提供了三种构造方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">vector</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">vector</span><span class=\"params\">(<span class=\"keyword\">int</span> initialcapacity,<span class=\"keyword\">int</span> capacityIncrement)</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">vector</span><span class=\"params\">(<span class=\"keyword\">int</span> initialcapacity)</span></span></span><br></pre></td></tr></table></figure>\n<p>使用第一种方法系统会自动对向量进行管理，若使用后两种方法，则系统将根据参数，initialcapacity 设定向量对象的容量（即向量对象可存储数据的大小），当真正存放的数据个数超过容量时。系统会扩充向量对象存储容量。<br>\n参数 capacityincrement 给定了每次扩充的扩充值。当 capacityincrement 为 0 的时候，则每次扩充一倍，利用这个功能可以优化存储。</p>\n<p><strong>Vector 类中提供了各种方法：</strong><br>\n<strong>插入功能：</strong></p>\n<ul>\n<li><code>public final synchronized void addElement(Object obj)</code>  ：将 obj 插入向量的尾部。obj 可以是任何类型的对象。对同一个向量对象，亦可以在其中插入不同类的对象。但插入的应是对象而不是数值，所以插入数值时要注意将数组转换成相应的对象。</li>\n</ul>\n<p>例如：要插入整数 1 时，不要直接调用 v1.addElement (1), 正确的方法为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector v1 = <span class=\"keyword\">new</span> Vector(); </span><br><span class=\"line\">Integer integer1 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">1</span>); </span><br><span class=\"line\">v1.addElement(integer1); </span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>public final synchronized void setElementAt(Object obj,int index)</code>  ：将 index 处的对象设置成 obj，原来的对象将被覆盖。</li>\n<li><code>public final synchronized void insertElementAt(Object obj,int index)</code>  ：在 index 指定的位置插入 obj，原来对象以及此后的对象依次往后顺延。</li>\n</ul>\n<p><strong>查询搜索功能：</strong></p>\n<ul>\n<li><code>public final int indexOf(Object obj)</code>  ：从向量头开始搜索 obj, 返回所遇到的第一个 obj 对应的下标，若不存在此 obj, 返回 - 1.</li>\n<li><code>public final synchronized int indexOf(Object obj,int index)</code>  ：从 index 所表示的下标处开始搜索 obj.</li>\n<li><code>public final int lastindexOf(Object obj)</code>  ：从向量尾部开始逆向搜索 obj.</li>\n<li><code>public final synchornized int lastIndex(Object obj,int index)</code>  ：从 index 所表示的下标处由尾至头逆向搜索 obj.</li>\n<li><code>public final synchornized firstElement()</code>  ：获取向量对象中的首个 obj</li>\n<li><code>public final synchornized Object lastElement()</code>  ：获取向量对象的最后一个 obj</li>\n</ul>\n<p><strong>其他功能:</strong></p>\n<ul>\n<li><code>public final int size()</code> ： 此方法用于获取向量元素的个数。它们返回值是向量中实际存在的元素个数，而非向量容量。可以调用方法 capacity () 来获取容量值。</li>\n<li><code>public final synchronized void setSize(int newsize)</code> ： 此方法用来定义向量的大小，若向量对象现有成员个数已经超过了 newsize 的值，则超过部分的多余元素会丢失。</li>\n</ul>\n<p>程序中定义<strong> Enumeration 类</strong>的一个对象 Enumeration 是 java.util 中的一个接口类</p>\n<ul>\n<li><code>public final synchronized Enumeration elements()</code> ： 此方法将向量对象对应到一个枚举类型。java.util 包中的其他类中也都有这类方法，以便于用户获取对应的枚举类型。</li>\n</ul>\n<p>在 <code>Enumeration</code>  中封装了<strong>有关枚举数据集合</strong>的方法。</p>\n<ul>\n<li>方法 hasMoreElement () 来判断集合中是否还有其他元素。</li>\n<li>方法 nextElement () 来获取下一个元素</li>\n</ul>\n<p>以下代码就是用 hasMoreElement（）和 nextElement（）遍历 Vector 查询搜索功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Enumeration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Vector;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestVector</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Vector&lt;String&gt; hs = <span class=\"keyword\">new</span> Vector&lt;String&gt;();</span><br><span class=\"line\">        hs.add(<span class=\"string\">&quot;aa&quot;</span>);</span><br><span class=\"line\">        hs.add(<span class=\"string\">&quot;bb&quot;</span>);</span><br><span class=\"line\">        hs.add(<span class=\"string\">&quot;aa&quot;</span>);</span><br><span class=\"line\">        hs.add(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\">        hs.add(<span class=\"string\">&quot;aa&quot;</span>);</span><br><span class=\"line\">        hs.add(<span class=\"string\">&quot;dd&quot;</span>);</span><br><span class=\"line\">        printSet2(hs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printSet</span><span class=\"params\">(List hs)</span> </span>&#123;</span><br><span class=\"line\">        Iterator iterator = hs.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printSet2</span><span class=\"params\">(Vector&lt;String&gt; hs)</span> </span>&#123;</span><br><span class=\"line\">        Enumeration&lt;String&gt; elements = hs.elements();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (elements.hasMoreElements()) &#123;</span><br><span class=\"line\">            System.out.println(elements.nextElement());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> TestVector().test01();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aa</span><br><span class=\"line\">bb</span><br><span class=\"line\">aa</span><br><span class=\"line\">cc</span><br><span class=\"line\">aa</span><br><span class=\"line\">dd</span><br></pre></td></tr></table></figure>\n<h1 id=\"6stack\"><a class=\"markdownIt-Anchor\" href=\"#6stack\">#</a> 6.Stack</h1>\n<h2 id=\"61stack介绍\"><a class=\"markdownIt-Anchor\" href=\"#61stack介绍\">#</a> 6.1Stack 介绍</h2>\n<p><strong>Stack 类</strong>表示<strong>后进先出（LIFO）的对象堆栈</strong>。<strong>继承自 Vector</strong>，它通过五个操作对类 Vector 进行了扩展 ，允许将向量视为堆栈。它提供了通常的 push 和 pop 操作，以及取堆栈顶点的 peek 方法、测试堆栈是否为空的 empty 方法、在堆栈中查找项并确定到堆栈顶距离的 search 方法。<br>\n因为它继承自 Vector, 那么它的实现原理是<strong>以数组实现堆栈</strong>的。<br>\n如果要<strong>以链表方式实现堆栈可以使用 LinkedList</strong>！<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200903120056925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.Object</span><br><span class=\"line\">  继承者 java.util.AbstractCollection&lt;E&gt;</span><br><span class=\"line\">      继承者 java.util.AbstractList&lt;E&gt;</span><br><span class=\"line\">          继承者 java.util.Vector&lt;E&gt;</span><br><span class=\"line\">              继承者 java.util.Stack&lt;E&gt;</span><br><span class=\"line\">所有已实现的接口：</span><br><span class=\"line\">Serializable, Cloneable, Iterable&lt;E&gt;, Collection&lt;E&gt;, List&lt;E&gt;, RandomAccess</span><br></pre></td></tr></table></figure>\n<p>并且从类 java.util.Vector 继承的字段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">capacityIncrement, elementCount, elementData </span><br></pre></td></tr></table></figure>\n<p>从类 java.util.AbstractList 继承的字段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modCount</span><br></pre></td></tr></table></figure>\n<h2 id=\"62stack的方法和使用\"><a class=\"markdownIt-Anchor\" href=\"#62stack的方法和使用\">#</a> 6.2Stack 的方法和使用</h2>\n<p>Stack 只有下面四个方法！由于 Stack 继承了 Vector ，它<strong>也有 Vector 的 API 方法</strong></p>\n<ul>\n<li><code>push( num)</code>  ：入栈</li>\n<li><code>pop()</code>  ：栈顶元素出栈</li>\n<li><code>empty()</code>  ：判定栈是否为空</li>\n<li><code>peek()</code>  ：获取栈顶元素</li>\n<li><code>search(num)</code>  ：判端元素 num 是否在栈中，如果在返回 1，不在返回 - 1</li>\n</ul>\n<p>（<strong>注意 pop () 和 peek () 的区别。pop () 会弹出栈顶元素并返回栈顶的值，peek () 只是获取栈顶的值，但是并不会把元素从栈顶弹出来</strong>）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\tStack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">\t\tstack.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tSystem.out.println(stack.search(<span class=\"number\">2</span>));  <span class=\"comment\">//2在栈中，返回1</span></span><br><span class=\"line\">\t\tSystem.out.println(stack.search(<span class=\"number\">0</span>));  <span class=\"comment\">//0不在栈中，返回-1</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(stack.empty());   <span class=\"comment\">//栈不为空，返回false</span></span><br><span class=\"line\">\t\tSystem.out.println(stack.peek());   <span class=\"comment\">//读取栈顶元素，返回2</span></span><br><span class=\"line\">\t\tSystem.out.println(stack.empty());   <span class=\"comment\">//栈不为空，返回false</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(stack.pop());   <span class=\"comment\">//弹出栈顶元素，并返回栈顶元素2</span></span><br><span class=\"line\">\t\tSystem.out.println(stack.empty());   <span class=\"comment\">//栈空，返回true\t\t</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">-<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"7list集合总结\"><a class=\"markdownIt-Anchor\" href=\"#7list集合总结\">#</a> 7.List 集合总结</h1>\n<h2 id=\"71总结概述\"><a class=\"markdownIt-Anchor\" href=\"#71总结概述\">#</a> 7.1 总结概述</h2>\n<p>1、List 继承了 Collection，是有序的列表。<br>\n2、实现类有 ArrayList、LinkedList、Vector、Stack 等</p>\n<ul>\n<li>ArrayList 是基于数组实现的，是一个数组队列。可以动态的增加容量！</li>\n<li>LinkedList 是基于链表实现的，是一个双向循环列表。可以被当做堆栈使用！</li>\n<li>Vector 是基于数组实现的，是一个矢量队列，是线程安全的！</li>\n<li>Stack 是基于数组实现的，是栈，它继承与 Vector，特性是 FILO（先进后出）！</li>\n</ul>\n<h2 id=\"72使用场景\"><a class=\"markdownIt-Anchor\" href=\"#72使用场景\">#</a> 7.2 使用场景</h2>\n<p><strong>在实际的应用中如果使用到队列，栈，链表，首先可以想到使用 List</strong>。不同的场景下面使用不同的工具，效率才能更高！</p>\n<ol>\n<li>当集合中对插入元素数据的速度要求不高，但是要求快速访问元素数据，则使用 ArrayList！</li>\n<li>当集合中对访问元素数据速度不做要求不高，但是对插入和删除元素数据速度要求高的情况，则使用 LinkedList！</li>\n<li>当集合中有多线程对集合元素进行操作时候，则使用 Vector！但是现在 BVector 现在一般不再使用，如需在多线程下使用，可以用 CopyOnWriteArrayList，在 java.util.concurrent 包下。</li>\n<li>当集合中有需求是希望后保存的数据先读取出来，则使用 Stack！</li>\n</ol>\n<h2 id=\"73性能测试\"><a class=\"markdownIt-Anchor\" href=\"#73性能测试\">#</a> 7.3 性能测试</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 性能测试，通过插入、随机读取和删除对ArrayList、LinkedList、Vector和Stack进行测试！</span></span><br><span class=\"line\"><span class=\"comment\"> * 结论：看LinkedList</span></span><br><span class=\"line\"><span class=\"comment\"> *  插入10万个元素，LinkedList所花时间最短：17 ms。</span></span><br><span class=\"line\"><span class=\"comment\"> *  删除10万个元素，LinkedList所花时间最短： 9 ms。</span></span><br><span class=\"line\"><span class=\"comment\"> *  遍历10万个元素，LinkedList所花时间最长：10255 ms；而ArrayList、Stack和Vector则相差不多，都只用了几秒。</span></span><br><span class=\"line\"><span class=\"comment\"> *  (1) 对于需要快速插入，删除元素，应该使用LinkedList。</span></span><br><span class=\"line\"><span class=\"comment\"> *  (2) 对于需要快速随机访问元素，应该使用ArrayList。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> COUNT = <span class=\"number\">100000</span>; <span class=\"comment\">//十万</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ArrayList&lt;Object&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LinkedList&lt;Object&gt; linkedList = <span class=\"keyword\">new</span> LinkedList&lt;Object&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;Object&gt; vector = <span class=\"keyword\">new</span> Vector&lt;Object&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Stack&lt;Object&gt; stack = <span class=\"keyword\">new</span> Stack&lt;Object&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;....开始测试插入元素..........&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 插入元素测试</span></span><br><span class=\"line\">        insertData(arrayList,<span class=\"string\">&quot;ArrayList&quot;</span>) ;</span><br><span class=\"line\">        insertData(linkedList,<span class=\"string\">&quot;LinkedList&quot;</span>) ;</span><br><span class=\"line\">        insertData(vector,<span class=\"string\">&quot;Vector&quot;</span>) ;</span><br><span class=\"line\">        insertData(stack,<span class=\"string\">&quot;Stack&quot;</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;....开始测试读取元素..........&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 随机读取元素测试</span></span><br><span class=\"line\">        readAccessData(arrayList,<span class=\"string\">&quot;ArrayList&quot;</span>) ;</span><br><span class=\"line\">        readAccessData(linkedList,<span class=\"string\">&quot;LinkedList&quot;</span>) ;</span><br><span class=\"line\">        readAccessData(vector,<span class=\"string\">&quot;Vector&quot;</span>) ;</span><br><span class=\"line\">        readAccessData(stack,<span class=\"string\">&quot;Stack&quot;</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;....开始测试删除元素..........&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 随机读取元素测试</span></span><br><span class=\"line\">        deleteData(arrayList,<span class=\"string\">&quot;ArrayList&quot;</span>) ;</span><br><span class=\"line\">        deleteData(linkedList,<span class=\"string\">&quot;LinkedList&quot;</span>) ;</span><br><span class=\"line\">        deleteData(vector,<span class=\"string\">&quot;Vector&quot;</span>) ;</span><br><span class=\"line\">        deleteData(stack,<span class=\"string\">&quot;Stack&quot;</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定的List 的子类中插入元素，并统计插入的时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> list List 的子类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name 子类的名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertData</span><span class=\"params\">(List&lt;Object&gt; list,String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 向list的位置0插入COUNT个数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;COUNT; i++)&#123;</span><br><span class=\"line\">            list.add(<span class=\"number\">0</span>, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> endTime = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> interval = endTime - startTime;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot; : 插入 &quot;</span>+COUNT+<span class=\"string\">&quot;元素， 使用的时间是 &quot;</span> + interval+<span class=\"string\">&quot; ms&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定的List 的子类中删除元素，并统计删除的时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> list List 的子类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name 子类的名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteData</span><span class=\"params\">(List&lt;Object&gt; list,String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 删除list第一个位置元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;COUNT; i++)</span><br><span class=\"line\">            list.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> endTime = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> interval = endTime - startTime;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot; : 删除 &quot;</span>+COUNT+<span class=\"string\">&quot;元素， 使用的时间是 &quot;</span> + interval+<span class=\"string\">&quot; ms&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定的List 的子类中读取元素，并统计读取的时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> list List 的子类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name 子类的名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">readAccessData</span><span class=\"params\">(List&lt;Object&gt; list,String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 读取list元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; COUNT; i++)</span><br><span class=\"line\">            list.get(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> endTime = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> interval = endTime - startTime;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot; : 随机读取 &quot;</span>+COUNT+<span class=\"string\">&quot;元素， 使用的时间是 &quot;</span> + interval+<span class=\"string\">&quot; ms&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....开始测试插入元素..........</span><br><span class=\"line\">ArrayList : 插入 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">970</span> ms</span><br><span class=\"line\">LinkedList : 插入 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">17</span> ms</span><br><span class=\"line\">Vector : 插入 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">968</span> ms</span><br><span class=\"line\">Stack : 插入 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">888</span> ms</span><br><span class=\"line\">....开始测试读取元素..........</span><br><span class=\"line\">ArrayList : 随机读取 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">6</span> ms</span><br><span class=\"line\">LinkedList : 随机读取 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">10255</span> ms</span><br><span class=\"line\">Vector : 随机读取 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">8</span> ms</span><br><span class=\"line\">Stack : 随机读取 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">4</span> ms</span><br><span class=\"line\">....开始测试删除元素..........</span><br><span class=\"line\">ArrayList : 删除 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">1460</span> ms</span><br><span class=\"line\">LinkedList : 删除 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">9</span> ms</span><br><span class=\"line\">Vector : 删除 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">1472</span> ms</span><br><span class=\"line\">Stack : 删除 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">894</span> ms</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "java",
                "List",
                "ArrayList",
                "LinkedList",
                "Vector",
                "Stack"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/30/Java%E5%AD%A6%E4%B9%A0-Random%E7%B1%BB%E5%92%8CMath%E7%B1%BB/",
            "url": "http://yoursite.com/2020/08/30/Java%E5%AD%A6%E4%B9%A0-Random%E7%B1%BB%E5%92%8CMath%E7%B1%BB/",
            "title": "Java学习-Random类和Math类",
            "date_published": "2020-08-30T12:42:34.844Z",
            "content_html": "<h1 id=\"random类\"><a class=\"markdownIt-Anchor\" href=\"#random类\">#</a> Random 类</h1>\n<h2 id=\"1-什么是random类\"><a class=\"markdownIt-Anchor\" href=\"#1-什么是random类\">#</a> 1 、什么是 Random 类</h2>\n<p>此类的实例用于生成伪随机数<br>\n Random 类中实现的随机算法是<strong>伪随机</strong>，也就是<strong>有规则</strong>的随机。在进行随机时，随机算法的起源数字称为<strong>种子数 (seed)</strong>，在种子数的基础上进行一定的变换，从而产生需要的随机数字。相同种子数的 Random 对象，<strong>相同次数生成的随机数字是完全相同的</strong>。也就是说，<font color=red><strong>两个种子数相同的 Random 对象，第一次生成的随机数字完全相同，第 N 次生成的随机数字也完全相同</strong></font>。这点在生成多个随机数字时需要特别注意。</p>\n<p>（注意：<strong>种子数只是随机算法的起源数字，和生成的随机数字的区间无关</strong>）</p>\n<h2 id=\"2-random类的使用步骤\"><a class=\"markdownIt-Anchor\" href=\"#2-random类的使用步骤\">#</a> 2、Random 类的使用步骤</h2>\n<p><strong>查看类：</strong></p>\n<ul>\n<li><code>java.util.Random</code>  ：该类需要 import 导入使后使用。</li>\n</ul>\n<p><strong>查看构造方法</strong></p>\n<ul>\n<li><code>public Random()</code>  ：创建一个新的随机数生成器。</li>\n<li><code>public Random(long seed)</code> ：该构造方法可以通过制定一个种子数进行创建。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random r = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">Random r1 = <span class=\"keyword\">new</span> Random(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>查看成员方法</strong><br>\n Random 类中的方法比较简单，每个方法的功能也很容易理解。需要说明的是，Random 类中各方法生成的随机数字都是均匀分布的，也就是说区间内部的数字生成的几率是均等的</p>\n<ul>\n<li>\n<p><code>public int nextInt()</code>  ：返回一个伪随机数，范围在 0 （包括）和 指定值 n （不包括）之间的 int 值。</p>\n</li>\n<li>\n<p><code>public boolean nextBoolean()</code> ：该方法的作用是生成一个随机的 boolean 值，生成 true 和 false 的值几率相等，也就是都是 50% 的几率。</p>\n</li>\n<li>\n<p><code>public double nextDouble()</code> ：该方法的作用是生成一个随机的 double 值，数值介于 [0,1.0) 之间。</p>\n</li>\n<li>\n<p><code>public int nextInt()</code> ：该方法的作用是生成一个随机的 int 值，该值介于 int 的区间，也就是 - 2^31 到 2^31-1 之间。</p>\n</li>\n<li>\n<p><code>public int nextInt(int n)</code> ：生成指定区间的 int 值，该方法的作用是生成一个随机的 int 值，该值介于 [0,n) 的区间，也就是<strong> 0 到 n 之间的随机 int 值，包含 0 而不包含 n</strong>。</p>\n</li>\n<li>\n<p><code>public void setSeed(long seed)</code> ：该方法的作用是重新设置 Random 对象中的种子数。设置完种子数以后的 Random 对象和相同种子数使用 new 关键字创建出的 Random 对象相同。</p>\n</li>\n</ul>\n<h2 id=\"3-具体应用\"><a class=\"markdownIt-Anchor\" href=\"#3-具体应用\">#</a> 3、具体应用</h2>\n<p>使用 Random 类，完成生成 3 个 10 以内的随机整数的操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 创建键盘录入数据的对象 </span></span><br><span class=\"line\">\t\tRandom r = <span class=\"keyword\">new</span> Random(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//3. 随机生成一个数据</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> number = r.nextInt(<span class=\"number\">10</span>); </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//4. 输出数据 </span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;number:&quot;</span>+ number); </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; \t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取 1-n 之间的随机数，<strong>包含 n</strong>，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 导包 </span></span><br><span class=\"line\"> <span class=\"keyword\">import</span> java.util.Random; </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123; </span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t <span class=\"keyword\">int</span> n = <span class=\"number\">50</span>; </span><br><span class=\"line\">\t\t <span class=\"comment\">// 创建对象 </span></span><br><span class=\"line\">\t\t Random r = <span class=\"keyword\">new</span> Random(); </span><br><span class=\"line\">\t\t <span class=\"comment\">// 获取随机数 </span></span><br><span class=\"line\">\t\t <span class=\"keyword\">int</span> number = r.nextInt(n) + <span class=\"number\">1</span>; </span><br><span class=\"line\">\t\t <span class=\"comment\">// 输出随机数 </span></span><br><span class=\"line\">\t\t System.out.println(<span class=\"string\">&quot;number:&quot;</span> + number); </span><br><span class=\"line\">\t\t &#125; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>猜数字游戏：</strong> 游戏开始时，会随机生成一个 1-100 之间的整数 number 。玩家猜测一个数字 guessNumber ，会与 number 作比 较，系统提示大了或者小了，直到玩家猜中，游戏结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 系统产生一个随机数1‐100之间的。 </span></span><br><span class=\"line\">\t\tRandom r = <span class=\"keyword\">new</span> Random(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> number = r.nextInt(<span class=\"number\">100</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 键盘录入我们要猜的数据 </span></span><br><span class=\"line\">\t\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in); </span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入你要猜的数字(1‐100)：&quot;</span>); </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> guessNumber = sc.nextInt(); </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 比较这两个数据(用if语句) </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (guessNumber &gt; number) </span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;你猜的数据&quot;</span> + guessNumber + <span class=\"string\">&quot;大了&quot;</span>); </span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (guessNumber &lt; number) </span><br><span class=\"line\">\t\t\t&#123; System.out.println(<span class=\"string\">&quot;你猜的数据&quot;</span> + guessNumber + <span class=\"string\">&quot;小了&quot;</span>); </span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;恭喜你,猜中了&quot;</span>); </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>; </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"math类\"><a class=\"markdownIt-Anchor\" href=\"#math类\">#</a> Math 类</h1>\n<h2 id=\"1-概述\"><a class=\"markdownIt-Anchor\" href=\"#1-概述\">#</a> 1、概述</h2>\n<p><code>java.lang.Math</code>  类包含用于<strong>执行基本数学运算</strong>的方法，如初等指数、对数、平方根和三角函数。类似这样的工具 类，其<strong>所有方法均为静态方法</strong>，并且<strong>不会创建对象</strong>，调用起来非常简单。</p>\n<h2 id=\"2-常用运算方法\"><a class=\"markdownIt-Anchor\" href=\"#2-常用运算方法\">#</a> 2、常用运算方法</h2>\n<ul>\n<li><code>Math.sqrt()</code> ：计算平方根</li>\n<li><code>Math.cbrt()</code> ：计算立方根</li>\n<li><code>Math.hypot(x,y)</code> ：计算 (x 的平方 + y 的平方)<strong> 的平方根</strong></li>\n<li><code>Math.pow(a,b)</code> ：计算 a 的 b 次方</li>\n<li><code>Math.exp(x)</code> ：计算 e^x 的值</li>\n<li><code>Math.max()</code> ：计算最大值 Math.min ();// 计算最小值</li>\n<li><code>Math.abs()</code> ：返回 double 值的绝对值。</li>\n<li><code>Math.ceil()</code> ：天花板的意思，返回大于等于参数的最小的整数</li>\n<li><code>Math.floor()</code> ：地板的意思，返回小于等于参数最大的整数</li>\n<li><code>Math.random()</code> ： 取得一个大于或者等于 0.0 小于不等于 1.0 的随机数 [0,1)</li>\n<li><code>Math.rint()</code> ： 四舍五入 返回 double 值</li>\n<li><code>Math.round()</code> ： 四舍五入 float 时返回 int 值，double 时返回 long 值</li>\n<li><code>Math.nextUp(a)</code> ： 返回比 a 大一点点的浮点数</li>\n<li><code>Math.nextDown(a)</code> ： 返回比 a 小一点点的浮点数</li>\n<li><code>Math.nextAfter(a,b)</code> ：返回 (a,b) 或 (b,a) 间与 a 相邻的浮点数 b 可以比 a 小</li>\n</ul>\n",
            "tags": [
                "java",
                "类",
                "Random类",
                "Math类"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/30/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88String%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/",
            "url": "http://yoursite.com/2020/08/30/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88String%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/",
            "title": "Java学习-详谈String类及其常用方法",
            "date_published": "2020-08-30T11:47:25.663Z",
            "content_html": "<h1 id=\"1-string类\"><a class=\"markdownIt-Anchor\" href=\"#1-string类\">#</a> 1、String 类</h1>\n<h2 id=\"11string类的概述\"><a class=\"markdownIt-Anchor\" href=\"#11string类的概述\">#</a> 1.1String 类的概述</h2>\n<p><code>java.lang.String</code>  类代表<strong>字符串</strong>。Java 程序中所有的字符串文字（例如 “abc” ）都可以被看作是实现此类的实例。类 String 中包括用于检查各个字符串的方法，比如用于<strong>比较字符串</strong>，<strong>搜索字符串</strong>，<strong>提取子字符串</strong>以及<strong>创建具有翻 译为大写或小写的所有字符的字符串的副本</strong><br>\n<strong>特点：</strong></p>\n<ol>\n<li>字符串不变：字符串的值在创建后不能被更改。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"string\">&quot;abc&quot;</span>; s1 += <span class=\"string\">&quot;d&quot;</span>; </span><br><span class=\"line\">System.out.println(s1); <span class=\"comment\">// &quot;abcd&quot; </span></span><br><span class=\"line\"><span class=\"comment\">// 内存中有&quot;abc&quot;，&quot;abcd&quot;两个对象，s1从指向&quot;abc&quot;，改变指向，指向了&quot;abcd&quot;。</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>因为 String 对象是不可变的，所以它们<strong>可以被共享</strong>。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"string\">&quot;abc&quot;</span>; </span><br><span class=\"line\">String s2 = <span class=\"string\">&quot;abc&quot;</span>; </span><br><span class=\"line\"><span class=\"comment\">// 内存中只有一个&quot;abc&quot;对象被创建，同时被s1和s2共享。</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><code>&quot;abc&quot;</code>  等效于  <code>char[] data=&#123; 'a' , 'b' , 'c' &#125;</code>  。（<strong>String 底层是靠字符数组实现的。</strong>）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如： </span><br><span class=\"line\">String str = <span class=\"string\">&quot;abc&quot;</span>; </span><br><span class=\"line\">相当于： </span><br><span class=\"line\"><span class=\"keyword\">char</span> data[] = &#123;<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>&#125;; </span><br><span class=\"line\">String str = <span class=\"keyword\">new</span> String(data); </span><br><span class=\"line\"><span class=\"comment\">// String底层是靠字符数组实现的。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"12-使用步骤\"><a class=\"markdownIt-Anchor\" href=\"#12-使用步骤\">#</a> 1.2 使用步骤</h2>\n<ul>\n<li><strong>查看类：</strong>  <code>java.lang.String</code>  ：此类不需要导入。</li>\n<li><strong>查看构造方法：</strong><br>\n <code>public String()</code>  ：初始化新创建的 String 对象，以使其表示空字符序列。<br>\n <code>public String(char[] value)</code>  ：通过当前参数中的字符数组来构造新的 String。<br>\n <code>public String(byte[] bytes)</code>  ：通过使用平台的默认字符集解码当前参数中的字节数组来构造新的 String。<br>\n<strong>构造举例，代码如下：</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无参构造 </span></span><br><span class=\"line\">String str = <span class=\"keyword\">new</span> String（）； </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过字符数组构造 </span></span><br><span class=\"line\"><span class=\"keyword\">char</span> chars[] = &#123;<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>&#125;; </span><br><span class=\"line\">String str2 = <span class=\"keyword\">new</span> String(chars); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过字节数组构造 </span></span><br><span class=\"line\"><span class=\"keyword\">byte</span> bytes[] = &#123; <span class=\"number\">97</span>, <span class=\"number\">98</span>, <span class=\"number\">99</span> &#125;;</span><br><span class=\"line\">String str3 = <span class=\"keyword\">new</span> String(bytes);</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-常用方法\"><a class=\"markdownIt-Anchor\" href=\"#13-常用方法\">#</a> 1.3 常用方法</h2>\n<ul>\n<li><code>public boolean equals (Object anObject)</code>  ：将此字符串与指定对象进行比较。（String 类中已经对 equals 方法进行了重写所以比较的是对象的内容不是地址）</li>\n<li><code>public boolean equalsIgnoreCase (String anotherString)</code>  ：将此字符串与指定对象进行比较，忽略大小 写</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">// 创建字符串对象 </span></span><br><span class=\"line\">\tString s1 = <span class=\"string\">&quot;hello&quot;</span>; </span><br><span class=\"line\">\tString s2 = <span class=\"string\">&quot;hello&quot;</span>; </span><br><span class=\"line\">\tString s3 = <span class=\"string\">&quot;HELLO&quot;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// boolean equals(Object obj):比较字符串的内容是否相同 </span></span><br><span class=\"line\">\tSystem.out.println(s1.equals(s2)); <span class=\"comment\">// true </span></span><br><span class=\"line\">\tSystem.out.println(s1.equals(s3)); <span class=\"comment\">// false </span></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t<span class=\"comment\">//boolean equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写 </span></span><br><span class=\"line\">\tSystem.out.println(s1.equalsIgnoreCase(s2)); <span class=\"comment\">// true </span></span><br><span class=\"line\">\tSystem.out.println(s1.equalsIgnoreCase(s3)); <span class=\"comment\">// true </span></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>获取功能的方法</strong>：</p>\n<ul>\n<li><code>public int length ()</code>  ：返回此字符串的长度。</li>\n<li><code>public String concat (String str)</code>  ：将指定的字符串连接到该字符串的末尾。</li>\n<li><code>public char charAt (int index)</code>  ：获取指定索引处的 char 值。</li>\n<li><code>public int indexOf (String str)</code>  ：获取指定子字符串第一次出现在该字符串内的索引。</li>\n<li><code>public String substring (int beginIndex)</code>  ：获取一个子字符串，从 beginIndex 开始截取字符串到字符串结尾。</li>\n<li><code>public String substring (int beginIndex, int endIndex)</code>  ：获取一个子字符串，从 beginIndex 到 endIndex 截取字符串。含 beginIndex，不含 endIndex。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建字符串对象 </span></span><br><span class=\"line\">\t\tString s = <span class=\"string\">&quot;helloworld&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// int length():获取字符串的长度，其实也就是字符个数 </span></span><br><span class=\"line\">\t\tSystem.out.println(s.length()); <span class=\"comment\">//10</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">// String concat (String str):将将指定的字符串连接到该字符串的末尾. </span></span><br><span class=\"line\">\t\tString s2 = s.concat(<span class=\"string\">&quot;**hello itheima&quot;</span>);<span class=\"comment\">//helloworld**hello itheima</span></span><br><span class=\"line\">\t\tSystem.out.println(s2);<span class=\"comment\">// helloworld**hello itheima </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// char charAt(int index):获取指定索引处的字符 </span></span><br><span class=\"line\">\t\tSystem.out.println(s.charAt(<span class=\"number\">0</span>)); <span class=\"comment\">//h</span></span><br><span class=\"line\">\t\tSystem.out.println(s.charAt(<span class=\"number\">1</span>)); <span class=\"comment\">//e</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">// int indexOf(String str):获取str在字符串对象中第一次出现的索引,没有返回‐1 </span></span><br><span class=\"line\">\t\tSystem.out.println(s.indexOf(<span class=\"string\">&quot;l&quot;</span>)); <span class=\"comment\">//2</span></span><br><span class=\"line\">\t\tSystem.out.println(s.indexOf(<span class=\"string\">&quot;owo&quot;</span>));<span class=\"comment\">//4 </span></span><br><span class=\"line\">\t\tSystem.out.println(s.indexOf(<span class=\"string\">&quot;ak&quot;</span>)); <span class=\"comment\">//-1</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">// String substring(int start):从start开始截取字符串到字符串结尾 </span></span><br><span class=\"line\">\t\tSystem.out.println(s.substring(<span class=\"number\">0</span>)); <span class=\"comment\">//helloworld</span></span><br><span class=\"line\">\t\tSystem.out.println(s.substring(<span class=\"number\">5</span>)); <span class=\"comment\">//world</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">// String substring(int start,int end):从start到end截取字符串。含start，不含end。 </span></span><br><span class=\"line\">\t\tSystem.out.println(s.substring(<span class=\"number\">0</span>, s.length())); <span class=\"comment\">//helloworld</span></span><br><span class=\"line\">\t\tSystem.out.println(s.substring(<span class=\"number\">3</span>,<span class=\"number\">8</span>)); <span class=\"comment\">//lowor</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>转换功能的方法</strong></p>\n<ul>\n<li><code>public char[] toCharArray ()</code>  ：将此字符串转换为新的字符数组。</li>\n<li><code>public byte[] getBytes ()</code>  ：使用平台的默认字符集将该 String 编码转换为新的字节数组。</li>\n<li><code>public String replace (CharSequence target, CharSequence replacement)</code>  ：将与 target 匹配的字符串使 用 replacement 字符串替换。<strong>CharSequence 是一个接口，也是一种引用类型。作为参数类型，可以把 String 对象传递到方法中</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建字符串对象 </span></span><br><span class=\"line\">\t\tString s = <span class=\"string\">&quot;abcde&quot;</span>; </span><br><span class=\"line\">\t\t<span class=\"comment\">// char[] toCharArray():把字符串转换为字符数组 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] chs = s.toCharArray(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; chs.length; x++) &#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(chs[x]); </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">// byte[] getBytes ():把字符串转换为字节数组 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytes = s.getBytes(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; bytes.length; x++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(bytes[x]); </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 替换字母it为大写IT</span></span><br><span class=\"line\">\t\tString str = <span class=\"string\">&quot;itcast itheima&quot;</span>; </span><br><span class=\"line\">\t\tString replace = str.replace(<span class=\"string\">&quot;it&quot;</span>, <span class=\"string\">&quot;IT&quot;</span>); </span><br><span class=\"line\">\t\tSystem.out.println(replace); <span class=\"comment\">// ITcast ITheima </span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>分割功能的方法</strong></p>\n<ul>\n<li><code>public String[] split(String regex)</code>  ：将此字符串按照给定的 regex（规则）拆分为字符串数组。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建字符串对象 </span></span><br><span class=\"line\">\t\tString s = <span class=\"string\">&quot;aa|bb|cc&quot;</span>;</span><br><span class=\"line\">\t\tString[] strArray = s.split(<span class=\"string\">&quot;|&quot;</span>); <span class=\"comment\">// [&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;] </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; strArray.length; x++)</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(strArray[x]); <span class=\"comment\">// aa bb cc &#125; &#125;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-string类的练习\"><a class=\"markdownIt-Anchor\" href=\"#14-string类的练习\">#</a> 1.4 String 类的练习</h2>\n<p><strong>拼接字符串</strong><br>\n定义一个方法，把数组 {1,2,3} 按照指定个格式拼接成一个字符串。格式参照如下：[1#2#3]。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//定义一个int类型的数组 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;; </span><br><span class=\"line\">\t<span class=\"comment\">//调用方法 </span></span><br><span class=\"line\">\tString s = arrayToString(arr); </span><br><span class=\"line\">\t<span class=\"comment\">//输出结果 </span></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;s:&quot;</span> + s); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *  写方法实现把数组中的元素按照指定的格式拼接成一个字符串 </span></span><br><span class=\"line\"><span class=\"comment\"> *  两个明确：</span></span><br><span class=\"line\"><span class=\"comment\"> *  返回值类型：String </span></span><br><span class=\"line\"><span class=\"comment\"> *  参数列表：int[] arr </span></span><br><span class=\"line\"><span class=\"comment\"> */</span> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">arrayToString</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">// 创建字符串s</span></span><br><span class=\"line\">\tString s = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;[&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 遍历数组，并拼接字符串 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; arr.length; x++) &#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == arr.length -<span class=\"number\">1</span>) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ts = s.concat(arr[x] + <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123; s = s.concat(arr[x] + <span class=\"string\">&quot;#&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>统计字符个数</strong><br>\n键盘录入一个字符，统计字符串中大小写字母及数字字符个数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//键盘录入一个字符串数据 </span></span><br><span class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;请输入一个字符串数据：&quot;</span>); </span><br><span class=\"line\">\t\tString s = sc.nextLine(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//定义三个统计变量，初始化值都是0 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> bigCount = <span class=\"number\">0</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> smallCount = <span class=\"number\">0</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> numberCount = <span class=\"number\">0</span>; </span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历字符串，得到每一个字符 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;s.length(); x++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> ch = s.charAt(x); </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//拿字符进行判断 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(ch&gt;=<span class=\"string\">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;Z&#x27;</span>) </span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\tbigCount++; </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ch&gt;=<span class=\"string\">&#x27;a&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;z&#x27;</span>) </span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\tsmallCount++; </span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>) </span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\tnumberCount++; </span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;该字符&quot;</span>+ch+<span class=\"string\">&quot;非法&quot;</span>); </span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t&#125;<span class=\"comment\">//输出结果 </span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;大写字符：&quot;</span>+bigCount+<span class=\"string\">&quot;个&quot;</span>); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;小写字符：&quot;</span>+smallCount+<span class=\"string\">&quot;个&quot;</span>); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;数字字符：&quot;</span>+numberCount+<span class=\"string\">&quot;个&quot;</span>); </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请输入一个字符串数据：</span><br><span class=\"line\">xGSHDsdas</span><br><span class=\"line\">大写字符：<span class=\"number\">4</span>个</span><br><span class=\"line\">小写字符：<span class=\"number\">5</span>个</span><br><span class=\"line\">数字字符：<span class=\"number\">0</span>个</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "java",
                "字符串",
                "String"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/30/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%95%B0%E7%BB%84Array%E5%92%8C%E6%95%B0%E7%BB%84%E5%B7%A5%E5%85%B7%E7%B1%BBArrays/",
            "url": "http://yoursite.com/2020/08/30/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%95%B0%E7%BB%84Array%E5%92%8C%E6%95%B0%E7%BB%84%E5%B7%A5%E5%85%B7%E7%B1%BBArrays/",
            "title": "Java学习-详谈数组Array和数组工具类Arrays",
            "date_published": "2020-08-30T09:27:06.176Z",
            "content_html": "<h1 id=\"1-数组的定义和访问\"><a class=\"markdownIt-Anchor\" href=\"#1-数组的定义和访问\">#</a> 1、数组的定义和访问</h1>\n<h2 id=\"11容器概述\"><a class=\"markdownIt-Anchor\" href=\"#11容器概述\">#</a> 1.1 容器概述</h2>\n<p><strong>案例分析：</strong> 现在需要统计某公司员工的工资情况，例如计算平均工资、找到最高工资等。假设该公司有 50 名员工，用前面所学 的知识，程序首先需要声明 50 个变量来分别记住每位员工的工资，然后在进行操作，这样做会显得很麻烦，而且错 误率也会很高。因此我们可以使用容器进行操作。将所有的数据全部存储到一个容器中，统一操作。</p>\n<p><strong>容器的概念：</strong> 容器是将多个数据存储到一起，每个数据称为该容器的元素。</p>\n<h2 id=\"12数组的概念\"><a class=\"markdownIt-Anchor\" href=\"#12数组的概念\">#</a> 1.2 数组的概念</h2>\n<p><strong>数组概念：</strong>  数组就是存储数据长度固定的容器，保证多个数据的数据类型要一致。<br>\n（<font color=red>其实所谓的数组指的就是一组相关类型的变量集合，并且这些变量可以按照统一的方式进行操作。数组本身属于<strong>引用数据类型</strong></font>）</p>\n<h2 id=\"13数组的定义\"><a class=\"markdownIt-Anchor\" href=\"#13数组的定义\">#</a> 1.3 数组的定义</h2>\n<p><strong>方式一：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组存储的数据类型[] 数组名字 = <span class=\"keyword\">new</span> 数组存储的数据类型[长度];</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数组存储的数据类型： 创建的数组容器可以存储的数据类型。</li>\n<li>[] : 表示数组。</li>\n<li>数组名字：为定义的数组起个变量名，满足标识符规范，可以使用名字操作数组。</li>\n<li>new：关键字，创建数组使用的关键字。</li>\n<li>[长度]：数组的长度，表示数组容器中可以存储多少个元素。</li>\n</ul>\n<p><strong>注意：</strong> <font color=red>数组有定长特性，长度一旦指定，不可再更改</font><br>\n<strong>方式二：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型[] 数组名 = <span class=\"keyword\">new</span> 数据类型[]&#123;元素<span class=\"number\">1</span>,元素<span class=\"number\">2</span>,元素<span class=\"number\">3.</span>..&#125;;</span><br><span class=\"line\">例如：定义存储<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">4</span>，<span class=\"number\">5</span>整数的数组容器。</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>方式三：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型[] 数组名 = &#123;元素<span class=\"number\">1</span>,元素<span class=\"number\">2</span>,元素<span class=\"number\">3.</span>..&#125;;</span><br><span class=\"line\">例如：定义存储<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">4</span>，<span class=\"number\">5</span>整数的数组容器。</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"14数组的访问\"><a class=\"markdownIt-Anchor\" href=\"#14数组的访问\">#</a> 1.4 数组的访问</h2>\n<ul>\n<li><strong>索引</strong>： 每一个存储到数组的元素，都会自动的拥有一个编号，从 0 开始，这个自动编号称为数组索引 (index)，可以通过数组的索引访问到数组中的元素。</li>\n<li><strong>格式</strong>： <code>数组名[索引]</code></li>\n<li><strong>数组的长度属性</strong>： 每个数组都具有长度，而且是固定的，Java 中赋予了数组的一个属性，可以获取到数组的 长度，语句为： 数组名.length ，属性 length 的执行结果是数组的长度，int 类型结果。由次可以推断出，数 组的最大索引值为 数组名.length-1 。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;; </span><br><span class=\"line\">\t<span class=\"comment\">//打印数组的属性，输出结果是5 </span></span><br><span class=\"line\">\tSystem.out.println(arr.length); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>索引访问数组中的元素</strong>：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//定义存储int类型数组，赋值元素1，2，3，4，5 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;; </span><br><span class=\"line\">\t<span class=\"comment\">//为0索引元素赋值为6 </span></span><br><span class=\"line\">\tarr[<span class=\"number\">0</span>] = <span class=\"number\">6</span>; </span><br><span class=\"line\">\t<span class=\"comment\">//获取数组0索引上的元素 int i = arr[0]; </span></span><br><span class=\"line\">\tSystem.out.println(i); </span><br><span class=\"line\">\t<span class=\"comment\">//直接输出数组0索引元素 </span></span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">0</span>]); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-数组原理内存\"><a class=\"markdownIt-Anchor\" href=\"#2-数组原理内存\">#</a> 2、数组原理内存</h1>\n<h2 id=\"21-内存概述\"><a class=\"markdownIt-Anchor\" href=\"#21-内存概述\">#</a> 2.1 内存概述</h2>\n<p>内存是计算机中的重要原件，<strong>临时存储区域，作用是运行程序</strong>。我们<strong>编写的程序是存放在硬盘中的，在硬盘中的程 序是不会运行的，必须放进内存中才能运行</strong>，运行完毕后会清空内存。 Java 虚拟机要运行程序，必须要对内存进行空间的分配和管理。</p>\n<h2 id=\"22java虚拟机的内存划分\"><a class=\"markdownIt-Anchor\" href=\"#22java虚拟机的内存划分\">#</a> 2.2Java 虚拟机的内存划分</h2>\n<p>为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。<br>\n<strong>JVM 的内存划分：</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830154211197.jpg#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"23-数组在内存中的存储\"><a class=\"markdownIt-Anchor\" href=\"#23-数组在内存中的存储\">#</a> 2.3 数组在内存中的存储</h2>\n<p><strong>一个数组内存图</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>]; </span><br><span class=\"line\">\tSystem.out.println(arr);<span class=\"comment\">//[I@5f150435 </span></span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">0</span>]);<span class=\"comment\">//输出0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>new 出来的内容，都是在堆 内存中存储的，而方法中的变量 arr 保存的是数组的地址。</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830154856824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830154926542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>两个数组内存图</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830155051592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>两个变量指向一个数组</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830155152992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"3-数组常见操作\"><a class=\"markdownIt-Anchor\" href=\"#3-数组常见操作\">#</a> 3、数组常见操作</h1>\n<h2 id=\"31-数组越界异常\"><a class=\"markdownIt-Anchor\" href=\"#31-数组越界异常\">#</a> 3.1 数组越界异常</h2>\n<p>观察下列代码运行后的结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;; </span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">3</span>]); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830155454606.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n分析：创建数组，赋值 3 个元素，数组的索引就是 0，1，2，没有 3 索引，因此我们不能访问数组中不存在的索引，程序运 行后，将会抛出  <code>ArrayIndexOutOfBoundsException</code>  数组越界异常。在开发中，数组的越界异常是<strong>不能出现的</strong>，一 旦出现了，就必须要修改我们编写的代码。</p>\n<h2 id=\"32-数组空指针异常\"><a class=\"markdownIt-Anchor\" href=\"#32-数组空指针异常\">#</a> 3.2 数组空指针异常</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;; </span><br><span class=\"line\">\tarr = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">0</span>]); </span><br><span class=\"line\">\t｝</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830160809908.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>分析：</strong>  <code>arr = null</code>  这行代码，意味着<strong>变量 arr 将不会再保存数组的内存地址</strong>，也就不允许再操作数组了，因此运行的时候 会抛出  <code>NullPointerException</code>  空指针异常。在开发中，数组的越界异常是<strong>不能出现的</strong>，一旦出现了，就必须要修 改我们编写的代码。</p>\n<h2 id=\"33-数组遍历\"><a class=\"markdownIt-Anchor\" href=\"#33-数组遍历\">#</a> 3.3 数组遍历</h2>\n<p><strong>数组遍历：</strong>  就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">0</span>]); </span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">2</span>]); </span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">3</span>]); </span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">4</span>]); </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码是可以将数组中每个元素全部遍历出来，但是如果<strong>数组元素非常多</strong>，这种写法肯定不行，因此我们需要改 造成循环的写法。<strong>数组的索引是 0 到 lenght-1</strong> ，可以作为<strong>循环的条件</strong>出现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125;; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) </span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">\t\tSystem.out.println(arr[i]); </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"34-数组获取最大值元素\"><a class=\"markdownIt-Anchor\" href=\"#34-数组获取最大值元素\">#</a> 3.4 数组获取最大值元素</h2>\n<p><strong>最大值获取：</strong> 从数组的所有元素中找出最大值（最小值同理）。<br>\n<strong>实现思路：</strong></p>\n<ul>\n<li>定义变量，保存数组 0 索引上的元素</li>\n<li>遍历数组，获取出数组中的每个元素</li>\n<li>将遍历到的元素和保存数组 0 索引上值的变量进行比较</li>\n<li>如果数组元素的值大于了变量的值，变量记录住新的值</li>\n<li>数组循环遍历结束，变量保存的就是数组中的最大值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">5</span>, <span class=\"number\">15</span>, <span class=\"number\">2000</span>, <span class=\"number\">10000</span>, <span class=\"number\">100</span>, <span class=\"number\">4000</span> &#125;; </span><br><span class=\"line\">\t<span class=\"comment\">//定义变量，保存数组中0索引的元素 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> max = arr[<span class=\"number\">0</span>]; </span><br><span class=\"line\">\t<span class=\"comment\">//遍历数组，取出每个元素 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) </span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历到的元素和变量max比较 </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//如果数组元素大于max </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i] &gt; max) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//max记录住大值 </span></span><br><span class=\"line\">\t\t\tmax = arr[i]; </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;数组最大值是： &quot;</span> + max); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"35-数组反转\"><a class=\"markdownIt-Anchor\" href=\"#35-数组反转\">#</a> 3.5 数组反转</h2>\n<p><strong>数组的反转：</strong>  数组中的元素颠倒顺序，例如原始数组为 1,2,3,4,5，反转后的数组为 5,4,3,2,1（要求只能用一个数组实现）<br>\n思路：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830162049666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125;; </span><br><span class=\"line\">\t<span class=\"comment\">/*循环中定义变量min=0最小索引 max=arr.length‐1最大索引 min++,max‐‐ */</span> </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> min = <span class=\"number\">0</span>, max = arr.length ‐ <span class=\"number\">1</span>; min &lt;= max; min++, max‐‐) </span><br><span class=\"line\">\t&#123; <span class=\"comment\">//利用第三方变量完成数组中的元素交换 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> temp = arr[min]; arr[min] = arr[max]; </span><br><span class=\"line\">\t\tarr[max] = temp; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 反转后，遍历数组 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) </span><br><span class=\"line\">\t&#123; System.out.println(arr[i]); &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-数组作为方法参数和返回值\"><a class=\"markdownIt-Anchor\" href=\"#4-数组作为方法参数和返回值\">#</a> 4、数组作为方法参数和返回值</h1>\n<h2 id=\"41-数组作为方法参数\"><a class=\"markdownIt-Anchor\" href=\"#41-数组作为方法参数\">#</a> 4.1 数组作为方法参数</h2>\n<p>以前的方法中学习了方法的参数和返回值，但是使用的都是基本数据类型。那么作为引用类型的数组能否作为方法的参数进行传递呢，当然是可以的。 数组作为方法参数传递，<strong>传递的参数是数组内存的地址</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span> &#125;; </span><br><span class=\"line\">\t<span class=\"comment\">//调用方法，传递数组 </span></span><br><span class=\"line\">\tprintArray(arr); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/* 创建方法，方法接收数组类型的参数 进行数组的遍历 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(arr[i]); </span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830163500691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"42-数组作为方法返回值\"><a class=\"markdownIt-Anchor\" href=\"#42-数组作为方法返回值\">#</a> 4.2 数组作为方法返回值</h2>\n<p><strong>数组作为方法的返回值，返回的是数组的内存地址</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//调用方法，接收数组的返回值 </span></span><br><span class=\"line\">\t<span class=\"comment\">//接收到的是数组的内存地址 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = getArray(); </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) </span><br><span class=\"line\">\t&#123; System.out.println(arr[i]); &#125; </span><br><span class=\"line\">&#125;<span class=\"comment\">/*创建方法，返回值是数组类型 return返回数组的地址 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] getArray() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span> &#125;; <span class=\"comment\">//返回数组的地址，返回到调用者 </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830163756874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"43-方法的参数类型区别\"><a class=\"markdownIt-Anchor\" href=\"#43-方法的参数类型区别\">#</a> 4.3 方法的参数类型区别</h2>\n<p><strong>方法的参数为基本类型时，传递的是数据值。方法的参数为引用类型时，传递的是地址值.</strong><br>\n 方法的参数为基本类型时：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">2</span>; </span><br><span class=\"line\">\t\tSystem.out.println(a); </span><br><span class=\"line\">\t\tSystem.out.println(b); </span><br><span class=\"line\">\t\tchange(a, b); </span><br><span class=\"line\">\t\tSystem.out.println(a);</span><br><span class=\"line\">\t\tSystem.out.println(b); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\ta = a + b; </span><br><span class=\"line\">\t\tb = b + a; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>方法的参数为引用类型时：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>&#125;; </span><br><span class=\"line\">\t\tSystem.out.println(arr[<span class=\"number\">0</span>]); </span><br><span class=\"line\">\t\tchange(arr); </span><br><span class=\"line\">\t\tSystem.out.println(arr[<span class=\"number\">0</span>]); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\tarr[<span class=\"number\">0</span>] = <span class=\"number\">200</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"5-arrays类\"><a class=\"markdownIt-Anchor\" href=\"#5-arrays类\">#</a> 5、Arrays 类</h1>\n<h2 id=\"51概述\"><a class=\"markdownIt-Anchor\" href=\"#51概述\">#</a> 5.1 概述</h2>\n<p><code>java.util.Arrays</code>  此类<strong>包含用来操作数组的各种方法</strong>，比如<strong>排序</strong> 和<strong>搜索</strong> 等。其所有方法<strong>均为静态方法</strong>，调用起来 非常简单。</p>\n<h2 id=\"52-操作数组的方法\"><a class=\"markdownIt-Anchor\" href=\"#52-操作数组的方法\">#</a> 5.2 操作数组的方法</h2>\n<ul>\n<li><code>Arrays.toString()</code>  ：返回指定数组内容的字符串表示形式。、</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义int 数组 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">2</span>,<span class=\"number\">34</span>,<span class=\"number\">35</span>,<span class=\"number\">4</span>,<span class=\"number\">657</span>,<span class=\"number\">8</span>,<span class=\"number\">69</span>,<span class=\"number\">9</span>&#125;; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 打印数组,输出地址值</span></span><br><span class=\"line\">\t\tSystem.out.println(arr); <span class=\"comment\">// [I@2ac1fdc4 </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 数组内容转为字符串 </span></span><br><span class=\"line\">\t\tString s = Arrays.toString(arr); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 打印字符串,输出内容 </span></span><br><span class=\"line\">\t\tSystem.out.println(s); <span class=\"comment\">// [2, 34, 35, 4, 657, 8, 69, 9] &#125;</span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Arrays.sort(数组名)</code>  ：对指定的 int 型数组按数字升序进行排序。如果传入的是字符型数组按字符的 Acell 码排序（<strong>只能做升序排序，不能做降序排序。</strong>）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">// 定义int 数组 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">24</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">48</span>, <span class=\"number\">4</span>, <span class=\"number\">46</span>, <span class=\"number\">35</span>, <span class=\"number\">11</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>&#125;; </span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;排序前:&quot;</span>+ Arrays.toString(arr)); </span><br><span class=\"line\">\t<span class=\"comment\">// 排序前:[24, 7, 5, 48, 4, 46, 35, 11, 6, 2]</span></span><br><span class=\"line\">\t<span class=\"comment\">// 升序排序</span></span><br><span class=\"line\">\tArrays.sort(arr); System.out.println(<span class=\"string\">&quot;排序后:&quot;</span>+ Arrays.toString(arr));</span><br><span class=\"line\">\t<span class=\"comment\">// 排序后:[2, 4, 5, 6, 7, 11, 24, 35, 46, 48] </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Arrays.fill(数组名 ,开始位置 , 结束位置, 填入的值)</code> ：向数组中填充元素</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">        Arrays.fill(arr, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a:arr)</span><br><span class=\"line\">            System.out.print(a+<span class=\"string\">&quot; &quot;</span>);       </span><br><span class=\"line\">        System.out.println(); </span><br><span class=\"line\">        <span class=\"keyword\">int</span> array[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">6</span>];</span><br><span class=\"line\">            Arrays.fill(array, <span class=\"number\">100</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>, n=array.length; i &lt; n; i++) &#123;</span><br><span class=\"line\">                System.out.print(array[i]+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">50</span> <span class=\"number\">50</span> <span class=\"number\">50</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span> <span class=\"number\">10</span> </span><br><span class=\"line\"><span class=\"number\">100</span> <span class=\"number\">100</span> <span class=\"number\">100</span> <span class=\"number\">100</span> <span class=\"number\">100</span> <span class=\"number\">100</span> </span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Arrays.copy(原数组，原数组起始位置，新数组，新数组起始位置，复制长度)</code> ：数组的复制</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Arrayscopy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr1 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">6</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.arraycopy(arr, <span class=\"number\">0</span>, arr1, <span class=\"number\">1</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> str : arr1)&#123;</span><br><span class=\"line\">            System.out.print(str+“ ”);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Arrays.copyOf(数组名，扩容后长度)</code> ：数组扩容</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;         </span><br><span class=\"line\">       arr = Arrays.copyOf(arr,<span class=\"number\">8</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a:arr)</span><br><span class=\"line\">           System.out.print(a+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> </span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "java",
                "数组",
                "Arrays",
                "容器"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/26/%E7%AE%97%E6%B3%95%EF%BC%88java%EF%BC%89-%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98%EF%BC%88%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF%EF%BC%89/",
            "url": "http://yoursite.com/2020/08/26/%E7%AE%97%E6%B3%95%EF%BC%88java%EF%BC%89-%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98%EF%BC%88%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF%EF%BC%89/",
            "title": "算法（java）-汉诺塔问题（递归回溯）",
            "date_published": "2020-08-26T12:44:19.718Z",
            "content_html": "<h1 id=\"1-汉诺塔问题介绍\"><a class=\"markdownIt-Anchor\" href=\"#1-汉诺塔问题介绍\">#</a> 1、汉诺塔问题介绍</h1>\n<p>汉诺塔 (又称河内塔) 问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着 64 片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。<br>\n简单分析要求：</p>\n<ol>\n<li>有三根柱子</li>\n<li>一次只能移动一个圆盘</li>\n<li>小圆盘上不能放比它更大的圆盘</li>\n<li>需要按从小盘到大盘的顺序重新摆在另一个盘上</li>\n</ol>\n<h1 id=\"2-思路分析\"><a class=\"markdownIt-Anchor\" href=\"#2-思路分析\">#</a> 2、思路分析</h1>\n<p>假设我们先给三根柱子分别命名为 A、B、C：<br>\n初始的时候盘按从小到大的顺序依次摆在 A 柱上、而 C 柱作为结果柱。我们的目标就是把 A 柱的所有盘按照本来的从小到大的顺序摆在 C 盘。<br>\n假设 n 为盘的数量；</p>\n<ul>\n<li>n=1 时，直接将 A 中的那个盘移到 C 盘</li>\n<li>n=2 时，先将 A 盘上最小的移到 B，再将 A 盘剩下那个移到 C，再将 B 盘上的移到 C</li>\n<li>n=3 时，<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200826194912579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 1、A-&gt;C<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200826195355760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 2、A-&gt;B<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200826195420922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 3、C-&gt;B<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200826195511735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 4、A-&gt;C<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200826195642944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 5、B-&gt;A<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200826195731756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 6、B-&gt;C<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200826195754504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 7、A-&gt;C<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200826195814456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n我们发现除了当 n=1 时，直接将 A 的盘直接移到 C 柱上。后面 n 为其他值时都需要借助 C 盘先将 A 盘中除最大盘外的 n-1 个盘移到 B 盘然后将 A 中剩下的那个盘移到 C 盘。而此时 A 盘就空了，然后将 A 作为辅助盘再将 B 的所有盘按顺序移到 C 盘。<br>\n<strong>我们可以把将 A 中最大的移到 C 看作中间步</strong></li>\n<li>中间一步之上可以看成把 A 上 n-1 个盘子通过借助辅助塔（C 塔）移到了 B 上，</li>\n<li>中间一步之下可以看成把 B 上 n-1 个盘子通过借助辅助塔（A 塔）移到了 C 上；<br>\n最核心的是，我们发现把 A 上 n-1 个盘子通过借助辅助塔（C 塔）移到了 B 上的结果和上一关只有 n-1 个盘的结果是一样的只是这时的目标柱变成了 B，所以可以通过递归来达到我们想要的目标。<br>\n比如假如这一关 n=3：<br>\n1、将 A 中最大盘遮住，将 B 柱当作上一关的 C 柱，按从小到大的顺序依次把 A 上剩下的 n-1 个盘按 n=2 的走法摆在 B 柱上<br>\n 2、C 空，将 A 中最大的移到 C，A 空<br>\n 3、将 C 中最大盘遮住，将 C 柱当作上一关的 C 柱，按从小到大的顺序依次把 B 上剩下的 n-1 个盘按 n=2 的走法摆在 C 柱上</li>\n</ul>\n<h1 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现：</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zhukun;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 一共走了多少步</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> times;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> A = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> B = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> C = <span class=\"string\">&#x27;C&#x27;</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入盘子数：&quot;</span>);</span><br><span class=\"line\">        Scanner s = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.nextInt();</span><br><span class=\"line\">        <span class=\"comment\">//调用汉诺塔</span></span><br><span class=\"line\">        hannoi(n, A, B, C);</span><br><span class=\"line\">        s.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 盘子移动</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">(<span class=\"keyword\">int</span> disk, <span class=\"keyword\">char</span> M, <span class=\"keyword\">char</span> N )</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;第&quot;</span>+(++times)+<span class=\"string\">&quot;次移动, 盘子&quot;</span>+disk+ <span class=\"string\">&quot;  &quot;</span>+M+<span class=\"string\">&quot;-------&gt;&quot;</span>+N);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">hannoi</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> A, <span class=\"keyword\">char</span> B, <span class=\"keyword\">char</span> C)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            move(n, A, C);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//移动上一关的步骤移动到B</span></span><br><span class=\"line\">            hannoi(n - <span class=\"number\">1</span>, A, C, B);</span><br><span class=\"line\">            <span class=\"comment\">//把最大的盘子移动C塔</span></span><br><span class=\"line\">            move(n, A, C);</span><br><span class=\"line\">            <span class=\"comment\">//再把B上的上一关的盘子移动到C上就可以了</span></span><br><span class=\"line\">            hannoi(n - <span class=\"number\">1</span>, B, A, C);</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请输入盘子数：</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">第<span class=\"number\">1</span>次移动, 盘子<span class=\"number\">1</span>  A-------&gt;B</span><br><span class=\"line\">第<span class=\"number\">2</span>次移动, 盘子<span class=\"number\">2</span>  A-------&gt;C</span><br><span class=\"line\">第<span class=\"number\">3</span>次移动, 盘子<span class=\"number\">1</span>  B-------&gt;C</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请输入盘子数：</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">第<span class=\"number\">1</span>次移动, 盘子<span class=\"number\">1</span>  A-------&gt;C</span><br><span class=\"line\">第<span class=\"number\">2</span>次移动, 盘子<span class=\"number\">2</span>  A-------&gt;B</span><br><span class=\"line\">第<span class=\"number\">3</span>次移动, 盘子<span class=\"number\">1</span>  C-------&gt;B</span><br><span class=\"line\">第<span class=\"number\">4</span>次移动, 盘子<span class=\"number\">3</span>  A-------&gt;C</span><br><span class=\"line\">第<span class=\"number\">5</span>次移动, 盘子<span class=\"number\">1</span>  B-------&gt;A</span><br><span class=\"line\">第<span class=\"number\">6</span>次移动, 盘子<span class=\"number\">2</span>  B-------&gt;C</span><br><span class=\"line\">第<span class=\"number\">7</span>次移动, 盘子<span class=\"number\">1</span>  A-------&gt;C</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法",
                "递归",
                "汉诺塔"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/",
            "url": "http://yoursite.com/2020/08/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/",
            "title": "J计算机网络（一）-总结计算机网络体系结构",
            "date_published": "2020-08-25T13:05:52.372Z",
            "content_html": "<p>学习目标：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816161827830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"一-概念-功能-组成-分类\"><a class=\"markdownIt-Anchor\" href=\"#一-概念-功能-组成-分类\">#</a> 一、概念、功能、组成、分类</h1>\n<h2 id=\"1-计算机网络的概念\"><a class=\"markdownIt-Anchor\" href=\"#1-计算机网络的概念\">#</a> 1、计算机网络的概念</h2>\n<p>计算机网络是一个将分散的、具体独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享与信息传递的系统。（计算机网络是互连的、自治的计算机集合）<br>\n<strong>互连</strong>：互联互通，通信链路        <strong>自治</strong>：无主从关系<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200815201600891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-计算机网络的功能\"><a class=\"markdownIt-Anchor\" href=\"#2-计算机网络的功能\">#</a> 2、计算机网络的功能</h2>\n<ol>\n<li>数据通信（连通性）：比如不同主机间传送文档，发送邮件</li>\n<li>资源共享：硬件共享，软件共享，数据共享</li>\n<li>分布式处理：多台计算机各自承担同一工作任务的不同部分    （Hadoop 平台）</li>\n<li>提高可靠性：不同主机间可通过计算机网络进行替代</li>\n<li>负载均衡：多台计算机可以同时进行工作，个计算机之间更亲密</li>\n</ol>\n<h2 id=\"3-计算机网络的组成\"><a class=\"markdownIt-Anchor\" href=\"#3-计算机网络的组成\">#</a> 3、计算机网络的组成</h2>\n<p>1、组成部分：硬件、软件、协议<br>\n 2、工作方式：</p>\n<ul>\n<li>边缘部分：用户直接使用，有 C/S 方式  和   P2P 方式</li>\n<li>核心部分：为边缘部分服务</li>\n</ul>\n<p>3、功能组成：</p>\n<ol>\n<li>通信子网：实现数据通信</li>\n<li>资源子网：实现资源共享 / 数据处理<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200815204123705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<h2 id=\"4-计算机网络的分类\"><a class=\"markdownIt-Anchor\" href=\"#4-计算机网络的分类\">#</a> 4、计算机网络的分类</h2>\n<p>1、按分布范围分：广域网 WAN、城域网 MAN、局域网 WAN、个人区域网 PAN   （后面会详解）<br>\n2、按使用者分：公用网（中国电信、中国联通）、专用网（国家军队，政府机关，铁路、银行等）<br>\n3、按交换技术分：电路交换、报文交换、分组交换<br>\n 4、按拓扑结构分：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200815205225372.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n 5、按传送技术分：</p>\n<ul>\n<li>广播式网络：共享公共通信信道</li>\n<li>点对点网络：使用分组存储转发和路由选择机制</li>\n</ul>\n<h2 id=\"5-总结\"><a class=\"markdownIt-Anchor\" href=\"#5-总结\">#</a> 5、总结</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816095334787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"二-标准化工作及相关组织\"><a class=\"markdownIt-Anchor\" href=\"#二-标准化工作及相关组织\">#</a> 二、标准化工作及相关组织</h1>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200815210019943.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n要实现不同厂商的硬、软件之间相互连通，必须遵从统一的标准。</p>\n<h2 id=\"1-标准化工作\"><a class=\"markdownIt-Anchor\" href=\"#1-标准化工作\">#</a> 1、标准化工作</h2>\n<p>1、标准的分类：</p>\n<ul>\n<li>法定标准：由权威机构制定的正式的、合法的标准（OSI）</li>\n<li>事实标准：某些公司的产品在竞争中占据了主流，时间长了，这些产品中的协议和技术就成了标准（TCP/IP 协议）</li>\n</ul>\n<p>RFC（Request for Comments）—— 因特网标准的形式<br>\n RFC 要升为 因特网正式标准的四个阶段：</p>\n<ol>\n<li>因特网草案（Internet Draft）：这个阶段还不是 RFC 文档</li>\n<li>建议标准（Proposed Standard）：从这个阶段开始成为 RFC 文档</li>\n<li>草案标准（Draft Standard）：经过 IETF，IAB 审核</li>\n<li>因特网标准（Internet Standard）</li>\n</ol>\n<h2 id=\"2-标准化工作的相关组织\"><a class=\"markdownIt-Anchor\" href=\"#2-标准化工作的相关组织\">#</a> 2、标准化工作的相关组织</h2>\n<ul>\n<li>国际标准化组织 ISO：建立了 OSI 参考模型、HDLC 协议</li>\n<li>国际电信联盟 ITU：制定通信规则</li>\n<li>国际电气电子工程师协会 IEEE：学术机构、制定了 IEEE802 系列标准，5G 相关协议</li>\n<li>Internet 工程任务组 IETF：负责因特网相关标准的制定 RFC XXXX</li>\n</ul>\n<h2 id=\"3-总结\"><a class=\"markdownIt-Anchor\" href=\"#3-总结\">#</a> 3、总结</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816095555982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"三-性能指标之速率-带宽-吞吐量\"><a class=\"markdownIt-Anchor\" href=\"#三-性能指标之速率-带宽-吞吐量\">#</a> 三、性能指标之速率、带宽、吞吐量</h1>\n<h2 id=\"1-速率\"><a class=\"markdownIt-Anchor\" href=\"#1-速率\">#</a> 1、速率</h2>\n<p>速率即数据率或称数据传输率或比特率</p>\n<p>比特（bit）1/0 位。连接在计算机网络上的主机在数字信道上传送数据位数的速率。单位是 b/s，kb/s，Mb/s，Tb/s<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/202008161004034.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816100647660.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-带宽\"><a class=\"markdownIt-Anchor\" href=\"#2-带宽\">#</a> 2、带宽</h2>\n<ol>\n<li>“带宽” 原本指某个信号具有的频带宽度，即最高频率与最低频率之差，单位是赫兹（Hz）</li>\n<li>计算机网络中，带宽用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的 “最高数据率”，单位是 “比特每秒”，b/s，kb/s，Mb/s，Gb/s。（网络设备所支持的最高速度）</li>\n</ol>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816101903553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-吞吐量\"><a class=\"markdownIt-Anchor\" href=\"#3-吞吐量\">#</a> 3、吞吐量</h2>\n<p>1、吞吐量表示在单位时间内通过某个网络（或信道、接口）的数据量。单位 b/s，kb/s，Mb/s<br>\n2、吞吐量受网络的带宽或网络的额定速率的限制</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816102828713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"四-性能指标之时延时延带宽积-往返时间rtt-利用率\"><a class=\"markdownIt-Anchor\" href=\"#四-性能指标之时延时延带宽积-往返时间rtt-利用率\">#</a> 四、性能指标之时延，时延带宽积、往返时间 RTT、利用率</h1>\n<h2 id=\"1-时延\"><a class=\"markdownIt-Anchor\" href=\"#1-时延\">#</a> 1、时延</h2>\n<p>1、时延是指（报文 / 分组 / 比特流）从网络（或链路）的一端传送到另一端所需的时间。也叫延迟或迟延。单位是 s。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816104641259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-时延带宽积\"><a class=\"markdownIt-Anchor\" href=\"#2-时延带宽积\">#</a> 2、时延带宽积</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816104604881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-往返时延rtt\"><a class=\"markdownIt-Anchor\" href=\"#3-往返时延rtt\">#</a> 3、往返时延 RTT</h2>\n<p>1、RTT 表示从发送数据开始，到发送方收到接收方的确认（接收方收到数据后立即发送确认），总共经历的时延。<br>\n（RTT 越大，在收到确认之前，可以发送的数据越多）<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816105709919.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816105723204.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"4-利用率\"><a class=\"markdownIt-Anchor\" href=\"#4-利用率\">#</a> 4、利用率</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816110005376.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"5-总结-2\"><a class=\"markdownIt-Anchor\" href=\"#5-总结-2\">#</a> 5、总结</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816110107946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"五-分层结构-协议-接口-服务\"><a class=\"markdownIt-Anchor\" href=\"#五-分层结构-协议-接口-服务\">#</a> 五、分层结构、协议、接口、服务</h1>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816110549547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"1-分层的原则\"><a class=\"markdownIt-Anchor\" href=\"#1-分层的原则\">#</a> 1、分层的原则</h2>\n<ol>\n<li>各层之间相互独立，每层只实现一种相对独立的功能</li>\n<li>每层之间界面自然清晰，易于理解，相互交流尽可能少</li>\n<li>结构上下可分割开。每层都采用最合适的技术来实现</li>\n<li>保持下层对上层的独立性，上层单向使用下层提供的服务</li>\n<li>整个分层结构应该能促进标准化工作<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816112940219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<h2 id=\"2-实体-协议-接口-服务\"><a class=\"markdownIt-Anchor\" href=\"#2-实体-协议-接口-服务\">#</a> 2、实体、协议、接口、服务</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816112957961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816113023991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816113042478.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-概念总结\"><a class=\"markdownIt-Anchor\" href=\"#3-概念总结\">#</a> 3、概念总结</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081611323243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"六-osi参考模型\"><a class=\"markdownIt-Anchor\" href=\"#六-osi参考模型\">#</a> 六、OSI 参考模型</h1>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816144158637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"1-isoosi参考模型怎么来的\"><a class=\"markdownIt-Anchor\" href=\"#1-isoosi参考模型怎么来的\">#</a> 1、ISO/OSI 参考模型怎么来的</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816144614489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>（理论成功，市场失败）</strong></p>\n<h2 id=\"2-七层结构\"><a class=\"markdownIt-Anchor\" href=\"#2-七层结构\">#</a> 2、七层结构</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816145046920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-osi参考模型解释通信过程\"><a class=\"markdownIt-Anchor\" href=\"#3-osi参考模型解释通信过程\">#</a> 3、OSI 参考模型解释通信过程</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816145922913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816150740695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"4-各层功能\"><a class=\"markdownIt-Anchor\" href=\"#4-各层功能\">#</a> 4、各层功能</h2>\n<p>1、应用层：所有能和用户交互产生网络流量的程序</p>\n<p>典型的应用层服务：文件传输（FTP）、电子邮件（SMTP）、万维网（HTTP）</p>\n<p>2、表示层：用于处理在两个通信系统中交换信息的表示方式（语法和语义）（主要协议 JPEG、ASCII）</p>\n<ul>\n<li>功能一：数据格式变换（类似于翻译官）</li>\n<li>功能二：数据加密和解密</li>\n<li>功能三：数据压缩和恢复</li>\n</ul>\n<p>3、会话层：向表示层实体 / 用户进程提供建立连接并在连接上有序地传输数据。这是会话，也是建立同步（SYN）。</p>\n<p>（主要协议 ADSP、ASP）</p>\n<ul>\n<li>功能一：建立、管理、终止会话</li>\n<li>功能二：使用校验点可使会话在通信失效时从校验点 / 同步点继续恢复通信、实现数据同步（适用于传输大文件）</li>\n</ul>\n<p>4、传输层：负责主机中两个进程的通信，即端到端的通信。传输单位是报文段或是用户数据报。（主要协议：TCP、UDP）</p>\n<ul>\n<li>功能一：可靠传输、不可靠传输</li>\n<li>功能二：差错控制</li>\n<li>功能三：流量控制</li>\n<li>功能四：复用分用</li>\n</ul>\n<p>复用：多个应用层进程可同时使用下面运输层的服务<br>\n分用：运输层把收到的信息分别交付给上面应用层中相应的进程</p>\n<p>5、网络层：主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务。网络层传输单位是数据报。</p>\n<p>（主要协议：IP、IPX、ICMP、IGMP、ARP、RARP、OSPF）</p>\n<ul>\n<li>功能一：路由选择、最佳路径</li>\n<li>功能二：流量控制</li>\n<li>功能三：差错控制</li>\n<li>功能四：拥塞控制（若所有结点都开不及接受分组，而要丢弃大量分组的话，网络就要处于拥塞状态。因此要采取一定的措施来缓解这种拥塞）</li>\n</ul>\n<p>6、数据链路层：主要任务是把网络层传下来的数据报组装成帧。书局链路层 / 链路层的传输单位是帧。</p>\n<p>（主要协议 SDLC、HDLC、PPP、STP）</p>\n<ul>\n<li>功能一：成帧（定义帧的开始和结束）</li>\n<li>功能二：差错控制（帧错 + 位错）</li>\n<li>功能三：流量控制</li>\n<li>功能四：访问（接入）控制（控制对信道的访问）</li>\n</ul>\n<p>7、物理层：主要任务是在物理媒体上实现比特流的透明传输。物理层传输单位是比特。（主要协议 Rj45、802.3）</p>\n<p>透明传输：指不管所传输数据是什么样的比特组合，都应当能够在链路上传送。</p>\n<ul>\n<li>功能一：定义接口特性</li>\n<li>功能二：定义传输模式（单工、半双工、双工）</li>\n<li>功能三：定义传输速率</li>\n<li>功能四：比特同步</li>\n<li>功能五：比特编码</li>\n</ul>\n<h1 id=\"七-tcpip-模型-5层参考模型\"><a class=\"markdownIt-Anchor\" href=\"#七-tcpip-模型-5层参考模型\">#</a> 七、TCP/IP 模型 &amp; 5 层参考模型</h1>\n<h2 id=\"1-osi参考模型与tcpip参考模型相同点\"><a class=\"markdownIt-Anchor\" href=\"#1-osi参考模型与tcpip参考模型相同点\">#</a> 1、OSI 参考模型与 TCP/IP 参考模型相同点</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816160432542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li>都分层</li>\n<li>都基于独立的协议栈的概念</li>\n<li>可以实现异构网络互联</li>\n</ol>\n<h2 id=\"2-osi参考模型与tcpip参考模型不同点\"><a class=\"markdownIt-Anchor\" href=\"#2-osi参考模型与tcpip参考模型不同点\">#</a> 2、OSI 参考模型与 TCP/IP 参考模型不同点</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816160939352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-5层参考模型\"><a class=\"markdownIt-Anchor\" href=\"#3-5层参考模型\">#</a> 3、5 层参考模型</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816161312658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"4-5层参考模型额数据封装与解封装\"><a class=\"markdownIt-Anchor\" href=\"#4-5层参考模型额数据封装与解封装\">#</a> 4、5 层参考模型额数据封装与解封装</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200816161634849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n",
            "tags": [
                "计算机网络",
                "网络体系"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/25/jsp%E5%92%8CJavaBean/",
            "url": "http://yoursite.com/2020/08/25/jsp%E5%92%8CJavaBean/",
            "title": "JavaWeb学习-JSP和JavaBean",
            "date_published": "2020-08-25T13:05:52.370Z",
            "content_html": "<h1 id=\"1-认识javabean\"><a class=\"markdownIt-Anchor\" href=\"#1-认识javabean\">#</a> 1、认识 JavaBean</h1>\n<p><strong>JavaBean 是一个遵循特定写法的 Java 类</strong>，在 JavaBean 中可以将控制逻辑、值、数据库访问和其他对象进行封装，并且可以被其他应用来调用。实际上，JavaBean 就是一种<strong> Java 组件技术</strong>。JavaBean 的作用是<strong>向用户提供实现特定逻辑的方法接口</strong>，而具体的实现封装在组件的内部，不同的用户根据具体的应用情况<strong>使用该组件的部分或全部控制逻辑。</strong></p>\n<p>它通常具有如下特点：</p>\n<ul>\n<li>Java 类必须具有一个无参的构造函数（一般不写的话系统会自动生成）</li>\n<li>私有化的成员属性。</li>\n<li>私有化的属性必须通过 public 类型的方法暴露给其它程序，并且方法的命名也必须遵守一定的命名规范。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String stuno;<span class=\"comment\">//学生学号</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String stuname;<span class=\"comment\">//学生姓名</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;<span class=\"comment\">//学生年龄</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//Student类对外提供的用于访问私有属性的public方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStuno</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> stuno;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStuno</span><span class=\"params\">(String stuno)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.stuno = stuno;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStuname</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> stuname;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStuname</span><span class=\"params\">(String stuname)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.stuname = stuname;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的例子可以看出，在 JavaBean 中不仅要定义其成员变量，还要对成员变量定义<strong> setter/getter 方法。</strong> 对于每一个成员变量要定义一个 getter 方法和一个 setter 方法。<strong>setter 方法称为属性修改器，getter 方法称为属性访问器。</strong> 属性修改器必须以小写的 set 前缀开始，后跟属性名，<strong>且属性名的第一个字母要改为大写，</strong> 如上面的 setStuname。属性访问器通常以小写的 get 前缀开始，后跟属性名，且属性名的第一个字母也要改为大写，如上面的 getStuname。</p>\n<p>特殊的 JavaBean 属性：</p>\n<p>给 Boolean 类型设置属性，要将 getter 方法改为 is 方法</p>\n<p>如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> member;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMember</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isMember;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMember</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isMember)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isMember = isMember;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于建立属性，MyEclipse 提供了较为方便的做法。右击代码界面，在弹出的快捷菜单中选择 Source|Generate Getters and Setteers 命令<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200809102953511.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"2-在jsp中使用javabean\"><a class=\"markdownIt-Anchor\" href=\"#2-在jsp中使用javabean\">#</a> 2、在 JSP 中使用 JavaBean</h1>\n<h2 id=\"21-为什么要在jsp中使用javabean\"><a class=\"markdownIt-Anchor\" href=\"#21-为什么要在jsp中使用javabean\">#</a> 2.1、为什么要在 JSP 中使用 JavaBean？</h2>\n<p>在很多 Javaweb 项目中都要显示数据库中的内容。比如在学生信息管理系统中经常在页面中显示数据库中学生的信息，在这种情况下就必须要访问数据库。通常将访问数据库的代码写在 JSP 内。但是在 JSP 内嵌入大量的 java 代码可能会造成维护不方便。试想一下，如果 JSP 页面上需要进行复杂的 HTML 显示又要写大量的 java 代码，则对该页面的编写成员要求就高了，既要是 html 专家又得精通 java。所以最好的办法就是将 JSP 中的 Java 代码移植到 Java 类中。而这些可能使用到的 Java 类就是 JavaBean。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200809103849888.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n JSP 访问数据库<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200809103859263.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n Java 类访问数据库</p>\n<h2 id=\"22-具体使用\"><a class=\"markdownIt-Anchor\" href=\"#22-具体使用\">#</a> 2.2、具体使用</h2>\n<p>1、定义 JavaBean</p>\n<p>方法一：直接在 JSP 中实例化 JavaBean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">    Student student = <span class=\"keyword\">new</span> Student();<span class=\"comment\">//使用student</span></span><br><span class=\"line\">&gt;%</span><br></pre></td></tr></table></figure>\n<p>但这种方法是在 JSP 中使用 Java 代码。</p>\n<p>方法二：使用<a href=\"jsp:useBean\"> jsp:useBean</a> 标签<br>\n<a href=\"jsp:useBean\"> jsp:useBean</a> 标签用于在指定的域范围内查找指定名称的 JavaBean 对象，如果存在则直接返回该 JavaBean 对象的引用，如果不存在则实例化一个新的 JavaBean 对象并将它以指定的名称存储到指定的域范围中。<br>\n　　常用语法：<br>\n&lt;jsp:useBean id=“beanName”  class=“package.class” scope=“page|request|session|application”/&gt;<br>\n　　&quot;id&quot; 属性用于指定 JavaBean 实例对象的引用名称和其存储在域范围中的名称。<br>\n　　&quot;class&quot; 属性用于指定 JavaBean 的完整类名（即必须带有包名）。<br>\n　　&quot;scope&quot; 属性用于指定 JavaBean 实例对象所存储的域范围，其取值只能是 page、request、session 和 application 等四个值中的一个，其默认值是 page。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;jsp:useBean id=&quot;student&quot; class=&quot;com.zhukun.programmer.entity.Student&quot; scope=&quot;page&quot;&gt;&lt;/jsp:useBean&gt;</span><br><span class=\"line\">\t &lt;%</span><br><span class=\"line\">\t     student.setStuno(<span class=\"string\">&quot;200101&quot;</span>);<span class=\"comment\">//为student对象的stuno属性赋值</span></span><br><span class=\"line\">\t     student.setStuname(<span class=\"string\">&quot;王强&quot;</span>);<span class=\"comment\">//为student对象的stuname属性赋值</span></span><br><span class=\"line\">\t     student.setAge(<span class=\"number\">21</span>);<span class=\"comment\">//为student对象的age属性赋值</span></span><br><span class=\"line\">\t %&gt;</span><br><span class=\"line\">\t\t&lt;%--使用getXxx()方法获取对象的属性值 --%&gt;</span><br><span class=\"line\">     &lt;h2&gt;姓名：&lt;%=student.getStuno()%&gt;&lt;/h2&gt;</span><br><span class=\"line\">     &lt;h2&gt;性别：&lt;%=student.getStuname()%&gt;&lt;/h2&gt;</span><br><span class=\"line\">     &lt;h2&gt;年龄：&lt;%=student.getAge()%&gt;&lt;/h2&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>在该例子中使用 jsp:useBean 动作实例化了 Student 对象，对象名为 student</p>\n<pre><code>  2、设置JavaBean属性\n\n 在实例开发应用中定义JavaBean之后需要在JSP页面设置JavaBean组件的属性。也就是调用setter方法。\n</code></pre>\n<p>方法一：直接编写 Java 代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;jsp:useBean id=&quot;student&quot; class=&quot;com.zhukun.programmer.entity.Student&quot; scope=&quot;page&quot;&gt;&lt;/jsp:useBean&gt;</span><br><span class=\"line\">\t &lt;%</span><br><span class=\"line\">\t     student.setStuname(<span class=\"string\">&quot;王强&quot;</span>);<span class=\"comment\">//为student对象的stuname属性赋值</span></span><br><span class=\"line\">\t %&gt;</span><br></pre></td></tr></table></figure>\n<p>方法二：使用<a href=\"jsp:setProperty\"> jsp:setProperty</a> 标签<br>\n当值的来源是 String 常量时，jsp：setProperty 的语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;jsp:setProperty property=<span class=\"string\">&quot;属性名称&quot;</span> name=<span class=\"string\">&quot;bean对象名&quot;</span> value=<span class=\"string\">&quot;常量&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;jsp:useBean id=<span class=\"string\">&quot;student&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;com.zhukun.programmer.entity.Student&quot;</span> scope=<span class=\"string\">&quot;page&quot;</span>/&gt;</span><br><span class=\"line\">\t&lt;jsp:setProperty property=<span class=\"string\">&quot;stuno&quot;</span> name=<span class=\"string\">&quot;student&quot;</span> value=<span class=\"string\">&quot;200102&quot;</span>/&gt;</span><br><span class=\"line\"> \t&lt;jsp:setProperty property=<span class=\"string\">&quot;stuname&quot;</span> name=<span class=\"string\">&quot;student&quot;</span> value=<span class=\"string\">&quot;李刚&quot;</span>/&gt;</span><br><span class=\"line\"> \t&lt;jsp:setProperty property=<span class=\"string\">&quot;age&quot;</span> name=<span class=\"string\">&quot;student&quot;</span> value=<span class=\"string\">&quot;24&quot;</span>/&gt;</span><br><span class=\"line\">\t\t&lt;%--使用getXxx()方法获取对象的属性值 --%&gt;</span><br><span class=\"line\">     &lt;h2&gt;姓名：&lt;%=student.getStuno()%&gt;&lt;/h2&gt;</span><br><span class=\"line\">     &lt;h2&gt;性别：&lt;%=student.getStuname()%&gt;&lt;/h2&gt;</span><br><span class=\"line\">     &lt;h2&gt;年龄：&lt;%=student.getAge()%&gt;&lt;/h2&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200809121128124.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n当值来源是 request 参数时，jsp：setProperty 的语法如下：</p>\n<p>语法格式一：<br>\n　　　　&lt;jsp:setProperty name=“beanName” property=“propertyName” value=“string 字符串”/&gt;</p>\n<p>语法格式二：<br>\n　　　　&lt;jsp:setProperty name=“beanName” property=“propertyName” value=&quot;&lt;%= expression %&gt;&quot; /&gt;</p>\n<p>语法格式三：<br>\n　　　　&lt;jsp:setProperty name=“beanName” property=“propertyName” param=“parameterName”/&gt;</p>\n<p>语法格式四：<br>\n　　　　&lt;jsp:setProperty name=“beanName” property= “*” /&gt;</p>\n<p>先写一个表单；</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;form action=<span class=\"string\">&quot;NewFile.jsp&quot;</span> &gt;</span><br><span class=\"line\">\t\t请输入学号:&lt;input name=<span class=\"string\">&quot;stuno&quot;</span> type=<span class=\"string\">&quot;text&quot;</span>&gt;&lt;br&gt;</span><br><span class=\"line\">\t\t请输入姓名:&lt;input name=<span class=\"string\">&quot;stuname&quot;</span> type=<span class=\"string\">&quot;text&quot;</span>&gt;&lt;br&gt;</span><br><span class=\"line\">\t\t请输入年龄:&lt;input name=<span class=\"string\">&quot;stuage&quot;</span> type=<span class=\"string\">&quot;text&quot;</span>&gt;&lt;br&gt;\t</span><br><span class=\"line\">\t\t&lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;提交&quot;</span>&gt;</span><br><span class=\"line\">\t&lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200809121928367.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n使用单个请求参数为 bean 的属性赋值</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;jsp:useBean id=<span class=\"string\">&quot;student&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;com.zhukun.programmer.entity.Student&quot;</span> scope=<span class=\"string\">&quot;page&quot;</span>/&gt;</span><br><span class=\"line\">\t&lt;jsp:setProperty property=<span class=\"string\">&quot;stuno&quot;</span> name=<span class=\"string\">&quot;student&quot;</span> param=<span class=\"string\">&quot;stuno&quot;</span>/&gt;</span><br><span class=\"line\">\t\t&lt;%--使用getXxx()方法获取对象的属性值 --%&gt;</span><br><span class=\"line\">     &lt;h2&gt;学号：&lt;%=student.getStuno()%&gt;&lt;/h2&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200809121936799.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n用所有的请求参数为 bean 的属性赋值:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;jsp:useBean id=<span class=\"string\">&quot;student&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;com.zhukun.programmer.entity.Student&quot;</span> scope=<span class=\"string\">&quot;page&quot;</span>/&gt;</span><br><span class=\"line\">\t&lt;jsp:setProperty property=<span class=\"string\">&quot;*&quot;</span> name=<span class=\"string\">&quot;student&quot;</span>/&gt;</span><br><span class=\"line\">\t\t&lt;%--使用getXxx()方法获取对象的属性值 --%&gt;</span><br><span class=\"line\">     &lt;h2&gt;学号：&lt;%=student.getStuno()%&gt;&lt;/h2&gt;</span><br><span class=\"line\">     &lt;h2&gt;姓名：&lt;%=student.getStuname()%&gt;&lt;/h2&gt;</span><br><span class=\"line\">     &lt;h2&gt;年龄：&lt;%=student.getAge()%&gt;&lt;/h2&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200809121941240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"3-javabean的范围\"><a class=\"markdownIt-Anchor\" href=\"#3-javabean的范围\">#</a> 3、JavaBean 的范围</h1>\n<p>&lt;jsp:useBean id=“beanName” class=“package.class” scope=“page|request|session|application”/&gt;</p>\n<p>scope 说明它们之间的作用范围是不同的。<br>\n●page: 表示 JavaBean 对象的作用范围在实例化它的页面上，只在当前页面可用，在其他页面中不被认识。<br>\n●request: 表示 JavaBean 实例除了可以在当前页面上可用之外，还可以在通过 forward 方法跳转的目标页面中被认识到。<br>\n●session: 表示 JavaBean 对象可以存在 session 中，该对象可以被同一个用户的所有页面认识。<br>\n●application: 表示 JavaBean 对象可以存在 application 中，该对象可以被所有用户的所有页面认识。</p>\n",
            "tags": [
                "JavaWeb",
                "JSP",
                "JavaBean"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/25/%E4%B8%83%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/",
            "url": "http://yoursite.com/2020/08/25/%E4%B8%83%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/",
            "title": "Java设计模式-详谈七大设计原则",
            "date_published": "2020-08-25T13:05:52.367Z",
            "content_html": "<h1 id=\"一-设计模式的目的\"><a class=\"markdownIt-Anchor\" href=\"#一-设计模式的目的\">#</a> 一、设计模式的目的</h1>\n<p>编写软件过程中，程序员面临着来自耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性等多方面的挑战，设计模式是为了让程序 (软件)，具有更好：</p>\n<ol>\n<li><strong>代码重用性</strong> (即：相同功能的代码，不用多次编写)</li>\n<li><strong>可读性</strong> (即：编程规范性，便于其他程序员的阅读和理解)</li>\n<li><strong>可扩展性</strong> (即：当需要增加新的功能时，非常的方便，称为可维护)</li>\n<li><strong>可靠性</strong> (即：当我们增加新的功能后，对原来的功能没有影响)</li>\n<li>使程序呈现<strong>高内聚，低耦合</strong>的特性<br>\n<font color= red>（设计模式包含了面向对象的精髓，“懂了设计模式，你就懂了面向对象分析和设计 （OOA/D）的精要）</li>\n</ol>\n<h1 id=\"二-设计模式七大原则\"><a class=\"markdownIt-Anchor\" href=\"#二-设计模式七大原则\">#</a> 二、设计模式七大原则</h1>\n<p>设计模式原则，其实就是程序员在编程时，应当遵循的原则，也是各种设计模式的基础（即：<font color= red>设计模式为什么这样设计的依据）</p>\n<p><strong>设计模式常用的七大原则有:</strong></p>\n<ol>\n<li>单一职责原则</li>\n<li>接口隔离原则</li>\n<li>依赖倒转 (倒置) 原则</li>\n<li>里氏替换原则</li>\n<li>开闭原则</li>\n<li>迪米特法则</li>\n<li>合成复用原则</li>\n</ol>\n<h2 id=\"1-单一职责原则\"><a class=\"markdownIt-Anchor\" href=\"#1-单一职责原则\">#</a> 1、单一职责原则</h2>\n<p>1.1、基本介绍<br>\n对类来说的，即一个类应该只负责一项职责。如类 A 负责两个不同职责：职责 1，职责 2。 当职责 1 需求变更而改变 A 时，可能造成职责 2 执行错误，所以需要将类 A 的粒度分解为 A1，A2<br>\n1.2、应用实例<br>\n以交通工具案例讲解：<br>\n<strong>方案一：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleResponsibility1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tVehicle vehicle = <span class=\"keyword\">new</span> Vehicle();</span><br><span class=\"line\">\t\tvehicle.run(<span class=\"string\">&quot;轮船&quot;</span>);</span><br><span class=\"line\">\t\tvehicle.run(<span class=\"string\">&quot;汽车&quot;</span>);</span><br><span class=\"line\">\t\tvehicle.run(<span class=\"string\">&quot;飞机&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交通工具类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vehicle</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String vehicle)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(vehicle + <span class=\"string\">&quot; 在公路上运行....&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">轮船 在公路上运行....</span><br><span class=\"line\">汽车 在公路上运行....</span><br><span class=\"line\">飞机 在公路上运行....</span><br></pre></td></tr></table></figure>\n<p>分析：在方案一的 run 方法中，违反了单一职责原则。解决的方案非常的简单，根据交通工具运行方法不同，分解成不同类即可<br>\n<strong>方案二：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleResponsibility2</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tRoadVehicle roadVehicle = <span class=\"keyword\">new</span> RoadVehicle();</span><br><span class=\"line\">\t\troadVehicle.run(<span class=\"string\">&quot;汽车&quot;</span>);\t</span><br><span class=\"line\">\t\tWaterVehicle waterVehicle = <span class=\"keyword\">new</span>  WaterVehicle();</span><br><span class=\"line\">\t\twaterVehicle.run(<span class=\"string\">&quot;轮船&quot;</span>);</span><br><span class=\"line\">\t\tAirVehicle airVehicle = <span class=\"keyword\">new</span> AirVehicle();\t\t</span><br><span class=\"line\">\t\tairVehicle.run(<span class=\"string\">&quot;飞机&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoadVehicle</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String vehicle)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(vehicle + <span class=\"string\">&quot;公路运行&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AirVehicle</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String vehicle)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(vehicle + <span class=\"string\">&quot;天空运行&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaterVehicle</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String vehicle)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(vehicle + <span class=\"string\">&quot;水中运行&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：方案二<strong>严格遵守单一职责原则</strong>，但是这样做的改动很大，即将类分解，同时修改了客户端。改进：直接修改 Vehicle 类，改动的代码会比较少<br>\n<strong>方案 3:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleResponsibility3</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tVehicle2 vehicle2  = <span class=\"keyword\">new</span> Vehicle2();</span><br><span class=\"line\">\t\tvehicle2.run(<span class=\"string\">&quot;汽车&quot;</span>);</span><br><span class=\"line\">\t\tvehicle2.runWater(<span class=\"string\">&quot;轮船&quot;</span>);</span><br><span class=\"line\">\t\tvehicle2.runAir(<span class=\"string\">&quot;飞机&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vehicle2</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String vehicle)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//处理</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(vehicle + <span class=\"string\">&quot; 在公路上运行....&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runAir</span><span class=\"params\">(String vehicle)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(vehicle + <span class=\"string\">&quot; 在天空上运行....&quot;</span>);</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runWater</span><span class=\"params\">(String vehicle)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(vehicle + <span class=\"string\">&quot; 在水中行....&quot;</span>);</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">汽车 在公路上运行....</span><br><span class=\"line\">轮船 在水中行....</span><br><span class=\"line\">飞机 在天空上运行....</span><br></pre></td></tr></table></figure>\n<p>分析：方案三的这种修改方法没有对原来的类做大的修改，只是增加方法。这里<strong>虽然没有在类这个级别上遵守单一职责原则，但是在方法级别上，仍然是遵守单一职责</strong></p>\n<p>1.3、单一职责原则注意事项和细节</p>\n<ol>\n<li>降低类的复杂度，一个类只负责一项职责。</li>\n<li>提高类的可读性，可维护性</li>\n<li>降低变更引起的风险</li>\n<li>通常情况下，我们应当遵守单一职责原则。只有逻辑足够简单，才可以在代码级违反单一职责原则；只有类中方法数量足够少，才可以在方法级保持单一职责原则</li>\n</ol>\n<h2 id=\"2-接口隔离原则\"><a class=\"markdownIt-Anchor\" href=\"#2-接口隔离原则\">#</a> 2、接口隔离原则</h2>\n<p><strong>2.1、基本介绍</strong><br>\n客户端不应该依赖它不需要的接 口，即一个类对另一个类的依赖 应该建立在最小的接口上<br>\n例：写代码设计以下类图<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817173701524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Segregation1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Interface1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operation1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operation2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operation3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operation4</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operation5</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interface1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;B 实现了 operation1&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;B 实现了 operation2&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;B 实现了 operation3&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;B 实现了 operation4&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation5</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;B 实现了 operation5&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interface1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;D 实现了 operation1&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;D 实现了 operation2&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;D 实现了 operation3&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;D 实现了 operation4&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation5</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;D 实现了 operation5&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123; <span class=\"comment\">//A 类通过接口Interface1 依赖(使用) B类，但是只会用到1,2,3方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depend1</span><span class=\"params\">(Interface1 i)</span> </span>&#123;</span><br><span class=\"line\">\t\ti.operation1();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depend2</span><span class=\"params\">(Interface1 i)</span> </span>&#123;</span><br><span class=\"line\">\t\ti.operation2();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depend3</span><span class=\"params\">(Interface1 i)</span> </span>&#123;</span><br><span class=\"line\">\t\ti.operation3();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123; <span class=\"comment\">//C 类通过接口Interface1 依赖(使用) D类，但是只会用到1,4,5方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depend1</span><span class=\"params\">(Interface1 i)</span> </span>&#123;</span><br><span class=\"line\">\t\ti.operation1();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depend4</span><span class=\"params\">(Interface1 i)</span> </span>&#123;</span><br><span class=\"line\">\t\ti.operation4();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depend5</span><span class=\"params\">(Interface1 i)</span> </span>&#123;</span><br><span class=\"line\">\t\ti.operation5();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>产生问题：类 A 通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D，如果接口 Interface1 对于类 A 和类 C 来说不是最小接口， 那么类 B 和类 D 必须去实现他们不需要的方法。</p>\n<p>** 使用接口隔离原则改进：** 将接口 Interface1 拆分为独立的几个接口，类 A 和类 C 分别与他们需要的接口建立 依赖关系。也就是采用接口隔离原则 接口 Interface1 中出现的方法，根据实际情况拆分为三个。</p>\n<p>改进类图：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817175135319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Segregation1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用一把</span></span><br><span class=\"line\">\t\tA a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">\t\ta.depend1(<span class=\"keyword\">new</span> B()); <span class=\"comment\">// A类通过接口去依赖B类</span></span><br><span class=\"line\">\t\ta.depend2(<span class=\"keyword\">new</span> B());</span><br><span class=\"line\">\t\ta.depend3(<span class=\"keyword\">new</span> B());</span><br><span class=\"line\">\t\tC c = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">\t\tc.depend1(<span class=\"keyword\">new</span> D()); <span class=\"comment\">// C类通过接口去依赖(使用)D类</span></span><br><span class=\"line\">\t\tc.depend4(<span class=\"keyword\">new</span> D());</span><br><span class=\"line\">\t\tc.depend5(<span class=\"keyword\">new</span> D());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 接口1</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Interface1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operation1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 接口2</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Interface2</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operation2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operation3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 接口3</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Interface3</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operation4</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operation5</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interface1</span>, <span class=\"title\">Interface2</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;B 实现了 operation1&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;B 实现了 operation2&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;B 实现了 operation3&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interface1</span>, <span class=\"title\">Interface3</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;D 实现了 operation1&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;D 实现了 operation4&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation5</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;D 实现了 operation5&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123; <span class=\"comment\">// A 类通过接口Interface1,Interface2 依赖(使用) B类，但是只会用到1,2,3方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depend1</span><span class=\"params\">(Interface1 i)</span> </span>&#123;</span><br><span class=\"line\">\t\ti.operation1();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depend2</span><span class=\"params\">(Interface2 i)</span> </span>&#123;</span><br><span class=\"line\">\t\ti.operation2();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depend3</span><span class=\"params\">(Interface2 i)</span> </span>&#123;</span><br><span class=\"line\">\t\ti.operation3();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123; <span class=\"comment\">// C 类通过接口Interface1,Interface3 依赖(使用) D类，但是只会用到1,4,5方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depend1</span><span class=\"params\">(Interface1 i)</span> </span>&#123;</span><br><span class=\"line\">\t\ti.operation1();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depend4</span><span class=\"params\">(Interface3 i)</span> </span>&#123;</span><br><span class=\"line\">\t\ti.operation4();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">depend5</span><span class=\"params\">(Interface3 i)</span> </span>&#123;</span><br><span class=\"line\">\t\ti.operation5();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B 实现了 operation1</span><br><span class=\"line\">B 实现了 operation2</span><br><span class=\"line\">B 实现了 operation3</span><br><span class=\"line\">D 实现了 operation1</span><br><span class=\"line\">D 实现了 operation4</span><br><span class=\"line\">D 实现了 operation5</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-依赖倒转原则\"><a class=\"markdownIt-Anchor\" href=\"#3-依赖倒转原则\">#</a> 3、依赖倒转原则</h2>\n<p>3.1 基本介绍<br>\n依赖倒转原则是指：</p>\n<ol>\n<li>高层模块不应该依赖低层模块，二者都应该依赖其抽象</li>\n<li>抽象不应该依赖细节，细节应该依赖抽象</li>\n<li>依赖倒转 (倒置) 的中心思想是面向接口编程</li>\n<li>依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在 java 中，抽象指的是接口或抽象类，细节就是具体的实现类</li>\n<li>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的 任务交给他们的实现类去完成<br>\n<strong>应用实例：请编程完成 Person 接收消息的功能</strong></li>\n</ol>\n<p>方案一：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DependecyInversion</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tPerson person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t\tperson.receive(<span class=\"keyword\">new</span> Email());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Email</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;电子邮件信息: hello,world&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">receive</span><span class=\"params\">(Email email )</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(email.getInfo());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>分析</strong>：简单，比较容易想到。  产生问题： 如果我们获取的对象是 微信，短信等等，则新增类，同时 Perons 也要增加相应的接收方法。</p>\n<p><strong>使用依赖倒转原则改进：</strong> 引入一个抽象的接口 IReceiver, 表示接收者，这样 Person 类与接口 IReceiver 发生依赖。因为 Email, WeiXin 等属于接收的范围，他们各自实现 IReceiver 接口就 ok, 这样我们就符合依赖倒转原则</p>\n<p>方案二：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DependecyInversion</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//客户端无需改变</span></span><br><span class=\"line\">\t\tPerson person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t\tperson.receive(<span class=\"keyword\">new</span> Email());\t</span><br><span class=\"line\">\t\tperson.receive(<span class=\"keyword\">new</span> WeiXin());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IReceiver</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getInfo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Email</span> <span class=\"keyword\">implements</span> <span class=\"title\">IReceiver</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;电子邮件信息: hello,world&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//增加微信</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeiXin</span> <span class=\"keyword\">implements</span> <span class=\"title\">IReceiver</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;微信信息: hello,ok&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//方式2</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//这里我们是对接口的依赖</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">receive</span><span class=\"params\">(IReceiver receiver )</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(receiver.getInfo());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">电子邮件信息: hello,world</span><br><span class=\"line\">微信信息: hello,ok</span><br></pre></td></tr></table></figure>\n<p>3.2 依赖关系传递的三种方式<br>\n（1）通过接口传递：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DependencyPass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tChangHong changHong = <span class=\"keyword\">new</span> ChangHong();</span><br><span class=\"line\">\t\tOpenAndClose openAndClose = <span class=\"keyword\">new</span> OpenAndClose();</span><br><span class=\"line\">\t\topenAndClose.open(changHong);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 方式1： 通过接口传递实现依赖</span></span><br><span class=\"line\"><span class=\"comment\">// 开关的接口</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IOpenAndClose</span> </span>&#123;</span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>; <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ITV</span> </span>&#123; <span class=\"comment\">//ITV接口</span></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenAndClose</span> <span class=\"keyword\">implements</span> <span class=\"title\">IOpenAndClose</span></span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">public</span> ITV tv; <span class=\"comment\">//成员</span></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OpenAndClose</span><span class=\"params\">(ITV tv)</span></span>&#123; <span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t\t <span class=\"keyword\">this</span>.tv = tv;</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t <span class=\"keyword\">this</span>.tv.play();</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChangHong</span> <span class=\"keyword\">implements</span> <span class=\"title\">ITV</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;长虹电视机，打开&quot;</span>);</span><br><span class=\"line\">\t&#125;\t </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">长虹电视机，打开</span><br></pre></td></tr></table></figure>\n<p>（2）通过构造方法传递：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DependencyPass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tChangHong changHong = <span class=\"keyword\">new</span> ChangHong();\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//通过构造器进行依赖传递</span></span><br><span class=\"line\">\t\tOpenAndClose openAndClose = <span class=\"keyword\">new</span> OpenAndClose(changHong);</span><br><span class=\"line\">\t\topenAndClose.open();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 方式2: 通过构造方法依赖传递</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IOpenAndClose</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>; <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ITV</span> </span>&#123; <span class=\"comment\">//ITV接口</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenAndClose</span> <span class=\"keyword\">implements</span> <span class=\"title\">IOpenAndClose</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> ITV tv; <span class=\"comment\">//成员</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OpenAndClose</span><span class=\"params\">(ITV tv)</span></span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;                         <span class=\"comment\">//构造器</span></span><br><span class=\"line\">         <span class=\"keyword\">this</span>.tv = tv;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.tv.play();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>（3）通过 setter 方式传递：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DependencyPass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tChangHong changHong = <span class=\"keyword\">new</span> ChangHong();</span><br><span class=\"line\">\t\t<span class=\"comment\">//通过setter方法进行依赖传递</span></span><br><span class=\"line\">\t\tOpenAndClose openAndClose = <span class=\"keyword\">new</span> OpenAndClose();</span><br><span class=\"line\">\t\topenAndClose.setTv(changHong);</span><br><span class=\"line\">\t\topenAndClose.open();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IOpenAndClose</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 抽象方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTv</span><span class=\"params\">(ITV tv)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ITV</span> </span>&#123; <span class=\"comment\">// ITV接口</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenAndClose</span> <span class=\"keyword\">implements</span> <span class=\"title\">IOpenAndClose</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ITV tv;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTv</span><span class=\"params\">(ITV tv)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.tv = tv;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.tv.play();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChangHong</span> <span class=\"keyword\">implements</span> <span class=\"title\">ITV</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;长虹电视机，打开&quot;</span>);</span><br><span class=\"line\">\t&#125;\t </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>3.3 依赖倒转原则的注意事项和细节</strong></p>\n<ol>\n<li>低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好.</li>\n<li>变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在 一个缓冲层，利于程序扩展和优化</li>\n<li>继承时遵循里氏替换原则</li>\n</ol>\n<h2 id=\"4-里氏替换原则\"><a class=\"markdownIt-Anchor\" href=\"#4-里氏替换原则\">#</a> 4、里氏替换原则</h2>\n<p><strong>4.1OO 中的继承性的思考和说明：</strong><br>\n（1）继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。<br>\n（2）继承在给程序设计带来便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低，增加对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子<br>\n类的功能都有可能产生故障<br>\n（3）问题提出：在编程中，如何正确的使用继承？=&gt; 里氏替换原则<br>\n<strong> 4.2、基本介绍</strong></p>\n<ol>\n<li>里氏替换原则 (Liskov Substitution Principle) 在 1988 年，由麻省理工学院的以为姓里 的女士提出的。</li>\n<li>如果对每个类型为 T1 的对象 o1，都有类型为 T2 的对象 o2，使得以 T1 定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象。</li>\n<li>在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法</li>\n<li>里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖 来解决问</li>\n</ol>\n<p><strong>4.3、应用实例</strong><br>\n看下列程序，思考下问题和解决思路</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.principle.liskov;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Liskov</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tA a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;11-3=&quot;</span> + a.func1(<span class=\"number\">11</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;1-8=&quot;</span> + a.func1(<span class=\"number\">1</span>, <span class=\"number\">8</span>));</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;-----------------------&quot;</span>);</span><br><span class=\"line\">\t\tB b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;11-3=&quot;</span> + b.func1(<span class=\"number\">11</span>, <span class=\"number\">3</span>));<span class=\"comment\">//这里本意是求出11-3</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;1-8=&quot;</span> + b.func1(<span class=\"number\">1</span>, <span class=\"number\">8</span>));<span class=\"comment\">// 1-8</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;11+3+9=&quot;</span> + b.func2(<span class=\"number\">11</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// A类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回两个数的差</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">func1</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// B类继承了A</span></span><br><span class=\"line\"><span class=\"comment\">// 增加了一个新功能：完成两个数相加,然后和9求和</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//这里，重写了A类的方法, 可能是无意识</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">func1</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> func1(a, b) + <span class=\"number\">9</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">3</span>=<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">1</span>-<span class=\"number\">8</span>=-<span class=\"number\">7</span></span><br><span class=\"line\">-----------------------</span><br><span class=\"line\"><span class=\"number\">11</span>-<span class=\"number\">3</span>=<span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"number\">1</span>-<span class=\"number\">8</span>=<span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">11</span>+<span class=\"number\">3</span>+<span class=\"number\">9</span>=<span class=\"number\">23</span></span><br></pre></td></tr></table></figure>\n<p>分析：1-8=9；我们发现现原来运行正常的相减功能发生了错误。原因就是类 B 无意中重写了父类的方法，造成原有功能出现错误。在实际编程中，我们常常会通过重写父类的方法完 成新的功能，这样写起来虽然简单，但整个继承体系的复用性会比较差。特别是运行多态比较频繁的时候。</p>\n<p>解决方法：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖，聚合，组合等关系代替.</p>\n<p><strong>（里氏替换原则改进）</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081721581598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Liskov</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tA a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;11-3=&quot;</span> + a.func1(<span class=\"number\">11</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;1-8=&quot;</span> + a.func1(<span class=\"number\">1</span>, <span class=\"number\">8</span>));</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;-----------------------&quot;</span>);</span><br><span class=\"line\">\t\tB b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">\t\t<span class=\"comment\">//因为B类不再继承A类，因此调用者，不会再func1是求减法</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//调用完成的功能就会很明确</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;11+3=&quot;</span> + b.func1(<span class=\"number\">11</span>, <span class=\"number\">3</span>));<span class=\"comment\">//这里本意是求出11+3</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;1+8=&quot;</span> + b.func1(<span class=\"number\">1</span>, <span class=\"number\">8</span>));<span class=\"comment\">// 1+8</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;11+3+9=&quot;</span> + b.func2(<span class=\"number\">11</span>, <span class=\"number\">3</span>));\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用组合仍然可以使用到A类相关方法</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;11-3=&quot;</span> + b.func3(<span class=\"number\">11</span>, <span class=\"number\">3</span>));<span class=\"comment\">// 这里本意是求出11-3\t\t</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建一个更加基础的基类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//把更加基础的方法和成员写到Base类</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// A类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回两个数的差</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">func1</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// B类继承了A</span></span><br><span class=\"line\"><span class=\"comment\">// 增加了一个新功能：完成两个数相加,然后和9求和</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果B需要使用A类的方法,使用组合关系</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> A a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">\t<span class=\"comment\">//这里，重写了A类的方法, 可能是无意识</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">func1</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> func1(a, b) + <span class=\"number\">9</span>;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"comment\">//我们仍然想使用A的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">func3</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a.func1(a, b);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-开闭原则\"><a class=\"markdownIt-Anchor\" href=\"#5-开闭原则\">#</a> 5、 开闭原则</h2>\n<p><strong>5.1 基本介绍</strong></p>\n<ol>\n<li>开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则</li>\n<li>一个软件实体如类，模块和函数应该对扩展开放 (对提供方)，对修改关闭 (对使用方)。用抽象构建框架，用实现扩展细节。</li>\n<li>当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已 有的代码来实现变化。</li>\n<li>编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则</li>\n</ol>\n<p><strong>5.2 应用实例</strong><br>\n看一个画图形的功能<br>\n类图：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818094219542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n原来的代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GraphicEditor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawShape</span><span class=\"params\">(Shape s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.m_type == <span class=\"number\">1</span>)</span><br><span class=\"line\">            drawRectangle(s);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.m_type == <span class=\"number\">2</span>)</span><br><span class=\"line\">            drawCircle(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawRectangle</span><span class=\"params\">(Shape r)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;绘制矩形&quot;</span>);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(Shape r)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;绘制圆形&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_type;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    Rectangle() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.m_type = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    Circle() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.m_type = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">绘制矩形 </span><br><span class=\"line\">绘制圆形 </span><br></pre></td></tr></table></figure>\n<p>分析：优点是比较好理解，简单易操作。缺点是违反了设计模式的 ocp 原则，即对扩展方 (提供方)，对修改关闭 (使用方)。 即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码.<br>\n 比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ocp</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用看看存在的问题</span></span><br><span class=\"line\">\t\tGraphicEditor graphicEditor = <span class=\"keyword\">new</span> GraphicEditor();</span><br><span class=\"line\">\t\tgraphicEditor.drawShape(<span class=\"keyword\">new</span> Rectangle());</span><br><span class=\"line\">\t\tgraphicEditor.drawShape(<span class=\"keyword\">new</span> Circle());</span><br><span class=\"line\">\t\tgraphicEditor.drawShape(<span class=\"keyword\">new</span> Triangle());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这是一个用于绘图的类 [使用方]</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GraphicEditor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//接收Shape对象，然后根据type，来绘制不同的图形</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawShape</span><span class=\"params\">(Shape s)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (s.m_type == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tdrawRectangle(s);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.m_type == <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\tdrawCircle(s);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.m_type == <span class=\"number\">3</span>)</span><br><span class=\"line\">\t\t\tdrawTriangle(s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//绘制矩形</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawRectangle</span><span class=\"params\">(Shape r)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot; 绘制矩形 &quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//绘制圆形</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(Shape r)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot; 绘制圆形 &quot;</span>);</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"comment\">//绘制三角形</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawTriangle</span><span class=\"params\">(Shape r)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot; 绘制三角形 &quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Shape类，基类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_type;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\tRectangle() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.m_type = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\tCircle() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.m_type = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//新增画三角形</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Triangle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\tTriangle() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.m_type = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">绘制矩形 </span><br><span class=\"line\">绘制圆形 </span><br><span class=\"line\">绘制三角形 </span><br></pre></td></tr></table></figure>\n<p>我们发现我们这时要新增加一个图形种类 三角形，我们需要做如下修改，修改的地方较多</p>\n<p>改进思路：把创建 Shape 类做成抽象类，并提供一个抽象的 draw 方法，让子类去实现即可， 这样我们有新的图形种类时，只需要让新的图形类继承 Shape，并实现 draw 方法即可， <strong>使用方的代码就不需要修 -&gt;</strong> 满足了开闭原则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ocp</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用看看存在的问题</span></span><br><span class=\"line\">\t\tGraphicEditor graphicEditor = <span class=\"keyword\">new</span> GraphicEditor();</span><br><span class=\"line\">\t\tgraphicEditor.drawShape(<span class=\"keyword\">new</span> Rectangle());</span><br><span class=\"line\">\t\tgraphicEditor.drawShape(<span class=\"keyword\">new</span> Circle());</span><br><span class=\"line\">\t\tgraphicEditor.drawShape(<span class=\"keyword\">new</span> Triangle());</span><br><span class=\"line\">\t\tgraphicEditor.drawShape(<span class=\"keyword\">new</span> OtherGraphic());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这是一个用于绘图的类 [使用方]</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GraphicEditor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//接收Shape对象，调用draw方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawShape</span><span class=\"params\">(Shape s)</span> </span>&#123;</span><br><span class=\"line\">\t\ts.draw();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Shape类，基类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_type;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;<span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\tRectangle() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.m_type = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot; 绘制矩形 &quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\tCircle() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.m_type = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot; 绘制圆形 &quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//新增画三角形</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Triangle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\tTriangle() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.m_type = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot; 绘制三角形 &quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//新增一个图形</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OtherGraphic</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\tOtherGraphic() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.m_type = <span class=\"number\">4</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot; 绘制其它图形 &quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">绘制矩形 </span><br><span class=\"line\">绘制圆形 </span><br><span class=\"line\">绘制三角形 </span><br><span class=\"line\">绘制其它图形</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-迪米特法则\"><a class=\"markdownIt-Anchor\" href=\"#6-迪米特法则\">#</a> 6、迪米特法则</h2>\n<p><strong>6.1 基本介绍：</strong></p>\n<ol>\n<li>一个对象应该对其他对象保持最少的了解</li>\n<li>类与类关系越密切，耦合度越大</li>\n<li>迪米特法则 (DemeterPrinciple) 又叫最少知道原则，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的 public 方法，不对外泄露任何信息</li>\n<li>迪米特法则还有个更简单的定义：只与直接的朋友通信</li>\n<li>直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部</li>\n</ol>\n<p><strong>6.2 应用实例：</strong><br>\n有一个学校，下属有各个学院和 总部，现要求打印出学校总部员 工 ID 和学院员工的 id</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"comment\">//客户端</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demeter1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建了一个 SchoolManager 对象</span></span><br><span class=\"line\">\t\tSchoolManager schoolManager = <span class=\"keyword\">new</span> SchoolManager();</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出学院的员工id 和  学校总部的员工信息</span></span><br><span class=\"line\">\t\tschoolManager.printAllEmployee(<span class=\"keyword\">new</span> CollegeManager());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//学校总部员工类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//学院的员工类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CollegeEmployee</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//管理学院员工的管理类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CollegeManager</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//返回学院的所有员工</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;CollegeEmployee&gt; <span class=\"title\">getAllEmployee</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;CollegeEmployee&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;CollegeEmployee&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123; <span class=\"comment\">//这里我们增加了10个员工到 list</span></span><br><span class=\"line\">\t\t\tCollegeEmployee emp = <span class=\"keyword\">new</span> CollegeEmployee();</span><br><span class=\"line\">\t\t\temp.setId(<span class=\"string\">&quot;学院员工id= &quot;</span> + i);</span><br><span class=\"line\">\t\t\tlist.add(emp);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//学校管理类</span></span><br><span class=\"line\"><span class=\"comment\">//分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager</span></span><br><span class=\"line\"><span class=\"comment\">//CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SchoolManager</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//返回学校总部的员工</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Employee&gt; <span class=\"title\">getAllEmployee</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;Employee&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Employee&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123; <span class=\"comment\">//这里我们增加了5个员工到 list</span></span><br><span class=\"line\">\t\t\tEmployee emp = <span class=\"keyword\">new</span> Employee();</span><br><span class=\"line\">\t\t\temp.setId(<span class=\"string\">&quot;学校总部员工id= &quot;</span> + i);</span><br><span class=\"line\">\t\t\tlist.add(emp);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//该方法完成输出学校总部和学院员工信息(id)</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printAllEmployee</span><span class=\"params\">(CollegeManager sub)</span> </span>&#123;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//分析问题</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 这里的 CollegeEmployee 不是  SchoolManager的直接朋友</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2. CollegeEmployee 是以局部变量方式出现在 SchoolManager</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//3. 违反了 迪米特法则 </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//获取到学院员工</span></span><br><span class=\"line\">\t\tList&lt;CollegeEmployee&gt; list1 = sub.getAllEmployee();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------学院员工------------&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (CollegeEmployee e : list1) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.getId());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取到学校总部员工</span></span><br><span class=\"line\">\t\tList&lt;Employee&gt; list2 = <span class=\"keyword\">this</span>.getAllEmployee();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------学校总部员工------------&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Employee e : list2) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.getId());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------------学院员工------------</span><br><span class=\"line\">学院员工id= <span class=\"number\">0</span></span><br><span class=\"line\">学院员工id= <span class=\"number\">1</span></span><br><span class=\"line\">学院员工id= <span class=\"number\">2</span></span><br><span class=\"line\">学院员工id= <span class=\"number\">3</span></span><br><span class=\"line\">学院员工id= <span class=\"number\">4</span></span><br><span class=\"line\">学院员工id= <span class=\"number\">5</span></span><br><span class=\"line\">学院员工id= <span class=\"number\">6</span></span><br><span class=\"line\">学院员工id= <span class=\"number\">7</span></span><br><span class=\"line\">学院员工id= <span class=\"number\">8</span></span><br><span class=\"line\">学院员工id= <span class=\"number\">9</span></span><br><span class=\"line\">------------学校总部员工------------</span><br><span class=\"line\">学校总部员工id= <span class=\"number\">0</span></span><br><span class=\"line\">学校总部员工id= <span class=\"number\">1</span></span><br><span class=\"line\">学校总部员工id= <span class=\"number\">2</span></span><br><span class=\"line\">学校总部员工id= <span class=\"number\">3</span></span><br><span class=\"line\">学校总部员工id= <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>分析：前面设计的问题在于 SchoolManager 中，CollegeEmployee 类并不是 SchoolManager 类的直接朋友 ，违反了迪米特法则。按照迪米特法则，应该避免类中出现这样非直接朋友关系的耦合。</p>\n<p>按照迪米特法则进行改进：将输出学院的员工方法，封装到 CollegeManager</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"comment\">//客户端</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demeter1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;~~~使用迪米特法则的改进~~~&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建了一个 SchoolManager 对象</span></span><br><span class=\"line\">\t\tSchoolManager schoolManager = <span class=\"keyword\">new</span> SchoolManager();</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出学院的员工id 和  学校总部的员工信息</span></span><br><span class=\"line\">\t\tschoolManager.printAllEmployee(<span class=\"keyword\">new</span> CollegeManager());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//学校总部员工类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//学院的员工类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CollegeEmployee</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//管理学院员工的管理类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CollegeManager</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//返回学院的所有员工</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;CollegeEmployee&gt; <span class=\"title\">getAllEmployee</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;CollegeEmployee&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;CollegeEmployee&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123; <span class=\"comment\">//这里我们增加了10个员工到 list</span></span><br><span class=\"line\">\t\t\tCollegeEmployee emp = <span class=\"keyword\">new</span> CollegeEmployee();</span><br><span class=\"line\">\t\t\temp.setId(<span class=\"string\">&quot;学院员工id= &quot;</span> + i);</span><br><span class=\"line\">\t\t\tlist.add(emp);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"comment\">//输出学院员工的信息</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printEmployee</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取到学院员工</span></span><br><span class=\"line\">\t\tList&lt;CollegeEmployee&gt; list1 = getAllEmployee();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------学院员工------------&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (CollegeEmployee e : list1) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.getId());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//学校管理类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SchoolManager</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//返回学校总部的员工</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Employee&gt; <span class=\"title\">getAllEmployee</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;Employee&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Employee&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123; <span class=\"comment\">//这里我们增加了5个员工到 list</span></span><br><span class=\"line\">\t\t\tEmployee emp = <span class=\"keyword\">new</span> Employee();</span><br><span class=\"line\">\t\t\temp.setId(<span class=\"string\">&quot;学校总部员工id= &quot;</span> + i);</span><br><span class=\"line\">\t\t\tlist.add(emp);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//该方法完成输出学校总部和学院员工信息(id)</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printAllEmployee</span><span class=\"params\">(CollegeManager sub)</span> </span>&#123;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//分析问题</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 将输出学院的员工方法，封装到CollegeManager</span></span><br><span class=\"line\">\t\tsub.printEmployee();</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取到学校总部员工</span></span><br><span class=\"line\">\t\tList&lt;Employee&gt; list2 = <span class=\"keyword\">this</span>.getAllEmployee();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------学校总部员工------------&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Employee e : list2) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.getId());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>6.3 迪米特法则注意事项和细节</strong></p>\n<ol>\n<li>迪米特法则的核心是降低类之间的耦合</li>\n<li>但是注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间 (对象间) 耦合关系，并不是要求完全没有依赖关系</li>\n</ol>\n<h2 id=\"7-合成复用原则\"><a class=\"markdownIt-Anchor\" href=\"#7-合成复用原则\">#</a> 7、合成复用原则</h2>\n<p><strong>7.1 基本介绍</strong><br>\n原则是尽量使用合成 / 聚合的方式，而不是使用继承<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818104037718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"三-设计原则核心思想\"><a class=\"markdownIt-Anchor\" href=\"#三-设计原则核心思想\">#</a> 三、设计原则核心思想</h1>\n<ol>\n<li>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代 码混在一起</li>\n<li>针对接口编程，而不是针对实现编程。</li>\n<li>为了交互对象之间的松耦合设计而努力</li>\n</ol>\n",
            "tags": [
                "设计模式",
                "七大原则"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/25/python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8Bpyecharts(%E4%B8%80)%E2%80%94%E2%80%94%E6%9F%B1%E7%8A%B6%E5%9B%BE%E3%80%81%E6%8A%98%E7%BA%BF%E5%9B%BE%E3%80%81%E6%95%A3%E7%82%B9%E5%9B%BE%E3%80%81%E9%A5%BC%E5%9B%BE%E3%80%81%E8%AF%8D%E4%BA%91%E7%9A%84%E7%BB%98%E5%88%B6/",
            "url": "http://yoursite.com/2020/08/25/python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8Bpyecharts(%E4%B8%80)%E2%80%94%E2%80%94%E6%9F%B1%E7%8A%B6%E5%9B%BE%E3%80%81%E6%8A%98%E7%BA%BF%E5%9B%BE%E3%80%81%E6%95%A3%E7%82%B9%E5%9B%BE%E3%80%81%E9%A5%BC%E5%9B%BE%E3%80%81%E8%AF%8D%E4%BA%91%E7%9A%84%E7%BB%98%E5%88%B6/",
            "title": "python数据可视化之pyecharts(一)——柱状图、折线图、散点图、饼图、词云的绘制",
            "date_published": "2020-08-25T13:05:52.365Z",
            "content_html": "<h1 id=\"1-下载安装pyecharts\"><a class=\"markdownIt-Anchor\" href=\"#1-下载安装pyecharts\">#</a> 1、下载安装 pyecharts</h1>\n<p>cmd 输入以下命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyecharts</span><br></pre></td></tr></table></figure>\n<p>如果是用的 pycharm 可以直接在 Terminal 中输入<br>\n（如果上述命令没有效果的话，可用下面的命令）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install pyecharts  --trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org</span><br></pre></td></tr></table></figure>\n<p>关于版本问题我在这提一下，最新版本的 pyecharts 导入代码是<br>\n比如导入 Bar 库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Bar</span><br></pre></td></tr></table></figure>\n<p>而旧版本的是直接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> Bar</span><br></pre></td></tr></table></figure>\n<p>如果导入库的时候出现错误可考虑版本问题，建议还是使用以前的版本</p>\n<p>如果想直接将图片保存为 png, pdf, gif 格式的文件，可以使用 pyecharts-snapshot。<br>\npip 安装</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyecharts_snapshot</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-学习pyecharts\"><a class=\"markdownIt-Anchor\" href=\"#2-学习pyecharts\">#</a> 2、学习 pyecharts</h1>\n<p>Echarts 是一个由百度开源的数据可视化，凭借着良好的交互性，精巧的图表设计，得到了众多开发者的认可。而 Python 是一门富有表达力的语言，很适合用于数据处理。当数据分析遇上数据可视化时，pyecharts 诞生了。</p>\n<h2 id=\"1-制作动态柱状图\"><a class=\"markdownIt-Anchor\" href=\"#1-制作动态柱状图\">#</a> 1、制作动态柱状图</h2>\n<p><strong>1、单属性柱状图</strong></p>\n<p>导入库：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> Bar</span><br><span class=\"line\">name_list = [<span class=\"string\">&quot;苹果&quot;</span>, <span class=\"string\">&quot;梨子&quot;</span>, <span class=\"string\">&quot;香蕉&quot;</span>, <span class=\"string\">&quot;葡萄&quot;</span>]<span class=\"comment\">#柱状图属性名称</span></span><br><span class=\"line\">value_list = [<span class=\"number\">15</span>, <span class=\"number\">25</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]<span class=\"comment\">#属性值</span></span><br><span class=\"line\"><span class=\"comment\"># 默认Bar()第一个参数为 主标题,第二个参数为副标题</span></span><br><span class=\"line\">bar1 = Bar(<span class=\"string\">&#x27;水果数量&#x27;</span>, <span class=\"string\">&#x27;Theme&#x27;</span>, title_color=<span class=\"string\">&#x27;#5599ff&#x27;</span>, subtitle_color=<span class=\"string\">&#x27;#00ffff&#x27;</span>,</span><br><span class=\"line\">           background_color=<span class=\"string\">&quot;white&quot;</span>, title_pos=<span class=\"string\">&#x27;center&#x27;</span>, title_top=<span class=\"string\">&#x27;5%&#x27;</span>,)</span><br><span class=\"line\"><span class=\"comment\"># background_color 背景颜色 title_top标题距离顶端位置  title_pos标题中心位置</span></span><br><span class=\"line\"><span class=\"comment\"># title_color主标题颜色 subtitle_color副标题颜色</span></span><br><span class=\"line\">bar1.add(<span class=\"string\">&quot;水果&quot;</span>, name_list, value_list)<span class=\"comment\">#将数据加入柱状图中</span></span><br><span class=\"line\">bar1.render(<span class=\"string\">&#x27;./图像/单属性柱状图.html&#x27;</span>)<span class=\"comment\">#保存为HTML格式，也可保存为jpg，png，gif等</span></span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824172243269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n提一下，’./ 图像 / 单属性柱状图.html’是保存为 html 文件以及文件路径我是保存在了当前项目的图像文件夹中（根据自己需求来写）<br>\n<strong>2、多属性柱状图</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> Bar</span><br><span class=\"line\">name_list = [<span class=\"string\">&quot;苹果&quot;</span>, <span class=\"string\">&quot;梨子&quot;</span>, <span class=\"string\">&quot;香蕉&quot;</span>, <span class=\"string\">&quot;葡萄&quot;</span>]<span class=\"comment\">#柱状图属性名称</span></span><br><span class=\"line\">value_list0 = [<span class=\"number\">15</span>, <span class=\"number\">25</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]<span class=\"comment\">#属性值0</span></span><br><span class=\"line\">value_list1 = [<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>]<span class=\"comment\">#属性值1</span></span><br><span class=\"line\">value_list2 = [<span class=\"number\">20</span>, <span class=\"number\">5</span>, <span class=\"number\">30</span>, <span class=\"number\">15</span>]<span class=\"comment\">#属性值2</span></span><br><span class=\"line\">bar2 = Bar(title = <span class=\"string\">&quot;水果数量&quot;</span>)<span class=\"comment\">#生成对象，title为柱状图标题</span></span><br><span class=\"line\">bar2.add(<span class=\"string\">&quot;商家0&quot;</span>, name_list, value_list0)<span class=\"comment\">#将数据加入柱状图中</span></span><br><span class=\"line\">bar2.add(<span class=\"string\">&quot;商家1&quot;</span>, name_list, value_list1)<span class=\"comment\">#将数据加入柱状图中</span></span><br><span class=\"line\">bar2.add(<span class=\"string\">&quot;商家2&quot;</span>, name_list, value_list2)<span class=\"comment\">#将数据加入柱状图中</span></span><br><span class=\"line\">bar2.render(<span class=\"string\">&#x27;./图像/多属性柱状图.html&#x27;</span>)<span class=\"comment\">#保存为HTML格式，也可保存为jpg，png，gif等</span></span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824172835892.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n图像是可进行动态操作的，也就是说上面的三个商家的图标是可以点的，想要看哪个就可以把哪个图标点亮，当鼠标移动到对应的柱状图上时会显示对应的数据信息。<br>\n<strong>3、堆叠柱状图</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> Bar <span class=\"comment\">#导入相应包</span></span><br><span class=\"line\">name_list = [<span class=\"string\">&quot;苹果&quot;</span>, <span class=\"string\">&quot;梨子&quot;</span>, <span class=\"string\">&quot;香蕉&quot;</span>, <span class=\"string\">&quot;葡萄&quot;</span>]<span class=\"comment\">#柱状图属性名称</span></span><br><span class=\"line\">value_list0 = [<span class=\"number\">15</span>, <span class=\"number\">25</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]<span class=\"comment\">#属性值0</span></span><br><span class=\"line\">value_list1 = [<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>]<span class=\"comment\">#属性值1</span></span><br><span class=\"line\">value_list2 = [<span class=\"number\">20</span>, <span class=\"number\">5</span>, <span class=\"number\">30</span>, <span class=\"number\">15</span>]<span class=\"comment\">#属性值2</span></span><br><span class=\"line\">bar3 = Bar(title=<span class=\"string\">&quot;水果数量&quot;</span>)<span class=\"comment\">#生成对象，title为柱状图标题</span></span><br><span class=\"line\"><span class=\"comment\">#is_stack=True表示将数据堆叠，is_label_show=True表示显示对应数值</span></span><br><span class=\"line\">bar3.add(<span class=\"string\">&quot;商家0&quot;</span>, name_list, value_list0, is_stack=<span class=\"literal\">True</span>, is_label_show=<span class=\"literal\">True</span>)</span><br><span class=\"line\">bar3.add(<span class=\"string\">&quot;商家1&quot;</span>, name_list, value_list1, is_stack=<span class=\"literal\">True</span>, is_label_show=<span class=\"literal\">True</span>)</span><br><span class=\"line\">bar3.add(<span class=\"string\">&quot;商家2&quot;</span>, name_list, value_list2, is_stack=<span class=\"literal\">True</span>, is_label_show=<span class=\"literal\">True</span>)</span><br><span class=\"line\">bar3.render(<span class=\"string\">&#x27;./图像/堆叠柱状图.html&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824173300796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong> 4、x 和 y 轴交换柱状图</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> Bar <span class=\"comment\">#导入相应包</span></span><br><span class=\"line\">name_list = [<span class=\"string\">&quot;苹果&quot;</span>, <span class=\"string\">&quot;梨子&quot;</span>, <span class=\"string\">&quot;香蕉&quot;</span>, <span class=\"string\">&quot;葡萄&quot;</span>]<span class=\"comment\">#柱状图属性名称</span></span><br><span class=\"line\">value_list0 = [<span class=\"number\">15</span>, <span class=\"number\">25</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]<span class=\"comment\">#属性值0</span></span><br><span class=\"line\">value_list1 = [<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>]<span class=\"comment\">#属性值1</span></span><br><span class=\"line\">value_list2 = [<span class=\"number\">20</span>, <span class=\"number\">5</span>, <span class=\"number\">30</span>, <span class=\"number\">15</span>]<span class=\"comment\">#属性值2</span></span><br><span class=\"line\">bar4 = Bar(title=<span class=\"string\">&quot;水果数量&quot;</span>)<span class=\"comment\">#生成对象，title为柱状图标题</span></span><br><span class=\"line\">bar4.add(<span class=\"string\">&quot;商家0&quot;</span>, name_list, value_list0, is_label_show=<span class=\"literal\">True</span>)</span><br><span class=\"line\">bar4.add(<span class=\"string\">&quot;商家1&quot;</span>, name_list, value_list1, is_label_show=<span class=\"literal\">True</span>)</span><br><span class=\"line\">bar4.add(<span class=\"string\">&quot;商家2&quot;</span>, name_list, value_list2, is_label_show=<span class=\"literal\">True</span>, is_convert=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\">#is_convert=True,xy轴交换</span></span><br><span class=\"line\">bar4.render(<span class=\"string\">&quot;./图像/xy轴交换柱状图.html&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824200814221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong> 5、时间线动态柱状图</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> Bar, Timeline<span class=\"comment\">#Timeline展示时间线的包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\">attr = [<span class=\"string\">&quot;苹果&quot;</span>, <span class=\"string\">&quot;梨&quot;</span>, <span class=\"string\">&quot;西瓜&quot;</span>, <span class=\"string\">&quot;橙子&quot;</span>, <span class=\"string\">&quot;菠萝&quot;</span>, <span class=\"string\">&quot;葡萄&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#图1</span></span><br><span class=\"line\">bar_1 = Bar(<span class=\"string\">&quot;2016 年销量&quot;</span>, <span class=\"string\">&quot;数据纯属虚构&quot;</span>)</span><br><span class=\"line\">bar_1.add(<span class=\"string\">&quot;春季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\">bar_1.add(<span class=\"string\">&quot;夏季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\">bar_1.add(<span class=\"string\">&quot;秋季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\">bar_1.add(<span class=\"string\">&quot;冬季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\"><span class=\"comment\">#图2</span></span><br><span class=\"line\">bar_2 = Bar(<span class=\"string\">&quot;2017 年销量&quot;</span>, <span class=\"string\">&quot;数据纯属虚构&quot;</span>)</span><br><span class=\"line\">bar_2.add(<span class=\"string\">&quot;春季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\">bar_2.add(<span class=\"string\">&quot;夏季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\">bar_2.add(<span class=\"string\">&quot;秋季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\">bar_2.add(<span class=\"string\">&quot;冬季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\"><span class=\"comment\">#图3</span></span><br><span class=\"line\">bar_3 = Bar(<span class=\"string\">&quot;2018 年销量&quot;</span>, <span class=\"string\">&quot;数据纯属虚构&quot;</span>)</span><br><span class=\"line\">bar_3.add(<span class=\"string\">&quot;春季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\">bar_3.add(<span class=\"string\">&quot;夏季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\">bar_3.add(<span class=\"string\">&quot;秋季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\">bar_3.add(<span class=\"string\">&quot;冬季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\"><span class=\"comment\">#图4</span></span><br><span class=\"line\">bar_4 = Bar(<span class=\"string\">&quot;2019 年销量&quot;</span>, <span class=\"string\">&quot;数据纯属虚构&quot;</span>)</span><br><span class=\"line\">bar_4.add(<span class=\"string\">&quot;春季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\">bar_4.add(<span class=\"string\">&quot;夏季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\">bar_4.add(<span class=\"string\">&quot;秋季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\">bar_4.add(<span class=\"string\">&quot;冬季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\"><span class=\"comment\">#图5</span></span><br><span class=\"line\">bar_5 = Bar(<span class=\"string\">&quot;2020 年销量&quot;</span>, <span class=\"string\">&quot;数据纯属虚构&quot;</span>)</span><br><span class=\"line\">bar_5.add(<span class=\"string\">&quot;春季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\">bar_5.add(<span class=\"string\">&quot;夏季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\">bar_5.add(<span class=\"string\">&quot;秋季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)])</span><br><span class=\"line\">bar_5.add(<span class=\"string\">&quot;冬季&quot;</span>, attr, [randint(<span class=\"number\">10</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>)], is_legend_show=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\">#将上面的图按时间点加入时间线</span></span><br><span class=\"line\">timeline = Timeline(is_auto_play=<span class=\"literal\">True</span>, timeline_bottom=<span class=\"number\">0</span>)</span><br><span class=\"line\">timeline.add(bar_1, <span class=\"string\">&#x27;2016 年&#x27;</span>)</span><br><span class=\"line\">timeline.add(bar_2, <span class=\"string\">&#x27;2017 年&#x27;</span>)</span><br><span class=\"line\">timeline.add(bar_3, <span class=\"string\">&#x27;2018 年&#x27;</span>)</span><br><span class=\"line\">timeline.add(bar_4, <span class=\"string\">&#x27;2019 年&#x27;</span>)</span><br><span class=\"line\">timeline.add(bar_5, <span class=\"string\">&#x27;2020 年&#x27;</span>)</span><br><span class=\"line\">timeline.render(<span class=\"string\">&#x27;./图像/时间线动态柱状图.html&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824201243361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-折线图\"><a class=\"markdownIt-Anchor\" href=\"#2-折线图\">#</a> 2、折线图</h2>\n<p><strong>1、普通折线图</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 折线图</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> Line <span class=\"comment\">#导入相应包</span></span><br><span class=\"line\">name_list = [<span class=\"string\">&quot;冰箱&quot;</span>, <span class=\"string\">&quot;电视&quot;</span>, <span class=\"string\">&quot;空调&quot;</span>, <span class=\"string\">&quot;洗衣机&quot;</span>]<span class=\"comment\">#属性名称</span></span><br><span class=\"line\">value_list0 = [<span class=\"number\">15</span>, <span class=\"number\">25</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]<span class=\"comment\">#属性值0</span></span><br><span class=\"line\">value_list1 = [<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>]<span class=\"comment\">#属性值1</span></span><br><span class=\"line\">value_list2 = [<span class=\"number\">20</span>, <span class=\"number\">5</span>, <span class=\"number\">30</span>, <span class=\"number\">15</span>]<span class=\"comment\">#属性值2</span></span><br><span class=\"line\">line = Line(title=<span class=\"string\">&quot;电器数量&quot;</span>)<span class=\"comment\">#生成对象，title为标题</span></span><br><span class=\"line\">line.add(<span class=\"string\">&quot;商家0&quot;</span>, name_list, value_list0, is_stack=<span class=\"literal\">True</span>, is_label_show=<span class=\"literal\">True</span>)<span class=\"comment\">#将数据加入图中</span></span><br><span class=\"line\">line.add(<span class=\"string\">&quot;商家1&quot;</span>, name_list, value_list1, is_stack=<span class=\"literal\">True</span>, is_label_show=<span class=\"literal\">True</span>)<span class=\"comment\">#将数据加入图中</span></span><br><span class=\"line\">line.add(<span class=\"string\">&quot;商家2&quot;</span>, name_list, value_list2, is_stack=<span class=\"literal\">True</span>, is_label_show=<span class=\"literal\">True</span>)<span class=\"comment\">#将数据加入图中</span></span><br><span class=\"line\">line.render(<span class=\"string\">&#x27;./图像/折线图.html&#x27;</span>)<span class=\"comment\">#保存为HTML格式，也可保存为jpg，png，gif等</span></span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824201505742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong> 2、折线图 + 柱状图</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将柱状图和折线图放在一个图中</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> Bar, Line, Overlap</span><br><span class=\"line\">name_list = [<span class=\"string\">&quot;冰箱&quot;</span>, <span class=\"string\">&quot;电视&quot;</span>, <span class=\"string\">&quot;空调&quot;</span>, <span class=\"string\">&quot;电脑&quot;</span>]<span class=\"comment\">#属性名称</span></span><br><span class=\"line\">value_list0 = [<span class=\"number\">15</span>, <span class=\"number\">25</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]<span class=\"comment\">#属性值0</span></span><br><span class=\"line\">value_list1 = [<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>]<span class=\"comment\">#属性值1</span></span><br><span class=\"line\">bar = Bar(title=<span class=\"string\">&quot;水果销量&quot;</span>)</span><br><span class=\"line\">line = Line()</span><br><span class=\"line\">bar.add(<span class=\"string\">&quot;商家0&quot;</span>, name_list, value_list0, mark_line=[<span class=\"string\">&quot;average&quot;</span>], mark_point=[<span class=\"string\">&quot;max&quot;</span>, <span class=\"string\">&quot;min&quot;</span>], is_label_show=<span class=\"literal\">True</span>)<span class=\"comment\">#将数据加入图中</span></span><br><span class=\"line\">bar.add(<span class=\"string\">&quot;商家1&quot;</span>, name_list, value_list1, mark_line=[<span class=\"string\">&quot;average&quot;</span>], mark_point=[<span class=\"string\">&quot;max&quot;</span>, <span class=\"string\">&quot;min&quot;</span>], is_label_show=<span class=\"literal\">True</span>)<span class=\"comment\">#将数据加入图中</span></span><br><span class=\"line\">line.add(<span class=\"string\">&quot;商家0&quot;</span>, name_list, value_list0, is_smooth=<span class=\"literal\">True</span>)<span class=\"comment\">#将数据加入图中</span></span><br><span class=\"line\">line.add(<span class=\"string\">&quot;商家1&quot;</span>, name_list, value_list1)<span class=\"comment\">#将数据加入图中</span></span><br><span class=\"line\">overlap = Overlap()</span><br><span class=\"line\">overlap.add(bar)</span><br><span class=\"line\">overlap.add(line)</span><br><span class=\"line\">overlap.render(<span class=\"string\">&#x27;./图像/柱状图+折线图.html&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824201716355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-散点图\"><a class=\"markdownIt-Anchor\" href=\"#3-散点图\">#</a> 3、散点图</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> Scatter   <span class=\"comment\">#散点图</span></span><br><span class=\"line\">v1 =[<span class=\"number\">25.02</span>, <span class=\"number\">18.73</span>, <span class=\"number\">7.85</span>, <span class=\"number\">7.68</span>, <span class=\"number\">7.35</span>, <span class=\"number\">5.35</span>, <span class=\"number\">3.29</span>, <span class=\"number\">2.23</span>, <span class=\"number\">1.98</span>, <span class=\"number\">1.78</span>, <span class=\"number\">1.65</span>, <span class=\"number\">1.64</span>, <span class=\"number\">1.06</span>, <span class=\"number\">1.06</span>, <span class=\"number\">0.69</span>]</span><br><span class=\"line\">v2 =[<span class=\"number\">5.35</span>, <span class=\"number\">4.42</span>, <span class=\"number\">4.31</span>, <span class=\"number\">3.92</span>, <span class=\"number\">3.29</span>, <span class=\"number\">2.23</span>, <span class=\"number\">4.42</span>, <span class=\"number\">4.31</span>, <span class=\"number\">3.92</span>, <span class=\"number\">3.29</span>, <span class=\"number\">2.23</span>, <span class=\"number\">1.98</span>, <span class=\"number\">1.78</span>, <span class=\"number\">1.65</span>, <span class=\"number\">0.8</span>]</span><br><span class=\"line\">scatter =Scatter(<span class=\"string\">&quot;电影类型评分&quot;</span>, title_pos=<span class=\"string\">&#x27;center&#x27;</span>, background_color=<span class=\"string\">&#x27;white&#x27;</span>, title_top=<span class=\"string\">&#x27;90%&#x27;</span>)</span><br><span class=\"line\">scatter.add(<span class=\"string\">&quot;爱情&quot;</span>, v1, v2)</span><br><span class=\"line\">scatter.add(<span class=\"string\">&quot;动作&quot;</span>, v1[::<span class=\"number\">-1</span>], v2)</span><br><span class=\"line\">scatter.show_config()</span><br><span class=\"line\">scatter.render(<span class=\"string\">&quot;./图像/散点图.html&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020082420190324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"4-饼图\"><a class=\"markdownIt-Anchor\" href=\"#4-饼图\">#</a> 4、饼图</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 饼图</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> Pie</span><br><span class=\"line\">attr = [<span class=\"string\">&quot;电脑&quot;</span>, <span class=\"string\">&quot;电视&quot;</span>, <span class=\"string\">&quot;冰箱&quot;</span>, <span class=\"string\">&quot;洗衣机&quot;</span>, <span class=\"string\">&quot;电饭煲&quot;</span>, <span class=\"string\">&quot;电磁炉&quot;</span>]</span><br><span class=\"line\">value1 = [<span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">8</span>, <span class=\"number\">18</span>]</span><br><span class=\"line\">value2 = [<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>]</span><br><span class=\"line\">pie = Pie(title=<span class=\"string\">&#x27;电器销量图图&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#饼图1圆心坐标为[25,50]，内外半径radius=[10,75]，is_random = True颜色随机</span></span><br><span class=\"line\">pie.add(<span class=\"string\">&#x27;商家1&#x27;</span>, attr, value1, center=[<span class=\"number\">25</span>, <span class=\"number\">50</span>], is_random=<span class=\"literal\">True</span>, radius=[<span class=\"number\">10</span>, <span class=\"number\">75</span>], is_legend_show=<span class=\"literal\">True</span>)<span class=\"comment\">#,rosetype = &#x27;radius&#x27;,is_label_show = False)</span></span><br><span class=\"line\"><span class=\"comment\">#饼图1圆心坐标为[75,50]，内外半径radius=[0,75]，展示成南丁格尔图</span></span><br><span class=\"line\">pie.add(<span class=\"string\">&#x27;商家2&#x27;</span>, attr, value2, center=[<span class=\"number\">75</span>, <span class=\"number\">50</span>], is_random=<span class=\"literal\">True</span>, radius=[<span class=\"number\">0</span>, <span class=\"number\">75</span>], rosetype=<span class=\"string\">&#x27;area&#x27;</span>, is_legend_show = <span class=\"literal\">True</span>,is_label_show = <span class=\"literal\">True</span>)</span><br><span class=\"line\">pie.render(<span class=\"string\">&#x27;./图像/饼图.html&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824202037776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"5-词云\"><a class=\"markdownIt-Anchor\" href=\"#5-词云\">#</a> 5、词云</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 词云</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> WordCloud</span><br><span class=\"line\">name_list = [<span class=\"string\">&#x27;Java&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>, <span class=\"string\">&#x27;C++&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;JavaScript&#x27;</span>, <span class=\"string\">&#x27;PHP&#x27;</span>, <span class=\"string\">&#x27;Go&#x27;</span>, <span class=\"string\">&#x27;R&#x27;</span>, <span class=\"string\">&#x27;C#&#x27;</span>, <span class=\"string\">&#x27;Swift&#x27;</span>]</span><br><span class=\"line\">value_list = [<span class=\"number\">60</span>, <span class=\"number\">90</span>, <span class=\"number\">80</span>, <span class=\"number\">70</span>, <span class=\"number\">60</span>, <span class=\"number\">50</span>, <span class=\"number\">60</span>, <span class=\"number\">70</span>, <span class=\"number\">80</span>, <span class=\"number\">90</span>]</span><br><span class=\"line\">wordcloud = WordCloud(title=<span class=\"string\">&#x27;词云&#x27;</span>,width=<span class=\"number\">1200</span>, height=<span class=\"number\">750</span>)</span><br><span class=\"line\">wordcloud.add(<span class=\"string\">&quot;编程语言&quot;</span>, name_list, value_list, word_size_range=[<span class=\"number\">50</span>, <span class=\"number\">100</span>])</span><br><span class=\"line\">wordcloud.render(<span class=\"string\">&#x27;./图像/词云.html&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824202217407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n",
            "tags": [
                "python",
                "数据可视化",
                "pyecharts"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/25/python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-(%E7%88%AC%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E8%96%9B%E4%B9%8B%E8%B0%A6%E6%AD%8C%E5%8D%95%E9%87%8C%E6%AD%8C%E6%9B%B2%E5%B9%B6%E4%B8%8B%E8%BD%BD)/",
            "url": "http://yoursite.com/2020/08/25/python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-(%E7%88%AC%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E8%96%9B%E4%B9%8B%E8%B0%A6%E6%AD%8C%E5%8D%95%E9%87%8C%E6%AD%8C%E6%9B%B2%E5%B9%B6%E4%B8%8B%E8%BD%BD)/",
            "title": "python网络爬虫-爬虫实战-(爬取网易云薛之谦歌单里歌曲并下载)",
            "date_published": "2020-08-25T13:05:52.362Z",
            "content_html": "<h1 id=\"1-导入要用到的库\"><a class=\"markdownIt-Anchor\" href=\"#1-导入要用到的库\">#</a> 1、导入要用到的库</h1>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#导入库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> fake_useragent <span class=\"keyword\">import</span> UserAgent</span><br><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br></pre></td></tr></table></figure>\n<p>很多初学 python 的同学不知道如何下载第三方库，我在这介绍一种和简单的方法<br>\n 1：首先准备好下载命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install 想要的库的名称  --trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org</span><br></pre></td></tr></table></figure>\n<p>把自己想要下载的库的名称替换掉命令中的 &quot;想要的库的名称&quot;，比如下载 lxml 第三方库的命令如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pip install lxml  --trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org</span><br></pre></td></tr></table></figure>\n<p>2：在 Pycharm 的 Terminal 中执行这行命令<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824102402269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n如图所示，回车即可。</p>\n<h1 id=\"2-分析获取网址\"><a class=\"markdownIt-Anchor\" href=\"#2-分析获取网址\">#</a> 2、分析获取网址</h1>\n<p>进入网易云官网搜索 &quot;薛之谦&quot;<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824102901217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n得到一个网址为 &quot;<a href=\"https://music.163.com/#/artist?id=5781\">https://music.163.com/#/artist?id=5781</a>&quot;<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824102959573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n很明显这不是真正的请求网址，检查网页，重新搜索薛之谦在 network doc 下会有一个新的请求文件点进去看到的 Request URL: <a href=\"https://music.163.com/artist?id=5781\">https://music.163.com/artist?id=5781</a> 就是我们想要的请求 url<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824103344295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n这时候我们可以先把这个页面的内容爬取打印出来，看一下是不是我们要的东西</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">&#x27;https://music.163.com/artist?id=5781&#x27;</span></span><br><span class=\"line\">headers= &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;User-Agent&quot;</span>: UserAgent().chrome</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">result = requests.get(url, headers=headers).text</span><br><span class=\"line\">print(result)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020082410404514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n看到这就知道确实是爬取了薛之谦第一页歌单的信息<br>\n接下来分析每一首歌的网址信息<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824105043124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n用同样的方法检查后获取到<br>\n Request URL: <a href=\"https://music.163.com/song?id=1463165983\">https://music.163.com/song?id=1463165983</a><br>\n 通过简单分析可以知道 id 就记录是那一首歌</p>\n<h1 id=\"3-删选数据\"><a class=\"markdownIt-Anchor\" href=\"#3-删选数据\">#</a> 3、删选数据</h1>\n<p>我们可以看到，爬取的歌单内容里面虽然有我们想要的数据，却也有大量不需要的内容，此时我们需要删选数据获取列表中的歌曲 id，储存在一个字典中，里面每个元素为每首歌的 id</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dom =etree.HTML(result)</span><br><span class=\"line\"><span class=\"comment\"># 通过审查元素发现每首歌在&lt;a href=&quot;/song?id=417859631&quot;&gt; 中通过xpath分析得获取所有歌曲id的xpath语句为&#x27;//a[contains(@href,&quot;/song?&quot;)]/@href&#x27;</span></span><br><span class=\"line\">ids = dom.xpath(<span class=\"string\">&#x27;//ul[@class=&quot;f-hide&quot;]//li/a/@href&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#将数据切片只需要id数值</span></span><br><span class=\"line\"><span class=\"comment\">#正则表达式</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(ids)):</span><br><span class=\"line\">    ids[i] = re.sub(<span class=\"string\">&#x27;\\D&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, ids[i])</span><br><span class=\"line\">print(ids)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824105306387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n此时我们就获得了这一页薛之谦歌单里的每一首歌的 id 值并存在了一个字典里<br>\n通过一个 for 循环验证我们的成果</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(ids)):</span><br><span class=\"line\">    <span class=\"comment\">#每一首歌的地址</span></span><br><span class=\"line\">    M_url = <span class=\"string\">f&#x27;https://music.163.com/song?id=<span class=\"subst\">&#123;ids[i]&#125;</span>&#x27;</span></span><br><span class=\"line\">    response = requests.get(M_url, headers=headers)</span><br><span class=\"line\">    html = etree.HTML(response.text)</span><br><span class=\"line\">    music_info = html.xpath(<span class=\"string\">&#x27;//title/text()&#x27;</span>)</span><br><span class=\"line\">    music_name = music_info[<span class=\"number\">0</span>].split(<span class=\"string\">&#x27;-&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    singer = music_info[<span class=\"number\">0</span>].split(<span class=\"string\">&#x27;-&#x27;</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    print(music_name, singer) </span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824110127191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n可以看到我们通过每一首歌的网址爬取了每一首歌的歌名和歌手名</p>\n<h1 id=\"4-获取歌源\"><a class=\"markdownIt-Anchor\" href=\"#4-获取歌源\">#</a> 4、获取歌源</h1>\n<p>接下来进入最重要的环节，获取歌源，我们之前做的只是获取到每首歌的 url 信息但那些并不可以实现播放，我们需要通过外链来生成 mp3 文件<br>\n为网易云音乐的外链地址：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_url = <span class=\"string\">&#x27;https://link.hhtjim.com/163/&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>在这介绍一个可以获取各大音乐平台外链信息的网址  <a href=\"https://link.hhtjim.com/\">跳转</a><br>\n通过拼接每一首歌的 id 信息获得每一首歌的外链网址</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_url = <span class=\"string\">&#x27;https://link.hhtjim.com/163/&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(ids)):</span><br><span class=\"line\">    <span class=\"comment\">#每一首歌的地址</span></span><br><span class=\"line\">    M_url = <span class=\"string\">f&#x27;https://music.163.com/song?id=<span class=\"subst\">&#123;ids[i]&#125;</span>&#x27;</span></span><br><span class=\"line\">    response = requests.get(M_url, headers=headers)</span><br><span class=\"line\">    html = etree.HTML(response.text)</span><br><span class=\"line\">    music_info = html.xpath(<span class=\"string\">&#x27;//title/text()&#x27;</span>)</span><br><span class=\"line\">    music_name = music_info[<span class=\"number\">0</span>].split(<span class=\"string\">&#x27;-&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    singer = music_info[<span class=\"number\">0</span>].split(<span class=\"string\">&#x27;-&#x27;</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    print(music_name, singer)</span><br><span class=\"line\">    music_url = base_url + str(ids[i]) + <span class=\"string\">&#x27;.mp3&#x27;</span></span><br><span class=\"line\">    print(music_url)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824111032642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"5-下载歌曲\"><a class=\"markdownIt-Anchor\" href=\"#5-下载歌曲\">#</a> 5、下载歌曲</h1>\n<p>在项目当前文件下建一个 music 文件夹来储存爬取的歌曲文件，文件格式为 mp3 格式 ，<br>\nwb:\t以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;./music/&#x27;</span>+music_name+<span class=\"string\">&#x27;.mp3&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">       file.write(music)</span><br><span class=\"line\">   print(<span class=\"string\">&quot;正在下载第&quot;</span>+str(i+<span class=\"number\">1</span>)+<span class=\"string\">&quot;首:  &quot;</span>+music_name+singer)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020082411170898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824112505309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n去本地对应的文件下就可以找到这些音乐啦<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824112615921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200824112727851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n可以用任何音乐播放器播放。</p>\n<h1 id=\"6-总的代码\"><a class=\"markdownIt-Anchor\" href=\"#6-总的代码\">#</a> 6、总的代码</h1>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#导入库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> fake_useragent <span class=\"keyword\">import</span> UserAgent</span><br><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"comment\">#网易云官网 搜索薛之谦跳转网页后  检查  network  doc 找到该网页的</span></span><br><span class=\"line\"><span class=\"comment\">#Request URL: https://music.163.com/artist?id=5781</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#1、确定url地址(薛之谦的歌单）</span></span><br><span class=\"line\">url = <span class=\"string\">&#x27;https://music.163.com/artist?id=5781&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#网易云音乐的外链地址</span></span><br><span class=\"line\">base_url = <span class=\"string\">&#x27;https://link.hhtjim.com/163/&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#2、请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers= &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;User-Agent&quot;</span>: UserAgent().chrome</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">result = requests.get(url, headers=headers).text</span><br><span class=\"line\"><span class=\"comment\"># print(result)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3、删选数据 拿到列表中的歌曲id  为一个字典 里面有每首个的id</span></span><br><span class=\"line\">dom =etree.HTML(result)</span><br><span class=\"line\"><span class=\"comment\"># 通过审查元素发现每首歌在&lt;a href=&quot;/song?id=417859631&quot;&gt; 中通过xpath分析得获取所有歌曲id的xpath语句为&#x27;//a[contains(@href,&quot;/song?&quot;)]/@href&#x27;</span></span><br><span class=\"line\">ids = dom.xpath(<span class=\"string\">&#x27;//ul[@class=&quot;f-hide&quot;]//li/a/@href&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#将数据切片只需要id数值</span></span><br><span class=\"line\"><span class=\"comment\">#正则表达式</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(ids)):</span><br><span class=\"line\">    ids[i] = re.sub(<span class=\"string\">&#x27;\\D&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, ids[i])</span><br><span class=\"line\"><span class=\"comment\">#print(ids)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(ids)):</span><br><span class=\"line\">    <span class=\"comment\">#每一首歌的地址</span></span><br><span class=\"line\">    M_url = <span class=\"string\">f&#x27;https://music.163.com/song?id=<span class=\"subst\">&#123;ids[i]&#125;</span>&#x27;</span></span><br><span class=\"line\">    response = requests.get(M_url, headers=headers)</span><br><span class=\"line\">    html = etree.HTML(response.text)</span><br><span class=\"line\">    music_info = html.xpath(<span class=\"string\">&#x27;//title/text()&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">#print(music_info)   #[&#x27;我好像在哪见过你（电影《精灵王座》主题曲） - 薛之谦 - 单曲 - 网易云音乐&#x27;]</span></span><br><span class=\"line\">    music_name = music_info[<span class=\"number\">0</span>].split(<span class=\"string\">&#x27;-&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    singer = music_info[<span class=\"number\">0</span>].split(<span class=\"string\">&#x27;-&#x27;</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"comment\">#print(music_name, singer)  #我好像在哪见过你（电影《精灵王座》主题曲）   薛之谦</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#获取歌源</span></span><br><span class=\"line\">    music_url = base_url + str(ids[i]) + <span class=\"string\">&#x27;.mp3&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">#print(music_url)    #打印出每首歌的外链网址</span></span><br><span class=\"line\">    music = requests.get(music_url).content</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#4、保存</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;./music/&#x27;</span>+music_name+<span class=\"string\">&#x27;.mp3&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">        file.write(music)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;正在下载第&quot;</span>+str(i+<span class=\"number\">1</span>)+<span class=\"string\">&quot;首:  &quot;</span>+music_name+singer)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>欢迎持续关注！</p>\n",
            "tags": [
                "python",
                "网络爬虫"
            ]
        }
    ]
}