{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/2020/08/21/java/Java%E5%AD%A6%E4%B9%A0-%E7%B1%BB%E7%9A%84%E9%9A%90%E8%97%8F%E6%9C%BA%E5%88%B6(%E5%B0%81%E8%A3%85%E6%80%A7)/",
            "url": "http://yoursite.com/2020/08/21/java/Java%E5%AD%A6%E4%B9%A0-%E7%B1%BB%E7%9A%84%E9%9A%90%E8%97%8F%E6%9C%BA%E5%88%B6(%E5%B0%81%E8%A3%85%E6%80%A7)/",
            "title": "",
            "date_published": "2020-08-20T16:02:45.399Z",
            "content_html": "<p>title: Java 学习 - 类的隐藏机制（封装性）</p>\n<h1 id=\"1-封装的含义\"><a class=\"markdownIt-Anchor\" href=\"#1-封装的含义\">#</a> 1、封装的含义</h1>\n<p><strong>封装</strong>（encapsulation）是面向对象的三要素之一（其它两个是<strong>继承</strong>和<strong>多态</strong>），它有两成含义：<br>\n1、将数据（属性）和函数（行为）放在一个独立的类中，使类成为一个独立的单元。<br>\n2、通过访问限定符（private 等）实现对<strong>信息的隐藏或公开</strong>，隐藏类的内部实现。而留下一些接口（public 的成员函数）与外界进行信息交换（外界要想访问某个成员只能通过接口实现）当类的设计者改变了类的内部实现时，但只要接口不变，对于类的使用者而言，没有任何影响。这就是所谓的 “<strong>接口和实现的分离</strong>”<br>\n<strong> 那么什么是封装？</strong> 简单地说，封装就是将数据和函数放在一起，将不想让外界看到的内容（通常是数据）声明为 private 的，不允许外界存取。外界要想访问的话，就只能通过类留给外部的接口。<br>\n<strong>为了更好的理解为什么要对对象进行封装，下面举个例子进行说明</strong><br>\n先写两个类  ：</p>\n<ul>\n<li>Person 类</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package day01</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\tpublic int age;</span><br><span class=\"line\">\tpublic <span class=\"keyword\">void</span> printAge()</span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;年龄是：&quot;</span>+age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Test 测试类</li>\n</ul>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package day01</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">\t public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"built_in\">String</span>[] args)</span><br><span class=\"line\">\t &#123;</span><br><span class=\"line\">\t \tPerson p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t \tp.age = <span class=\"number\">-100</span>;</span><br><span class=\"line\">\t \tp.printAge();</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行后打印结果为：年龄是：-100<br>\n<strong> 分析一下代码：</strong><br>\n程序是没问题的也能正常运行，但是年龄为 - 100 显然不符合正常逻辑。从代码可以看出在 new 完一个 person 对象后用户可以对它的 age 属性随便赋值。像这种情况是把类的属性开放出来，让调用者随意使用，这样就会出现问题，它们很容易被一些粗心的或不知情的客户端程序员所毁坏。<br>\n所以我们需要对这样不能让调用者随意使用的属性做封装和隐藏以减少程序的 bug。这意味着类的创建者可以任意修改被隐藏的部分，而不用担心对其他调用者造成影响。<br>\n代码修改后如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package day01</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\tpublic <span class=\"keyword\">void</span> setAge(int a)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a &lt;=<span class=\"number\">150</span> &amp;&amp; a&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.age = a;\t</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;输入的年龄：&quot;</span>+a+<span class=\"string\">&quot;不在0到150之间&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic int getAge()</span><br><span class=\"line\">\t&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.age;&#125;</span><br><span class=\"line\">\tpublic <span class=\"keyword\">void</span> showAge()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;年龄是：&quot;</span>+<span class=\"built_in\">this</span>.getAge());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package day01</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">\t public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"built_in\">String</span>[] args)</span><br><span class=\"line\">\t &#123;</span><br><span class=\"line\">\t \tPerson p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t \tPerson p2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t \tp1.setAge(<span class=\"number\">55</span>);</span><br><span class=\"line\">\t \tp1.showAge();</span><br><span class=\"line\">\t \tp2.setAge(<span class=\"number\">60</span>);</span><br><span class=\"line\">\t \tp2.showAge();</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到修改过后的对象不能直接通过 p.age 进行赋值操作，因为此时的 age 属性已经是被 private 限制，只能由类内部的成员函数调用并进行传参。</p>\n<h1 id=\"2-类的setxxx-和-getxxx\"><a class=\"markdownIt-Anchor\" href=\"#2-类的setxxx-和-getxxx\">#</a> 2、类的 setXXX 和 getXXX</h1>\n<p>封装的一个原则是：“信息的最小化公开”, 所以在理想状态下，通常将所有的数据都声明为 private（因为随便对类的内部数据进行更改是很危险的），如果想改变和得到某个数据的话，那么使用相应的接口进行访问</p>\n<ul>\n<li>通常设置数据的接口命名为 setXXX（如 public void setAge () ）</li>\n<li>将得到数据的接口命名为 getXXX（如 public int getAge () ）<br>\n<strong>? 考虑这样两个问题：</strong><br>\n<strong>问题一：</strong> 使用 Person 类来定义的两个对象 p1 和 p2, 那么 p1 和 p2 两个对象在内存中的存储状态是怎么样的呢？即数据成员和成员函数是否都存放在对象中呢？<br>\n<strong>问题二：</strong> p1 和 p2 调用相同的成员函数，为什么显示结果不一样？它们调用的是同一段代码吗？<br>\n其实对象空间中仅存储数据成员，而类的成员函数代码不会存储在对象中，用一个类的不同的对象调用成员函数时，调用的是同一段函数代码。<br>\n<strong>成员函数和普通函数的区别：</strong><br>\n在编译器的角度来看，成员函数和普通函数是没有本质区别的，成员函数只不过是为了封装的需要，而在形式上放在类中。最主要的区别是：<br>\n<em>成员函数暗自具备了一个从编译器传过来的指向类对象的 this（当前对象的引用），通过它成员函数就可以操作当前对象的数据成员。</em></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Person p2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">p1.setAge(<span class=\"number\">55</span>);<span class=\"comment\">//在这里this指向p1</span></span><br><span class=\"line\">p2.setAge(<span class=\"number\">60</span>);<span class=\"comment\">//在这里this指向p2</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-this关键字\"><a class=\"markdownIt-Anchor\" href=\"#3-this关键字\">#</a> 3、this 关键字</h1>\n<ul>\n<li>在类的方法定义中使用的 this 关键字表示使用该方法对象的引用。</li>\n<li>当必须指出当前使用方法对象是谁时要使用 this</li>\n<li>this 可以看作是一个变量，它的值是当前对象的引用</li>\n<li>当处理方法中成员变量和局部变量重名时要用 this</li>\n</ul>\n<h1 id=\"4-总结\"><a class=\"markdownIt-Anchor\" href=\"#4-总结\">#</a> 4、总结</h1>\n<p>java 中类的封装和隐藏就是：<br>\n通过将类的成员数据声明为私有的（private），再提供公共的（public）方法：getXXX () 和 setXXX () 实现对该属性的操作。以实现以下目的。</p>\n<ul>\n<li>隐藏一个类中不需要对外提供的实现细节</li>\n<li>使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑，限制对属性的不合理操作；</li>\n<li>便于修改，增强代码的可维护性</li>\n</ul>\n",
            "tags": []
        }
    ]
}