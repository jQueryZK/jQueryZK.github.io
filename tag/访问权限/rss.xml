<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>jQueryZK Blog • Posts by &#34;访问权限&#34; tag</title>
        <link>https://jQueryZK.github.io</link>
        <description>过去无法挽回，未来可以改变</description>
        <language>en</language>
        <pubDate>Tue, 25 Aug 2020 21:03:42 +0800</pubDate>
        <lastBuildDate>Tue, 25 Aug 2020 21:03:42 +0800</lastBuildDate>
        <category>Collections</category>
        <category>Comparable</category>
        <category>Comparator</category>
        <category>java</category>
        <category>Collection</category>
        <category>Iterator</category>
        <category>集合</category>
        <category>迭代器</category>
        <category>多态性</category>
        <category>面向对象</category>
        <category>类</category>
        <category>Random类</category>
        <category>Math类</category>
        <category>重写</category>
        <category>重载</category>
        <category>访问权限</category>
        <category>字符串</category>
        <category>String</category>
        <category>数组</category>
        <category>Arrays</category>
        <category>容器</category>
        <category>继承</category>
        <category>Object类</category>
        <category>泛型</category>
        <category>JavaWeb</category>
        <category>JSP</category>
        <category>JavaBean</category>
        <category>python</category>
        <category>数据可视化</category>
        <category>pyecharts</category>
        <category>网络爬虫</category>
        <category>单链表</category>
        <category>数据结构</category>
        <category>面试题</category>
        <category>sparsearray</category>
        <category>稀疏数组</category>
        <category>学生成绩管理系统</category>
        <category>哈希表</category>
        <category>开放地址法</category>
        <category>链地址法</category>
        <category>哈希函数</category>
        <category>线性查找</category>
        <category>二分查找</category>
        <category>插值查找</category>
        <category>斐波那契查找</category>
        <category>回溯</category>
        <category>算法</category>
        <category>八皇后</category>
        <category>递归</category>
        <category>时间复杂度</category>
        <category>空间复杂度</category>
        <category>迷宫回溯</category>
        <category>环形链表</category>
        <category>约瑟夫</category>
        <category>计算机网络</category>
        <category>网络体系</category>
        <category>汉诺塔</category>
        <category>super关键字</category>
        <category>异常</category>
        <category>异常处理</category>
        <category>List</category>
        <category>ArrayList</category>
        <category>LinkedList</category>
        <category>Vector</category>
        <category>Stack</category>
        <category>Set集合</category>
        <category>HashSet</category>
        <category>TreeSet</category>
        <category>LinkedHashSet</category>
        <category>Map集合</category>
        <category>HashMap</category>
        <category>LinkedHashMap</category>
        <category>TreeMap</category>
        <category>设计模式</category>
        <category>七大原则</category>
        <category>栈</category>
        <category>逆波兰表达式</category>
        <category>队列</category>
        <category>循环队列</category>
        <item>
            <guid isPermalink="true">https://jqueryzk.github.io/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</guid>
            <title>Java学习-访问权限控制</title>
            <link>https://jqueryzk.github.io/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</link>
            <category>java</category>
            <category>面向对象</category>
            <category>类</category>
            <category>访问权限</category>
            <pubDate>Tue, 25 Aug 2020 21:03:42 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;1-为什么要有访问权限控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-为什么要有访问权限控制&#34;&gt;#&lt;/a&gt; 1、为什么要有访问权限控制？&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;访问控制 (或隐藏具体实现) 与 “最初的实现并不恰当” 有关。&lt;/strong&gt;&lt;br&gt;
所有优秀的作者，包括那些编写软件的程序员，都清楚其著作的某些部分直至重新创作的时候才变得完美，有时甚至要反复重写多次。如果你把一个代码段放到了某个位置，等过一会儿回头再看时，有可能会发现有更好的方式去实现相同的功能。这正是重构的原动力之一，重构即重写代码，以使得它更可读、更易理解，并因此而更具可维护性。但是，在这种修改和完善代码的愿望之下，也存在着巨大的压力。通常总是会有一些消费者 (客户端程序员) 需要你的代码在某些方面保持不变。因此你想改变代码，而他们却想让代码保持不变。由此而产生了在面向对象设计中需要考虑的一一个基本问题:“如何把变动的事物与保持不变的事物区分开来”。&lt;br&gt;
这对&lt;strong&gt;类库 (library)&lt;/strong&gt; 而言尤为重要。该类库的消费者必须依赖他所使用的那部分类库，并且能够知道如果类库出现了新版本，他们并不需要改写代码。从另一个方面来说，类库的开发者必须有权限进行修改和改进，并确保客户代码不会因为这些改动而受到影响。 这一目标可以通过约定来达到。例如，类库开发者必须同意在改动类库中的类时不得删除任何现有方法，因为那样会破坏客户端程序员的代码。但是，与之相反的情况会更加棘手。在有域 (即数据成员) 存在的情况下，类库开发者要怎样才能知道究竟都有哪些域已经被客户端程序员所调用了呢？这对于方法仅为类的实现的一部分，因此并不想让客户端程序员直接使用的情况来说同样如此。如果程序开发者想要移除旧的实现而要添加新的实现时，结果将会怎样呢？改动任何一个成员都有可能破坏客户端程序员的代码。于是类库开发者会手脚被缚，无法对任何事物进行改动。&lt;br&gt;
为了解决这一问题，Java 提供了&lt;strong&gt;访问权限修饰词&lt;/strong&gt;，以供类库开发人员向客户端程序员指明&lt;br&gt;
哪些是可用的，哪些是不可用的。访向权限控制的等级，从最大权限到最小权限依次为:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;public、protected、包访问权限 (没有关键词称为 &amp;quot;缺省&amp;quot;) 和 private&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;构件类库的概念以及对于谁有权取用该类库构件的控制问题都还是不完善的。其中仍旧存在着如何将构件捆绑到一个内聚的类库单元中的问题。对于这一点，Java 用&lt;strong&gt;关键字 package&lt;/strong&gt; 加以控制，而访问权限修饰词会因类是存在于一个相同的包，还是存在于一个单独的包而受到影响。&lt;/p&gt;
&lt;h1 id=&#34;2-包库单元&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-包库单元&#34;&gt;#&lt;/a&gt; 2、包：库单元&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;包内包含有一组类，它们在单一的名字空间之下被组织到一起。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  例如，在Java的标准发布中有一个工具库，它被组织在java.util名字空间下。java.util中有一个叫做ArrayList的类，使用ArrayList的一种方式是用其全名java.util.ArrayList来指定。
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;F&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        java.util.ArrayList list = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; java.util.ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就使得程序变得很冗长，因此可以转而用 import 关键字，如果想要导入单个的类，可以在 import 语句中命名该类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;F&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ArrayList list = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; java.util.ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，就可以不用限定地使用 ArrayList 了。但是，这样做 java.util 中的其他类仍旧是都不可以使用的。要想导入其中的所有类，只需要使用 &amp;quot;*&amp;quot;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Java 常用的类库：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src= &#34;/img/loading.gif&#34; data-lazy-src=&#34;https://img-blog.csdnimg.cn/20200808223508652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;br&gt;
&lt;strong&gt;注意：&lt;/strong&gt;&lt;br&gt;
当编写一个 &lt;strong&gt;.Java&lt;/strong&gt; 源代码文件时，此文件通常被称为&lt;strong&gt;编译单元&lt;/strong&gt; (有时也被称为转译单元)。每个编译单元都必须有一个后缀名.java, 而在编译单元内则可以有一个 public 类，&lt;strong&gt;该类的名称必须与文件的名称相同&lt;/strong&gt; (包括大小写，但不包括文件的后缀名.java)。&lt;strong&gt;每个编译单元只能有一一个 public 类，否则编译器就不会接受&lt;/strong&gt;。如果在该编译单元之中还有额外的类的话，那么在包之外&lt;br&gt;
的世界是无法看见这些类的，这是因为它们不是 public 类，而且它们主要用来为主 publice 类提供&lt;br&gt;
支持。&lt;/p&gt;
&lt;p&gt;比如在 test 包下的 test.java 文件（编译单元）里面只能有一个和文件名称相同的 public 类也就是里面的 test 类 Person 类就不能加 public 限定符了。&lt;br&gt;
&lt;img src= &#34;/img/loading.gif&#34; data-lazy-src=&#34;https://img-blog.csdnimg.cn/20200808222558691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;br&gt;
同一个 test 包名下的类 test02 可以调用 Person 类&lt;br&gt;
&lt;img src= &#34;/img/loading.gif&#34; data-lazy-src=&#34;https://img-blog.csdnimg.cn/20200808222645339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;br&gt;
在另一个 test03 包名下的类 test03 就不能调用 Person 类了即使导入了包也不能，因为它不是 public 类型的&lt;br&gt;
&lt;img src= &#34;/img/loading.gif&#34; data-lazy-src=&#34;https://img-blog.csdnimg.cn/20200808222651248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;3-java访问权限修饰词&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-java访问权限修饰词&#34;&gt;#&lt;/a&gt; 3、Java 访问权限修饰词&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;public：接口访问权限（无论是谁，无论在哪都可以访问）&lt;br&gt;
使用关键字 public，就意味着 public 之后紧跟着的成员声明自己对每个人都是有用的，尤其是使用类库的客户程序员更是如此。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;protected：继承访问权限（子类可以访问父类的 public 成员和 protected 成员，但不可以访问父类的 private 成员）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（缺省）：包访问权限（类内部和同一个包里面的类可以访问（缺省）成员）&lt;br&gt;
因为（缺省）没有修饰词，形式如 int age ，也就是前面没有任何修饰词&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;private: 你无法访问（除了包含该类成员的类之外，其他任何类都无法访问这个成员）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了方便理解和比较准备了以下两张图片&lt;br&gt;
&lt;img src= &#34;/img/loading.gif&#34; data-lazy-src=&#34;https://img-blog.csdnimg.cn/20200808223740311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;br&gt;
&lt;img src= &#34;/img/loading.gif&#34; data-lazy-src=&#34;https://img-blog.csdnimg.cn/20200808223806321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
