{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog • All posts by \"重写\" tag",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "https://jqueryzk.gitee.io/zkblog",
    "items": [
        {
            "id": "https://jqueryzk.gitee.io/zkblog/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%EF%BC%88%E8%A6%86%E7%9B%96%EF%BC%89%E5%92%8C%E9%87%8D%E8%BD%BD/",
            "url": "https://jqueryzk.gitee.io/zkblog/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%EF%BC%88%E8%A6%86%E7%9B%96%EF%BC%89%E5%92%8C%E9%87%8D%E8%BD%BD/",
            "title": "Java学习-方法的重写（覆盖）和重载",
            "date_published": "2020-08-25T13:03:42.978Z",
            "content_html": "<h1 id=\"1-方法重写overide\"><a class=\"markdownIt-Anchor\" href=\"#1-方法重写overide\">#</a> 1、方法重写（Overide）</h1>\n<h2 id=\"11什么是方法重写\"><a class=\"markdownIt-Anchor\" href=\"#11什么是方法重写\">#</a> 1.1 什么是方法重写？</h2>\n<p>在 Java 程序中，类的继承关系可以产生一个子类，子类继承父类，它具备了父类所有的特征，继承了父类所有的方法和变量。          子类可以定义新的特征，<strong>当子类需要修改父类的一些方法进行扩展，增大功能，程序设计者常常把这样的一种操作方法称为重写，也叫称为覆写或覆盖。</strong> 在 Java 中的继承中，<strong>子类既可以隐藏和访问父类的方法，也可以覆盖继承父类的方法</strong>。在 Java 中覆盖继承父类的方法就是通过方法的重写来实现的。</p>\n<p>方法的重写：子类中的方法与父类中继承的方法有<strong>完全相同</strong>的<strong>返回值类型、方法名、参数个数以及参数类型</strong></p>\n<h2 id=\"12重写规则\"><a class=\"markdownIt-Anchor\" href=\"#12重写规则\">#</a> 1.2 重写规则</h2>\n<p>重写遵循 **“两同一小一大”** 规则：</p>\n<p><strong>两同：</strong></p>\n<ul>\n<li>父类方法的参数列表必须完全与被子类重写的方法的参数列表相同，否则不能称其为重写而是重载。</li>\n<li>父类的返回类型必须与被子类重写的方法返回类型相同，否则不能称其为重写而是重载</li>\n</ul>\n<p><strong>一小：</strong></p>\n<ul>\n<li>子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等</li>\n</ul>\n<p>(在继承过程中如果父类当中的方法抛出异常，那么在子类中重写父类的该方法时，也要抛出异常，而且抛出的异常不能多于父类中抛出的异常 (可以等于父类中抛出的异常)。换句话说，重写方法一定不能抛出新的检查异常，或者比被重写方法声明更加宽泛的检查型异常。例如，父类的一个方法申明了一个检查异常 IOException，在重写这个方法时就不能抛出 Exception，只能抛出 IOException 的子类异常，可以抛出非检查异常。同样的道理，如果子类中创建了一个成员变量，而该变量和父类中的一个变量名称相同，称作变量重写或属性覆盖。)</p>\n<p><strong>一大：</strong> 子类方法的访问权限应比父类方法访问权限更大或相等（特殊情况：子类不能重写父类被声明为 private 权限的方法）</p>\n<h2 id=\"13重写注意事项\"><a class=\"markdownIt-Anchor\" href=\"#13重写注意事项\">#</a> 1.3 重写注意事项</h2>\n<ol>\n<li>\n<p>父类中的私有方法不能被重写，该方法对于子类是隐藏的，因此其子类无法访问该方法，也无法重写</p>\n</li>\n<li>\n<p>父类静态方法，子类也必须通过静态方法进行覆盖，即静态只能覆盖静态</p>\n</li>\n<li>\n<p>子类重写父类方法时，最好声明得一模一样</p>\n</li>\n<li>\n<p>如果子类中定义了一个与父类 private 方法具有相同的方法名、相同的形参列表、相同的返回值类型的方法，依然不是重写，只是在子类中重新定义了一个新的方法，所以该新方法不会受父类方法的任何限制。<br>\n例子：</p>\n</li>\n</ol>\n<p>例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Overide;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(name+<span class=\"string\">&quot;学习马克思列宁主义&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//基础班的学生是属于学生中一种</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseStudent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//BaseStudent类的构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseStudent</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);<span class=\"comment\">//指定调用父类构造函数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.study();<span class=\"comment\">//一般子类调用的是重写后的方法，要想调用父类的要用super关键字</span></span><br><span class=\"line\">        System.out.println(name+<span class=\"string\">&quot;学习javase..&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//就业班学生 也是属于普通学生中一种</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkStudent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造 函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WorkStudent</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.study();</span><br><span class=\"line\">        System.out.println(name+<span class=\"string\">&quot;学习javaee+android..&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">demo01</span> </span>&#123;</span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t    </span>&#123;</span><br><span class=\"line\">\t\t \t<span class=\"comment\">//创建一个基础班的学生</span></span><br><span class=\"line\">\t        BaseStudent s = <span class=\"keyword\">new</span> BaseStudent(<span class=\"string\">&quot;居东东&quot;</span>);</span><br><span class=\"line\">\t        s.study();</span><br><span class=\"line\">\t        <span class=\"comment\">//创建一个就业班的学生</span></span><br><span class=\"line\">\t        WorkStudent w = <span class=\"keyword\">new</span> WorkStudent(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">\t        w.study();</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">居东东学习马克思列宁主义</span><br><span class=\"line\">居东东学习javase..</span><br><span class=\"line\">张三学习马克思列宁主义</span><br><span class=\"line\">张三学习javaee+android..</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-方法重载overload\"><a class=\"markdownIt-Anchor\" href=\"#2-方法重载overload\">#</a> 2、方法重载（Overload）</h1>\n<h2 id=\"21什么是方法重载\"><a class=\"markdownIt-Anchor\" href=\"#21什么是方法重载\">#</a> 2.1 什么是方法重载</h2>\n<p>方法重载是让类以统一的方式处理不同类型数据的一种手段。调用方法时通过传递给它们的不同个数和类型的参数来决定具体使用哪个方法，这就是多态性。在方法重载时，方法之间需要存在一定的联系，因为这样可以提高程序的可读性，一般只重载功能相似的方法，构造方法也可以重载。当 Java 调用一个重载方法时，参数与调用参数匹配的方法被执行</p>\n<p><strong>方法重载：</strong> 在同一个类中，多个方法的方法名相同，但是参数列表不同。参数列表不同指的是参数个数、参数类型或者参数的顺序不同。</p>\n<h2 id=\"22重载规则\"><a class=\"markdownIt-Anchor\" href=\"#22重载规则\">#</a> 2.2 重载规则</h2>\n<ol>\n<li>在使用重载时只能通过不同的参数列表，必须具有不同的参数列表。</li>\n<li>不能通过访问权限、返回类型、抛出的异常进行重载。</li>\n<li>可以有不同的返回类型，只要参数列表不同就可以了。</li>\n<li>方法的异常类型和数目不会对重载造成影响。</li>\n<li>可以有不同的访问修饰符。</li>\n<li>可以抛出不同的异常。</li>\n</ol>\n<p>例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Overload;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">House</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> height;</span><br><span class=\"line\">    House ()&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;无参数构造函数&quot;</span>);</span><br><span class=\"line\">        height = <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    House(<span class=\"keyword\">int</span> i) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;房子高度为 &quot;</span> + i + <span class=\"string\">&quot; 米&quot;</span>);</span><br><span class=\"line\">        height = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">info</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;房子高度为 &quot;</span> + height + <span class=\"string\">&quot; 米&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">info</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s + <span class=\"string\">&quot;房子高度为 &quot;</span> + height + <span class=\"string\">&quot; 米&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">demo2</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        House h1 = <span class=\"keyword\">new</span> House();</span><br><span class=\"line\">        House h2 = <span class=\"keyword\">new</span> House(<span class=\"number\">6</span>);</span><br><span class=\"line\">        h1.info();</span><br><span class=\"line\">        h1.info(<span class=\"string\">&quot;我的&quot;</span>);</span><br><span class=\"line\">        h2.info();</span><br><span class=\"line\">        h2.info(<span class=\"string\">&quot;你的&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">无参数构造函数</span><br><span class=\"line\">房子高度为 <span class=\"number\">6</span> 米</span><br><span class=\"line\">房子高度为 <span class=\"number\">4</span> 米</span><br><span class=\"line\">我的房子高度为 <span class=\"number\">4</span> 米</span><br><span class=\"line\">房子高度为 <span class=\"number\">6</span> 米</span><br><span class=\"line\">你的房子高度为 <span class=\"number\">6</span> 米</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-方法重写和方法重载的区别\"><a class=\"markdownIt-Anchor\" href=\"#3-方法重写和方法重载的区别\">#</a> 3、方法重写和方法重载的区别</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200810173239780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n",
            "tags": [
                "java",
                "面向对象",
                "重写",
                "重载"
            ]
        }
    ]
}