{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog • All posts by \"二分查找\" tag",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/2020/09/10/%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E5%B8%B8%E7%94%A8%E7%9A%84%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%EF%BC%88%E7%BA%BF%E6%80%A7%E6%9F%A5%E6%89%BE%E3%80%81%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E3%80%81%E6%8F%92%E5%80%BC%E6%9F%A5%E6%89%BE%E3%80%81%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%9F%A5%E6%89%BE%EF%BC%89/",
            "url": "http://yoursite.com/2020/09/10/%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E5%B8%B8%E7%94%A8%E7%9A%84%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%EF%BC%88%E7%BA%BF%E6%80%A7%E6%9F%A5%E6%89%BE%E3%80%81%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E3%80%81%E6%8F%92%E5%80%BC%E6%9F%A5%E6%89%BE%E3%80%81%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%9F%A5%E6%89%BE%EF%BC%89/",
            "title": "算法（Java实现）-常用的查找算法（线性查找、二分查找、插值查找、斐波那契查找）",
            "date_published": "2020-09-10T08:28:30.706Z",
            "content_html": "<h1 id=\"1-线性查找算法\"><a class=\"markdownIt-Anchor\" href=\"#1-线性查找算法\">#</a> 1、线性查找算法</h1>\n<p><strong>介绍</strong>：线性查找算法就是在待查数据中进行顺序性轮询查找，当存在待查的数据时返回当前数据索引位置，如果不存在则返回不存在表示 - 1<br>\n<strong> 平均查找长度</strong>：1/2 (n+i)<br>\n 计算方式：当前元素找到的概率乘上所匹配的次数<br>\n<strong>时间复杂度</strong>：O (N)</p>\n<p>例： 有一个数列： {1, 9, 11, -1, 34, 89} ，判断数列中是否包含 11<br>\n 要求：如果找到了，就提示找到，并给出下标值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeqSearch</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> arr[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, -<span class=\"number\">1</span>, <span class=\"number\">34</span>, <span class=\"number\">89</span> &#125;;<span class=\"comment\">// 没有顺序的数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = seqSearch(arr, <span class=\"number\">11</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;没有找到到&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;找到，下标为=&quot;</span> + index);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 这里我们实现的线性查找是找到一个满足条件的值，就返回</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">seqSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 线性查找是逐一比对，发现有相同值，就返回下标</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[i] == value) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">找到，下标为=<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"2-二分查找\"><a class=\"markdownIt-Anchor\" href=\"#2-二分查找\">#</a> 2、二分查找</h1>\n<p><strong>优缺点：</strong><br>\n优点就是因为<strong>比较的次数大大减少索引效率很高</strong>，缺点就是要<strong>待查询的表必须为有序表</strong>，这就大大限制的所能操作的领域，并且只对查询效率有所优化，当修改和插入数据的时候这种效率就很低了。因为还有考虑修改或插入之后元素之间顺序的问题。</p>\n<p><strong>平均查找长度</strong>： (n+1/n)*(log2 (n+1))-1</p>\n<p><strong>时间复杂度</strong>： O (logN)</p>\n<p><strong>算法思路分析</strong>：<br>\n1、二分查找待查询的表为有序表<br>\n 2、设置一个左标记 left 初始值为 0，设置一个有标记 right 初始值为 length-1<br>\n3、确定该数组的中间下标：mid=(left+right)/2<br>\n4、让需要查找的数 findVal 和 arr [mid] 比较：</p>\n<ul>\n<li>findVal &gt; arr [mid]，说明要查找的数在 mid 的右边，因此递归向右查找</li>\n<li>findVal &lt;arr [mid]，说明你要查找的数在 mid 的左边，因此需要递归的向左查找</li>\n<li>findVal == arr [mid] 说明找到，就返回</li>\n</ul>\n<p>5、什么时候需要结束递归？</p>\n<ul>\n<li>找到要查询的数结束递归</li>\n<li>递归完整个数组，仍然没有找到 findVal，也需要结束递归 当 left&gt;right 就需要退出</li>\n</ul>\n<p>例：<strong>请对一个有序数组进行二分查找 {1,8, 10, 89, 1000, 1234} ，输入一个数看看该数组是否存在此数，并且求出下标，如果没有就提示 &quot;没有这个数&quot;</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> arr[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">89</span>,<span class=\"number\">1000</span>, <span class=\"number\">1234</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> resIndex = binarySearch(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( resIndex == -<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;没有找到该数&quot;</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;resIndex=&quot;</span> + resIndex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 二分查找算法</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">\t *            数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> left</span></span><br><span class=\"line\"><span class=\"comment\">\t *            左边的索引</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> right</span></span><br><span class=\"line\"><span class=\"comment\">\t *            右边的索引</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> findVal</span></span><br><span class=\"line\"><span class=\"comment\">\t *            要查找的值</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果找到就返回下标，如果没有找到，就返回 -1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> findVal)</span> </span>&#123;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 当 left &gt; right 时，说明递归整个数组，但是没有找到</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (left &gt; right) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> midVal = arr[mid];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (findVal &gt; midVal) &#123; <span class=\"comment\">// 向 右递归</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> binarySearch(arr, mid + <span class=\"number\">1</span>, right, findVal);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (findVal &lt; midVal) &#123; <span class=\"comment\">// 向左递归</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> binarySearch(arr, left, mid - <span class=\"number\">1</span>, findVal);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//找到findVal==midVal</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>思考</strong>： {1,8, 10, 89, 1000, 1000，1000，1234} 当一个有序数组中，有多个相同的数值时，如何将所有的数值索引都查找到，比如这里的 1000<br>\n<strong> 思路分析</strong>：</p>\n<ol>\n<li>在找到 mid 索引值，不要马上返回</li>\n<li>向 mid 索引值的左边扫描，将所有满足 1000， 的元素的下标，加入到集合 ArrayList</li>\n<li>将 mid 索引值本身加入到集合 ArrayList</li>\n<li>向 mid 索引值的右边扫描，将所有满足 1000， 的元素的下标，加入到集合 ArrayList</li>\n<li>将 Arraylist 返回</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"comment\">//注意：使用二分查找的前提是 该数组是有序的.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> arr[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">89</span>,<span class=\"number\">1000</span>,<span class=\"number\">1000</span>,<span class=\"number\">1000</span>, <span class=\"number\">1234</span> &#125;;</span><br><span class=\"line\">\t\tList&lt;Integer&gt; resIndexList = binarySearch(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;resIndexList=&quot;</span> + resIndexList);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Integer&gt; <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> findVal)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 当 left &gt; right 时，说明递归整个数组，但是没有找到</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (left &gt; right) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();<span class=\"comment\">//如果没找到返回空的ArrayList集合</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> midVal = arr[mid];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (findVal &gt; midVal) &#123; <span class=\"comment\">// 向 右递归</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> binarySearch(arr, mid + <span class=\"number\">1</span>, right, findVal);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (findVal &lt; midVal) &#123; <span class=\"comment\">// 向左递归</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> binarySearch(arr, left, mid - <span class=\"number\">1</span>, findVal);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tList&lt;Integer&gt; resIndexlist = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//向mid 索引值的左边扫描，将所有满足 1000， 的元素的下标，加入到集合ArrayList</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> temp = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (temp &lt; <span class=\"number\">0</span> || arr[temp] != findVal) &#123;<span class=\"comment\">//退出</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//否则，就temp 放入到 resIndexlist</span></span><br><span class=\"line\">\t\t\t\tresIndexlist.add(temp);</span><br><span class=\"line\">\t\t\t\ttemp -= <span class=\"number\">1</span>; <span class=\"comment\">//temp左移</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tresIndexlist.add(mid);  </span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//向mid 索引值的右边扫描，将所有满足 1000， 的元素的下标，加入到集合ArrayList</span></span><br><span class=\"line\">\t\t\ttemp = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (temp &gt; arr.length - <span class=\"number\">1</span> || arr[temp] != findVal) &#123;<span class=\"comment\">//退出</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//否则，就temp 放入到 resIndexlist</span></span><br><span class=\"line\">\t\t\t\tresIndexlist.add(temp);</span><br><span class=\"line\">\t\t\t\ttemp += <span class=\"number\">1</span>; <span class=\"comment\">//temp右移</span></span><br><span class=\"line\">\t\t\t&#125;\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resIndexlist;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resIndexList=[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-插值查找算法\"><a class=\"markdownIt-Anchor\" href=\"#3-插值查找算法\">#</a> 3、插值查找算法</h1>\n<p><strong>原理介绍</strong>：</p>\n<ol>\n<li>插值查找算法类似于二分查找（也要求数组有序），不同的是插值查找每次从自适应 mid 处开始查找</li>\n<li>将折半查找中的求 mid 索引的公式，low 表示左边索引 left, high 表示右边索引 right.\u000bkey 就是前面我们讲的  findVal<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200906183919988.png#pic_center\" alt=\"在这里插入图片描述\"></li>\n<li>即：<font color=red><strong>int mid = left + (right – left) * (findVal – arr[left]) / (arr[right] – arr[left])</strong></font></li>\n</ol>\n<p><strong>插值查找算法的举例说明</strong> ：<br>\n数组  arr = [1, 2, 3, …, 100]<br>\n 假如我们需要查找的值  1<br>\n 使用二分查找的话，我们需要多次递归，才能找到 1<br>\n 使用插值查找算法<br>\n int mid = left + (right – left) * (findVal – arr [left]) / (arr [right] – arr [left])<br>\nint mid = 0 + (99 - 0) * (1 - 1)/ (100 - 1) = 0 + 99 * 0 / 99 = 0<br>\n 比如我们查找的值 100<br>\nint mid = 0 + (99 - 0) * (100 - 1) / (100 - 1) = 0 + 99 * 99 / 99 = 0 + 99 = 99</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsertValueSearch</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> [] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tarr[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index =insertValueSearch(arr, <span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;index=&quot;</span>+index);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//编写插值查找算法</span></span><br><span class=\"line\">\t<span class=\"comment\">//说明：插值查找算法，也要求数组是有序的</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> arr 数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> left 左边索引</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> right 右边索引</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> findVal 查找值</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果找到，就返回对应的下标，如果没有找到，返回-1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">insertValueSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> findVal)</span> </span>&#123; \t</span><br><span class=\"line\">\t\t<span class=\"comment\">//注意：findVal &lt; arr[0]  和  findVal &gt; arr[arr.length - 1] 必须需要</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//否则我们得到的 mid 可能越界</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (left &gt; right || findVal &lt; arr[<span class=\"number\">0</span>] || findVal &gt; arr[arr.length - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 求出mid, 自适应</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = left + (right - left) * (findVal - arr[left]) / (arr[right] - arr[left]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> midVal = arr[mid];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (findVal &gt; midVal) &#123; <span class=\"comment\">// 说明应该向右边递归</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> insertValueSearch(arr, mid + <span class=\"number\">1</span>, right, findVal);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (findVal &lt; midVal) &#123; <span class=\"comment\">// 说明向左递归查找</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> insertValueSearch(arr, left, mid - <span class=\"number\">1</span>, findVal);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=<span class=\"number\">54</span></span><br></pre></td></tr></table></figure>\n<p><strong>插值查找注意事项</strong>：</p>\n<ul>\n<li>对于数据量较大，数组元素分布比较均匀的查找表来说，采用插值查找，速度较快.</li>\n<li>数组元素分布不均匀的情况下，该方法不一定比二分查找效果要好</li>\n</ul>\n<h1 id=\"4-斐波那契黄金分割法查找算法\"><a class=\"markdownIt-Anchor\" href=\"#4-斐波那契黄金分割法查找算法\">#</a> 4、斐波那契 (黄金分割法) 查找算法</h1>\n<p><strong>斐波那契 (黄金分割法) 查找基本介绍</strong>:<br>\n 黄金分割点是指<strong>把一条线段分割为两部分</strong>，使其中一部分与全长之比等于另一部分与这部分之比。取其前三位数字的近似值是 0.618。由于按此比例设计的造型十分美丽，因此称为黄金分割，也称为中外比。</p>\n<p><strong>斐波那契数列</strong>  如：{1, 1, 2, 3, 5, 8, 13, 21, 34, 55} 发现斐波那契数列的<strong>两个相邻数 的比例</strong>，无限接近 黄金分割值 0.618<br>\n（斐波那契数列的规律：<strong>f(k)=f(k - 1)+f(k - 2)</strong> )</p>\n<p><strong>斐波那契查找算法 (黄金分割法) 原理</strong>:<br>\n 斐波那契查找原理与前面的二分查找和插值查找相似（<strong>也要求数组有序</strong>），仅仅改变了中间结点（mid）的位置，<strong>mid 不再是中间或插值得到，而是位于黄金分割点附近</strong><br>\n即：<strong>mid=low+F(k-1)-1</strong>    （F 代表斐波那契数列）<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200907145642140.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>对 F (k-1)-1 的理解</strong>：</p>\n<ol>\n<li>由斐波那契数列 F [k]=F [k-1]+F [k-2] 的性质，可以得到 （F [k]-1）=（F [k-1]-1）+（F [k-2]-1）+1 。该式说明：只要顺序表的长度为 F [k]-1，则可以将该表分成长度为 F [k-1]-1 和 F [k-2]-1 的两段，即如上图所示。从而中间位置为 mid=low+F (k-1)-1</li>\n<li>同理，已经分割好的每一子段也可以用相同的方式分割（也就是递归分割）</li>\n<li>但<strong>顺序表长度 n 不一定刚好等于 F [k]-1</strong>，所以需要将原来的顺序表长度 n 增加至 F [k]-1。这里的 k 值只要能使得<strong> F [k]-1 恰好大于或等于 n 即可</strong>，由以下代码得到，顺序表长度增加后，新增的位置（从 n+1 到 F [k]-1 位置），都赋为 n 位置的值（即数组的最后一个值）即可。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(n&gt;fib(k)-<span class=\"number\">1</span>)</span><br><span class=\"line\">    k++;</span><br></pre></td></tr></table></figure>\n<p>斐波那契查找的核心是：</p>\n<ol>\n<li>当 **key=a [mid]** 时，查找成功；</li>\n<li>当 **key&lt;a [mid]** 时，新的查找范围是第 low 个到第 mid-1 个，此时范围个数为 F [k-1] - 1 个，即数组左边的长度，所以要在 [low, F [k - 1] - 1] 范围内查找；</li>\n<li>当 **key&gt;a [mid]** 时，新的查找范围是第 mid+1 个到第 high 个，此时范围个数为 F [k-2] - 1 个，即数组右边的长度，所以要在 [F [k - 2] - 1] 范围内查找<br>\n斐波那契查找应用案例：<br>\n请对一个有序数组进行斐波那契查找 {1,8, 10, 89, 1000, 1234} ，输入一个数看看该数组是否存在此数，并且求出下标，如果没有就提示 &quot;没有这个数&quot;。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FibonacciSearch</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> maxSize = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> [] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">89</span>, <span class=\"number\">1000</span>, <span class=\"number\">1234</span>&#125;;\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;index=&quot;</span> + fibSearch(arr, <span class=\"number\">1000</span>));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//因为后面我们mid=low+F(k-1)-1，需要使用到斐波那契数列，因此我们需要先获取到一个斐波那契数列</span></span><br><span class=\"line\">\t<span class=\"comment\">//非递归方法得到一个斐波那契数列</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] fib() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] f = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[maxSize];</span><br><span class=\"line\">\t\tf[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tf[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; maxSize; i++) &#123;</span><br><span class=\"line\">\t\t\tf[i] = f[i - <span class=\"number\">1</span>] + f[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> f;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//编写斐波那契查找算法</span></span><br><span class=\"line\">\t<span class=\"comment\">//使用非递归的方式编写算法</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> a  数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> key 我们需要查找的关键码(值)</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 返回对应的下标，如果没有-1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">fibSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> high = a.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; <span class=\"comment\">//表示斐波那契分割数值的下标</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = <span class=\"number\">0</span>; <span class=\"comment\">//存放mid值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> f[] = fib(); <span class=\"comment\">//获取到斐波那契数列</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//获取到斐波那契分割数值的下标</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(high &gt; f[k] - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tk++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//因为 f[k] 值 可能大于 a 的 长度，因此我们需要使用Arrays类，构造一个新的数组，并指向temp[]</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//不足的部分会使用0填充</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] temp = Arrays.copyOf(a, f[k]);</span><br><span class=\"line\">\t\t<span class=\"comment\">//举例：temp = &#123;1,8, 10, 89, 1000, 1234, 0, 0&#125;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//但是实际上需要使用a数组最后的数填充 temp</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//也就是  temp = &#123;1,8, 10, 89, 1000, 1234, 0, 0&#125;  =&gt; &#123;1,8, 10, 89, 1000, 1234, 1234, 1234,&#125;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = high + <span class=\"number\">1</span>; i &lt; temp.length; i++) &#123;</span><br><span class=\"line\">\t\t\ttemp[i] = a[high];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用while来循环处理，找到我们的数 key</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (low &lt;= high) &#123; <span class=\"comment\">// 只要这个条件满足，就可以找</span></span><br><span class=\"line\">\t\t\tmid = low + f[k - <span class=\"number\">1</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(key &lt; temp[mid]) &#123; <span class=\"comment\">//我们应该继续向数组的左边查找</span></span><br><span class=\"line\">\t\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//为什么是 k--</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//说明</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//1. 全部元素 = 前面的元素 + 后边元素</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//2. f[k] = f[k-1] + f[k-2]</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//因为 前面有 f[k-1]个元素,所以可以继续拆分 f[k-1] = f[k-2] + f[k-3]</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//即 在 f[k-1] 的前面继续查找 k=k-1</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//即下次循环 mid = f[k-1-1]-1</span></span><br><span class=\"line\">\t\t\t\tk=k-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( key &gt; temp[mid]) &#123; <span class=\"comment\">// 我们应该继续向数组的右边查找</span></span><br><span class=\"line\">\t\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//为什么是k=k-2</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//说明</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//1. 全部元素 = 前面的元素 + 后边元素</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//2. f[k] = f[k-1] + f[k-2]</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//3. 因为后面我们有f[k-2] 所以可以继续拆分 f[k-2] = f[k-3] + f[k-4]</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//4. 即在f[k-2] 的前面进行查找 k=k-2</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//5. 即下次循环 mid = f[k - 1 - 2] - 1</span></span><br><span class=\"line\">\t\t\t\tk=k-<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//需要确定，返回的是哪个下标</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(mid &lt;= high) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> high;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "线性查找",
                "二分查找",
                "插值查找",
                "斐波那契查找"
            ]
        }
    ]
}