{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog • All posts by \"汉诺塔\" tag",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "https://jqueryzk.gitee.io/zkblog",
    "items": [
        {
            "id": "https://jqueryzk.gitee.io/zkblog/2020/08/26/%E7%AE%97%E6%B3%95%EF%BC%88java%EF%BC%89-%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98%EF%BC%88%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF%EF%BC%89/",
            "url": "https://jqueryzk.gitee.io/zkblog/2020/08/26/%E7%AE%97%E6%B3%95%EF%BC%88java%EF%BC%89-%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98%EF%BC%88%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF%EF%BC%89/",
            "title": "算法（java）-汉诺塔问题（递归回溯）",
            "date_published": "2020-08-26T12:44:19.718Z",
            "content_html": "<h1 id=\"1-汉诺塔问题介绍\"><a class=\"markdownIt-Anchor\" href=\"#1-汉诺塔问题介绍\">#</a> 1、汉诺塔问题介绍</h1>\n<p>汉诺塔 (又称河内塔) 问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着 64 片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。<br>\n简单分析要求：</p>\n<ol>\n<li>有三根柱子</li>\n<li>一次只能移动一个圆盘</li>\n<li>小圆盘上不能放比它更大的圆盘</li>\n<li>需要按从小盘到大盘的顺序重新摆在另一个盘上</li>\n</ol>\n<h1 id=\"2-思路分析\"><a class=\"markdownIt-Anchor\" href=\"#2-思路分析\">#</a> 2、思路分析</h1>\n<p>假设我们先给三根柱子分别命名为 A、B、C：<br>\n初始的时候盘按从小到大的顺序依次摆在 A 柱上、而 C 柱作为结果柱。我们的目标就是把 A 柱的所有盘按照本来的从小到大的顺序摆在 C 盘。<br>\n假设 n 为盘的数量；</p>\n<ul>\n<li>n=1 时，直接将 A 中的那个盘移到 C 盘</li>\n<li>n=2 时，先将 A 盘上最小的移到 B，再将 A 盘剩下那个移到 C，再将 B 盘上的移到 C</li>\n<li>n=3 时，<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200826194912579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 1、A-&gt;C<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200826195355760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 2、A-&gt;B<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200826195420922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 3、C-&gt;B<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200826195511735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 4、A-&gt;C<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200826195642944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 5、B-&gt;A<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200826195731756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 6、B-&gt;C<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200826195754504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 7、A-&gt;C<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200826195814456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n我们发现除了当 n=1 时，直接将 A 的盘直接移到 C 柱上。后面 n 为其他值时都需要借助 C 盘先将 A 盘中除最大盘外的 n-1 个盘移到 B 盘然后将 A 中剩下的那个盘移到 C 盘。而此时 A 盘就空了，然后将 A 作为辅助盘再将 B 的所有盘按顺序移到 C 盘。<br>\n<strong>我们可以把将 A 中最大的移到 C 看作中间步</strong></li>\n<li>中间一步之上可以看成把 A 上 n-1 个盘子通过借助辅助塔（C 塔）移到了 B 上，</li>\n<li>中间一步之下可以看成把 B 上 n-1 个盘子通过借助辅助塔（A 塔）移到了 C 上；<br>\n最核心的是，我们发现把 A 上 n-1 个盘子通过借助辅助塔（C 塔）移到了 B 上的结果和上一关只有 n-1 个盘的结果是一样的只是这时的目标柱变成了 B，所以可以通过递归来达到我们想要的目标。<br>\n比如假如这一关 n=3：<br>\n1、将 A 中最大盘遮住，将 B 柱当作上一关的 C 柱，按从小到大的顺序依次把 A 上剩下的 n-1 个盘按 n=2 的走法摆在 B 柱上<br>\n 2、C 空，将 A 中最大的移到 C，A 空<br>\n 3、将 C 中最大盘遮住，将 C 柱当作上一关的 C 柱，按从小到大的顺序依次把 B 上剩下的 n-1 个盘按 n=2 的走法摆在 C 柱上</li>\n</ul>\n<h1 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现：</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zhukun;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 一共走了多少步</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> times;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> A = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> B = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> C = <span class=\"string\">&#x27;C&#x27;</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入盘子数：&quot;</span>);</span><br><span class=\"line\">        Scanner s = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.nextInt();</span><br><span class=\"line\">        <span class=\"comment\">//调用汉诺塔</span></span><br><span class=\"line\">        hannoi(n, A, B, C);</span><br><span class=\"line\">        s.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 盘子移动</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">(<span class=\"keyword\">int</span> disk, <span class=\"keyword\">char</span> M, <span class=\"keyword\">char</span> N )</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;第&quot;</span>+(++times)+<span class=\"string\">&quot;次移动, 盘子&quot;</span>+disk+ <span class=\"string\">&quot;  &quot;</span>+M+<span class=\"string\">&quot;-------&gt;&quot;</span>+N);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">hannoi</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> A, <span class=\"keyword\">char</span> B, <span class=\"keyword\">char</span> C)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            move(n, A, C);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//移动上一关的步骤移动到B</span></span><br><span class=\"line\">            hannoi(n - <span class=\"number\">1</span>, A, C, B);</span><br><span class=\"line\">            <span class=\"comment\">//把最大的盘子移动C塔</span></span><br><span class=\"line\">            move(n, A, C);</span><br><span class=\"line\">            <span class=\"comment\">//再把B上的上一关的盘子移动到C上就可以了</span></span><br><span class=\"line\">            hannoi(n - <span class=\"number\">1</span>, B, A, C);</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请输入盘子数：</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">第<span class=\"number\">1</span>次移动, 盘子<span class=\"number\">1</span>  A-------&gt;B</span><br><span class=\"line\">第<span class=\"number\">2</span>次移动, 盘子<span class=\"number\">2</span>  A-------&gt;C</span><br><span class=\"line\">第<span class=\"number\">3</span>次移动, 盘子<span class=\"number\">1</span>  B-------&gt;C</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请输入盘子数：</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">第<span class=\"number\">1</span>次移动, 盘子<span class=\"number\">1</span>  A-------&gt;C</span><br><span class=\"line\">第<span class=\"number\">2</span>次移动, 盘子<span class=\"number\">2</span>  A-------&gt;B</span><br><span class=\"line\">第<span class=\"number\">3</span>次移动, 盘子<span class=\"number\">1</span>  C-------&gt;B</span><br><span class=\"line\">第<span class=\"number\">4</span>次移动, 盘子<span class=\"number\">3</span>  A-------&gt;C</span><br><span class=\"line\">第<span class=\"number\">5</span>次移动, 盘子<span class=\"number\">1</span>  B-------&gt;A</span><br><span class=\"line\">第<span class=\"number\">6</span>次移动, 盘子<span class=\"number\">2</span>  B-------&gt;C</span><br><span class=\"line\">第<span class=\"number\">7</span>次移动, 盘子<span class=\"number\">1</span>  A-------&gt;C</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法",
                "递归",
                "汉诺塔"
            ]
        }
    ]
}