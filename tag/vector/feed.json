{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog • All posts by \"vector\" tag",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "https://jQueryZK.github.io",
    "items": [
        {
            "id": "https://jqueryzk.github.io/2020/09/03/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88List%E9%9B%86%E5%90%88%EF%BC%88ArrayList%E3%80%81LinkedList%E3%80%81Vector%E5%92%8CStack%EF%BC%89/",
            "url": "https://jqueryzk.github.io/2020/09/03/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88List%E9%9B%86%E5%90%88%EF%BC%88ArrayList%E3%80%81LinkedList%E3%80%81Vector%E5%92%8CStack%EF%BC%89/",
            "title": "Java学习-详谈List集合（ArrayList、LinkedList、Vector和Stack）",
            "date_published": "2020-09-03T05:14:52.685Z",
            "content_html": "<h1 id=\"1list接口介绍\"><a class=\"markdownIt-Anchor\" href=\"#1list接口介绍\">#</a> 1.List 接口介绍</h1>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020090219441391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n <code>java.util.List</code>  接口继承自 Collection 接口，是单列集合的一个重要分支，习惯性地会将实现了 List 接口的对象称为<strong> List 集合</strong>。<br>\n<strong>List 集合有以下特点：</strong></p>\n<ul>\n<li>在 List 集合中<strong>允许出现重复的元素</strong>（通过元素的 equals 方法来比较是否为重复的元素）</li>\n<li>所有的元素是以一种<strong>线性方式</strong>进行存储的</li>\n<li>它是一个带有<strong>索引的集合</strong>，在程序中可以通过索引来访问集合中的指定元素</li>\n<li>List 集合的<strong>元素有序</strong>，即元素的存入顺序和取出顺序一致</li>\n</ul>\n<h1 id=\"2list接口中常用的方法\"><a class=\"markdownIt-Anchor\" href=\"#2list接口中常用的方法\">#</a> 2.List 接口中常用的方法</h1>\n<p>List 作为 Collection 集合的子接口，不但<strong>继承了 Collection 接口中的全部方法</strong>，而且还增加了一些根据元素索引来操 作集合的特有方法，如下：</p>\n<ul>\n<li><code>public void add(int index, E element)</code>  : 将指定的元素，添加到该集合中的指定位置上。</li>\n<li><code>public E get(int index)</code>  : 返回集合中指定位置的元素。</li>\n<li><code>public E remove(int index)</code>  : 移除列表中指定位置的元素，返回的是被移除的元素。</li>\n<li><code>public E set(int index, E element)</code>  : 用指定元素替换集合中指定位置的元素，返回值的更新前的元素。</li>\n<li><code>public boolean  addAll(int index,Collection c)</code> ：将集合 c 所包含的所有元素都插入在 List 集合的 Index 处。</li>\n<li><code>public int  indexOf(Object o)</code> ：返回对象 o 在 List 集合中出现的位置索引。</li>\n<li><code>public int  lastIndexOf(Object o)</code> ：返回对象 o 在 List 集合中最后一次出现的位置索引。</li>\n<li><code>public List subList(int fromIndex,int toIndex)</code> ：返回从索引 fromIndex (包含) 到索引 toIndex (不包含) 处所有集合元素组成的子集合。</li>\n</ul>\n<h1 id=\"3arraylist集合\"><a class=\"markdownIt-Anchor\" href=\"#3arraylist集合\">#</a> 3.ArrayList 集合</h1>\n<h2 id=\"31引入对象数组\"><a class=\"markdownIt-Anchor\" href=\"#31引入对象数组\">#</a> 3.1 引入 —— 对象数组</h2>\n<p>下列代码，使用学生数组，存储三个学生对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age; </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; <span class=\"comment\">//创建学生数组 </span></span><br><span class=\"line\">\t\tStudent[] students = <span class=\"keyword\">new</span> Student[<span class=\"number\">3</span>]; </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建学生对象 </span></span><br><span class=\"line\">\t\tStudent s1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;曹操&quot;</span>,<span class=\"number\">40</span>); </span><br><span class=\"line\">\t\tStudent s2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;刘备&quot;</span>,<span class=\"number\">35</span>); </span><br><span class=\"line\">\t\tStudent s3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;孙权&quot;</span>,<span class=\"number\">30</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">//把学生对象作为元素赋值给学生数组 </span></span><br><span class=\"line\">\t\tstudents[<span class=\"number\">0</span>] = s1; </span><br><span class=\"line\">\t\tstudents[<span class=\"number\">1</span>] = s2; </span><br><span class=\"line\">\t\tstudents[<span class=\"number\">2</span>] = s3; </span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历学生数组 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;students.length; x++)</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tStudent s = students[x];</span><br><span class=\"line\">\t\t\tSystem.out.println(s.getName()+<span class=\"string\">&quot;‐‐‐&quot;</span>+s.getAge()); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们发现上述代码中存储对象数据，选择的容器是对象数组。而<strong>数组的长度是固定</strong>的，无法适应<strong>数据变化的需求</strong>。为了解决这个问题，Java 提供了另一个容器  <code>java.util.ArrayList</code>  集合类，让我们可以更便捷的存储和操作对 象数据。</p>\n<h2 id=\"32arraylist的简介\"><a class=\"markdownIt-Anchor\" href=\"#32arraylist的简介\">#</a> 3.2ArrayList 的简介</h2>\n<ul>\n<li>ArrayList 基于数组实现，是一个动态的数组队列。但是它和 Java 中的数组又不一样，它的<strong>容量可以自动增长</strong>，类似于 C 语言中动态申请内存，动态增长内存！</li>\n<li>ArrayList<strong> 继承</strong>了 <code>AbstractList</code> ，<strong>实现</strong>了 <code>RandomAccess</code> 、 <code>Cloneable</code>  和 <code>Serializable</code>  接口！</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>继承了 AbstractList， <code>AbstractList</code>  又<strong>继承</strong>了 <code>AbstractCollection</code> <strong> 实现</strong>了 <code>List</code>  接口，它是一个数组队列，提供了相关的<strong>添加、删除、修改、遍历</strong>等功能！</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCollection</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sole constructor.  (For invocation by subclass constructors, typically</span></span><br><span class=\"line\"><span class=\"comment\">     * implicit.)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">AbstractList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>实现了 <code>RandomAccess</code>  接口，提供了随机访问功能，实际上就是<strong>通过下标序号进行快速访问</strong>。</li>\n<li>实现了 <code>Cloneable</code>  接口，即覆盖了函数 clone ()，<strong>能被克隆</strong>。</li>\n<li>实现了 <code>Serializable</code>  接口，支持序列化，也就意味了 ArrayList<strong> 能够通过序列化传输</strong>。</li>\n</ul>\n<h2 id=\"33arraylist的使用\"><a class=\"markdownIt-Anchor\" href=\"#33arraylist的使用\">#</a> 3.3ArrayList 的使用</h2>\n<ul>\n<li><strong>查看类</strong>： <code>java.util.ArrayList &lt;E&gt;</code>  ：该类需要 import 导入使后使用。</li>\n</ul>\n<p><code>&lt;E&gt;</code>  ，表示一种指定的数据类型，叫做泛型。 E ，取自 Element（元素）的首字母。在出现 E 的地方，我们使用一种引用数据类型将其替换即可，表示我们将存储哪种引用类型的元素。比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt;，ArrayList&lt;Student&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>查看构造方法</strong>： <code>public ArrayList()</code>  构造一个内容为空的集合。</li>\n</ul>\n<p>基本格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure>\n<p>在 JDK 7 后，右侧泛型的尖括号之内可以留空，但是 &lt;&gt; 仍然要写。简化格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<h2 id=\"34arraylist的方法api\"><a class=\"markdownIt-Anchor\" href=\"#34arraylist的方法api\">#</a> 3.4ArrayList 的方法（API）</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Collection中定义的API</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">add</span><span class=\"params\">(E object)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; collection)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>                <span class=\"title\">clear</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">contains</span><span class=\"params\">(Object object)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">containsAll</span><span class=\"params\">(Collection&lt;?&gt; collection)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">equals</span><span class=\"params\">(Object object)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>                 <span class=\"title\">hashCode</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">Iterator&lt;E&gt;         <span class=\"title\">iterator</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">remove</span><span class=\"params\">(Object object)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">removeAll</span><span class=\"params\">(Collection&lt;?&gt; collection)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">retainAll</span><span class=\"params\">(Collection&lt;?&gt; collection)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>                 <span class=\"title\">size</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">&lt;T&gt; T[]             <span class=\"title\">toArray</span><span class=\"params\">(T[] array)</span></span></span><br><span class=\"line\"><span class=\"function\">Object[]            <span class=\"title\">toArray</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// AbstractCollection中定义的API</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>                <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> location, E object)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>             <span class=\"title\">addAll</span><span class=\"params\">(<span class=\"keyword\">int</span> location, Collection&lt;? extends E&gt; collection)</span></span></span><br><span class=\"line\"><span class=\"function\">E                   <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> location)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>                 <span class=\"title\">indexOf</span><span class=\"params\">(Object object)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>                 <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object object)</span></span></span><br><span class=\"line\"><span class=\"function\">ListIterator&lt;E&gt;     <span class=\"title\">listIterator</span><span class=\"params\">(<span class=\"keyword\">int</span> location)</span></span></span><br><span class=\"line\"><span class=\"function\">ListIterator&lt;E&gt;     <span class=\"title\">listIterator</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">E                   <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> location)</span></span></span><br><span class=\"line\"><span class=\"function\">E                   <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> location, E object)</span></span></span><br><span class=\"line\"><span class=\"function\">List&lt;E&gt;             <span class=\"title\">subList</span><span class=\"params\">(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// ArrayList新增的API</span></span></span><br><span class=\"line\"><span class=\"function\">Object               <span class=\"title\">clone</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>                 <span class=\"title\">ensureCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minimumCapacity)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>                 <span class=\"title\">trimToSize</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>                 <span class=\"title\">removeRange</span><span class=\"params\">(<span class=\"keyword\">int</span> fromIndex, <span class=\"keyword\">int</span> toIndex)</span></span></span><br></pre></td></tr></table></figure>\n<p>对于元素的操作，基本体现在 —— 增、删、查。常用的方法有：</p>\n<ul>\n<li><code>public boolean add(E e)</code>  ：将指定的元素添加到此集合的尾部。</li>\n<li><code>public E remove(int index)</code>  ：移除此集合中指定位置上的元素。返回被删除的元素。</li>\n<li><code>public E get(int index)</code>  ：返回此集合中指定位置上的元素。返回获取的元素。</li>\n<li><code>public int size()</code>  ：返回此集合中的元素数。遍历集合时，可以控制索引范围，防止越界。</li>\n</ul>\n<p>这些都是最基本的方法，操作非常简单，代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建集合对象 </span></span><br><span class=\"line\">\t\tArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//添加元素 </span></span><br><span class=\"line\">\t\tlist.add(<span class=\"string\">&quot;hello&quot;</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"string\">&quot;world&quot;</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"string\">&quot;java&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">//public E get(int index):返回指定索引处的元素 </span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;get:&quot;</span>+list.get(<span class=\"number\">0</span>)); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;get:&quot;</span>+list.get(<span class=\"number\">1</span>)); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;get:&quot;</span>+list.get(<span class=\"number\">2</span>)); </span><br><span class=\"line\">\t\t<span class=\"comment\">//public int size():返回集合中的元素的个数 </span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;size:&quot;</span>+list.size()); </span><br><span class=\"line\">\t\t<span class=\"comment\">//public E remove(int index):删除指定索引处的元素，返回被删除的元素 </span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;remove:&quot;</span>+list.remove(<span class=\"number\">0</span>)); </span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历输出 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++)</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(list.get(i)); </span><br><span class=\"line\">\t\t&#125; \t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get:hello</span><br><span class=\"line\">get:world</span><br><span class=\"line\">get:java</span><br><span class=\"line\">size:<span class=\"number\">3</span></span><br><span class=\"line\">remove:hello</span><br><span class=\"line\">world</span><br><span class=\"line\">java</span><br></pre></td></tr></table></figure>\n<h2 id=\"35-arraylist如何存储基本数据类型\"><a class=\"markdownIt-Anchor\" href=\"#35-arraylist如何存储基本数据类型\">#</a> 3.5 ArrayList 如何存储基本数据类型</h2>\n<p>ArrayList 对象<strong>不能存储基本类型</strong>，<strong>只能存储引用类型的数据</strong>。类似 <int> 不能写，但是存储基本数据类型<strong>对应的包装类型是可以的</strong>。所以，想要存储基本类型数据， <strong>&lt;&gt; 中的数据类型，必须转换后才能编写</strong>，转换写法如下：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200903101212592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;(); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">1</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">2</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">3</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">4</span>); </span><br><span class=\"line\">\t\tSystem.out.println(list); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"36-arraylist练习\"><a class=\"markdownIt-Anchor\" href=\"#36-arraylist练习\">#</a> 3.6 ArrayList 练习</h2>\n<p><strong>数值添加到集合</strong> ：生成 6 个 1~33 之间的随机整数，添加到集合，并遍历</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建Random 对象 </span></span><br><span class=\"line\">\t\tRandom random = <span class=\"keyword\">new</span> Random(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建ArrayList 对象 </span></span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加随机数到集合 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> r = random.nextInt(<span class=\"number\">33</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tlist.add(r); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历集合输出 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(list.get(i));</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">28</span></span><br><span class=\"line\"><span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">16</span></span><br></pre></td></tr></table></figure>\n<p><strong>对象添加到集合</strong>： 自定义 4 个学生对象，添加到集合，并遍历</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age; </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建集合对象 </span></span><br><span class=\"line\">\t\tArrayList&lt;Student&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Student&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建学生对象 </span></span><br><span class=\"line\">\t\tStudent s1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;赵丽颖&quot;</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">\t\tStudent s2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;唐嫣&quot;</span>,<span class=\"number\">20</span>); </span><br><span class=\"line\">\t\tStudent s3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;景甜&quot;</span>,<span class=\"number\">25</span>); </span><br><span class=\"line\">\t\tStudent s4 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;柳岩&quot;</span>,<span class=\"number\">19</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">//把学生对象作为元素添加到集合中</span></span><br><span class=\"line\">\t\tlist.add(s1); </span><br><span class=\"line\">\t\tlist.add(s2); </span><br><span class=\"line\">\t\tlist.add(s3); </span><br><span class=\"line\">\t\tlist.add(s4); </span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历集合</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; list.size(); x++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tStudent s = list.get(x); </span><br><span class=\"line\">\t\t\tSystem.out.println(s.getName()+<span class=\"string\">&quot;‐‐‐&quot;</span>+s.getAge()); </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">赵丽颖‐‐‐<span class=\"number\">18</span></span><br><span class=\"line\">唐嫣‐‐‐<span class=\"number\">20</span></span><br><span class=\"line\">景甜‐‐‐<span class=\"number\">25</span></span><br><span class=\"line\">柳岩‐‐‐<span class=\"number\">19</span></span><br></pre></td></tr></table></figure>\n<p><strong>打印集合方法</strong>： 定义以指定格式打印集合的方法 (ArrayList 类型作为参数)，使用 {} 扩起集合，使用 @分隔每个元素。格式参照 {元素 @元素 @元素}。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建集合对象 </span></span><br><span class=\"line\">\t\tArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加字符串到集合中</span></span><br><span class=\"line\">\t\tlist.add(<span class=\"string\">&quot;张三丰&quot;</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"string\">&quot;宋远桥&quot;</span>);</span><br><span class=\"line\">\t\tlist.add(<span class=\"string\">&quot;张无忌&quot;</span>); list.add(<span class=\"string\">&quot;殷梨亭&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">\t\tprintArrayList(list);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArrayList</span><span class=\"params\">(ArrayList&lt;String&gt; list)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 拼接左括号 </span></span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">&quot;&#123;&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历集合 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取元素 </span></span><br><span class=\"line\">\t\t\tString s = list.get(i); </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 拼接@符号 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i != list.size() - <span class=\"number\">1</span>) </span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\tSystem.out.print(s + <span class=\"string\">&quot;@&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 拼接右括号 </span></span><br><span class=\"line\">\t\t\t\tSystem.out.print(s + <span class=\"string\">&quot;&#125;&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;张三丰@宋远桥@张无忌@殷梨亭&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>获取集合方法</strong>： 定义获取所有偶数元素集合的方法 (ArrayList 类型作为返回值)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建Random 对象 </span></span><br><span class=\"line\">\t\tRandom random = <span class=\"keyword\">new</span> Random(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建ArrayList 对象 </span></span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加随机数到集合 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> r = random.nextInt(<span class=\"number\">1000</span>) + <span class=\"number\">1</span>; </span><br><span class=\"line\">\t\t\tlist.add(r); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用偶数集合的方法 </span></span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; arrayList = getArrayList(list); </span><br><span class=\"line\">\t\tSystem.out.println(arrayList); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayList&lt;Integer&gt; <span class=\"title\">getArrayList</span><span class=\"params\">(ArrayList&lt;Integer&gt; list)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建小集合,来保存偶数 </span></span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; smallList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历list </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取元素</span></span><br><span class=\"line\">\t\t\tInteger num = list.get(i); </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 判断为偶数,添加到小集合中 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (num % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\tsmallList.add(num);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 返回小集合 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> smallList;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">794</span>, <span class=\"number\">762</span>, <span class=\"number\">328</span>, <span class=\"number\">12</span>, <span class=\"number\">978</span>, <span class=\"number\">974</span>, <span class=\"number\">734</span>, <span class=\"number\">964</span>, <span class=\"number\">686</span>]</span><br></pre></td></tr></table></figure>\n<h1 id=\"4linkedlist集合\"><a class=\"markdownIt-Anchor\" href=\"#4linkedlist集合\">#</a> 4.LinkedList 集合</h1>\n<h2 id=\"41linklist简介\"><a class=\"markdownIt-Anchor\" href=\"#41linklist简介\">#</a> 4.1LinkList 简介</h2>\n<p><code>LinkedList</code>  是基于链表实现的，从源码可以看出<strong>是一个双向链表</strong>。除了<strong>当做链表</strong>使用外，它也可以被<strong>当作堆栈、队列或双端队列</strong>进行操作。<strong>不是线程安全的</strong>，<strong>继承</strong>  <code>AbstractSequentialList</code> <strong> 实现</strong>  <code>List</code> 、 <code>Deque</code> 、 <code>Cloneable</code> 、 <code>Serializable</code>  接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSequentialList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Deque</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>LinkedList 继承 <code>AbstractSequentialList</code> ，AbstractSequentialList 实现了 get (int index)、set (int index, E element)、add (int index, E element) 和 remove (int index) 这些函数，<strong>这些接口都是随机访问 List</strong> 的。</li>\n<li>LinkedList 实现  <code>List</code>  接口，<strong>能对它进行队列操作</strong>。</li>\n<li>LinkedList 实现  <code>Deque</code>  接口，即<strong>能将 LinkedList 当作双端队列使用</strong>。</li>\n<li>LinkedList 实现了 <code>Cloneable</code>  接口，即<strong>覆盖了函数 clone ()，能克隆</strong>。</li>\n<li>LinkedList 实现 <code>java.io.Serializable</code>  接口，这意味着 LinkedList<strong> 支持序列化，能通过序列化去传输</strong>。</li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200903105515631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"42linkedlist的常用方法\"><a class=\"markdownIt-Anchor\" href=\"#42linkedlist的常用方法\">#</a> 4.2LinkedList 的常用方法</h2>\n<p>实际开发中对一个集合元素的添加与删除经常涉及到<strong>首尾操作</strong>，而 LinkedList 提供了大量首尾操作的方法：</p>\n<ul>\n<li><code>public void addLast(E e)</code>  : 将指定元素添加到此列表的结尾。</li>\n<li><code>public E getFirst()</code>  : 返回此列表的第一个元素。</li>\n<li><code>public E getLast()</code>  : 返回此列表的最后一个元素。</li>\n<li><code>public E removeFirst()</code>  : 移除并返回此列表的第一个元素。</li>\n<li><code>public E removeLast()</code>  : 移除并返回此列表的最后一个元素。</li>\n<li><code>public E pop()</code>  : 从此列表所表示的堆栈处弹出一个元素。</li>\n<li><code>public void push(E e)</code>  : 将元素推入此列表所表示的堆栈。</li>\n<li><code>public boolean isEmpty()</code>  ：如果列表不包含元素，则返回 true。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\tLinkedList&lt;String&gt; link = <span class=\"keyword\">new</span> LinkedList&lt;String&gt;(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//添加元素 </span></span><br><span class=\"line\">\t\tlink.addFirst(<span class=\"string\">&quot;abc1&quot;</span>); </span><br><span class=\"line\">\t\tlink.addFirst(<span class=\"string\">&quot;abc2&quot;</span>); </span><br><span class=\"line\">\t\tlink.addFirst(<span class=\"string\">&quot;abc3&quot;</span>); </span><br><span class=\"line\">\t\tSystem.out.println(link); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取元素 </span></span><br><span class=\"line\">\t\tSystem.out.println(link.getFirst()); </span><br><span class=\"line\">\t\tSystem.out.println(link.getLast()); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 删除元素 </span></span><br><span class=\"line\">\t\tSystem.out.println(link.removeFirst()); </span><br><span class=\"line\">\t\tSystem.out.println(link.removeLast()); </span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (!link.isEmpty()) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//判断集合是否为空 </span></span><br><span class=\"line\">\t\t\tSystem.out.println(link.pop()); </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//弹出集合中的栈顶元素 &#125;</span></span><br><span class=\"line\">\t\t\tSystem.out.println(link); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[abc3, abc2, abc1]</span><br><span class=\"line\">abc3</span><br><span class=\"line\">abc1</span><br><span class=\"line\">abc3</span><br><span class=\"line\">abc1</span><br><span class=\"line\">abc2</span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure>\n<h1 id=\"5vector集合\"><a class=\"markdownIt-Anchor\" href=\"#5vector集合\">#</a> 5.Vector 集合</h1>\n<h2 id=\"51vector向量类的介绍\"><a class=\"markdownIt-Anchor\" href=\"#51vector向量类的介绍\">#</a> 5.1Vector（向量类）的介绍</h2>\n<p>Vector 类可以实现可增长的对象数组。<br>\n <code>java.util.vector</code>  提供了<strong>向量类 (Vector)</strong> 以实现类似动态数组的功能。与数组一样，它包含可以使用整数索引进行访问的组件。但是，Vector 的大小可以根据需要增大或缩小，以适应创建 Vector 后进行<strong>添加或移除</strong>项的操作。Vector <strong>是同步的</strong>，<strong>可用于多线程</strong>。<br>\n对于预先不知或者不愿预先定义数组大小，并且<strong>需要频繁地进行查找，插入，删除</strong>工作的情况，可以考虑使用向量类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Vector 继承了 <code>AbstractList</code> ，实现了 <code>List</code>  接口；所以，<strong>它是一个队列，支持相关的添加、删除、修改、遍历</strong>等功能。</li>\n<li>Vector 实现了 <code>RandmoAccess</code>  接口，即提供了随机访问功能。RandmoAccess 是 java 中用来被 List 实现，为 List 提供快速访问功能的。在 Vector 中，我们即<strong>可以通过元素的序号快速获取元素对象；这就是快速随机访问</strong>。</li>\n<li>Vector 实现了 <code>Cloneable</code>  接口，即<strong>实现 clone () 函数。它能被克隆</strong>。</li>\n<li>Vector 实现 <code>Serializable接</code> 口，<strong>支持序列化</strong>。</li>\n</ul>\n<h2 id=\"52vector的使用\"><a class=\"markdownIt-Anchor\" href=\"#52vector的使用\">#</a> 5.2Vector 的使用</h2>\n<p><strong>向量类提供了三种构造方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">vector</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">vector</span><span class=\"params\">(<span class=\"keyword\">int</span> initialcapacity,<span class=\"keyword\">int</span> capacityIncrement)</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">vector</span><span class=\"params\">(<span class=\"keyword\">int</span> initialcapacity)</span></span></span><br></pre></td></tr></table></figure>\n<p>使用第一种方法系统会自动对向量进行管理，若使用后两种方法，则系统将根据参数，initialcapacity 设定向量对象的容量（即向量对象可存储数据的大小），当真正存放的数据个数超过容量时。系统会扩充向量对象存储容量。<br>\n参数 capacityincrement 给定了每次扩充的扩充值。当 capacityincrement 为 0 的时候，则每次扩充一倍，利用这个功能可以优化存储。</p>\n<p><strong>Vector 类中提供了各种方法：</strong><br>\n<strong>插入功能：</strong></p>\n<ul>\n<li><code>public final synchronized void addElement(Object obj)</code>  ：将 obj 插入向量的尾部。obj 可以是任何类型的对象。对同一个向量对象，亦可以在其中插入不同类的对象。但插入的应是对象而不是数值，所以插入数值时要注意将数组转换成相应的对象。</li>\n</ul>\n<p>例如：要插入整数 1 时，不要直接调用 v1.addElement (1), 正确的方法为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector v1 = <span class=\"keyword\">new</span> Vector(); </span><br><span class=\"line\">Integer integer1 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">1</span>); </span><br><span class=\"line\">v1.addElement(integer1); </span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>public final synchronized void setElementAt(Object obj,int index)</code>  ：将 index 处的对象设置成 obj，原来的对象将被覆盖。</li>\n<li><code>public final synchronized void insertElementAt(Object obj,int index)</code>  ：在 index 指定的位置插入 obj，原来对象以及此后的对象依次往后顺延。</li>\n</ul>\n<p><strong>查询搜索功能：</strong></p>\n<ul>\n<li><code>public final int indexOf(Object obj)</code>  ：从向量头开始搜索 obj, 返回所遇到的第一个 obj 对应的下标，若不存在此 obj, 返回 - 1.</li>\n<li><code>public final synchronized int indexOf(Object obj,int index)</code>  ：从 index 所表示的下标处开始搜索 obj.</li>\n<li><code>public final int lastindexOf(Object obj)</code>  ：从向量尾部开始逆向搜索 obj.</li>\n<li><code>public final synchornized int lastIndex(Object obj,int index)</code>  ：从 index 所表示的下标处由尾至头逆向搜索 obj.</li>\n<li><code>public final synchornized firstElement()</code>  ：获取向量对象中的首个 obj</li>\n<li><code>public final synchornized Object lastElement()</code>  ：获取向量对象的最后一个 obj</li>\n</ul>\n<p><strong>其他功能:</strong></p>\n<ul>\n<li><code>public final int size()</code> ： 此方法用于获取向量元素的个数。它们返回值是向量中实际存在的元素个数，而非向量容量。可以调用方法 capacity () 来获取容量值。</li>\n<li><code>public final synchronized void setSize(int newsize)</code> ： 此方法用来定义向量的大小，若向量对象现有成员个数已经超过了 newsize 的值，则超过部分的多余元素会丢失。</li>\n</ul>\n<p>程序中定义<strong> Enumeration 类</strong>的一个对象 Enumeration 是 java.util 中的一个接口类</p>\n<ul>\n<li><code>public final synchronized Enumeration elements()</code> ： 此方法将向量对象对应到一个枚举类型。java.util 包中的其他类中也都有这类方法，以便于用户获取对应的枚举类型。</li>\n</ul>\n<p>在 <code>Enumeration</code>  中封装了<strong>有关枚举数据集合</strong>的方法。</p>\n<ul>\n<li>方法 hasMoreElement () 来判断集合中是否还有其他元素。</li>\n<li>方法 nextElement () 来获取下一个元素</li>\n</ul>\n<p>以下代码就是用 hasMoreElement（）和 nextElement（）遍历 Vector 查询搜索功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Enumeration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Vector;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestVector</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Vector&lt;String&gt; hs = <span class=\"keyword\">new</span> Vector&lt;String&gt;();</span><br><span class=\"line\">        hs.add(<span class=\"string\">&quot;aa&quot;</span>);</span><br><span class=\"line\">        hs.add(<span class=\"string\">&quot;bb&quot;</span>);</span><br><span class=\"line\">        hs.add(<span class=\"string\">&quot;aa&quot;</span>);</span><br><span class=\"line\">        hs.add(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\">        hs.add(<span class=\"string\">&quot;aa&quot;</span>);</span><br><span class=\"line\">        hs.add(<span class=\"string\">&quot;dd&quot;</span>);</span><br><span class=\"line\">        printSet2(hs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printSet</span><span class=\"params\">(List hs)</span> </span>&#123;</span><br><span class=\"line\">        Iterator iterator = hs.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printSet2</span><span class=\"params\">(Vector&lt;String&gt; hs)</span> </span>&#123;</span><br><span class=\"line\">        Enumeration&lt;String&gt; elements = hs.elements();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (elements.hasMoreElements()) &#123;</span><br><span class=\"line\">            System.out.println(elements.nextElement());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> TestVector().test01();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aa</span><br><span class=\"line\">bb</span><br><span class=\"line\">aa</span><br><span class=\"line\">cc</span><br><span class=\"line\">aa</span><br><span class=\"line\">dd</span><br></pre></td></tr></table></figure>\n<h1 id=\"6stack\"><a class=\"markdownIt-Anchor\" href=\"#6stack\">#</a> 6.Stack</h1>\n<h2 id=\"61stack介绍\"><a class=\"markdownIt-Anchor\" href=\"#61stack介绍\">#</a> 6.1Stack 介绍</h2>\n<p><strong>Stack 类</strong>表示<strong>后进先出（LIFO）的对象堆栈</strong>。<strong>继承自 Vector</strong>，它通过五个操作对类 Vector 进行了扩展 ，允许将向量视为堆栈。它提供了通常的 push 和 pop 操作，以及取堆栈顶点的 peek 方法、测试堆栈是否为空的 empty 方法、在堆栈中查找项并确定到堆栈顶距离的 search 方法。<br>\n因为它继承自 Vector, 那么它的实现原理是<strong>以数组实现堆栈</strong>的。<br>\n如果要<strong>以链表方式实现堆栈可以使用 LinkedList</strong>！<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200903120056925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.Object</span><br><span class=\"line\">  继承者 java.util.AbstractCollection&lt;E&gt;</span><br><span class=\"line\">      继承者 java.util.AbstractList&lt;E&gt;</span><br><span class=\"line\">          继承者 java.util.Vector&lt;E&gt;</span><br><span class=\"line\">              继承者 java.util.Stack&lt;E&gt;</span><br><span class=\"line\">所有已实现的接口：</span><br><span class=\"line\">Serializable, Cloneable, Iterable&lt;E&gt;, Collection&lt;E&gt;, List&lt;E&gt;, RandomAccess</span><br></pre></td></tr></table></figure>\n<p>并且从类 java.util.Vector 继承的字段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">capacityIncrement, elementCount, elementData </span><br></pre></td></tr></table></figure>\n<p>从类 java.util.AbstractList 继承的字段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modCount</span><br></pre></td></tr></table></figure>\n<h2 id=\"62stack的方法和使用\"><a class=\"markdownIt-Anchor\" href=\"#62stack的方法和使用\">#</a> 6.2Stack 的方法和使用</h2>\n<p>Stack 只有下面四个方法！由于 Stack 继承了 Vector ，它<strong>也有 Vector 的 API 方法</strong></p>\n<ul>\n<li><code>push( num)</code>  ：入栈</li>\n<li><code>pop()</code>  ：栈顶元素出栈</li>\n<li><code>empty()</code>  ：判定栈是否为空</li>\n<li><code>peek()</code>  ：获取栈顶元素</li>\n<li><code>search(num)</code>  ：判端元素 num 是否在栈中，如果在返回 1，不在返回 - 1</li>\n</ul>\n<p>（<strong>注意 pop () 和 peek () 的区别。pop () 会弹出栈顶元素并返回栈顶的值，peek () 只是获取栈顶的值，但是并不会把元素从栈顶弹出来</strong>）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\tStack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">\t\tstack.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tSystem.out.println(stack.search(<span class=\"number\">2</span>));  <span class=\"comment\">//2在栈中，返回1</span></span><br><span class=\"line\">\t\tSystem.out.println(stack.search(<span class=\"number\">0</span>));  <span class=\"comment\">//0不在栈中，返回-1</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(stack.empty());   <span class=\"comment\">//栈不为空，返回false</span></span><br><span class=\"line\">\t\tSystem.out.println(stack.peek());   <span class=\"comment\">//读取栈顶元素，返回2</span></span><br><span class=\"line\">\t\tSystem.out.println(stack.empty());   <span class=\"comment\">//栈不为空，返回false</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(stack.pop());   <span class=\"comment\">//弹出栈顶元素，并返回栈顶元素2</span></span><br><span class=\"line\">\t\tSystem.out.println(stack.empty());   <span class=\"comment\">//栈空，返回true\t\t</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">-<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"7list集合总结\"><a class=\"markdownIt-Anchor\" href=\"#7list集合总结\">#</a> 7.List 集合总结</h1>\n<h2 id=\"71总结概述\"><a class=\"markdownIt-Anchor\" href=\"#71总结概述\">#</a> 7.1 总结概述</h2>\n<p>1、List 继承了 Collection，是有序的列表。<br>\n2、实现类有 ArrayList、LinkedList、Vector、Stack 等</p>\n<ul>\n<li>ArrayList 是基于数组实现的，是一个数组队列。可以动态的增加容量！</li>\n<li>LinkedList 是基于链表实现的，是一个双向循环列表。可以被当做堆栈使用！</li>\n<li>Vector 是基于数组实现的，是一个矢量队列，是线程安全的！</li>\n<li>Stack 是基于数组实现的，是栈，它继承与 Vector，特性是 FILO（先进后出）！</li>\n</ul>\n<h2 id=\"72使用场景\"><a class=\"markdownIt-Anchor\" href=\"#72使用场景\">#</a> 7.2 使用场景</h2>\n<p><strong>在实际的应用中如果使用到队列，栈，链表，首先可以想到使用 List</strong>。不同的场景下面使用不同的工具，效率才能更高！</p>\n<ol>\n<li>当集合中对插入元素数据的速度要求不高，但是要求快速访问元素数据，则使用 ArrayList！</li>\n<li>当集合中对访问元素数据速度不做要求不高，但是对插入和删除元素数据速度要求高的情况，则使用 LinkedList！</li>\n<li>当集合中有多线程对集合元素进行操作时候，则使用 Vector！但是现在 BVector 现在一般不再使用，如需在多线程下使用，可以用 CopyOnWriteArrayList，在 java.util.concurrent 包下。</li>\n<li>当集合中有需求是希望后保存的数据先读取出来，则使用 Stack！</li>\n</ol>\n<h2 id=\"73性能测试\"><a class=\"markdownIt-Anchor\" href=\"#73性能测试\">#</a> 7.3 性能测试</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 性能测试，通过插入、随机读取和删除对ArrayList、LinkedList、Vector和Stack进行测试！</span></span><br><span class=\"line\"><span class=\"comment\"> * 结论：看LinkedList</span></span><br><span class=\"line\"><span class=\"comment\"> *  插入10万个元素，LinkedList所花时间最短：17 ms。</span></span><br><span class=\"line\"><span class=\"comment\"> *  删除10万个元素，LinkedList所花时间最短： 9 ms。</span></span><br><span class=\"line\"><span class=\"comment\"> *  遍历10万个元素，LinkedList所花时间最长：10255 ms；而ArrayList、Stack和Vector则相差不多，都只用了几秒。</span></span><br><span class=\"line\"><span class=\"comment\"> *  (1) 对于需要快速插入，删除元素，应该使用LinkedList。</span></span><br><span class=\"line\"><span class=\"comment\"> *  (2) 对于需要快速随机访问元素，应该使用ArrayList。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> COUNT = <span class=\"number\">100000</span>; <span class=\"comment\">//十万</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ArrayList&lt;Object&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LinkedList&lt;Object&gt; linkedList = <span class=\"keyword\">new</span> LinkedList&lt;Object&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Vector&lt;Object&gt; vector = <span class=\"keyword\">new</span> Vector&lt;Object&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Stack&lt;Object&gt; stack = <span class=\"keyword\">new</span> Stack&lt;Object&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;....开始测试插入元素..........&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 插入元素测试</span></span><br><span class=\"line\">        insertData(arrayList,<span class=\"string\">&quot;ArrayList&quot;</span>) ;</span><br><span class=\"line\">        insertData(linkedList,<span class=\"string\">&quot;LinkedList&quot;</span>) ;</span><br><span class=\"line\">        insertData(vector,<span class=\"string\">&quot;Vector&quot;</span>) ;</span><br><span class=\"line\">        insertData(stack,<span class=\"string\">&quot;Stack&quot;</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;....开始测试读取元素..........&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 随机读取元素测试</span></span><br><span class=\"line\">        readAccessData(arrayList,<span class=\"string\">&quot;ArrayList&quot;</span>) ;</span><br><span class=\"line\">        readAccessData(linkedList,<span class=\"string\">&quot;LinkedList&quot;</span>) ;</span><br><span class=\"line\">        readAccessData(vector,<span class=\"string\">&quot;Vector&quot;</span>) ;</span><br><span class=\"line\">        readAccessData(stack,<span class=\"string\">&quot;Stack&quot;</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;....开始测试删除元素..........&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 随机读取元素测试</span></span><br><span class=\"line\">        deleteData(arrayList,<span class=\"string\">&quot;ArrayList&quot;</span>) ;</span><br><span class=\"line\">        deleteData(linkedList,<span class=\"string\">&quot;LinkedList&quot;</span>) ;</span><br><span class=\"line\">        deleteData(vector,<span class=\"string\">&quot;Vector&quot;</span>) ;</span><br><span class=\"line\">        deleteData(stack,<span class=\"string\">&quot;Stack&quot;</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定的List 的子类中插入元素，并统计插入的时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> list List 的子类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name 子类的名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertData</span><span class=\"params\">(List&lt;Object&gt; list,String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 向list的位置0插入COUNT个数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;COUNT; i++)&#123;</span><br><span class=\"line\">            list.add(<span class=\"number\">0</span>, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> endTime = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> interval = endTime - startTime;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot; : 插入 &quot;</span>+COUNT+<span class=\"string\">&quot;元素， 使用的时间是 &quot;</span> + interval+<span class=\"string\">&quot; ms&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定的List 的子类中删除元素，并统计删除的时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> list List 的子类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name 子类的名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteData</span><span class=\"params\">(List&lt;Object&gt; list,String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 删除list第一个位置元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;COUNT; i++)</span><br><span class=\"line\">            list.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> endTime = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> interval = endTime - startTime;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot; : 删除 &quot;</span>+COUNT+<span class=\"string\">&quot;元素， 使用的时间是 &quot;</span> + interval+<span class=\"string\">&quot; ms&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定的List 的子类中读取元素，并统计读取的时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> list List 的子类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name 子类的名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">readAccessData</span><span class=\"params\">(List&lt;Object&gt; list,String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 读取list元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; COUNT; i++)</span><br><span class=\"line\">            list.get(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> endTime = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> interval = endTime - startTime;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot; : 随机读取 &quot;</span>+COUNT+<span class=\"string\">&quot;元素， 使用的时间是 &quot;</span> + interval+<span class=\"string\">&quot; ms&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....开始测试插入元素..........</span><br><span class=\"line\">ArrayList : 插入 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">970</span> ms</span><br><span class=\"line\">LinkedList : 插入 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">17</span> ms</span><br><span class=\"line\">Vector : 插入 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">968</span> ms</span><br><span class=\"line\">Stack : 插入 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">888</span> ms</span><br><span class=\"line\">....开始测试读取元素..........</span><br><span class=\"line\">ArrayList : 随机读取 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">6</span> ms</span><br><span class=\"line\">LinkedList : 随机读取 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">10255</span> ms</span><br><span class=\"line\">Vector : 随机读取 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">8</span> ms</span><br><span class=\"line\">Stack : 随机读取 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">4</span> ms</span><br><span class=\"line\">....开始测试删除元素..........</span><br><span class=\"line\">ArrayList : 删除 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">1460</span> ms</span><br><span class=\"line\">LinkedList : 删除 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">9</span> ms</span><br><span class=\"line\">Vector : 删除 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">1472</span> ms</span><br><span class=\"line\">Stack : 删除 <span class=\"number\">100000</span>元素， 使用的时间是 <span class=\"number\">894</span> ms</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "java",
                "List",
                "ArrayList",
                "LinkedList",
                "Vector",
                "Stack"
            ]
        }
    ]
}