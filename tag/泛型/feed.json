{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog • All posts by \"泛型\" tag",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "https://jQueryZK.github.io",
    "items": [
        {
            "id": "https://jqueryzk.github.io/2020/09/03/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%B3%9B%E5%9E%8B/",
            "url": "https://jqueryzk.github.io/2020/09/03/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%B3%9B%E5%9E%8B/",
            "title": "Java学习-详谈泛型",
            "date_published": "2020-09-03T05:14:58.270Z",
            "content_html": "<h1 id=\"泛型\"><a class=\"markdownIt-Anchor\" href=\"#泛型\">#</a> 泛型</h1>\n<h2 id=\"11泛型概述\"><a class=\"markdownIt-Anchor\" href=\"#11泛型概述\">#</a> 1.1 泛型概述</h2>\n<p><strong>泛型</strong>：即 <strong>参数化类型</strong> 。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？<br>\n<strong>参数化类型</strong>：就是<strong>将类型由原来的具体的类型参数化</strong>，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为<strong>类型形参</strong>），然后在<strong>使用 (调用) 时传入具体的类型（类型实参）</strong>。</p>\n<p>简而言之：（ <font color=red>泛型就是可以在类或方法中预支地使用未知的类型。一般在创建对象时，将未知的类型确定具体的类型。<strong>当没有指定泛型时，默认类型为 Object 类型</strong></font>）</p>\n<p><strong>泛型的本质</strong>：是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p>\n<p>在前面学习集合时，我们都知道集合中是可以存放任意对象的，只要把对象存储集合后，那么这时他们都会被提升成 Object 类型。当我们在取出每一个对象，并且进行相应的操作，这时必须采用类型转换。<br>\n<strong>观察下面代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tCollection coll = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">\t\tcoll.add(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">\t\tcoll.add(<span class=\"string\">&quot;itcast&quot;</span>);</span><br><span class=\"line\">\t\tcoll.add(<span class=\"number\">5</span>);<span class=\"comment\">//由于集合没有做任何限定，任何类型都可以给其中存放</span></span><br><span class=\"line\">\t\tIterator it = coll.iterator();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//需要打印每个字符串的长度,就要把迭代出来的对象转成String类型</span></span><br><span class=\"line\">\t\t\tString str = (String) it.next();</span><br><span class=\"line\">\t\t\tSystem.out.println(str.length());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果为：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200902160410661.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n程序在运行时发生了问题 <code>java.lang.ClassCastException</code> 。 为什么会发生<strong>类型转换异常</strong> 呢？ 我们来分析下：ArrayList 可以存放任意类型，例子中添加了 String 类型，又添加了 Integer 类型，再使用时都以 String 的方式使用，因此程序崩溃了。为了解决类似这样的问题（在编译阶段就可以解决），泛型应运而生。 Collection 虽然可以存储各种对象，但实际上通常 Collection 只存储同一类型对象。例如都是存储字符串对象。<strong>因此在 JDK5 之后，新增了泛型 (Generic) 语法，让你在设计 API 时可以指定类或方法支持泛型</strong>，这样我们使用 API 的时候也变得更为简洁，并得到了编译时期的语法检查。</p>\n<h2 id=\"12为什么要使用泛型\"><a class=\"markdownIt-Anchor\" href=\"#12为什么要使用泛型\">#</a> 1.2 为什么要使用泛型？</h2>\n<p>先看下面一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    \tList&lt;String&gt; stringArrayList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    \tList&lt;Integer&gt; integerArrayList = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">    \tClass classStringArrayList = stringArrayList.getClass();</span><br><span class=\"line\">    \tClass classIntegerArrayList = integerArrayList.getClass();</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(classStringArrayList.equals(classIntegerArrayList))</span><br><span class=\"line\">    \t&#123;</span><br><span class=\"line\">    \t    System.out.println(<span class=\"string\">&quot;泛型测试&quot;</span>+<span class=\"string\">&quot;类型相同&quot;</span>);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \tSystem.out.println(stringArrayList.getClass());</span><br><span class=\"line\">    \tSystem.out.println(integerArrayList.getClass());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">泛型测试类型相同</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">java</span>.<span class=\"title\">util</span>.<span class=\"title\">ArrayList</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">java</span>.<span class=\"title\">util</span>.<span class=\"title\">ArrayList</span></span></span><br></pre></td></tr></table></figure>\n<p>通过上面的例子可以证明，在编译之后程序会采取去泛型化的措施。也就是说 Java 中的泛型，只在<strong>编译阶段有效</strong>。<font color=blue><em>在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦除，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法</em>。</font>也就是说，<strong>泛型信息不会进入到运行时阶段</strong> ，很好地避免了类型强制转换的麻烦。<br>\n<strong>对此得出一个结论</strong>：<font color=red>泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。</font></p>\n<h2 id=\"13-泛型的定义与使用\"><a class=\"markdownIt-Anchor\" href=\"#13-泛型的定义与使用\">#</a> 1.3 泛型的定义与使用</h2>\n<p>泛型，用来灵活地将数据类型应用到不同的 <code>类、方法、接口</code> 当中。将数据类型作为参数进行传递。</p>\n<ul>\n<li><strong>定义和使用含有泛型的类</strong></li>\n</ul>\n<p>定义格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 <span class=\"class\"><span class=\"keyword\">class</span> 类名&lt;代表泛型的变量&gt; </span>&#123;  &#125;</span><br></pre></td></tr></table></figure>\n<p>例如，API 中的 ArrayList 集合：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>&#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123; &#125;</span><br><span class=\"line\">   \t....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用泛型： 即什么时候确定泛型？</strong><br>\n—— 在创建对象的时候确定泛型<br>\n例如： <code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</code> <br>\n 此时，变量 E 的值就是 String 类型，那么我们的类型就可以理解为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">String</span>&gt;</span>&#123; </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(String e)</span></span>&#123; &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;  &#125;</span><br><span class=\"line\">     ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再如： <code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</code> <br>\n 此时，变量 E 的值就是 Integer 类型，那么我们的类型就可以理解为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123; </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(Integer e)</span> </span>&#123; &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;  &#125;</span><br><span class=\"line\">     ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>举例自定义泛型类</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGenericClass</span>&lt;<span class=\"title\">MVP</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//没有MVP类型，在这里代表 未知的一种数据类型 未来传递什么就是什么类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> MVP mvp;   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMVP</span><span class=\"params\">(MVP mvp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mvp = mvp;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> MVP <span class=\"title\">getMVP</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mvp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericClassDemo</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;\t\t </span><br><span class=\"line\">         <span class=\"comment\">// 创建一个泛型为String的类</span></span><br><span class=\"line\">         MyGenericClass&lt;String&gt; my = <span class=\"keyword\">new</span> MyGenericClass&lt;String&gt;();    \t</span><br><span class=\"line\">         <span class=\"comment\">// 调用setMVP</span></span><br><span class=\"line\">         my.setMVP(<span class=\"string\">&quot;大胡子登登&quot;</span>);</span><br><span class=\"line\">         <span class=\"comment\">// 调用getMVP</span></span><br><span class=\"line\">         String mvp = my.getMVP();</span><br><span class=\"line\">         System.out.println(mvp);</span><br><span class=\"line\">         <span class=\"comment\">//创建一个泛型为Integer的类</span></span><br><span class=\"line\">         MyGenericClass&lt;Integer&gt; my2 = <span class=\"keyword\">new</span> MyGenericClass&lt;Integer&gt;(); </span><br><span class=\"line\">         my2.setMVP(<span class=\"number\">123</span>);   \t  </span><br><span class=\"line\">         Integer mvp2 = my2.getMVP();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>定义和使用含有泛型的方法</strong></li>\n</ul>\n<p><strong>定义格式：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数)&#123;  &#125;</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGenericMethod</span> </span>&#123;\t  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;MVP&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(MVP mvp)</span> </span>&#123;</span><br><span class=\"line\">    \tSystem.out.println(mvp.getClass());</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;MVP&gt; <span class=\"function\">MVP <span class=\"title\">show2</span><span class=\"params\">(MVP mvp)</span> </span>&#123;\t</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> mvp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用格式</strong>：调用方法时，确定泛型的类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericMethodDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建对象</span></span><br><span class=\"line\">        MyGenericMethod mm = <span class=\"keyword\">new</span> MyGenericMethod();</span><br><span class=\"line\">        <span class=\"comment\">// 演示看方法提示</span></span><br><span class=\"line\">        mm.show(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        mm.show(<span class=\"number\">123</span>);</span><br><span class=\"line\">        mm.show(<span class=\"number\">12.45</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">String</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">Integer</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">Double</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>定义和使用含有泛型的接口</li>\n</ul>\n<p><strong>定义格式</strong>： <code>修饰符 interface接口名&lt;代表泛型的变量&gt; &#123;  &#125;</code> <br>\n 例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyGenericInterface</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> E <span class=\"title\">getE</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用格式：<br>\n<strong>1、定义类时确定泛型的类型</strong><br>\n例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyImp1</span> <span class=\"keyword\">implements</span> <span class=\"title\">MyGenericInterface</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(String e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getE</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时，泛型 E 的值就是 String 类型<br>\n<strong> 2、始终不确定泛型的类型，直到创建对象时，确定泛型的类型</strong><br>\n例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyImp2</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">MyGenericInterface</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">       \t <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getE</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>确定泛型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyImp2&lt;String&gt;  my = <span class=\"keyword\">new</span> MyImp2&lt;String&gt;();  </span><br><span class=\"line\">        my.add(<span class=\"string\">&quot;aa&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>静态方法与泛型</strong><br>\n静态方法有一种情况需要注意一下，那就是在类中的静态方法使用泛型：静态方法无法访问类上定义的泛型；如果静态方法操作的引用数据类型不确定的时候，必须要将泛型定义在方法上。<br>\n即：如果静态方法要使用泛型的话，必须将静态方法也定义成泛型方法 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticGenerator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果在类中定义使用泛型的静态方法，需要添加额外的泛型声明（将这个方法定义成泛型方法）</span></span><br><span class=\"line\"><span class=\"comment\">     * 即使静态方法要使用泛型类中已经声明过的泛型也不可以。</span></span><br><span class=\"line\"><span class=\"comment\">     * 如：public static void show(T t)&#123;..&#125;,此时编译器会提示错误信息：</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;StaticGenerator cannot be refrenced from static context&quot;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(T t)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"14泛型通配符\"><a class=\"markdownIt-Anchor\" href=\"#14泛型通配符\">#</a> 1.4 泛型通配符</h2>\n<p><strong>泛型通配符：</strong><br>\n当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符 &lt;?&gt; 表示。但是一旦使用泛型的通配符后，只能使用 Object 类中的共性方法，集合中元素自身方法无法使用。<br>\n<strong>通配符基本使用：</strong><br>\n泛型的通配符：不知道使用什么类型来接收的时候，此时可以使用？，？表示未知通配符。<br>\n(此时只能接受数据，不能往该集合中存储数据。)<br>\n 比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Collection&lt;Intger&gt; list1 = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">    getElement(list1);</span><br><span class=\"line\">    Collection&lt;String&gt; list2 = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    getElement(list2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getElement</span><span class=\"params\">(Collection&lt;?&gt; coll)</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//？代表可以接收任意类型</span></span><br></pre></td></tr></table></figure>\n<p>（泛型不存在继承关系 Collection (); 这种是错误的）</p>\n<p><strong>通配符高级使用 ---- 受限泛型</strong><br>\n之前设置泛型的时候，实际上是可以任意设置的，只要是类就可以设置。但是在 JAVA 的泛型中可以指定一个泛型的<strong>上限</strong> 和<strong>下限</strong>。</p>\n<p>泛型的上限：<br>\n格式：  <code>类型名称 &lt;? extends 类 &gt; 对象名称</code> <br>\n意义： 只能接收该类型及其子类</p>\n<p>泛型的下限：<br>\n格式：  <code>类型名称 &lt;? super 类 &gt; 对象名称</code> <br>\n意义： 只能接收该类型及其父类型</p>\n<p>比如：现已知 Object 类，String 类，Number 类，Integer 类，其中 Number 是 Integer 的父类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Collection&lt;Integer&gt; list1 = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">    Collection&lt;String&gt; list2 = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    Collection&lt;Number&gt; list3 = <span class=\"keyword\">new</span> ArrayList&lt;Number&gt;();</span><br><span class=\"line\">    Collection&lt;Object&gt; list4 = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();    </span><br><span class=\"line\">    getElement(list1);</span><br><span class=\"line\">    getElement(list2);<span class=\"comment\">//报错</span></span><br><span class=\"line\">    getElement(list3);</span><br><span class=\"line\">    getElement(list4);<span class=\"comment\">//报错</span></span><br><span class=\"line\">    getElement2(list1);<span class=\"comment\">//报错</span></span><br><span class=\"line\">    getElement2(list2);<span class=\"comment\">//报错</span></span><br><span class=\"line\">    getElement2(list3);</span><br><span class=\"line\">    getElement2(list4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 泛型的上限：此时的泛型?，必须是Number类型或者Number类型的子类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getElement1</span><span class=\"params\">(Collection&lt;? extends Number&gt; coll)</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 泛型的下限：此时的泛型?，必须是Number类型或者Number类型的父类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getElement2</span><span class=\"params\">(Collection&lt;? <span class=\"keyword\">super</span> Number&gt; coll)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "java",
                "泛型"
            ]
        }
    ]
}