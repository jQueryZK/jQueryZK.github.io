{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog • All posts by \"hashset\" tag",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "https://jqueryzk.gitee.io/zkblog",
    "items": [
        {
            "id": "https://jqueryzk.gitee.io/zkblog/2020/09/10/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88Set%E9%9B%86%E5%90%88%EF%BC%88HashSet%E3%80%81TreeSet%E3%80%81LinkedHashSet%EF%BC%89/",
            "url": "https://jqueryzk.gitee.io/zkblog/2020/09/10/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88Set%E9%9B%86%E5%90%88%EF%BC%88HashSet%E3%80%81TreeSet%E3%80%81LinkedHashSet%EF%BC%89/",
            "title": "Java学习-详谈Set集合（HashSet、TreeSet、LinkedHashSet）",
            "date_published": "2020-09-10T08:28:30.815Z",
            "content_html": "<h1 id=\"1-set接口\"><a class=\"markdownIt-Anchor\" href=\"#1-set接口\">#</a> 1、Set 接口</h1>\n<p><code>java.util.Set</code>  接口和  <code>java.util.List</code>  接口一样，同样<strong>继承自 Collection 接口</strong>，它与 Collection 接口中的方法基本一致，并没有对 Collection 接口进行功能上的扩充，只是比 Collection 接口更加严格了。与 List 接口不同的是， Set 接口中<font color=red><strong>元素无序</strong></font>，并且都会以某种规则保证存入的<font color=red><strong>元素不出现重复</strong></font>。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200909152554478.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>1. 继承于 Collection 接口，具有<strong>增删查改</strong>的方法！<br>\n2.AbstractCollection 抽象类，实现了 Collection 接口，并实现了里面的一些方法，如 isEmpty、contains 等。<br>\n3.Set 的两个实现类， <code>HashSet</code>  和 <code>TreeSet</code></p>\n<ul>\n<li>HashSet 实现本质其实就是 HashMap，HashSet 里面的元素是无序的。</li>\n<li>TreeSet 实现本质其实就是 TreeSet,TreeSet 里面的元素是有序的。</li>\n</ul>\n<p>（Set 集合遍历元素的方式可以采用：<strong>迭代器，foreach</strong>）</p>\n<h1 id=\"2-hashset集合\"><a class=\"markdownIt-Anchor\" href=\"#2-hashset集合\">#</a> 2、HashSet 集合</h1>\n<h2 id=\"21hashset介绍\"><a class=\"markdownIt-Anchor\" href=\"#21hashset介绍\">#</a> 2.1HashSet 介绍</h2>\n<p><code>java.util.HashSet</code>  是 Set 接口的一个实现类，它所存储的<font color=red><strong>元素是不可重复的</strong></font>，并且<font color=red><strong>元素都是无序</strong></font>的 (即存取顺序 不一致)。  <code>java.util.HashSet</code>  <strong>底层</strong>的实现其实是一个  <code>java.util.HashMap</code>  支持.<br>\n <code>HashSet</code>  是根据<strong>对象的哈希值</strong>来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。<strong>保证元素唯一性 的方式依赖于</strong>：  <code>hashCode</code>  与  <code>equals</code>  方法。<br>\n<strong>HashSet 的继承关系</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类 HashSet&lt;E&gt;</span><br><span class=\"line\">java.lang.Object</span><br><span class=\"line\">  继承者 java.util.AbstractCollection&lt;E&gt;</span><br><span class=\"line\">      继承者 java.util.AbstractSet&lt;E&gt;</span><br><span class=\"line\">          继承者 java.util.HashSet&lt;E&gt;</span><br><span class=\"line\">类型参数：</span><br><span class=\"line\">E - 此 set 所维护的元素的类型</span><br><span class=\"line\">所有已实现的接口：</span><br><span class=\"line\">Serializable, Cloneable, Iterable&lt;E&gt;, Collection&lt;E&gt;, Set&lt;E&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>构造方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashSet() </span><br><span class=\"line\">构造一个新的空 set，其底层 HashMap 实例的默认初始容量是 <span class=\"number\">16</span>，加载因子是 <span class=\"number\">0.75</span>。</span><br><span class=\"line\">HashSet(Collection&lt;? extends E&gt; c) </span><br><span class=\"line\">构造一个包含指定 collection 中的元素的新 set。</span><br><span class=\"line\">HashSet(<span class=\"keyword\">int</span> initialCapacity) </span><br><span class=\"line\">构造一个新的空 set，其底层 HashMap 实例具有指定的初始容量和默认的加载因子（<span class=\"number\">0.75</span>）。</span><br><span class=\"line\">HashSet(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor) </span><br><span class=\"line\">构造一个新的空 set，其底层 HashMap 实例具有指定的初始容量和指定的加载因子。</span><br></pre></td></tr></table></figure>\n<p><strong>常用方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>  <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span></span><br><span class=\"line\"><span class=\"function\">          如果此 set 中尚未包含指定元素，则添加指定元素。</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">void</span>   <span class=\"title\">clear</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">          从此 set 中移除所有元素。</span></span><br><span class=\"line\"><span class=\"function\"> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">          返回此 HashSet 实例的浅表副本：并没有复制这些元素本身。</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">boolean</span>    <span class=\"title\">contains</span><span class=\"params\">(Object o)</span> </span></span><br><span class=\"line\"><span class=\"function\">          如果此 set 包含指定元素，则返回 <span class=\"keyword\">true</span>。</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">boolean</span>    <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">          如果此 set 不包含任何元素，则返回 <span class=\"keyword\">true</span>。</span></span><br><span class=\"line\"><span class=\"function\"> Iterator&lt;E&gt;    <span class=\"title\">iterator</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">          返回对此 set 中元素进行迭代的迭代器。</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">boolean</span>    <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span></span><br><span class=\"line\"><span class=\"function\">          如果指定元素存在于此 set 中，则将其移除。</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">int</span>   <span class=\"title\">size</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">          返回此 set 中的元素的数量（set 的容量）。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"22hashset集合存储数据的结构哈希表\"><a class=\"markdownIt-Anchor\" href=\"#22hashset集合存储数据的结构哈希表\">#</a> 2.2HashSet 集合存储数据的结构（哈希表）</h2>\n<p><strong>关于数据结构哈希表详解：</strong> <a href=\"https://blog.csdn.net/weixin_44279178/article/details/108469778\">哈希表详解</a><br>\n这里简单介绍一下：<br>\n在 JDK1.8 之前，哈希表底层采用<strong>数组 + 链表</strong>实现，即<strong>使用链表处理冲突</strong>，同一 hash 值的链表都存储在一个链表里。 但是当位于一个桶中的元素较多，即 hash 值相等的元素较多时，通过 key 值依次查找的效率较低。而 JDK1.8 中，哈希表存储采用<strong>数组 + 链表 + 红黑树</strong>实现，当链表长度 ** 超过阈值（8）** 时，<strong>将链表转换为红黑树</strong>，这样大大减少了查找 时间。 简单的来说，哈希表是由数组 + 链表 + 红黑树（JDK1.8 增加了红黑树部分）实现的，如下图所示。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020090915481578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong> HashSet 存储原理：</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200909155041686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n JDK1.8 引入红黑树大程度优化了 HashMap 的性能，那么对于我们来讲保证 HashSet 集合元素的唯一， 其实就是根据对象的 hashCode 和 equals 方法来决定的。如果我们往集合中存放自定义的对象，那么 <strong>保证其唯一， 就必须复写</strong>  <code>hashCode</code>  和 <code>equals</code>  <strong>方法建立属于当前对象的比较方式</strong></p>\n<h2 id=\"23hashset集合特点\"><a class=\"markdownIt-Anchor\" href=\"#23hashset集合特点\">#</a> 2.3HashSet 集合特点</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span> </span>&#123;</span><br><span class=\"line\">\t\tHashSet&lt;Integer&gt; hs = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">\t\ths.add(<span class=\"number\">17</span>);</span><br><span class=\"line\">\t\ths.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\ths.add(<span class=\"number\">78</span>);</span><br><span class=\"line\">\t\ths.add(<span class=\"number\">24</span>);</span><br><span class=\"line\">\t\ths.add(<span class=\"number\">13</span>);</span><br><span class=\"line\">\t\tSystem.out.println(hs.add(<span class=\"number\">4</span>));</span><br><span class=\"line\">\t\tSystem.out.println(hs.add(<span class=\"number\">4</span>));  <span class=\"comment\">//检验HashSet是否允许重复元素加入</span></span><br><span class=\"line\">\t\tSystem.out.println(hs);    <span class=\"comment\">//检验HashSet是否有序\t</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\">[<span class=\"number\">17</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">24</span>, <span class=\"number\">13</span>, <span class=\"number\">78</span>]</span><br></pre></td></tr></table></figure>\n<p>第二个输出 false 说明<strong>不允许元素重复</strong>，[17, 3, 4, 24, 13, 78] 说明<strong>存储的元素无序</strong></p>\n<h2 id=\"24-hashset存储自定义类型元素\"><a class=\"markdownIt-Anchor\" href=\"#24-hashset存储自定义类型元素\">#</a> 2.4 HashSet 存储自定义类型元素</h2>\n<p>给 HashSet 中存放自定义类型元素时，需要重写对象中的 hashCode 和 equals 方法，建立自己的比较方式，才能保 证 HashSet 集合中的对象唯一</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> id)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Student [name=&quot;</span> + name + <span class=\"string\">&quot;, id=&quot;</span> + id + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"comment\">//重写hashCode方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> prime = <span class=\"number\">31</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tresult = prime * result + id;</span><br><span class=\"line\">\t\tresult = prime * result + ((name == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : name.hashCode());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"comment\">//重写equals方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == obj)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (getClass() != obj.getClass())</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\tStudent other = (Student) obj;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (id != other.id)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (name == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (other.name != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!name.equals(other.name))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span> </span>&#123;</span><br><span class=\"line\">\t\tHashSet&lt;Student&gt; hs = <span class=\"keyword\">new</span> HashSet&lt;&gt;();\t</span><br><span class=\"line\">\t\ths.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">\t\ths.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\">\t\ths.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\">\t\ths.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">1</span>));<span class=\"comment\">//因为重写了equals方法和hashCode方法所以实际上集合中只有一个张三1</span></span><br><span class=\"line\">\t\tSystem.out.println(hs.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;谢六&quot;</span>,<span class=\"number\">4</span>)));\t</span><br><span class=\"line\">\t\tSystem.out.println(hs.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;谢六&quot;</span>,<span class=\"number\">4</span>)));</span><br><span class=\"line\">\t\t<span class=\"comment\">//第一种打印方式，利用重写的toString（）方法和Println（）直接打印</span></span><br><span class=\"line\">\t\tSystem.out.println(hs); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------&quot;</span>);</span><br><span class=\"line\">\t\t <span class=\"comment\">//第二种打印方式，foreach增强for循环</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Student s : hs) &#123;  </span><br><span class=\"line\">\t\t\tSystem.out.println(s);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;------------&quot;</span>);   </span><br><span class=\"line\">\t\t<span class=\"comment\">//第三种打印方式，利用Iteator迭代器</span></span><br><span class=\"line\">\t\tIterator&lt;Student&gt; it = hs.iterator();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(it.hasNext()) &#123;</span><br><span class=\"line\">\t\t\t\tStudent s = it.next();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(s);</span><br><span class=\"line\">\t\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\">[Student [name=李四, id=<span class=\"number\">2</span>], Student [name=张三, id=<span class=\"number\">1</span>], Student [name=王五, id=<span class=\"number\">3</span>], Student [name=谢六, id=<span class=\"number\">4</span>]]</span><br><span class=\"line\">------------</span><br><span class=\"line\">Student [name=李四, id=<span class=\"number\">2</span>]</span><br><span class=\"line\">Student [name=张三, id=<span class=\"number\">1</span>]</span><br><span class=\"line\">Student [name=王五, id=<span class=\"number\">3</span>]</span><br><span class=\"line\">Student [name=谢六, id=<span class=\"number\">4</span>]</span><br><span class=\"line\">------------</span><br><span class=\"line\">Student [name=李四, id=<span class=\"number\">2</span>]</span><br><span class=\"line\">Student [name=张三, id=<span class=\"number\">1</span>]</span><br><span class=\"line\">Student [name=王五, id=<span class=\"number\">3</span>]</span><br><span class=\"line\">Student [name=谢六, id=<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"25hashset的子类linkedhashset\"><a class=\"markdownIt-Anchor\" href=\"#25hashset的子类linkedhashset\">#</a> 2.5HashSet 的子类 LinkedHashSet</h2>\n<p>我们知道 HashSet 保证元素唯一，可是元素存放进去是没有顺序的，那么我们要<strong>保证有序</strong>，怎么办呢？ 在 HashSet 下面有一个子类  <code>java.util.LinkedHashSet</code>  ，它是链表和哈希表组合的一个数据存储结构。<br>\n特点：<strong>存取有序，唯一，效率高</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200909162955387.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedHashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\tSet&lt;String&gt; set = <span class=\"keyword\">new</span> LinkedHashSet&lt;String&gt;(); </span><br><span class=\"line\">\t\tset.add(<span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">\t\tset.add(<span class=\"string\">&quot;aaa&quot;</span>); </span><br><span class=\"line\">\t\tset.add(<span class=\"string\">&quot;Love&quot;</span>);</span><br><span class=\"line\">\t\tset.add(<span class=\"string\">&quot;abc&quot;</span>); </span><br><span class=\"line\">\t\tset.add(<span class=\"string\">&quot;bbc&quot;</span>); </span><br><span class=\"line\">\t\tIterator&lt;String&gt; it = set.iterator(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (it.hasNext())</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(it.next()); </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bbb</span><br><span class=\"line\">aaa</span><br><span class=\"line\">Love</span><br><span class=\"line\">abc</span><br><span class=\"line\">bbc</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-treeset集合\"><a class=\"markdownIt-Anchor\" href=\"#3-treeset集合\">#</a> 3、TreeSet 集合</h1>\n<h2 id=\"31treeset介绍\"><a class=\"markdownIt-Anchor\" href=\"#31treeset介绍\">#</a> 3.1TreeSet 介绍</h2>\n<p>基于 TreeMap 的 NavigableSet 实现。使用<strong>元素的自然顺序对元素进行排序</strong>，或者根据创建 set 时提供的 Comparator 进行排序，具体取决于使用的构造方法。<br>\n在存储了大量的需要进行快速检索的排序信息的情况下，TreeSet 是一个不错的选择<br>\n<strong> TreeSet 继承关系</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类 TreeSet&lt;E&gt;</span><br><span class=\"line\">java.lang.Object</span><br><span class=\"line\">  继承者 java.util.AbstractCollection&lt;E&gt;</span><br><span class=\"line\">      继承者 java.util.AbstractSet&lt;E&gt;</span><br><span class=\"line\">          继承者 java.util.TreeSet&lt;E&gt;</span><br><span class=\"line\">类型参数：</span><br><span class=\"line\">E - 此 set 维护的元素的类型</span><br><span class=\"line\">所有已实现的接口：</span><br><span class=\"line\">Serializable, Cloneable, Iterable&lt;E&gt;, Collection&lt;E&gt;, NavigableSet&lt;E&gt;, Set&lt;E&gt;, SortedSet&lt;E&gt;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200909163924833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">继承于AbstractSet,AbstractSet实现了equals和hashcode方法。</span><br><span class=\"line\">实现了NavigableSet接口，意味着它支持一系列的导航方法。比如查找与指定目标最匹配项。</span><br><span class=\"line\">实现了Cloneable接口，意味着它能被克隆。</span><br><span class=\"line\">实现了java.io.Serializable接口，意味着它支持序列化。</span><br></pre></td></tr></table></figure>\n<p><strong>构造方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TreeSet() </span><br><span class=\"line\">          构造一个新的空 set，该 set 根据其元素的自然顺序进行排序。</span><br><span class=\"line\">TreeSet(Collection&lt;? extends E&gt; c) </span><br><span class=\"line\">          构造一个包含指定 collection 元素的新 TreeSet，它按照其元素的自然顺序进行排序。</span><br><span class=\"line\">TreeSet(Comparator&lt;? <span class=\"keyword\">super</span> E&gt; comparator) </span><br><span class=\"line\">          构造一个新的空 TreeSet，它根据指定比较器进行排序。</span><br><span class=\"line\">TreeSet(SortedSet&lt;E&gt; s) </span><br><span class=\"line\">          构造一个与指定有序 set 具有相同映射关系和相同排序的新 TreeSet</span><br></pre></td></tr></table></figure>\n<p><strong>常用方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>    <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span></span><br><span class=\"line\"><span class=\"function\">         将指定的元素添加到此 set（如果该元素尚未存在于 set 中）。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>    <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span></span><br><span class=\"line\"><span class=\"function\">         将指定 collection 中的所有元素添加到此 set 中。</span></span><br><span class=\"line\"><span class=\"function\">E  <span class=\"title\">ceiling</span><span class=\"params\">(E e)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 中大于等于给定元素的最小元素；如果不存在这样的元素，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>   <span class=\"title\">clear</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         移除此 set 中的所有元素。</span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回 TreeSet 实例的浅表副本。</span></span><br><span class=\"line\"><span class=\"function\">Comparator&lt;? <span class=\"keyword\">super</span> E&gt;  <span class=\"title\">comparator</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回对此 set 中的元素进行排序的比较器；如果此 set 使用其元素的自然顺序，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>    <span class=\"title\">contains</span><span class=\"params\">(Object o)</span> </span></span><br><span class=\"line\"><span class=\"function\">         如果此 set 包含指定的元素，则返回 <span class=\"keyword\">true</span>。</span></span><br><span class=\"line\"><span class=\"function\">Iterator&lt;E&gt;    <span class=\"title\">descendingIterator</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回在此 set 元素上按降序进行迭代的迭代器。</span></span><br><span class=\"line\"><span class=\"function\">NavigableSet&lt;E&gt;    <span class=\"title\">descendingSet</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 中所包含元素的逆序视图。</span></span><br><span class=\"line\"><span class=\"function\">E  <span class=\"title\">first</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 中当前第一个（最低）元素。</span></span><br><span class=\"line\"><span class=\"function\">E  <span class=\"title\">floor</span><span class=\"params\">(E e)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 中小于等于给定元素的最大元素；如果不存在这样的元素，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">SortedSet&lt;E&gt;   <span class=\"title\">headSet</span><span class=\"params\">(E toElement)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 的部分视图，其元素严格小于 toElement。</span></span><br><span class=\"line\"><span class=\"function\">NavigableSet&lt;E&gt;    <span class=\"title\">headSet</span><span class=\"params\">(E toElement, <span class=\"keyword\">boolean</span> inclusive)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 的部分视图，其元素小于（或等于，如果 inclusive 为 <span class=\"keyword\">true</span>）toElement。</span></span><br><span class=\"line\"><span class=\"function\">E  <span class=\"title\">higher</span><span class=\"params\">(E e)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 中严格大于给定元素的最小元素；如果不存在这样的元素，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>    <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         如果此 set 不包含任何元素，则返回 <span class=\"keyword\">true</span>。</span></span><br><span class=\"line\"><span class=\"function\">Iterator&lt;E&gt;    <span class=\"title\">iterator</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回在此 set 中的元素上按升序进行迭代的迭代器。</span></span><br><span class=\"line\"><span class=\"function\">E  <span class=\"title\">last</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 中当前最后一个（最高）元素。</span></span><br><span class=\"line\"><span class=\"function\">E  <span class=\"title\">lower</span><span class=\"params\">(E e)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 中严格小于给定元素的最大元素；如果不存在这样的元素，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">E  <span class=\"title\">pollFirst</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         获取并移除第一个（最低）元素；如果此 set 为空，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\">E  <span class=\"title\">pollLast</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         获取并移除最后一个（最高）元素；如果此 set 为空，则返回 <span class=\"keyword\">null</span>。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>    <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span></span><br><span class=\"line\"><span class=\"function\">         将指定的元素从 set 中移除（如果该元素存在于此 set 中）。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>    <span class=\"title\">size</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回 set 中的元素数（set 的容量）。</span></span><br><span class=\"line\"><span class=\"function\">NavigableSet&lt;E&gt;    <span class=\"title\">subSet</span><span class=\"params\">(E fromElement, <span class=\"keyword\">boolean</span> fromInclusive, E toElement, <span class=\"keyword\">boolean</span> toInclusive)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 的部分视图，其元素范围从 fromElement 到 toElement。</span></span><br><span class=\"line\"><span class=\"function\">SortedSet&lt;E&gt;   <span class=\"title\">subSet</span><span class=\"params\">(E fromElement, E toElement)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 的部分视图，其元素从 fromElement（包括）到 toElement（不包括）。</span></span><br><span class=\"line\"><span class=\"function\">SortedSet&lt;E&gt;   <span class=\"title\">tailSet</span><span class=\"params\">(E fromElement)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 的部分视图，其元素大于等于 fromElement。</span></span><br><span class=\"line\"><span class=\"function\">NavigableSet&lt;E&gt;    <span class=\"title\">tailSet</span><span class=\"params\">(E fromElement, <span class=\"keyword\">boolean</span> inclusive)</span> </span></span><br><span class=\"line\"><span class=\"function\">         返回此 set 的部分视图，其元素大于（或等于，如果 inclusive 为 <span class=\"keyword\">true</span>）fromElement。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"32treeset特点\"><a class=\"markdownIt-Anchor\" href=\"#32treeset特点\">#</a> 3.2TreeSet 特点</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;Integer&gt; st = <span class=\"keyword\">new</span> TreeSet&lt;&gt;();</span><br><span class=\"line\">\t\tst.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"number\">4</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tSystem.out.println(st.add(<span class=\"number\">2</span>)); <span class=\"comment\">//验证是否可以添加重复元素</span></span><br><span class=\"line\">\t\tSystem.out.println(st);\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>false 说明 TreeSet 集合不允许重复</li>\n<li>[1, 2, 4, 5] 说明，TreeSet 对 Integer 数据类型进行升序排列</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeSet;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;String&gt; st = <span class=\"keyword\">new</span> TreeSet&lt;&gt;();</span><br><span class=\"line\">\t\tst.add(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"string\">&quot;谢六&quot;</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">\t\tst.add(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(st.add(<span class=\"string\">&quot;王五&quot;</span>));</span><br><span class=\"line\">\t\tSystem.out.println(st);\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\">[a, b, c, d, 张三, 李四, 王五, 谢六]</span><br></pre></td></tr></table></figure>\n<p>Java 在 String 和 Integer 类里<strong>重写了 comparaTo 方法</strong>，因此 TreeSet 可以对其进行升序排列。当我们对自定义的 TreeSet 进行排序时，就需要自己<strong>重写比较方法</strong>。如果说<strong>没有重写任何比较器（内部或者外部）时，使用 TreeSet 进行操作会报错</strong>。</p>\n<h2 id=\"33treeset与比较器\"><a class=\"markdownIt-Anchor\" href=\"#33treeset与比较器\">#</a> 3.3TreeSet 与比较器</h2>\n<p><strong>TreeSet 与内部比较器</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeSet;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span></span>&#123;\t</span><br><span class=\"line\">\t String name;</span><br><span class=\"line\">\t <span class=\"keyword\">int</span> age; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"comment\">//内部重写比较器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Object o)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStudent stu =((Student)o);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age-stu.age;  <span class=\"comment\">//按照年龄升序排序</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Student [name=&quot;</span> + name + <span class=\"string\">&quot;, age=&quot;</span> + age + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;Student&gt; st = <span class=\"keyword\">new</span> TreeSet&lt;&gt;();</span><br><span class=\"line\">\t\tst.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>));</span><br><span class=\"line\">\t\tst.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">19</span>));</span><br><span class=\"line\">\t\tst.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">20</span>));</span><br><span class=\"line\">\t\tst.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;谢六&quot;</span>,<span class=\"number\">10</span>));</span><br><span class=\"line\">\t\tIterator&lt;Student&gt; it = st.iterator(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (it.hasNext())</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(it.next()); </span><br><span class=\"line\">\t\t&#125; \t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student [name=谢六, age=<span class=\"number\">10</span>]</span><br><span class=\"line\">Student [name=张三, age=<span class=\"number\">18</span>]</span><br><span class=\"line\">Student [name=李四, age=<span class=\"number\">19</span>]</span><br><span class=\"line\">Student [name=王五, age=<span class=\"number\">20</span>]</span><br></pre></td></tr></table></figure>\n<p><strong>TreeSet 与外部比较器</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeSet;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;\t</span><br><span class=\"line\">\t String name;</span><br><span class=\"line\">\t <span class=\"keyword\">int</span> age; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Student [name=&quot;</span> + name + <span class=\"string\">&quot;, age=&quot;</span> + age + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//外部比较器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OutsideCompare</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Object o1, Object o2)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tStudent st1 = ((Student) o1);</span><br><span class=\"line\">\t\tStudent st2 = ((Student) o2);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> st1.age-st2.age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tOutsideCompare com = <span class=\"keyword\">new</span> OutsideCompare();</span><br><span class=\"line\">\t\tSet&lt;Student&gt; st = <span class=\"keyword\">new</span> TreeSet&lt;&gt;(com);<span class=\"comment\">//根据指定的比较器定义的构造方法</span></span><br><span class=\"line\">\t\tst.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>));</span><br><span class=\"line\">\t\tst.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">19</span>));</span><br><span class=\"line\">\t\tst.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">20</span>));</span><br><span class=\"line\">\t\tst.add(<span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;谢六&quot;</span>,<span class=\"number\">10</span>));</span><br><span class=\"line\">\t\tIterator&lt;Student&gt; it = st.iterator(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (it.hasNext())</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(it.next()); </span><br><span class=\"line\">\t\t&#125; \t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Set集合",
                "HashSet",
                "TreeSet",
                "LinkedHashSet"
            ]
        }
    ]
}