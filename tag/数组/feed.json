{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog • All posts by \"数组\" tag",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/2020/08/30/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%95%B0%E7%BB%84Array%E5%92%8C%E6%95%B0%E7%BB%84%E5%B7%A5%E5%85%B7%E7%B1%BBArrays/",
            "url": "http://yoursite.com/2020/08/30/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%95%B0%E7%BB%84Array%E5%92%8C%E6%95%B0%E7%BB%84%E5%B7%A5%E5%85%B7%E7%B1%BBArrays/",
            "title": "Java学习-详谈数组Array和数组工具类Arrays",
            "date_published": "2020-08-30T09:27:06.176Z",
            "content_html": "<h1 id=\"1-数组的定义和访问\"><a class=\"markdownIt-Anchor\" href=\"#1-数组的定义和访问\">#</a> 1、数组的定义和访问</h1>\n<h2 id=\"11容器概述\"><a class=\"markdownIt-Anchor\" href=\"#11容器概述\">#</a> 1.1 容器概述</h2>\n<p><strong>案例分析：</strong> 现在需要统计某公司员工的工资情况，例如计算平均工资、找到最高工资等。假设该公司有 50 名员工，用前面所学 的知识，程序首先需要声明 50 个变量来分别记住每位员工的工资，然后在进行操作，这样做会显得很麻烦，而且错 误率也会很高。因此我们可以使用容器进行操作。将所有的数据全部存储到一个容器中，统一操作。</p>\n<p><strong>容器的概念：</strong> 容器是将多个数据存储到一起，每个数据称为该容器的元素。</p>\n<h2 id=\"12数组的概念\"><a class=\"markdownIt-Anchor\" href=\"#12数组的概念\">#</a> 1.2 数组的概念</h2>\n<p><strong>数组概念：</strong>  数组就是存储数据长度固定的容器，保证多个数据的数据类型要一致。<br>\n（<font color=red>其实所谓的数组指的就是一组相关类型的变量集合，并且这些变量可以按照统一的方式进行操作。数组本身属于<strong>引用数据类型</strong></font>）</p>\n<h2 id=\"13数组的定义\"><a class=\"markdownIt-Anchor\" href=\"#13数组的定义\">#</a> 1.3 数组的定义</h2>\n<p><strong>方式一：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组存储的数据类型[] 数组名字 = <span class=\"keyword\">new</span> 数组存储的数据类型[长度];</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数组存储的数据类型： 创建的数组容器可以存储的数据类型。</li>\n<li>[] : 表示数组。</li>\n<li>数组名字：为定义的数组起个变量名，满足标识符规范，可以使用名字操作数组。</li>\n<li>new：关键字，创建数组使用的关键字。</li>\n<li>[长度]：数组的长度，表示数组容器中可以存储多少个元素。</li>\n</ul>\n<p><strong>注意：</strong> <font color=red>数组有定长特性，长度一旦指定，不可再更改</font><br>\n<strong>方式二：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型[] 数组名 = <span class=\"keyword\">new</span> 数据类型[]&#123;元素<span class=\"number\">1</span>,元素<span class=\"number\">2</span>,元素<span class=\"number\">3.</span>..&#125;;</span><br><span class=\"line\">例如：定义存储<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">4</span>，<span class=\"number\">5</span>整数的数组容器。</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>方式三：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型[] 数组名 = &#123;元素<span class=\"number\">1</span>,元素<span class=\"number\">2</span>,元素<span class=\"number\">3.</span>..&#125;;</span><br><span class=\"line\">例如：定义存储<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">4</span>，<span class=\"number\">5</span>整数的数组容器。</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"14数组的访问\"><a class=\"markdownIt-Anchor\" href=\"#14数组的访问\">#</a> 1.4 数组的访问</h2>\n<ul>\n<li><strong>索引</strong>： 每一个存储到数组的元素，都会自动的拥有一个编号，从 0 开始，这个自动编号称为数组索引 (index)，可以通过数组的索引访问到数组中的元素。</li>\n<li><strong>格式</strong>： <code>数组名[索引]</code></li>\n<li><strong>数组的长度属性</strong>： 每个数组都具有长度，而且是固定的，Java 中赋予了数组的一个属性，可以获取到数组的 长度，语句为： 数组名.length ，属性 length 的执行结果是数组的长度，int 类型结果。由次可以推断出，数 组的最大索引值为 数组名.length-1 。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;; </span><br><span class=\"line\">\t<span class=\"comment\">//打印数组的属性，输出结果是5 </span></span><br><span class=\"line\">\tSystem.out.println(arr.length); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>索引访问数组中的元素</strong>：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//定义存储int类型数组，赋值元素1，2，3，4，5 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;; </span><br><span class=\"line\">\t<span class=\"comment\">//为0索引元素赋值为6 </span></span><br><span class=\"line\">\tarr[<span class=\"number\">0</span>] = <span class=\"number\">6</span>; </span><br><span class=\"line\">\t<span class=\"comment\">//获取数组0索引上的元素 int i = arr[0]; </span></span><br><span class=\"line\">\tSystem.out.println(i); </span><br><span class=\"line\">\t<span class=\"comment\">//直接输出数组0索引元素 </span></span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">0</span>]); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-数组原理内存\"><a class=\"markdownIt-Anchor\" href=\"#2-数组原理内存\">#</a> 2、数组原理内存</h1>\n<h2 id=\"21-内存概述\"><a class=\"markdownIt-Anchor\" href=\"#21-内存概述\">#</a> 2.1 内存概述</h2>\n<p>内存是计算机中的重要原件，<strong>临时存储区域，作用是运行程序</strong>。我们<strong>编写的程序是存放在硬盘中的，在硬盘中的程 序是不会运行的，必须放进内存中才能运行</strong>，运行完毕后会清空内存。 Java 虚拟机要运行程序，必须要对内存进行空间的分配和管理。</p>\n<h2 id=\"22java虚拟机的内存划分\"><a class=\"markdownIt-Anchor\" href=\"#22java虚拟机的内存划分\">#</a> 2.2Java 虚拟机的内存划分</h2>\n<p>为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。<br>\n<strong>JVM 的内存划分：</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830154211197.jpg#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"23-数组在内存中的存储\"><a class=\"markdownIt-Anchor\" href=\"#23-数组在内存中的存储\">#</a> 2.3 数组在内存中的存储</h2>\n<p><strong>一个数组内存图</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>]; </span><br><span class=\"line\">\tSystem.out.println(arr);<span class=\"comment\">//[I@5f150435 </span></span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">0</span>]);<span class=\"comment\">//输出0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>new 出来的内容，都是在堆 内存中存储的，而方法中的变量 arr 保存的是数组的地址。</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830154856824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830154926542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>两个数组内存图</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830155051592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>两个变量指向一个数组</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830155152992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"3-数组常见操作\"><a class=\"markdownIt-Anchor\" href=\"#3-数组常见操作\">#</a> 3、数组常见操作</h1>\n<h2 id=\"31-数组越界异常\"><a class=\"markdownIt-Anchor\" href=\"#31-数组越界异常\">#</a> 3.1 数组越界异常</h2>\n<p>观察下列代码运行后的结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;; </span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">3</span>]); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830155454606.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n分析：创建数组，赋值 3 个元素，数组的索引就是 0，1，2，没有 3 索引，因此我们不能访问数组中不存在的索引，程序运 行后，将会抛出  <code>ArrayIndexOutOfBoundsException</code>  数组越界异常。在开发中，数组的越界异常是<strong>不能出现的</strong>，一 旦出现了，就必须要修改我们编写的代码。</p>\n<h2 id=\"32-数组空指针异常\"><a class=\"markdownIt-Anchor\" href=\"#32-数组空指针异常\">#</a> 3.2 数组空指针异常</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;; </span><br><span class=\"line\">\tarr = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">0</span>]); </span><br><span class=\"line\">\t｝</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830160809908.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>分析：</strong>  <code>arr = null</code>  这行代码，意味着<strong>变量 arr 将不会再保存数组的内存地址</strong>，也就不允许再操作数组了，因此运行的时候 会抛出  <code>NullPointerException</code>  空指针异常。在开发中，数组的越界异常是<strong>不能出现的</strong>，一旦出现了，就必须要修 改我们编写的代码。</p>\n<h2 id=\"33-数组遍历\"><a class=\"markdownIt-Anchor\" href=\"#33-数组遍历\">#</a> 3.3 数组遍历</h2>\n<p><strong>数组遍历：</strong>  就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">0</span>]); </span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">2</span>]); </span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">3</span>]); </span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">4</span>]); </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码是可以将数组中每个元素全部遍历出来，但是如果<strong>数组元素非常多</strong>，这种写法肯定不行，因此我们需要改 造成循环的写法。<strong>数组的索引是 0 到 lenght-1</strong> ，可以作为<strong>循环的条件</strong>出现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125;; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) </span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">\t\tSystem.out.println(arr[i]); </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"34-数组获取最大值元素\"><a class=\"markdownIt-Anchor\" href=\"#34-数组获取最大值元素\">#</a> 3.4 数组获取最大值元素</h2>\n<p><strong>最大值获取：</strong> 从数组的所有元素中找出最大值（最小值同理）。<br>\n<strong>实现思路：</strong></p>\n<ul>\n<li>定义变量，保存数组 0 索引上的元素</li>\n<li>遍历数组，获取出数组中的每个元素</li>\n<li>将遍历到的元素和保存数组 0 索引上值的变量进行比较</li>\n<li>如果数组元素的值大于了变量的值，变量记录住新的值</li>\n<li>数组循环遍历结束，变量保存的就是数组中的最大值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">5</span>, <span class=\"number\">15</span>, <span class=\"number\">2000</span>, <span class=\"number\">10000</span>, <span class=\"number\">100</span>, <span class=\"number\">4000</span> &#125;; </span><br><span class=\"line\">\t<span class=\"comment\">//定义变量，保存数组中0索引的元素 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> max = arr[<span class=\"number\">0</span>]; </span><br><span class=\"line\">\t<span class=\"comment\">//遍历数组，取出每个元素 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) </span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历到的元素和变量max比较 </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//如果数组元素大于max </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i] &gt; max) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//max记录住大值 </span></span><br><span class=\"line\">\t\t\tmax = arr[i]; </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;数组最大值是： &quot;</span> + max); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"35-数组反转\"><a class=\"markdownIt-Anchor\" href=\"#35-数组反转\">#</a> 3.5 数组反转</h2>\n<p><strong>数组的反转：</strong>  数组中的元素颠倒顺序，例如原始数组为 1,2,3,4,5，反转后的数组为 5,4,3,2,1（要求只能用一个数组实现）<br>\n思路：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830162049666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125;; </span><br><span class=\"line\">\t<span class=\"comment\">/*循环中定义变量min=0最小索引 max=arr.length‐1最大索引 min++,max‐‐ */</span> </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> min = <span class=\"number\">0</span>, max = arr.length ‐ <span class=\"number\">1</span>; min &lt;= max; min++, max‐‐) </span><br><span class=\"line\">\t&#123; <span class=\"comment\">//利用第三方变量完成数组中的元素交换 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> temp = arr[min]; arr[min] = arr[max]; </span><br><span class=\"line\">\t\tarr[max] = temp; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 反转后，遍历数组 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) </span><br><span class=\"line\">\t&#123; System.out.println(arr[i]); &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-数组作为方法参数和返回值\"><a class=\"markdownIt-Anchor\" href=\"#4-数组作为方法参数和返回值\">#</a> 4、数组作为方法参数和返回值</h1>\n<h2 id=\"41-数组作为方法参数\"><a class=\"markdownIt-Anchor\" href=\"#41-数组作为方法参数\">#</a> 4.1 数组作为方法参数</h2>\n<p>以前的方法中学习了方法的参数和返回值，但是使用的都是基本数据类型。那么作为引用类型的数组能否作为方法的参数进行传递呢，当然是可以的。 数组作为方法参数传递，<strong>传递的参数是数组内存的地址</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span> &#125;; </span><br><span class=\"line\">\t<span class=\"comment\">//调用方法，传递数组 </span></span><br><span class=\"line\">\tprintArray(arr); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/* 创建方法，方法接收数组类型的参数 进行数组的遍历 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(arr[i]); </span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830163500691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"42-数组作为方法返回值\"><a class=\"markdownIt-Anchor\" href=\"#42-数组作为方法返回值\">#</a> 4.2 数组作为方法返回值</h2>\n<p><strong>数组作为方法的返回值，返回的是数组的内存地址</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//调用方法，接收数组的返回值 </span></span><br><span class=\"line\">\t<span class=\"comment\">//接收到的是数组的内存地址 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = getArray(); </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) </span><br><span class=\"line\">\t&#123; System.out.println(arr[i]); &#125; </span><br><span class=\"line\">&#125;<span class=\"comment\">/*创建方法，返回值是数组类型 return返回数组的地址 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] getArray() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span> &#125;; <span class=\"comment\">//返回数组的地址，返回到调用者 </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830163756874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"43-方法的参数类型区别\"><a class=\"markdownIt-Anchor\" href=\"#43-方法的参数类型区别\">#</a> 4.3 方法的参数类型区别</h2>\n<p><strong>方法的参数为基本类型时，传递的是数据值。方法的参数为引用类型时，传递的是地址值.</strong><br>\n 方法的参数为基本类型时：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">2</span>; </span><br><span class=\"line\">\t\tSystem.out.println(a); </span><br><span class=\"line\">\t\tSystem.out.println(b); </span><br><span class=\"line\">\t\tchange(a, b); </span><br><span class=\"line\">\t\tSystem.out.println(a);</span><br><span class=\"line\">\t\tSystem.out.println(b); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\ta = a + b; </span><br><span class=\"line\">\t\tb = b + a; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>方法的参数为引用类型时：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>&#125;; </span><br><span class=\"line\">\t\tSystem.out.println(arr[<span class=\"number\">0</span>]); </span><br><span class=\"line\">\t\tchange(arr); </span><br><span class=\"line\">\t\tSystem.out.println(arr[<span class=\"number\">0</span>]); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\tarr[<span class=\"number\">0</span>] = <span class=\"number\">200</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"5-arrays类\"><a class=\"markdownIt-Anchor\" href=\"#5-arrays类\">#</a> 5、Arrays 类</h1>\n<h2 id=\"51概述\"><a class=\"markdownIt-Anchor\" href=\"#51概述\">#</a> 5.1 概述</h2>\n<p><code>java.util.Arrays</code>  此类<strong>包含用来操作数组的各种方法</strong>，比如<strong>排序</strong> 和<strong>搜索</strong> 等。其所有方法<strong>均为静态方法</strong>，调用起来 非常简单。</p>\n<h2 id=\"52-操作数组的方法\"><a class=\"markdownIt-Anchor\" href=\"#52-操作数组的方法\">#</a> 5.2 操作数组的方法</h2>\n<ul>\n<li><code>Arrays.toString()</code>  ：返回指定数组内容的字符串表示形式。、</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义int 数组 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">2</span>,<span class=\"number\">34</span>,<span class=\"number\">35</span>,<span class=\"number\">4</span>,<span class=\"number\">657</span>,<span class=\"number\">8</span>,<span class=\"number\">69</span>,<span class=\"number\">9</span>&#125;; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 打印数组,输出地址值</span></span><br><span class=\"line\">\t\tSystem.out.println(arr); <span class=\"comment\">// [I@2ac1fdc4 </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 数组内容转为字符串 </span></span><br><span class=\"line\">\t\tString s = Arrays.toString(arr); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 打印字符串,输出内容 </span></span><br><span class=\"line\">\t\tSystem.out.println(s); <span class=\"comment\">// [2, 34, 35, 4, 657, 8, 69, 9] &#125;</span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Arrays.sort(数组名)</code>  ：对指定的 int 型数组按数字升序进行排序。如果传入的是字符型数组按字符的 Acell 码排序（<strong>只能做升序排序，不能做降序排序。</strong>）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">// 定义int 数组 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">24</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">48</span>, <span class=\"number\">4</span>, <span class=\"number\">46</span>, <span class=\"number\">35</span>, <span class=\"number\">11</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>&#125;; </span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;排序前:&quot;</span>+ Arrays.toString(arr)); </span><br><span class=\"line\">\t<span class=\"comment\">// 排序前:[24, 7, 5, 48, 4, 46, 35, 11, 6, 2]</span></span><br><span class=\"line\">\t<span class=\"comment\">// 升序排序</span></span><br><span class=\"line\">\tArrays.sort(arr); System.out.println(<span class=\"string\">&quot;排序后:&quot;</span>+ Arrays.toString(arr));</span><br><span class=\"line\">\t<span class=\"comment\">// 排序后:[2, 4, 5, 6, 7, 11, 24, 35, 46, 48] </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Arrays.fill(数组名 ,开始位置 , 结束位置, 填入的值)</code> ：向数组中填充元素</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">        Arrays.fill(arr, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a:arr)</span><br><span class=\"line\">            System.out.print(a+<span class=\"string\">&quot; &quot;</span>);       </span><br><span class=\"line\">        System.out.println(); </span><br><span class=\"line\">        <span class=\"keyword\">int</span> array[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">6</span>];</span><br><span class=\"line\">            Arrays.fill(array, <span class=\"number\">100</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>, n=array.length; i &lt; n; i++) &#123;</span><br><span class=\"line\">                System.out.print(array[i]+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">50</span> <span class=\"number\">50</span> <span class=\"number\">50</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span> <span class=\"number\">10</span> </span><br><span class=\"line\"><span class=\"number\">100</span> <span class=\"number\">100</span> <span class=\"number\">100</span> <span class=\"number\">100</span> <span class=\"number\">100</span> <span class=\"number\">100</span> </span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Arrays.copy(原数组，原数组起始位置，新数组，新数组起始位置，复制长度)</code> ：数组的复制</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Arrayscopy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr1 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">6</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.arraycopy(arr, <span class=\"number\">0</span>, arr1, <span class=\"number\">1</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> str : arr1)&#123;</span><br><span class=\"line\">            System.out.print(str+“ ”);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Arrays.copyOf(数组名，扩容后长度)</code> ：数组扩容</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;         </span><br><span class=\"line\">       arr = Arrays.copyOf(arr,<span class=\"number\">8</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a:arr)</span><br><span class=\"line\">           System.out.print(a+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> </span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "java",
                "数组",
                "Arrays",
                "容器"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%20%E7%A8%80%E7%96%8Fsparsearray%E6%95%B0%E7%BB%84/",
            "url": "http://yoursite.com/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%20%E7%A8%80%E7%96%8Fsparsearray%E6%95%B0%E7%BB%84/",
            "title": "数据结构（Java实现）- 稀疏sparsearray数组",
            "date_published": "2020-08-24T13:07:09.607Z",
            "content_html": "<h1 id=\"1、先看一个实际的需求\"><a href=\"#1、先看一个实际的需求\" class=\"headerlink\" title=\"1、先看一个实际的需求\"></a>1、先看一个实际的需求</h1><p>  在编写的五子棋程序中，有存盘退出和续上盘的功能。<br>这时候就要求我们要使用二维数组来记录棋盘，如下图所示：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200809170541675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>在上图的二维数组中用1表示黑棋，用2表示蓝棋</p>\n<p><strong>分析问题：</strong> 我们可以发现该二维数组的很多值是默认值0，因此记录了很多没有意义的数据。这时候就需要用稀疏数组对这个二维数组进行压缩。</p>\n<h1 id=\"2、基本介绍\"><a href=\"#2、基本介绍\" class=\"headerlink\" title=\"2、基本介绍\"></a>2、基本介绍</h1><p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。<br><strong>稀疏数组的处理方法是:</strong></p>\n<ol>\n<li>记录数组一共有几行几列，有多少个不同的值 </li>\n<li>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模而得到的<strong>这个小规模的数组就是稀疏数组</strong></li>\n</ol>\n<p>举例如下：<br><strong>一个原始二维数组：</strong><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200809172309748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br><strong>转换为稀疏数组后：</strong><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200809172320881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br><strong>分析一下稀疏数组的数据特征：</strong><br>  首先这个稀疏数组是  ： 9x3 （9行3列）的二维数组 <strong>（稀疏数组都是3列，也就是l里面数据的列序号下标的最大值为3-1=2）</strong><br>第一行数据 6   7   8 ：表示原二维数组一共6行 、7列、8个不同数值<br>第二行数据 0   3   22：0和3分别表示，数值22在原二维数组中的行序号下标和列序号下标（表示在原二维数组的0+1行 3+1列）<br>（后面各行的数据特征和第二行的一样）<br>原始二维数组：6x7=42  <strong>转换</strong>    稀疏数组：9x3=27<br>可以看出稀疏数组起到了一个把原始二维数组规模变小的作用</p>\n<h1 id=\"3、实现\"><a href=\"#3、实现\" class=\"headerlink\" title=\"3、实现\"></a>3、实现</h1><h2 id=\"3-1二维数组转稀疏数组\"><a href=\"#3-1二维数组转稀疏数组\" class=\"headerlink\" title=\"3.1二维数组转稀疏数组\"></a>3.1二维数组转稀疏数组</h2><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200809180304145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br><strong>思路：</strong></p>\n<ol>\n<li>遍历原始二维数组，得到有效数据的个数sum </li>\n<li>根据sum就可以创建稀疏数组 sparseArr int[sum+1][3]</li>\n<li>将二维数组的有效数据存入到稀疏数组中</li>\n</ol>\n<h2 id=\"3-2稀疏数组转二维数组\"><a href=\"#3-2稀疏数组转二维数组\" class=\"headerlink\" title=\"3.2稀疏数组转二维数组\"></a>3.2稀疏数组转二维数组</h2><p><strong>思路：</strong><br>先读取稀疏数组的第一行，根据第一行的数据，创建原始二维数组，比如上面棋盘中的 chessArr = int[11][11]<br>然后读取稀疏数组的后几行的数据，并赋值给创建好的原始二维数组即可</p>\n<h1 id=\"4、代码实现：\"><a href=\"#4、代码实现：\" class=\"headerlink\" title=\"4、代码实现：\"></a>4、代码实现：</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zhukun.SparseArray;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.Desktop;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStreamWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SparseArray</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先创建一个二维数组 11*11</span></span><br><span class=\"line\">        <span class=\"comment\">//0:表示没有棋子，1表示黑子  2表示蓝子</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> chessArr1[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">11</span>][<span class=\"number\">11</span>];</span><br><span class=\"line\">        chessArr1[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        chessArr1[<span class=\"number\">2</span>][<span class=\"number\">3</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">//输出原始二维数组</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;输出原始二维数组&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>[] row: chessArr1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> data: row)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                System.out.print(data+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//原始二维数组转稀疏数组</span></span><br><span class=\"line\">        <span class=\"comment\">//1、先遍历原始二维数组，得到有效数据的个数sum</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>[] row:chessArr1) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> data:row) &#123;</span><br><span class=\"line\">                sum=data!=<span class=\"number\">0</span>?sum+<span class=\"number\">1</span>:sum;  <span class=\"comment\">//三元运算符判断 如果不为0则sum+1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;有效数据个数：&quot;</span>+sum);  <span class=\"comment\">//输出不为零的个数</span></span><br><span class=\"line\">        <span class=\"comment\">//2、根据sum就可以创建稀疏数组 sparseArr int[sum+1][3]</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> sparseArr[][]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[sum+<span class=\"number\">1</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">        sparseArr[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=chessArr1.length;   <span class=\"comment\">//原二维数组的行数</span></span><br><span class=\"line\">        sparseArr[<span class=\"number\">0</span>][<span class=\"number\">1</span>]=chessArr1[<span class=\"number\">0</span>].length;  <span class=\"comment\">//原二维数组的列数</span></span><br><span class=\"line\">        sparseArr[<span class=\"number\">0</span>][<span class=\"number\">2</span>]=sum;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//遍历二维数组，将不为0的数放入稀疏数组中</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> count=<span class=\"number\">0</span>;     <span class=\"comment\">//用于记录第几个非零数据    </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;chessArr1.length;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;chessArr1.length;j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(chessArr1[i][j]!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                    sparseArr[count][<span class=\"number\">0</span>]=i;</span><br><span class=\"line\">                    sparseArr[count][<span class=\"number\">1</span>]=j;</span><br><span class=\"line\">                    sparseArr[count][<span class=\"number\">2</span>]=chessArr1[i][j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//打印稀疏数组</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;稀疏数组为:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>[] row:sparseArr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> data:row) &#123;</span><br><span class=\"line\">                System.out.print(data+<span class=\"string\">&quot;   &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//稀疏数组还原成原二维数组</span></span><br><span class=\"line\">        <span class=\"comment\">//1、先根据稀疏数组第一行的数据，创建原始二维数组</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> chessArr2[][]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[sparseArr[<span class=\"number\">0</span>][<span class=\"number\">0</span>]][sparseArr[<span class=\"number\">0</span>][<span class=\"number\">1</span>]];</span><br><span class=\"line\">        <span class=\"comment\">//2、再读取稀疏数组的数据，将其赋值给二维数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;sparseArr.length;i++) &#123;</span><br><span class=\"line\">                chessArr2[sparseArr[i][<span class=\"number\">0</span>]][sparseArr[i][<span class=\"number\">1</span>]]=sparseArr[i][<span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//打印还原后的二维数组</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;还原后的二维数组为:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>[] row:chessArr2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> data:row) &#123;</span><br><span class=\"line\">                System.out.print(data+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//将稀疏数组保存到硬盘上</span></span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;C:\\\\Users\\\\zhukun\\\\Desktop\\\\app\\\\map.txt&quot;</span>);</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(file);</span><br><span class=\"line\">        OutputStreamWriter write = <span class=\"keyword\">new</span> OutputStreamWriter(fos, <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 输出稀疏数组的形式</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;得到的稀疏数组为&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sparseArr.length; i++) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;%d\\t%d\\t%d\\t\\n&quot;</span>, sparseArr[i][<span class=\"number\">0</span>], sparseArr[i][<span class=\"number\">1</span>], sparseArr[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == sparseArr.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                write.append(sparseArr[i][<span class=\"number\">0</span>] + <span class=\"string\">&quot;,&quot;</span> + sparseArr[i][<span class=\"number\">1</span>] + <span class=\"string\">&quot;,&quot;</span> + sparseArr[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                write.append(sparseArr[i][<span class=\"number\">0</span>] + <span class=\"string\">&quot;,&quot;</span> + sparseArr[i][<span class=\"number\">1</span>] + <span class=\"string\">&quot;,&quot;</span> + sparseArr[i][<span class=\"number\">2</span>] + <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;写入文件中...&quot;</span>);</span><br><span class=\"line\">        write.close();</span><br><span class=\"line\">        fos.close();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打开文件中...&quot;</span>);</span><br><span class=\"line\">        Desktop.getDesktop().open(file);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------------------------先读取_map.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 创建 FileReader 对象</span></span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">        InputStreamReader reader = <span class=\"keyword\">new</span> InputStreamReader(fis, <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (reader.ready())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sb.append((<span class=\"keyword\">char</span>) reader.read());<span class=\"comment\">// 转成char加到StringBuffer对象中</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sb.toString());</span><br><span class=\"line\">        reader.close();<span class=\"comment\">// 关闭读取流</span></span><br><span class=\"line\">        fis.close();<span class=\"comment\">// 关闭输入流,释放系统资源</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------------------------恢复成稀疏数组_sparseArrHf&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 1.创建对应的稀疏数组</span></span><br><span class=\"line\">        String[] str = sb.toString().split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sparseArrHf[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[str.length / <span class=\"number\">3</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 2.给稀疏数组赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s : str) &#123;</span><br><span class=\"line\">            sparseArrHf[i/<span class=\"number\">3</span>][i % <span class=\"number\">3</span>]=Integer.parseInt(s);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------------------------再恢复成二维数组_chessArr22&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 将稀疏数组 --&gt;恢复成 原始的二维数组</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 1. 读取稀疏数组的第一行,根据第一行的数据,创建原始的二维数组,比如上面的 chessArr2 = int[11][11];</span></span><br><span class=\"line\"><span class=\"comment\">         * </span></span><br><span class=\"line\"><span class=\"comment\">         * 2. 在读取稀疏数组后几行的数据,并赋给 原始的二维数组 即可.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 1. 读取稀疏数组的第一行,根据第一行的数据,创建原始的二维数组</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> chessArr22[][] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[sparseArrHf[<span class=\"number\">0</span>][<span class=\"number\">0</span>]][sparseArrHf[<span class=\"number\">0</span>][<span class=\"number\">1</span>]];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 在读取稀疏数组后几行的数据,并赋给 原始的二维数组 即可.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i3 = <span class=\"number\">1</span>; i3 &lt; sparseArrHf.length; i3++) &#123;</span><br><span class=\"line\">            chessArr22[sparseArrHf[i3][<span class=\"number\">0</span>]][sparseArrHf[i3][<span class=\"number\">1</span>]] = sparseArrHf[i3][<span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 输出恢复的二维数组</span></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] row : chessArr22) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> data : row) &#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">&quot;%d\\t&quot;</span>, data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;--------------------------------------------------------恢复完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "数据结构",
                "sparsearray",
                "数组",
                "稀疏数组"
            ]
        }
    ]
}