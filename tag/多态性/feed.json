{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog • All posts by \"多态性\" tag",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E6%80%81%E6%80%A7/",
            "url": "http://yoursite.com/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E6%80%81%E6%80%A7/",
            "title": "Java学习-多态性",
            "date_published": "2020-08-25T13:03:31.402Z",
            "content_html": "<h1 id=\"1-面向对象三特征之一多态性\"><a class=\"markdownIt-Anchor\" href=\"#1-面向对象三特征之一多态性\">#</a> 1、面向对象三特征之一：多态性</h1>\n<p>1、多态性，是面向对象的最重要的概念，在 java 中有两种体现:</p>\n<ol>\n<li>方法的重载（overload）和重写（override）</li>\n<li>对象的多态性 ------ 可以直接应用在抽象类和接口上</li>\n</ol>\n<p>2、Java 引用变量有两个类型：编译时的类型和运行时的类型：</p>\n<ul>\n<li>编译时类型由声明该变量时使用的类型决定。</li>\n<li>运行时类型由实际赋给该变量的对象决定。</li>\n</ul>\n<p>若编译时类型和运行时类型不一致，就出现多态（Polymorphism）------- 这个多态就是对象的多态</p>\n<p><strong>子类对象的实例化过程：</strong></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200812095406924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"2-对象的多态\"><a class=\"markdownIt-Anchor\" href=\"#2-对象的多态\">#</a> 2、对象的多态</h1>\n<h2 id=\"21在java中子类的对象可以替代父类的的对象使用\"><a class=\"markdownIt-Anchor\" href=\"#21在java中子类的对象可以替代父类的的对象使用\">#</a> 2.1 在 Java 中，子类的对象可以替代父类的的对象使用：</h2>\n<ul>\n<li>一个变量只能有一种确定的数据类型</li>\n<li>一个引用类型变量可能指向（引用）多种不同类型的对象</li>\n</ul>\n<p>Person  p = new Student();<br>\nPerson  e = new Student ();//Person 类型的变量 e，指向 Student 类型的对象<br>\n子类可看做是特殊的父类，所以<strong>父类类型的引用可以指向子类的对象：</strong> 向上转型（upcasting）（把子类的对象给父类类型的变量引用）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">p = <span class=\"keyword\">new</span> Student();</span><br></pre></td></tr></table></figure>\n<p>问：上面代码的当前这个引用对象 p 引用的是哪个类实例对象？答案是：Student 类实例对象<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200812103553841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"22成员变量属性的调用\"><a class=\"markdownIt-Anchor\" href=\"#22成员变量属性的调用\">#</a> 2.2 成员变量（属性）的调用：</h2>\n<p>一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就不能再访问子类中添加拓展的成员变量和方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student m = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">m.school = <span class=\"string\">&quot;csdn&quot;</span>;<span class=\"comment\">//合法，Student类中有school成员变量</span></span><br><span class=\"line\">Person e = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">e.school = <span class=\"string\">&quot;csdn&quot;</span>;<span class=\"comment\">//非法，Person类没有school成员变量</span></span><br></pre></td></tr></table></figure>\n<p><strong>成员变量是在编译时确定的，编译时 e 为 Person 类型，没有 school 成员变量，因而编译出错。</strong></p>\n<h2 id=\"23虚拟方法的调用子类中含有父类的重写方法\"><a class=\"markdownIt-Anchor\" href=\"#23虚拟方法的调用子类中含有父类的重写方法\">#</a> 2.3 虚拟方法的调用（子类中含有父类的重写方法）：</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showInfo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;以下是Person类的showInfo方法：&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setInfo</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String school;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showInfo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;以下是Student类的showInfo方法：&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>正常的方法调用：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">p.showInfo();</span><br><span class=\"line\">Student s = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">s.showInfo();</span><br></pre></td></tr></table></figure>\n<p><strong>虚拟方法调用（多态情况下）：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person e = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">e.showInfo(); <span class=\"comment\">//调用的是Student类的showInfo()方法</span></span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200812113006375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>动态绑定：</strong><br>\n方法的调用是在运行时确定的，编译时 e 为 Person 类型，但运行时 e 为 Student 类型，所以调用的是 Student 类的 showInfo () 方法</p>\n<h1 id=\"3-小结\"><a class=\"markdownIt-Anchor\" href=\"#3-小结\">#</a> 3、小结</h1>\n<p><strong>前提：</strong></p>\n<ul>\n<li>需要存在继承或者实现关系</li>\n<li>需要覆盖操作</li>\n</ul>\n<p><strong>成员方法：</strong></p>\n<ul>\n<li>编译时：要查看引用变量所属的类中是否有所调用的方法<br>\n运行时：调用实际对象所属的类中的重写方法</li>\n</ul>\n<p><strong>成员变量：</strong></p>\n<ul>\n<li>不具备多态性，只看引用变量所属的类</li>\n</ul>\n",
            "tags": [
                "java",
                "面向对象",
                "多态性"
            ]
        }
    ]
}