{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog • All posts by \"collection\" tag",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "https://jQueryZK.github.io",
    "items": [
        {
            "id": "https://jqueryzk.github.io/2020/09/03/Java%E5%AD%A6%E4%B9%A0-Collection%E9%9B%86%E5%90%88%E5%92%8CIterator%E8%BF%AD%E4%BB%A3%E5%99%A8/",
            "url": "https://jqueryzk.github.io/2020/09/03/Java%E5%AD%A6%E4%B9%A0-Collection%E9%9B%86%E5%90%88%E5%92%8CIterator%E8%BF%AD%E4%BB%A3%E5%99%A8/",
            "title": "Java学习-Collection集合和Iterator迭代器",
            "date_published": "2020-09-03T05:14:58.267Z",
            "content_html": "<h1 id=\"1-collection集合\"><a class=\"markdownIt-Anchor\" href=\"#1-collection集合\">#</a> 1、Collection 集合</h1>\n<h2 id=\"11集合概述\"><a class=\"markdownIt-Anchor\" href=\"#11集合概述\">#</a> 1.1 集合概述</h2>\n<ul>\n<li>集合：集合是 java 中提供的一种容器，可以用来存储多个数据。</li>\n</ul>\n<p><strong>集合和数组既然都是容器，它们有啥区别呢？</strong></p>\n<ul>\n<li>数组的长度是固定的。<strong>集合的长度是可变的。</strong></li>\n<li>数组中存储的是<strong>同一类型的元素</strong>，可以存储基本数据类型值。集合<strong>存储的都是对象</strong>。而且<strong>对象的类型可以不一致</strong>。在开发中一般当对象多的时候，使用集合进行存储。</li>\n</ul>\n<h2 id=\"12-集合框架\"><a class=\"markdownIt-Anchor\" href=\"#12-集合框架\">#</a> 1.2 集合框架</h2>\n<p>JAVASE 提供了满足各种需求的 API，在使用这些 API 前，先<strong>了解其继承与接口操作架构</strong>，才能了解何时采用哪个类，以及类之间如何彼此合作，从而达到灵活应用。<br>\n集合按照其存储结构可以分为两大类，分别是<strong>单列集合</strong>  <code>java.util.Collection</code>  和<strong>双列集合</strong> <code>java.util.Map</code></p>\n<p><strong>Collection：</strong> 单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是 <code>java.util.List</code>  和 <code>java.util.Set</code> 。其中，List 的特点是元素有序、元素可重复。Set 的特点是元素无序，而且不可重复。<strong>List 接口</strong>的主要实现类有 <code>java.util.ArrayList</code> 、 <code>java.util.LinkedList</code>  和 <code>java.util.Vector</code> ，<strong>Set 接口</strong>的主要实现类有 <code>java.util.HashSet</code>  和 <code>java.util.TreeSet</code> 。<br>\n从上面的描述可以看出 JDK 中提供了丰富的集合类库，为了便于初学者进行系统地学习，接下来通过一张图来描述整个集合类的继承体系。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200831161312724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200831161543196.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n集合本身是一个工具，它存放在 java.util 包中。在 Collection 接口定义着单列集合框架中最最共性的内容。</p>\n<h2 id=\"13-collection-常用功能\"><a class=\"markdownIt-Anchor\" href=\"#13-collection-常用功能\">#</a> 1.3 Collection 常用功能</h2>\n<p>Collection 是所有单列集合的父接口，因此在 Collection 中定义了单列集合 (List 和 Set) 通用的一些方法，这些方法可用于操作所有的单列集合。方法如下：</p>\n<ul>\n<li><code>public boolean add(E e)</code> ： 把给定的对象添加到当前集合中 。</li>\n<li><code>public void clear()</code>  : 清空集合中所有的元素。</li>\n<li><code>public boolean remove(E e)</code> : 把给定的对象在当前集合中删除。</li>\n<li><code>public boolean contains(E e)</code> : 判断当前集合中是否包含给定的对象。</li>\n<li><code>public boolean isEmpty()</code> : 判断当前集合是否为空。</li>\n<li><code>public int size()</code> : 返回集合中元素的个数。</li>\n<li><code>public Object[] toArray()</code> : 把集合中的元素，存储到数组中。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1Collection</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建集合对象 </span></span><br><span class=\"line\">    \t<span class=\"comment\">// 使用多态形式</span></span><br><span class=\"line\">    \tCollection&lt;String&gt; coll = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    \t<span class=\"comment\">// 使用方法</span></span><br><span class=\"line\">    \t<span class=\"comment\">// 添加功能  boolean  add(String s)</span></span><br><span class=\"line\">    \tcoll.add(<span class=\"string\">&quot;小李广&quot;</span>);</span><br><span class=\"line\">    \tcoll.add(<span class=\"string\">&quot;扫地僧&quot;</span>);</span><br><span class=\"line\">    \tcoll.add(<span class=\"string\">&quot;石破天&quot;</span>);</span><br><span class=\"line\">    \tSystem.out.println(coll);</span><br><span class=\"line\">    \t<span class=\"comment\">// boolean contains(E e) 判断o是否在集合中存在</span></span><br><span class=\"line\">    \tSystem.out.println(<span class=\"string\">&quot;判断  扫地僧 是否在集合中&quot;</span>+coll.contains(<span class=\"string\">&quot;扫地僧&quot;</span>));</span><br><span class=\"line\">    \t<span class=\"comment\">//boolean remove(E e) 删除在集合中的o元素</span></span><br><span class=\"line\">    \tSystem.out.println(<span class=\"string\">&quot;删除石破天：&quot;</span>+coll.remove(<span class=\"string\">&quot;石破天&quot;</span>));</span><br><span class=\"line\">    \tSystem.out.println(<span class=\"string\">&quot;操作之后集合中元素:&quot;</span>+coll);\t</span><br><span class=\"line\">    \t<span class=\"comment\">// size() 集合中有几个元素</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;集合中有&quot;</span>+coll.size()+<span class=\"string\">&quot;个元素&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// Object[] toArray()转换成一个Object数组</span></span><br><span class=\"line\">    \tObject[] objects = coll.toArray();</span><br><span class=\"line\">    \t<span class=\"comment\">// 遍历数组</span></span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(objects[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// void  clear() 清空集合</span></span><br><span class=\"line\">\t\tcoll.clear();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;集合中内容为：&quot;</span>+coll);</span><br><span class=\"line\">\t\t<span class=\"comment\">// boolean  isEmpty()  判断是否为空</span></span><br><span class=\"line\">\t\tSystem.out.println(coll.isEmpty());  \t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[小李广, 扫地僧, 石破天]</span><br><span class=\"line\">判断  扫地僧 是否在集合中<span class=\"keyword\">true</span></span><br><span class=\"line\">删除石破天：<span class=\"keyword\">true</span></span><br><span class=\"line\">操作之后集合中元素:[小李广, 扫地僧]</span><br><span class=\"line\">集合中有<span class=\"number\">2</span>个元素</span><br><span class=\"line\">小李广</span><br><span class=\"line\">扫地僧</span><br><span class=\"line\">集合中内容为：[]</span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"2-iterator迭代器\"><a class=\"markdownIt-Anchor\" href=\"#2-iterator迭代器\">#</a> 2、Iterator 迭代器</h1>\n<h2 id=\"21迭代器模式\"><a class=\"markdownIt-Anchor\" href=\"#21迭代器模式\">#</a> 2.1 迭代器模式</h2>\n<p>Java 集合框架的集合类，我们有时候称之为容器。容器的种类有很多种，比如 ArrayList、LinkedList、HashSet…，每种容器都有自己的特点，ArrayList 底层维护的是一个数组；LinkedList 是链表结构的；HashSet 依赖的是哈希表，<strong>每种容器都有自己特有的数据结构</strong>。<br>\n　　因为容器的内部结构不同，很多时候可能不知道该怎样去遍历一个容器中的元素。所以为了使对容器内元素的操作更为简单，Java 引入了<strong>迭代器模式！</strong></p>\n<p><strong>迭代器模式</strong>：<font color=red>提供一种方法对一个容器对象中的各个元素进行访问，而又不暴露该对象容器的内部细节。</font></p>\n<h2 id=\"22iterator迭代器\"><a class=\"markdownIt-Anchor\" href=\"#22iterator迭代器\">#</a> 2.2Iterator 迭代器</h2>\n<p>在程序开发中，经常需要遍历集合中的所有元素。针对这种需求，JDK 专门提供了一个接口 <code>java.util.Iterator</code> 。Iterator 接口也是 Java 集合中的一员，但它与 Collection、Map 接口有所不同，<strong>Collection 接口与 Map 接口主要用于存储元素</strong>，而 I<strong>terator 主要用于迭代访问</strong>（即遍历）Collection 中的元素，因此 Iterator 对象也被称为迭代器。<br>\n其接口定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.util;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;<span class=\"comment\">//判断是否存在下一个对象元素</span></span><br><span class=\"line\">    <span class=\"function\">E <span class=\"title\">next</span><span class=\"params\">()</span></span>;<span class=\"comment\">//获取下一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span></span>;<span class=\"comment\">//移除元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>获取迭代器的方法：</strong><br>\n <code>public Iterator iterator()</code> ： 获取集合对应的迭代器，用来遍历集合中的元素的。<br>\n<strong>下面介绍一下迭代的概念：</strong><br>\n迭代即 Collection 集合元素的通用获取方式。在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，继续在判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。<br>\n<strong>Iterator 接口的常用方法如下：</strong><br>\n <code>public E next()</code> ：返回迭代的下一个元素。<br>\n <code>public boolean hasNext()</code> ：如果仍有元素可以迭代，则返回 true。<br>\n <code>public void remove()</code> ：移除元素</p>\n<h2 id=\"23iterable\"><a class=\"markdownIt-Anchor\" href=\"#23iterable\">#</a> 2.3Iterable</h2>\n<p>Java 中还提供了一个 Iterable 接口，Iterable 接口实现后的功能是‘返回’一个迭代器，我们常用的实现了该接口的子接口有：Collection<E>、List<E>、Set<E>等。该接口的 iterator () 方法返回一个标准的 Iterator 实现。实现 Iterable 接口允许对象成为 foreach 语句的目标，就可以通过 foreach 语句来遍历你的底层序列。<br>\n<strong>Iterable 接口的具体实现:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Package java.lang;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Iterator&lt;T&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来我们通过案例学习如何使用 Iterator 迭代集合中元素：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IteratorDemo</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用多态方式 创建对象</span></span><br><span class=\"line\">        Collection&lt;String&gt; coll = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 添加元素到集合</span></span><br><span class=\"line\">        coll.add(<span class=\"string\">&quot;串串星人&quot;</span>);</span><br><span class=\"line\">        coll.add(<span class=\"string\">&quot;吐槽星人&quot;</span>);</span><br><span class=\"line\">        coll.add(<span class=\"string\">&quot;汪星人&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//遍历</span></span><br><span class=\"line\">        <span class=\"comment\">//使用迭代器 遍历   每个集合对象都有自己的迭代器</span></span><br><span class=\"line\">        Iterator&lt;String&gt; it = coll.iterator();</span><br><span class=\"line\">        <span class=\"comment\">//  泛型指的是 迭代出 元素的数据类型</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123; <span class=\"comment\">//判断是否有迭代元素</span></span><br><span class=\"line\">            String s = it.next();<span class=\"comment\">//获取迭代出的元素</span></span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"number\">2</span>         List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"> <span class=\"number\">3</span>         list.add(<span class=\"string\">&quot;张三1&quot;</span>);</span><br><span class=\"line\"> <span class=\"number\">4</span>         list.add(<span class=\"string\">&quot;张三2&quot;</span>);</span><br><span class=\"line\"> <span class=\"number\">5</span>         list.add(<span class=\"string\">&quot;张三3&quot;</span>);</span><br><span class=\"line\"> <span class=\"number\">6</span>         list.add(<span class=\"string\">&quot;张三4&quot;</span>);</span><br><span class=\"line\"> <span class=\"number\">7</span>         </span><br><span class=\"line\"> <span class=\"number\">8</span>         List&lt;String&gt; linkList = <span class=\"keyword\">new</span> LinkedList&lt;String&gt;();</span><br><span class=\"line\"> <span class=\"number\">9</span>         linkList.add(<span class=\"string\">&quot;link1&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">10</span>         linkList.add(<span class=\"string\">&quot;link2&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">11</span>         linkList.add(<span class=\"string\">&quot;link3&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">12</span>         linkList.add(<span class=\"string\">&quot;link4&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">13</span>         </span><br><span class=\"line\"><span class=\"number\">14</span>         Set&lt;String&gt; set = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\"><span class=\"number\">15</span>         set.add(<span class=\"string\">&quot;set1&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">16</span>         set.add(<span class=\"string\">&quot;set2&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">17</span>         set.add(<span class=\"string\">&quot;set3&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">18</span>         set.add(<span class=\"string\">&quot;set4&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">19</span>         <span class=\"comment\">//使用迭代器遍历ArrayList集合</span></span><br><span class=\"line\"><span class=\"number\">20</span>         Iterator&lt;String&gt; listIt = list.iterator();</span><br><span class=\"line\"><span class=\"number\">21</span>         <span class=\"keyword\">while</span>(listIt.hasNext())&#123;</span><br><span class=\"line\"><span class=\"number\">22</span>             System.out.println(listIt.next());</span><br><span class=\"line\"><span class=\"number\">23</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">24</span>         <span class=\"comment\">//使用迭代器遍历Set集合</span></span><br><span class=\"line\"><span class=\"number\">25</span>         Iterator&lt;String&gt; setIt = set.iterator();</span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"keyword\">while</span>(setIt.hasNext())&#123;</span><br><span class=\"line\"><span class=\"number\">27</span>             System.out.println(listIt.next());</span><br><span class=\"line\"><span class=\"number\">28</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">29</span>         <span class=\"comment\">//使用迭代器遍历LinkedList集合</span></span><br><span class=\"line\"><span class=\"number\">30</span>         Iterator&lt;String&gt; linkIt = linkList.iterator();</span><br><span class=\"line\"><span class=\"number\">31</span>         <span class=\"keyword\">while</span>(linkIt.hasNext())&#123;</span><br><span class=\"line\"><span class=\"number\">32</span>             System.out.println(listIt.next());</span><br><span class=\"line\"><span class=\"number\">33</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">34</span> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"24for-each循环\"><a class=\"markdownIt-Anchor\" href=\"#24for-each循环\">#</a> 2.4for each 循环</h2>\n<p>增强 for 循环 (也称 for each 循环) 是 JDK1.5 以后出来的一个高级 for 循环，<strong>专门用来遍历数组和集合的</strong>。它的<strong>内部原理其实是个 Iterator 迭代器</strong>，所以<strong>在遍历的过程中，不能对集合中的元素进行增删操作。</strong><br>\n<strong>格式：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(元素的数据类型  变量 : Collection集合or数组)&#123; </span><br><span class=\"line\">  \t<span class=\"comment\">//写操作代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（<font color=red>它用于遍历 Collection 和数组。通常只进行遍历元素，不要在遍历的过程中对集合元素进行增删操作</font>）<br>\n<strong>练习 1：遍历数组</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NBForDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">87</span>&#125;;</span><br><span class=\"line\">       \t<span class=\"comment\">//使用增强for遍历数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a : arr)&#123;<span class=\"comment\">//a代表数组中的每个元素</span></span><br><span class=\"line\">\t\t\tSystem.out.println(a);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>练习 2: 遍历集合</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NBFor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;        </span><br><span class=\"line\">    \tCollection&lt;String&gt; coll = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    \tcoll.add(<span class=\"string\">&quot;小河神&quot;</span>);</span><br><span class=\"line\">    \tcoll.add(<span class=\"string\">&quot;老河神&quot;</span>);</span><br><span class=\"line\">    \tcoll.add(<span class=\"string\">&quot;神婆&quot;</span>);</span><br><span class=\"line\">    \t<span class=\"comment\">//使用增强for遍历</span></span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(String s :coll)&#123;<span class=\"comment\">//接收变量s代表 代表被遍历到的集合元素</span></span><br><span class=\"line\">    \t\tSystem.out.println(s);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "java",
                "Collection",
                "Iterator",
                "集合",
                "迭代器"
            ]
        }
    ]
}