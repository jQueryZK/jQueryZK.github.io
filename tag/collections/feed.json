{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog • All posts by \"collections\" tag",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/2020/09/10/Java%E5%AD%A6%E4%B9%A0-Collections%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%92%8CJava%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E6%AF%94%E8%BE%83%E5%99%A8/",
            "url": "http://yoursite.com/2020/09/10/Java%E5%AD%A6%E4%B9%A0-Collections%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%92%8CJava%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E6%AF%94%E8%BE%83%E5%99%A8/",
            "title": "Java学习-Collections工具类和Java常见的几种比较器",
            "date_published": "2020-09-10T08:28:30.819Z",
            "content_html": "<h1 id=\"1-collections集合工具类\"><a class=\"markdownIt-Anchor\" href=\"#1-collections集合工具类\">#</a> 1、Collections 集合工具类</h1>\n<h2 id=\"11基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#11基本介绍\">#</a> 1.1 基本介绍</h2>\n<p><code>java.utils.Collections</code>  是 Java 提供的一个操作  <code>Set</code> 、 <code>List</code>  和  <code>Map</code>  等集合的工具类。Collections 类提供了许多<strong>操作集合的静态方法</strong>，借助这些静态方法可以实现集合元素的<strong>排序、查找替换和复制</strong> 等操作。</p>\n<h2 id=\"12collections常用方法\"><a class=\"markdownIt-Anchor\" href=\"#12collections常用方法\">#</a> 1.2Collections 常用方法</h2>\n<p><strong>排序（正向和逆向）</strong><br>\nCollections 提供了如下方法用于对 List 集合元素进行排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(List list)</span>：</span></span><br><span class=\"line\"><span class=\"function\">对指定 List 集合元素进行逆向排序。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shuffle</span><span class=\"params\">(List list)</span>：</span></span><br><span class=\"line\"><span class=\"function\">对 List 集合元素进行随机排序（shuffle 方法模拟了“洗牌”动作）。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(List list)</span>：</span></span><br><span class=\"line\"><span class=\"function\">根据元素的自然顺序对指定 List 集合的元素按升序进行排序。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(List list, Comparator c)</span>：</span></span><br><span class=\"line\"><span class=\"function\">根据指定 Comparator 产生的顺序对 List 集合元素进行排序。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(List list, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span>：</span></span><br><span class=\"line\"><span class=\"function\">将指定 List 集合中的 i 处元素和 j 处元素进行交换。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(List list, <span class=\"keyword\">int</span> distance)</span>：</span></span><br><span class=\"line\"><span class=\"function\">当 distance 为正数时，将 list 集合的后 distance 个元素“整体”移到前面；当 distance 为负数时，</span></span><br><span class=\"line\"><span class=\"function\">将 list 集合的前 distance 个元素“整体”移到后面。该方法不会改变集合的长度。</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;(); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">13</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">2</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">35</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">24</span>); </span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//对指定 List 集合元素进行逆向排序。</span></span><br><span class=\"line\">\t\tCollections.reverse(list);</span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//对 List 集合元素进行随机排序（shuffle 方法模拟了“洗牌”动作）</span></span><br><span class=\"line\">\t\tCollections.shuffle(list);</span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//根据元素的自然顺序对指定 List 集合的元素按升序进行排序。</span></span><br><span class=\"line\">\t\tCollections.sort(list);</span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//将指定 List 集合中的 i 处元素和 j 处元素进行交换。</span></span><br><span class=\"line\">\t\tCollections.swap(list, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//将集合后2个元素移到前面</span></span><br><span class=\"line\">\t\tCollections.rotate(list, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//将集合前3个元素移到后面</span></span><br><span class=\"line\">\t\tCollections.rotate(list, -<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tSystem.out.println(list);\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">13</span>, <span class=\"number\">2</span>, <span class=\"number\">35</span>, <span class=\"number\">24</span>]</span><br><span class=\"line\">[<span class=\"number\">24</span>, <span class=\"number\">35</span>, <span class=\"number\">2</span>, <span class=\"number\">13</span>]</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">35</span>, <span class=\"number\">24</span>]</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">24</span>, <span class=\"number\">35</span>]</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">35</span>, <span class=\"number\">24</span>]</span><br><span class=\"line\">[<span class=\"number\">35</span>, <span class=\"number\">24</span>, <span class=\"number\">2</span>, <span class=\"number\">13</span>]</span><br><span class=\"line\">[<span class=\"number\">13</span>, <span class=\"number\">35</span>, <span class=\"number\">24</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<p><strong>查找、替换</strong><br>\n Collections 还提供了如下常用的用于查找、替换集合元素的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(List list, Object key)</span>：</span></span><br><span class=\"line\"><span class=\"function\">使用二分搜索法搜索指定的 List 集合，以获得指定对象在 List 集合中的索引。如果要使该方法可以正常工作，则必须保证 List 中的元素已经处于有序状态。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">max</span><span class=\"params\">(Collection coll)</span>：</span></span><br><span class=\"line\"><span class=\"function\">根据元素的自然顺序，返回给定集合中的最大元素。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">max</span><span class=\"params\">(Collection coll, Comparator comp)</span>：</span></span><br><span class=\"line\"><span class=\"function\">根据 Comparator 指定的顺序，返回给定集合中的最大元素。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">min</span><span class=\"params\">(Collection coll)</span>：</span></span><br><span class=\"line\"><span class=\"function\">根据元素的自然顺序，返回给定集合中的最小元素。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">min</span><span class=\"params\">(Collection coll, Comparator comp)</span>：</span></span><br><span class=\"line\"><span class=\"function\">根据 Comparator 指定的顺序，返回给定集合中的最小元素。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fill</span><span class=\"params\">(List list, Object obj)</span>：</span></span><br><span class=\"line\"><span class=\"function\">使用指定元素 obj 替换指定 List 集合中的所有元素。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">frequency</span><span class=\"params\">(Collection c, Object o)</span>：</span></span><br><span class=\"line\"><span class=\"function\">返回指定集合中指定元素的出现次数。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOfSubList</span><span class=\"params\">(List source, List target)</span>：</span></span><br><span class=\"line\"><span class=\"function\">返回子 List 对象在父 List 对象中第一次出现的位置索引；如果父 List 中没有出现这样的子 List，则返回 -1。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastIndexOfSubList</span><span class=\"params\">(List source, List target)</span>：</span></span><br><span class=\"line\"><span class=\"function\">返回子 List 对象在父 List 对象中最后一次出现的位置索引；如果父 List 中没有岀现这样的子 List，则返回 -1。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">replaceAll</span><span class=\"params\">(List list, Object oldVal, Object newVal)</span>：</span></span><br><span class=\"line\"><span class=\"function\">使用一个新值 newVal 替换 List 对象的所有旧值 oldVal。</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;(); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">13</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">2</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">35</span>); </span><br><span class=\"line\">\t\tlist.add(<span class=\"number\">24</span>); </span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//先按升序排序</span></span><br><span class=\"line\">\t\tCollections.sort(list);</span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//用二分搜索法搜索24返回其索引</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = Collections.binarySearch(list, <span class=\"number\">24</span>);</span><br><span class=\"line\">\t\tSystem.out.println(index);</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回集合中最大元素</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> max = Collections.max(list);</span><br><span class=\"line\">\t\tSystem.out.println(max);</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用38替换集合中的35</span></span><br><span class=\"line\">\t\tCollections.replaceAll(list, <span class=\"number\">35</span>, <span class=\"number\">38</span>);</span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回24元素在集合中出现的次数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num =Collections.frequency(list, <span class=\"number\">24</span>);</span><br><span class=\"line\">\t\tSystem.out.println(num);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">13</span>, <span class=\"number\">2</span>, <span class=\"number\">35</span>, <span class=\"number\">24</span>]</span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">24</span>, <span class=\"number\">35</span>]</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">35</span></span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">24</span>, <span class=\"number\">38</span>]</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"2-java的比较器\"><a class=\"markdownIt-Anchor\" href=\"#2-java的比较器\">#</a> 2、Java 的比较器</h1>\n<h2 id=\"21常用比较方法介绍\"><a class=\"markdownIt-Anchor\" href=\"#21常用比较方法介绍\">#</a> 2.1 常用比较方法介绍</h2>\n<p>对于 JDK8 而言，有三种实现对象比较的方法：<br>\n1、覆写 Object 类的 <code>equals（）</code> 方法；<br>\n2、继承 <code>Comparable接口</code> ， <code>并实现compareTo（）</code> 方法；<br>\n3、定义一个单独的对象比较器，继承自 <code>Comparator接口</code> ， <code>实现compare（）</code> 方法。<br>\n由于使用的排序方式的不同，具体选择哪种方法来实现对象的比较也会有所不同。</p>\n<h2 id=\"22comparable比较器\"><a class=\"markdownIt-Anchor\" href=\"#22comparable比较器\">#</a> 2.2Comparable 比较器</h2>\n<p><code>java.lang.Comparable</code>  接口，是一个给排序方法使用的接口， 这是一个<strong>自比较器</strong>接口。用于指定一个对象如何去比较大小。</p>\n<p><strong>方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(T obj)</span> ：比较当前对象与传入进来对象的大小</span></span><br><span class=\"line\"><span class=\"function\">参数：obj 表示要比较的对象返回值：</span></span><br><span class=\"line\"><span class=\"function\">    *如果当前的对象大于obj，返回正整数。</span></span><br><span class=\"line\"><span class=\"function\">    *如果当前的对象等于obj，返回0</span></span><br><span class=\"line\"><span class=\"function\">    *如果当前对象小于obj，返回负整</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">当排序的<span class=\"title\">sort</span><span class=\"params\">()</span>方法在对集合中的元素两两进行比较的时候会调用我们实现的<span class=\"title\">compareTo</span><span class=\"params\">(T obj)</span>方法。</span></span><br><span class=\"line\"><span class=\"function\">如果<span class=\"title\">compareTo</span><span class=\"params\">()</span>返回正整数，则表示当前元素大于和它比较的元素；</span></span><br><span class=\"line\"><span class=\"function\">如果返回负整数则表示当前元素小于和它比较的元素；</span></span><br><span class=\"line\"><span class=\"function\">如果返回0，则表示两者相等。</span></span><br></pre></td></tr></table></figure>\n<p>例：创建一个员工类，存储到 ArrayList 集合中并根据员工的工资进行升序排序操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Employee</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> salary;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">(<span class=\"keyword\">int</span> id,String name,<span class=\"keyword\">int</span> salary)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.id=id;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.salary=salary;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Employee o)</span> </span>&#123;  <span class=\"comment\">//告诉sort()方法比较规则</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.salary-o.salary;<span class=\"comment\">//工资升序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123; </span><br><span class=\"line\">\t   <span class=\"keyword\">return</span> <span class=\"string\">&quot;employee&#123;&quot;</span> + <span class=\"string\">&quot;id=&#x27;&quot;</span> + id+ <span class=\"string\">&#x27;\\&#x27;&#x27;</span> + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> + <span class=\"string\">&quot;,salary=&quot;</span>+salary+<span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    \tArrayList&lt;Employee&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Employee&gt;();</span><br><span class=\"line\">    \tlist.add(<span class=\"keyword\">new</span> Employee(<span class=\"number\">1</span>, <span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">7000</span>)); </span><br><span class=\"line\">    \tlist.add(<span class=\"keyword\">new</span> Employee(<span class=\"number\">2</span>, <span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">5000</span>)); </span><br><span class=\"line\">    \tlist.add(<span class=\"keyword\">new</span> Employee(<span class=\"number\">3</span>, <span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">6000</span>)); </span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;排序前：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Employee employee : list) &#123;</span><br><span class=\"line\">            System.out.println(employee);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//排序</span></span><br><span class=\"line\">      <span class=\"comment\">//要求 该list中元素类型 必须实现比较器Comparable接口</span></span><br><span class=\"line\">        Collections.sort(list);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Employee employee : list) &#123;</span><br><span class=\"line\">            System.out.println(employee);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"23comparator比较器\"><a class=\"markdownIt-Anchor\" href=\"#23comparator比较器\">#</a> 2.3Comparator 比较器</h2>\n<p><code>java.util.Comparator</code>  接口，创建一个比较器的接口，一个类实现这个接口，相当于指定了一个排序的规则。</p>\n<p>Comparator 接口中的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String o1, String o2)</span> ：</span></span><br><span class=\"line\"><span class=\"function\">比较o1和o2这两个对象如果：</span></span><br><span class=\"line\"><span class=\"function\">    obj1 &gt; obj2，这个方法返回正整数</span></span><br><span class=\"line\"><span class=\"function\">    obj2 </span>== obj1， 返回<span class=\"number\">0</span></span><br><span class=\"line\">    obj1 &lt; obj2，这个方法返回负整数</span><br></pre></td></tr></table></figure>\n<p>例：创建一个员工类，存储到 ArrayList 集合中并分别写一个 Id 比较器接口根据 Id 升序排列<br>\n和一个 Salary 比较器根据 Salary 升序排列</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Employee</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> salary;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSalary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> salary;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSalary</span><span class=\"params\">(<span class=\"keyword\">int</span> salary)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.salary = salary;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">(<span class=\"keyword\">int</span> id,String name,<span class=\"keyword\">int</span> salary)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.id=id;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.salary=salary;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Employee o)</span> </span>&#123;  <span class=\"comment\">//告诉sort()方法比较规则</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.salary-o.salary;<span class=\"comment\">//工资升序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123; </span><br><span class=\"line\">\t   <span class=\"keyword\">return</span> <span class=\"string\">&quot;employee&#123;&quot;</span> + <span class=\"string\">&quot;id=&#x27;&quot;</span> + id+ <span class=\"string\">&#x27;\\&#x27;&#x27;</span> + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> + <span class=\"string\">&quot;,salary=&quot;</span>+salary+<span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Id比较器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IdComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Employee</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Employee o1, Employee o2)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> o1.getId()-o2.getId();<span class=\"comment\">//根据Id升序</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//salary比较器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SalaryComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Employee</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Employee o1, Employee o2)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> o1.getSalary()-o2.getSalary();<span class=\"comment\">//根据salary升序</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    \tArrayList&lt;Employee&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Employee&gt;();</span><br><span class=\"line\">    \tlist.add(<span class=\"keyword\">new</span> Employee(<span class=\"number\">1</span>, <span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">7000</span>)); </span><br><span class=\"line\">    \tlist.add(<span class=\"keyword\">new</span> Employee(<span class=\"number\">4</span>, <span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">5000</span>)); </span><br><span class=\"line\">    \tlist.add(<span class=\"keyword\">new</span> Employee(<span class=\"number\">3</span>, <span class=\"string\">&quot;王五&quot;</span>,<span class=\"number\">6000</span>)); </span><br><span class=\"line\">    \tlist.add(<span class=\"keyword\">new</span> Employee(<span class=\"number\">2</span>, <span class=\"string\">&quot;谢六&quot;</span>,<span class=\"number\">3000</span>));</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;排序前：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Employee employee : list) &#123;</span><br><span class=\"line\">            System.out.println(employee);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//根据Id比较器排序</span></span><br><span class=\"line\">        Collections.sort(list, <span class=\"keyword\">new</span> IdComparator());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;根据Id排序后：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Employee employee : list) &#123;</span><br><span class=\"line\">            System.out.println(employee);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//根据Salary比较器排序</span></span><br><span class=\"line\">        Collections.sort(list, <span class=\"keyword\">new</span> SalaryComparator());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;根据Salary排序后：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Employee employee : list) &#123;</span><br><span class=\"line\">            System.out.println(employee);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">排序前：</span><br><span class=\"line\">employee&#123;id=<span class=\"string\">&#x27;1&#x27;</span>, name=张三<span class=\"string\">&#x27;,salary=7000&#125;</span></span><br><span class=\"line\"><span class=\"string\">employee&#123;id=&#x27;</span><span class=\"number\">4</span><span class=\"string\">&#x27;, name=李四&#x27;</span>,salary=<span class=\"number\">5000</span>&#125;</span><br><span class=\"line\">employee&#123;id=<span class=\"string\">&#x27;3&#x27;</span>, name=王五<span class=\"string\">&#x27;,salary=6000&#125;</span></span><br><span class=\"line\"><span class=\"string\">employee&#123;id=&#x27;</span><span class=\"number\">2</span><span class=\"string\">&#x27;, name=谢六&#x27;</span>,salary=<span class=\"number\">3000</span>&#125;</span><br><span class=\"line\">根据Id排序后：</span><br><span class=\"line\">employee&#123;id=<span class=\"string\">&#x27;1&#x27;</span>, name=张三<span class=\"string\">&#x27;,salary=7000&#125;</span></span><br><span class=\"line\"><span class=\"string\">employee&#123;id=&#x27;</span><span class=\"number\">2</span><span class=\"string\">&#x27;, name=谢六&#x27;</span>,salary=<span class=\"number\">3000</span>&#125;</span><br><span class=\"line\">employee&#123;id=<span class=\"string\">&#x27;3&#x27;</span>, name=王五<span class=\"string\">&#x27;,salary=6000&#125;</span></span><br><span class=\"line\"><span class=\"string\">employee&#123;id=&#x27;</span><span class=\"number\">4</span><span class=\"string\">&#x27;, name=李四&#x27;</span>,salary=<span class=\"number\">5000</span>&#125;</span><br><span class=\"line\">根据Salary排序后：</span><br><span class=\"line\">employee&#123;id=<span class=\"string\">&#x27;2&#x27;</span>, name=谢六<span class=\"string\">&#x27;,salary=3000&#125;</span></span><br><span class=\"line\"><span class=\"string\">employee&#123;id=&#x27;</span><span class=\"number\">4</span><span class=\"string\">&#x27;, name=李四&#x27;</span>,salary=<span class=\"number\">5000</span>&#125;</span><br><span class=\"line\">employee&#123;id=<span class=\"string\">&#x27;3&#x27;</span>, name=王五<span class=\"string\">&#x27;,salary=6000&#125;</span></span><br><span class=\"line\"><span class=\"string\">employee&#123;id=&#x27;</span><span class=\"number\">1</span><span class=\"string\">&#x27;, name=张三&#x27;</span>,salary=<span class=\"number\">7000</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>扩展</strong>：如果在使用的时候，想要独立的定义规则去使用 可以采用 <code>Collections.sort(List list,Comparetor c)</code>  方式，自己定义 规则：<br>\n比如上面的代码直接写成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collections.sort(list, <span class=\"keyword\">new</span> Comparator&lt;Employee&gt;() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Employee o1, Employee o2)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> o1.getId()-o2.getId();<span class=\"comment\">//根据Id升序</span></span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Collections.sort(list, <span class=\"keyword\">new</span> Comparator&lt;Employee&gt;() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Employee o1, Employee o2)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> o1.getSalary()-o2.getSalary();<span class=\"comment\">//根据salary升序</span></span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"24comparable和comparator的区别\"><a class=\"markdownIt-Anchor\" href=\"#24comparable和comparator的区别\">#</a> 2.4Comparable 和 Comparator 的区别</h2>\n<p>Comparable &amp; Comparator 都是用来实现集合中的排序的，<br>\n只是 Comparable 是在对象内部定义的方法实现的排序，Comparator 是在集合外部实现的排序。</p>\n<ol>\n<li>Comparable 位于包 <code>java.lang</code>  下，Comparator 位于包 <code>java.util</code>  下。<br>\nComparable 接口将比较代码<strong>嵌入自身类</strong>中，而 Comparator<strong> 在一个独立的类中实现比较</strong>。</li>\n<li>如果类的设计师没有考虑到 Compare 的问题而没有实现 Comparable 接口，<br>\n可以通过 Comparator 来实现比较算法进行排序。</li>\n<li>Comparator 为了使用不同的排序规则做准备。比如：升序、降序或按不同的属性进行排序。</li>\n</ol>\n<p>Comparable：强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的 compareTo 方法 被称为它的自然比较方法。只能在类中实现 compareTo () 一次，不能经常修改类的代码实现自己想要的排序。实现 此接口的对象列表（和数组）可以通过</p>\n<p>Collections.sort（和 Arrays.sort）进行自动排序，对象可以用作有序映射中 的键或有序集合中的元素，无需指定比较器。 Comparator 强行对某个对象进行整体排序。可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort），从而允许在排序顺序上实现精确控制。还可以使用 Comparator 来控制某些数据结构（如有序 set 或 有序映射）的顺序，或者为那些没有自然顺序的对象 collection 提供排序。</p>\n",
            "tags": [
                "Collections",
                "Comparable",
                "Comparator"
            ]
        }
    ]
}