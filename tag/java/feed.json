{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog • All posts by \"java\" tag",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/2020/08/30/Java%E5%AD%A6%E4%B9%A0-Random%E7%B1%BB%E5%92%8CMath%E7%B1%BB/",
            "url": "http://yoursite.com/2020/08/30/Java%E5%AD%A6%E4%B9%A0-Random%E7%B1%BB%E5%92%8CMath%E7%B1%BB/",
            "title": "Java学习-Random类和Math类",
            "date_published": "2020-08-30T12:42:34.844Z",
            "content_html": "<h1 id=\"random类\"><a class=\"markdownIt-Anchor\" href=\"#random类\">#</a> Random 类</h1>\n<h2 id=\"1-什么是random类\"><a class=\"markdownIt-Anchor\" href=\"#1-什么是random类\">#</a> 1 、什么是 Random 类</h2>\n<p>此类的实例用于生成伪随机数<br>\n Random 类中实现的随机算法是<strong>伪随机</strong>，也就是<strong>有规则</strong>的随机。在进行随机时，随机算法的起源数字称为<strong>种子数 (seed)</strong>，在种子数的基础上进行一定的变换，从而产生需要的随机数字。相同种子数的 Random 对象，<strong>相同次数生成的随机数字是完全相同的</strong>。也就是说，<font color=red><strong>两个种子数相同的 Random 对象，第一次生成的随机数字完全相同，第 N 次生成的随机数字也完全相同</strong></font>。这点在生成多个随机数字时需要特别注意。</p>\n<p>（注意：<strong>种子数只是随机算法的起源数字，和生成的随机数字的区间无关</strong>）</p>\n<h2 id=\"2-random类的使用步骤\"><a class=\"markdownIt-Anchor\" href=\"#2-random类的使用步骤\">#</a> 2、Random 类的使用步骤</h2>\n<p><strong>查看类：</strong></p>\n<ul>\n<li><code>java.util.Random</code>  ：该类需要 import 导入使后使用。</li>\n</ul>\n<p><strong>查看构造方法</strong></p>\n<ul>\n<li><code>public Random()</code>  ：创建一个新的随机数生成器。</li>\n<li><code>public Random(long seed)</code> ：该构造方法可以通过制定一个种子数进行创建。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random r = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">Random r1 = <span class=\"keyword\">new</span> Random(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>查看成员方法</strong><br>\n Random 类中的方法比较简单，每个方法的功能也很容易理解。需要说明的是，Random 类中各方法生成的随机数字都是均匀分布的，也就是说区间内部的数字生成的几率是均等的</p>\n<ul>\n<li>\n<p><code>public int nextInt()</code>  ：返回一个伪随机数，范围在 0 （包括）和 指定值 n （不包括）之间的 int 值。</p>\n</li>\n<li>\n<p><code>public boolean nextBoolean()</code> ：该方法的作用是生成一个随机的 boolean 值，生成 true 和 false 的值几率相等，也就是都是 50% 的几率。</p>\n</li>\n<li>\n<p><code>public double nextDouble()</code> ：该方法的作用是生成一个随机的 double 值，数值介于 [0,1.0) 之间。</p>\n</li>\n<li>\n<p><code>public int nextInt()</code> ：该方法的作用是生成一个随机的 int 值，该值介于 int 的区间，也就是 - 2^31 到 2^31-1 之间。</p>\n</li>\n<li>\n<p><code>public int nextInt(int n)</code> ：生成指定区间的 int 值，该方法的作用是生成一个随机的 int 值，该值介于 [0,n) 的区间，也就是<strong> 0 到 n 之间的随机 int 值，包含 0 而不包含 n</strong>。</p>\n</li>\n<li>\n<p><code>public void setSeed(long seed)</code> ：该方法的作用是重新设置 Random 对象中的种子数。设置完种子数以后的 Random 对象和相同种子数使用 new 关键字创建出的 Random 对象相同。</p>\n</li>\n</ul>\n<h2 id=\"3-具体应用\"><a class=\"markdownIt-Anchor\" href=\"#3-具体应用\">#</a> 3、具体应用</h2>\n<p>使用 Random 类，完成生成 3 个 10 以内的随机整数的操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 创建键盘录入数据的对象 </span></span><br><span class=\"line\">\t\tRandom r = <span class=\"keyword\">new</span> Random(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//3. 随机生成一个数据</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> number = r.nextInt(<span class=\"number\">10</span>); </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//4. 输出数据 </span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;number:&quot;</span>+ number); </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; \t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取 1-n 之间的随机数，<strong>包含 n</strong>，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 导包 </span></span><br><span class=\"line\"> <span class=\"keyword\">import</span> java.util.Random; </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123; </span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t <span class=\"keyword\">int</span> n = <span class=\"number\">50</span>; </span><br><span class=\"line\">\t\t <span class=\"comment\">// 创建对象 </span></span><br><span class=\"line\">\t\t Random r = <span class=\"keyword\">new</span> Random(); </span><br><span class=\"line\">\t\t <span class=\"comment\">// 获取随机数 </span></span><br><span class=\"line\">\t\t <span class=\"keyword\">int</span> number = r.nextInt(n) + <span class=\"number\">1</span>; </span><br><span class=\"line\">\t\t <span class=\"comment\">// 输出随机数 </span></span><br><span class=\"line\">\t\t System.out.println(<span class=\"string\">&quot;number:&quot;</span> + number); </span><br><span class=\"line\">\t\t &#125; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>猜数字游戏：</strong> 游戏开始时，会随机生成一个 1-100 之间的整数 number 。玩家猜测一个数字 guessNumber ，会与 number 作比 较，系统提示大了或者小了，直到玩家猜中，游戏结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 系统产生一个随机数1‐100之间的。 </span></span><br><span class=\"line\">\t\tRandom r = <span class=\"keyword\">new</span> Random(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> number = r.nextInt(<span class=\"number\">100</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 键盘录入我们要猜的数据 </span></span><br><span class=\"line\">\t\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in); </span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入你要猜的数字(1‐100)：&quot;</span>); </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> guessNumber = sc.nextInt(); </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 比较这两个数据(用if语句) </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (guessNumber &gt; number) </span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;你猜的数据&quot;</span> + guessNumber + <span class=\"string\">&quot;大了&quot;</span>); </span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (guessNumber &lt; number) </span><br><span class=\"line\">\t\t\t&#123; System.out.println(<span class=\"string\">&quot;你猜的数据&quot;</span> + guessNumber + <span class=\"string\">&quot;小了&quot;</span>); </span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;恭喜你,猜中了&quot;</span>); </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>; </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"math类\"><a class=\"markdownIt-Anchor\" href=\"#math类\">#</a> Math 类</h1>\n<h2 id=\"1-概述\"><a class=\"markdownIt-Anchor\" href=\"#1-概述\">#</a> 1、概述</h2>\n<p><code>java.lang.Math</code>  类包含用于<strong>执行基本数学运算</strong>的方法，如初等指数、对数、平方根和三角函数。类似这样的工具 类，其<strong>所有方法均为静态方法</strong>，并且<strong>不会创建对象</strong>，调用起来非常简单。</p>\n<h2 id=\"2-常用运算方法\"><a class=\"markdownIt-Anchor\" href=\"#2-常用运算方法\">#</a> 2、常用运算方法</h2>\n<ul>\n<li><code>Math.sqrt()</code> ：计算平方根</li>\n<li><code>Math.cbrt()</code> ：计算立方根</li>\n<li><code>Math.hypot(x,y)</code> ：计算 (x 的平方 + y 的平方)<strong> 的平方根</strong></li>\n<li><code>Math.pow(a,b)</code> ：计算 a 的 b 次方</li>\n<li><code>Math.exp(x)</code> ：计算 e^x 的值</li>\n<li><code>Math.max()</code> ：计算最大值 Math.min ();// 计算最小值</li>\n<li><code>Math.abs()</code> ：返回 double 值的绝对值。</li>\n<li><code>Math.ceil()</code> ：天花板的意思，返回大于等于参数的最小的整数</li>\n<li><code>Math.floor()</code> ：地板的意思，返回小于等于参数最大的整数</li>\n<li><code>Math.random()</code> ： 取得一个大于或者等于 0.0 小于不等于 1.0 的随机数 [0,1)</li>\n<li><code>Math.rint()</code> ： 四舍五入 返回 double 值</li>\n<li><code>Math.round()</code> ： 四舍五入 float 时返回 int 值，double 时返回 long 值</li>\n<li><code>Math.nextUp(a)</code> ： 返回比 a 大一点点的浮点数</li>\n<li><code>Math.nextDown(a)</code> ： 返回比 a 小一点点的浮点数</li>\n<li><code>Math.nextAfter(a,b)</code> ：返回 (a,b) 或 (b,a) 间与 a 相邻的浮点数 b 可以比 a 小</li>\n</ul>\n",
            "tags": [
                "java",
                "类",
                "Random类",
                "Math类"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/30/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88String%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/",
            "url": "http://yoursite.com/2020/08/30/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88String%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/",
            "title": "Java学习-详谈String类及其常用方法",
            "date_published": "2020-08-30T11:47:25.663Z",
            "content_html": "<h1 id=\"1-string类\"><a class=\"markdownIt-Anchor\" href=\"#1-string类\">#</a> 1、String 类</h1>\n<h2 id=\"11string类的概述\"><a class=\"markdownIt-Anchor\" href=\"#11string类的概述\">#</a> 1.1String 类的概述</h2>\n<p><code>java.lang.String</code>  类代表<strong>字符串</strong>。Java 程序中所有的字符串文字（例如 “abc” ）都可以被看作是实现此类的实例。类 String 中包括用于检查各个字符串的方法，比如用于<strong>比较字符串</strong>，<strong>搜索字符串</strong>，<strong>提取子字符串</strong>以及<strong>创建具有翻 译为大写或小写的所有字符的字符串的副本</strong><br>\n<strong>特点：</strong></p>\n<ol>\n<li>字符串不变：字符串的值在创建后不能被更改。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"string\">&quot;abc&quot;</span>; s1 += <span class=\"string\">&quot;d&quot;</span>; </span><br><span class=\"line\">System.out.println(s1); <span class=\"comment\">// &quot;abcd&quot; </span></span><br><span class=\"line\"><span class=\"comment\">// 内存中有&quot;abc&quot;，&quot;abcd&quot;两个对象，s1从指向&quot;abc&quot;，改变指向，指向了&quot;abcd&quot;。</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>因为 String 对象是不可变的，所以它们<strong>可以被共享</strong>。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"string\">&quot;abc&quot;</span>; </span><br><span class=\"line\">String s2 = <span class=\"string\">&quot;abc&quot;</span>; </span><br><span class=\"line\"><span class=\"comment\">// 内存中只有一个&quot;abc&quot;对象被创建，同时被s1和s2共享。</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><code>&quot;abc&quot;</code>  等效于  <code>char[] data=&#123; 'a' , 'b' , 'c' &#125;</code>  。（<strong>String 底层是靠字符数组实现的。</strong>）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如： </span><br><span class=\"line\">String str = <span class=\"string\">&quot;abc&quot;</span>; </span><br><span class=\"line\">相当于： </span><br><span class=\"line\"><span class=\"keyword\">char</span> data[] = &#123;<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>&#125;; </span><br><span class=\"line\">String str = <span class=\"keyword\">new</span> String(data); </span><br><span class=\"line\"><span class=\"comment\">// String底层是靠字符数组实现的。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"12-使用步骤\"><a class=\"markdownIt-Anchor\" href=\"#12-使用步骤\">#</a> 1.2 使用步骤</h2>\n<ul>\n<li><strong>查看类：</strong>  <code>java.lang.String</code>  ：此类不需要导入。</li>\n<li><strong>查看构造方法：</strong><br>\n <code>public String()</code>  ：初始化新创建的 String 对象，以使其表示空字符序列。<br>\n <code>public String(char[] value)</code>  ：通过当前参数中的字符数组来构造新的 String。<br>\n <code>public String(byte[] bytes)</code>  ：通过使用平台的默认字符集解码当前参数中的字节数组来构造新的 String。<br>\n<strong>构造举例，代码如下：</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无参构造 </span></span><br><span class=\"line\">String str = <span class=\"keyword\">new</span> String（）； </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过字符数组构造 </span></span><br><span class=\"line\"><span class=\"keyword\">char</span> chars[] = &#123;<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>&#125;; </span><br><span class=\"line\">String str2 = <span class=\"keyword\">new</span> String(chars); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过字节数组构造 </span></span><br><span class=\"line\"><span class=\"keyword\">byte</span> bytes[] = &#123; <span class=\"number\">97</span>, <span class=\"number\">98</span>, <span class=\"number\">99</span> &#125;;</span><br><span class=\"line\">String str3 = <span class=\"keyword\">new</span> String(bytes);</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-常用方法\"><a class=\"markdownIt-Anchor\" href=\"#13-常用方法\">#</a> 1.3 常用方法</h2>\n<ul>\n<li><code>public boolean equals (Object anObject)</code>  ：将此字符串与指定对象进行比较。（String 类中已经对 equals 方法进行了重写所以比较的是对象的内容不是地址）</li>\n<li><code>public boolean equalsIgnoreCase (String anotherString)</code>  ：将此字符串与指定对象进行比较，忽略大小 写</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">// 创建字符串对象 </span></span><br><span class=\"line\">\tString s1 = <span class=\"string\">&quot;hello&quot;</span>; </span><br><span class=\"line\">\tString s2 = <span class=\"string\">&quot;hello&quot;</span>; </span><br><span class=\"line\">\tString s3 = <span class=\"string\">&quot;HELLO&quot;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// boolean equals(Object obj):比较字符串的内容是否相同 </span></span><br><span class=\"line\">\tSystem.out.println(s1.equals(s2)); <span class=\"comment\">// true </span></span><br><span class=\"line\">\tSystem.out.println(s1.equals(s3)); <span class=\"comment\">// false </span></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t<span class=\"comment\">//boolean equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写 </span></span><br><span class=\"line\">\tSystem.out.println(s1.equalsIgnoreCase(s2)); <span class=\"comment\">// true </span></span><br><span class=\"line\">\tSystem.out.println(s1.equalsIgnoreCase(s3)); <span class=\"comment\">// true </span></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>获取功能的方法</strong>：</p>\n<ul>\n<li><code>public int length ()</code>  ：返回此字符串的长度。</li>\n<li><code>public String concat (String str)</code>  ：将指定的字符串连接到该字符串的末尾。</li>\n<li><code>public char charAt (int index)</code>  ：获取指定索引处的 char 值。</li>\n<li><code>public int indexOf (String str)</code>  ：获取指定子字符串第一次出现在该字符串内的索引。</li>\n<li><code>public String substring (int beginIndex)</code>  ：获取一个子字符串，从 beginIndex 开始截取字符串到字符串结尾。</li>\n<li><code>public String substring (int beginIndex, int endIndex)</code>  ：获取一个子字符串，从 beginIndex 到 endIndex 截取字符串。含 beginIndex，不含 endIndex。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建字符串对象 </span></span><br><span class=\"line\">\t\tString s = <span class=\"string\">&quot;helloworld&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// int length():获取字符串的长度，其实也就是字符个数 </span></span><br><span class=\"line\">\t\tSystem.out.println(s.length()); <span class=\"comment\">//10</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">// String concat (String str):将将指定的字符串连接到该字符串的末尾. </span></span><br><span class=\"line\">\t\tString s2 = s.concat(<span class=\"string\">&quot;**hello itheima&quot;</span>);<span class=\"comment\">//helloworld**hello itheima</span></span><br><span class=\"line\">\t\tSystem.out.println(s2);<span class=\"comment\">// helloworld**hello itheima </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// char charAt(int index):获取指定索引处的字符 </span></span><br><span class=\"line\">\t\tSystem.out.println(s.charAt(<span class=\"number\">0</span>)); <span class=\"comment\">//h</span></span><br><span class=\"line\">\t\tSystem.out.println(s.charAt(<span class=\"number\">1</span>)); <span class=\"comment\">//e</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">// int indexOf(String str):获取str在字符串对象中第一次出现的索引,没有返回‐1 </span></span><br><span class=\"line\">\t\tSystem.out.println(s.indexOf(<span class=\"string\">&quot;l&quot;</span>)); <span class=\"comment\">//2</span></span><br><span class=\"line\">\t\tSystem.out.println(s.indexOf(<span class=\"string\">&quot;owo&quot;</span>));<span class=\"comment\">//4 </span></span><br><span class=\"line\">\t\tSystem.out.println(s.indexOf(<span class=\"string\">&quot;ak&quot;</span>)); <span class=\"comment\">//-1</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">// String substring(int start):从start开始截取字符串到字符串结尾 </span></span><br><span class=\"line\">\t\tSystem.out.println(s.substring(<span class=\"number\">0</span>)); <span class=\"comment\">//helloworld</span></span><br><span class=\"line\">\t\tSystem.out.println(s.substring(<span class=\"number\">5</span>)); <span class=\"comment\">//world</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">// String substring(int start,int end):从start到end截取字符串。含start，不含end。 </span></span><br><span class=\"line\">\t\tSystem.out.println(s.substring(<span class=\"number\">0</span>, s.length())); <span class=\"comment\">//helloworld</span></span><br><span class=\"line\">\t\tSystem.out.println(s.substring(<span class=\"number\">3</span>,<span class=\"number\">8</span>)); <span class=\"comment\">//lowor</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>转换功能的方法</strong></p>\n<ul>\n<li><code>public char[] toCharArray ()</code>  ：将此字符串转换为新的字符数组。</li>\n<li><code>public byte[] getBytes ()</code>  ：使用平台的默认字符集将该 String 编码转换为新的字节数组。</li>\n<li><code>public String replace (CharSequence target, CharSequence replacement)</code>  ：将与 target 匹配的字符串使 用 replacement 字符串替换。<strong>CharSequence 是一个接口，也是一种引用类型。作为参数类型，可以把 String 对象传递到方法中</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建字符串对象 </span></span><br><span class=\"line\">\t\tString s = <span class=\"string\">&quot;abcde&quot;</span>; </span><br><span class=\"line\">\t\t<span class=\"comment\">// char[] toCharArray():把字符串转换为字符数组 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] chs = s.toCharArray(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; chs.length; x++) &#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(chs[x]); </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">// byte[] getBytes ():把字符串转换为字节数组 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytes = s.getBytes(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; bytes.length; x++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(bytes[x]); </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 替换字母it为大写IT</span></span><br><span class=\"line\">\t\tString str = <span class=\"string\">&quot;itcast itheima&quot;</span>; </span><br><span class=\"line\">\t\tString replace = str.replace(<span class=\"string\">&quot;it&quot;</span>, <span class=\"string\">&quot;IT&quot;</span>); </span><br><span class=\"line\">\t\tSystem.out.println(replace); <span class=\"comment\">// ITcast ITheima </span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>); </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>分割功能的方法</strong></p>\n<ul>\n<li><code>public String[] split(String regex)</code>  ：将此字符串按照给定的 regex（规则）拆分为字符串数组。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建字符串对象 </span></span><br><span class=\"line\">\t\tString s = <span class=\"string\">&quot;aa|bb|cc&quot;</span>;</span><br><span class=\"line\">\t\tString[] strArray = s.split(<span class=\"string\">&quot;|&quot;</span>); <span class=\"comment\">// [&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;] </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; strArray.length; x++)</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(strArray[x]); <span class=\"comment\">// aa bb cc &#125; &#125;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-string类的练习\"><a class=\"markdownIt-Anchor\" href=\"#14-string类的练习\">#</a> 1.4 String 类的练习</h2>\n<p><strong>拼接字符串</strong><br>\n定义一个方法，把数组 {1,2,3} 按照指定个格式拼接成一个字符串。格式参照如下：[1#2#3]。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//定义一个int类型的数组 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;; </span><br><span class=\"line\">\t<span class=\"comment\">//调用方法 </span></span><br><span class=\"line\">\tString s = arrayToString(arr); </span><br><span class=\"line\">\t<span class=\"comment\">//输出结果 </span></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;s:&quot;</span> + s); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *  写方法实现把数组中的元素按照指定的格式拼接成一个字符串 </span></span><br><span class=\"line\"><span class=\"comment\"> *  两个明确：</span></span><br><span class=\"line\"><span class=\"comment\"> *  返回值类型：String </span></span><br><span class=\"line\"><span class=\"comment\"> *  参数列表：int[] arr </span></span><br><span class=\"line\"><span class=\"comment\"> */</span> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">arrayToString</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">// 创建字符串s</span></span><br><span class=\"line\">\tString s = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;[&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 遍历数组，并拼接字符串 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; arr.length; x++) &#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == arr.length -<span class=\"number\">1</span>) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ts = s.concat(arr[x] + <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123; s = s.concat(arr[x] + <span class=\"string\">&quot;#&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>统计字符个数</strong><br>\n键盘录入一个字符，统计字符串中大小写字母及数字字符个数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//键盘录入一个字符串数据 </span></span><br><span class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;请输入一个字符串数据：&quot;</span>); </span><br><span class=\"line\">\t\tString s = sc.nextLine(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//定义三个统计变量，初始化值都是0 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> bigCount = <span class=\"number\">0</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> smallCount = <span class=\"number\">0</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> numberCount = <span class=\"number\">0</span>; </span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历字符串，得到每一个字符 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>; x&lt;s.length(); x++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> ch = s.charAt(x); </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//拿字符进行判断 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(ch&gt;=<span class=\"string\">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;Z&#x27;</span>) </span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\tbigCount++; </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ch&gt;=<span class=\"string\">&#x27;a&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;z&#x27;</span>) </span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\tsmallCount++; </span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>) </span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\tnumberCount++; </span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t&#123; </span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;该字符&quot;</span>+ch+<span class=\"string\">&quot;非法&quot;</span>); </span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t&#125;<span class=\"comment\">//输出结果 </span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;大写字符：&quot;</span>+bigCount+<span class=\"string\">&quot;个&quot;</span>); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;小写字符：&quot;</span>+smallCount+<span class=\"string\">&quot;个&quot;</span>); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;数字字符：&quot;</span>+numberCount+<span class=\"string\">&quot;个&quot;</span>); </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请输入一个字符串数据：</span><br><span class=\"line\">xGSHDsdas</span><br><span class=\"line\">大写字符：<span class=\"number\">4</span>个</span><br><span class=\"line\">小写字符：<span class=\"number\">5</span>个</span><br><span class=\"line\">数字字符：<span class=\"number\">0</span>个</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "java",
                "字符串",
                "String"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/30/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%95%B0%E7%BB%84Array%E5%92%8C%E6%95%B0%E7%BB%84%E5%B7%A5%E5%85%B7%E7%B1%BBArrays/",
            "url": "http://yoursite.com/2020/08/30/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%95%B0%E7%BB%84Array%E5%92%8C%E6%95%B0%E7%BB%84%E5%B7%A5%E5%85%B7%E7%B1%BBArrays/",
            "title": "Java学习-详谈数组Array和数组工具类Arrays",
            "date_published": "2020-08-30T09:27:06.176Z",
            "content_html": "<h1 id=\"1-数组的定义和访问\"><a class=\"markdownIt-Anchor\" href=\"#1-数组的定义和访问\">#</a> 1、数组的定义和访问</h1>\n<h2 id=\"11容器概述\"><a class=\"markdownIt-Anchor\" href=\"#11容器概述\">#</a> 1.1 容器概述</h2>\n<p><strong>案例分析：</strong> 现在需要统计某公司员工的工资情况，例如计算平均工资、找到最高工资等。假设该公司有 50 名员工，用前面所学 的知识，程序首先需要声明 50 个变量来分别记住每位员工的工资，然后在进行操作，这样做会显得很麻烦，而且错 误率也会很高。因此我们可以使用容器进行操作。将所有的数据全部存储到一个容器中，统一操作。</p>\n<p><strong>容器的概念：</strong> 容器是将多个数据存储到一起，每个数据称为该容器的元素。</p>\n<h2 id=\"12数组的概念\"><a class=\"markdownIt-Anchor\" href=\"#12数组的概念\">#</a> 1.2 数组的概念</h2>\n<p><strong>数组概念：</strong>  数组就是存储数据长度固定的容器，保证多个数据的数据类型要一致。<br>\n（<font color=red>其实所谓的数组指的就是一组相关类型的变量集合，并且这些变量可以按照统一的方式进行操作。数组本身属于<strong>引用数据类型</strong></font>）</p>\n<h2 id=\"13数组的定义\"><a class=\"markdownIt-Anchor\" href=\"#13数组的定义\">#</a> 1.3 数组的定义</h2>\n<p><strong>方式一：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组存储的数据类型[] 数组名字 = <span class=\"keyword\">new</span> 数组存储的数据类型[长度];</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数组存储的数据类型： 创建的数组容器可以存储的数据类型。</li>\n<li>[] : 表示数组。</li>\n<li>数组名字：为定义的数组起个变量名，满足标识符规范，可以使用名字操作数组。</li>\n<li>new：关键字，创建数组使用的关键字。</li>\n<li>[长度]：数组的长度，表示数组容器中可以存储多少个元素。</li>\n</ul>\n<p><strong>注意：</strong> <font color=red>数组有定长特性，长度一旦指定，不可再更改</font><br>\n<strong>方式二：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型[] 数组名 = <span class=\"keyword\">new</span> 数据类型[]&#123;元素<span class=\"number\">1</span>,元素<span class=\"number\">2</span>,元素<span class=\"number\">3.</span>..&#125;;</span><br><span class=\"line\">例如：定义存储<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">4</span>，<span class=\"number\">5</span>整数的数组容器。</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>方式三：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型[] 数组名 = &#123;元素<span class=\"number\">1</span>,元素<span class=\"number\">2</span>,元素<span class=\"number\">3.</span>..&#125;;</span><br><span class=\"line\">例如：定义存储<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">4</span>，<span class=\"number\">5</span>整数的数组容器。</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"14数组的访问\"><a class=\"markdownIt-Anchor\" href=\"#14数组的访问\">#</a> 1.4 数组的访问</h2>\n<ul>\n<li><strong>索引</strong>： 每一个存储到数组的元素，都会自动的拥有一个编号，从 0 开始，这个自动编号称为数组索引 (index)，可以通过数组的索引访问到数组中的元素。</li>\n<li><strong>格式</strong>： <code>数组名[索引]</code></li>\n<li><strong>数组的长度属性</strong>： 每个数组都具有长度，而且是固定的，Java 中赋予了数组的一个属性，可以获取到数组的 长度，语句为： 数组名.length ，属性 length 的执行结果是数组的长度，int 类型结果。由次可以推断出，数 组的最大索引值为 数组名.length-1 。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;; </span><br><span class=\"line\">\t<span class=\"comment\">//打印数组的属性，输出结果是5 </span></span><br><span class=\"line\">\tSystem.out.println(arr.length); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>索引访问数组中的元素</strong>：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//定义存储int类型数组，赋值元素1，2，3，4，5 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;; </span><br><span class=\"line\">\t<span class=\"comment\">//为0索引元素赋值为6 </span></span><br><span class=\"line\">\tarr[<span class=\"number\">0</span>] = <span class=\"number\">6</span>; </span><br><span class=\"line\">\t<span class=\"comment\">//获取数组0索引上的元素 int i = arr[0]; </span></span><br><span class=\"line\">\tSystem.out.println(i); </span><br><span class=\"line\">\t<span class=\"comment\">//直接输出数组0索引元素 </span></span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">0</span>]); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-数组原理内存\"><a class=\"markdownIt-Anchor\" href=\"#2-数组原理内存\">#</a> 2、数组原理内存</h1>\n<h2 id=\"21-内存概述\"><a class=\"markdownIt-Anchor\" href=\"#21-内存概述\">#</a> 2.1 内存概述</h2>\n<p>内存是计算机中的重要原件，<strong>临时存储区域，作用是运行程序</strong>。我们<strong>编写的程序是存放在硬盘中的，在硬盘中的程 序是不会运行的，必须放进内存中才能运行</strong>，运行完毕后会清空内存。 Java 虚拟机要运行程序，必须要对内存进行空间的分配和管理。</p>\n<h2 id=\"22java虚拟机的内存划分\"><a class=\"markdownIt-Anchor\" href=\"#22java虚拟机的内存划分\">#</a> 2.2Java 虚拟机的内存划分</h2>\n<p>为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。<br>\n<strong>JVM 的内存划分：</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830154211197.jpg#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"23-数组在内存中的存储\"><a class=\"markdownIt-Anchor\" href=\"#23-数组在内存中的存储\">#</a> 2.3 数组在内存中的存储</h2>\n<p><strong>一个数组内存图</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>]; </span><br><span class=\"line\">\tSystem.out.println(arr);<span class=\"comment\">//[I@5f150435 </span></span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">0</span>]);<span class=\"comment\">//输出0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>new 出来的内容，都是在堆 内存中存储的，而方法中的变量 arr 保存的是数组的地址。</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830154856824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830154926542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>两个数组内存图</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830155051592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>两个变量指向一个数组</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830155152992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"3-数组常见操作\"><a class=\"markdownIt-Anchor\" href=\"#3-数组常见操作\">#</a> 3、数组常见操作</h1>\n<h2 id=\"31-数组越界异常\"><a class=\"markdownIt-Anchor\" href=\"#31-数组越界异常\">#</a> 3.1 数组越界异常</h2>\n<p>观察下列代码运行后的结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;; </span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">3</span>]); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830155454606.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n分析：创建数组，赋值 3 个元素，数组的索引就是 0，1，2，没有 3 索引，因此我们不能访问数组中不存在的索引，程序运 行后，将会抛出  <code>ArrayIndexOutOfBoundsException</code>  数组越界异常。在开发中，数组的越界异常是<strong>不能出现的</strong>，一 旦出现了，就必须要修改我们编写的代码。</p>\n<h2 id=\"32-数组空指针异常\"><a class=\"markdownIt-Anchor\" href=\"#32-数组空指针异常\">#</a> 3.2 数组空指针异常</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;; </span><br><span class=\"line\">\tarr = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">0</span>]); </span><br><span class=\"line\">\t｝</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830160809908.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>分析：</strong>  <code>arr = null</code>  这行代码，意味着<strong>变量 arr 将不会再保存数组的内存地址</strong>，也就不允许再操作数组了，因此运行的时候 会抛出  <code>NullPointerException</code>  空指针异常。在开发中，数组的越界异常是<strong>不能出现的</strong>，一旦出现了，就必须要修 改我们编写的代码。</p>\n<h2 id=\"33-数组遍历\"><a class=\"markdownIt-Anchor\" href=\"#33-数组遍历\">#</a> 3.3 数组遍历</h2>\n<p><strong>数组遍历：</strong>  就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">0</span>]); </span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">2</span>]); </span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">3</span>]); </span><br><span class=\"line\">\tSystem.out.println(arr[<span class=\"number\">4</span>]); </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码是可以将数组中每个元素全部遍历出来，但是如果<strong>数组元素非常多</strong>，这种写法肯定不行，因此我们需要改 造成循环的写法。<strong>数组的索引是 0 到 lenght-1</strong> ，可以作为<strong>循环的条件</strong>出现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125;; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) </span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">\t\tSystem.out.println(arr[i]); </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"34-数组获取最大值元素\"><a class=\"markdownIt-Anchor\" href=\"#34-数组获取最大值元素\">#</a> 3.4 数组获取最大值元素</h2>\n<p><strong>最大值获取：</strong> 从数组的所有元素中找出最大值（最小值同理）。<br>\n<strong>实现思路：</strong></p>\n<ul>\n<li>定义变量，保存数组 0 索引上的元素</li>\n<li>遍历数组，获取出数组中的每个元素</li>\n<li>将遍历到的元素和保存数组 0 索引上值的变量进行比较</li>\n<li>如果数组元素的值大于了变量的值，变量记录住新的值</li>\n<li>数组循环遍历结束，变量保存的就是数组中的最大值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">5</span>, <span class=\"number\">15</span>, <span class=\"number\">2000</span>, <span class=\"number\">10000</span>, <span class=\"number\">100</span>, <span class=\"number\">4000</span> &#125;; </span><br><span class=\"line\">\t<span class=\"comment\">//定义变量，保存数组中0索引的元素 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> max = arr[<span class=\"number\">0</span>]; </span><br><span class=\"line\">\t<span class=\"comment\">//遍历数组，取出每个元素 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) </span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历到的元素和变量max比较 </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//如果数组元素大于max </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i] &gt; max) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//max记录住大值 </span></span><br><span class=\"line\">\t\t\tmax = arr[i]; </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;数组最大值是： &quot;</span> + max); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"35-数组反转\"><a class=\"markdownIt-Anchor\" href=\"#35-数组反转\">#</a> 3.5 数组反转</h2>\n<p><strong>数组的反转：</strong>  数组中的元素颠倒顺序，例如原始数组为 1,2,3,4,5，反转后的数组为 5,4,3,2,1（要求只能用一个数组实现）<br>\n思路：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830162049666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125;; </span><br><span class=\"line\">\t<span class=\"comment\">/*循环中定义变量min=0最小索引 max=arr.length‐1最大索引 min++,max‐‐ */</span> </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> min = <span class=\"number\">0</span>, max = arr.length ‐ <span class=\"number\">1</span>; min &lt;= max; min++, max‐‐) </span><br><span class=\"line\">\t&#123; <span class=\"comment\">//利用第三方变量完成数组中的元素交换 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> temp = arr[min]; arr[min] = arr[max]; </span><br><span class=\"line\">\t\tarr[max] = temp; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 反转后，遍历数组 </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) </span><br><span class=\"line\">\t&#123; System.out.println(arr[i]); &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-数组作为方法参数和返回值\"><a class=\"markdownIt-Anchor\" href=\"#4-数组作为方法参数和返回值\">#</a> 4、数组作为方法参数和返回值</h1>\n<h2 id=\"41-数组作为方法参数\"><a class=\"markdownIt-Anchor\" href=\"#41-数组作为方法参数\">#</a> 4.1 数组作为方法参数</h2>\n<p>以前的方法中学习了方法的参数和返回值，但是使用的都是基本数据类型。那么作为引用类型的数组能否作为方法的参数进行传递呢，当然是可以的。 数组作为方法参数传递，<strong>传递的参数是数组内存的地址</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span> &#125;; </span><br><span class=\"line\">\t<span class=\"comment\">//调用方法，传递数组 </span></span><br><span class=\"line\">\tprintArray(arr); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/* 创建方法，方法接收数组类型的参数 进行数组的遍历 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\tSystem.out.println(arr[i]); </span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830163500691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"42-数组作为方法返回值\"><a class=\"markdownIt-Anchor\" href=\"#42-数组作为方法返回值\">#</a> 4.2 数组作为方法返回值</h2>\n<p><strong>数组作为方法的返回值，返回的是数组的内存地址</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//调用方法，接收数组的返回值 </span></span><br><span class=\"line\">\t<span class=\"comment\">//接收到的是数组的内存地址 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = getArray(); </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) </span><br><span class=\"line\">\t&#123; System.out.println(arr[i]); &#125; </span><br><span class=\"line\">&#125;<span class=\"comment\">/*创建方法，返回值是数组类型 return返回数组的地址 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] getArray() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span> &#125;; <span class=\"comment\">//返回数组的地址，返回到调用者 </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200830163756874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"43-方法的参数类型区别\"><a class=\"markdownIt-Anchor\" href=\"#43-方法的参数类型区别\">#</a> 4.3 方法的参数类型区别</h2>\n<p><strong>方法的参数为基本类型时，传递的是数据值。方法的参数为引用类型时，传递的是地址值.</strong><br>\n 方法的参数为基本类型时：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">2</span>; </span><br><span class=\"line\">\t\tSystem.out.println(a); </span><br><span class=\"line\">\t\tSystem.out.println(b); </span><br><span class=\"line\">\t\tchange(a, b); </span><br><span class=\"line\">\t\tSystem.out.println(a);</span><br><span class=\"line\">\t\tSystem.out.println(b); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\ta = a + b; </span><br><span class=\"line\">\t\tb = b + a; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>方法的参数为引用类型时：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>&#125;; </span><br><span class=\"line\">\t\tSystem.out.println(arr[<span class=\"number\">0</span>]); </span><br><span class=\"line\">\t\tchange(arr); </span><br><span class=\"line\">\t\tSystem.out.println(arr[<span class=\"number\">0</span>]); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\tarr[<span class=\"number\">0</span>] = <span class=\"number\">200</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"5-arrays类\"><a class=\"markdownIt-Anchor\" href=\"#5-arrays类\">#</a> 5、Arrays 类</h1>\n<h2 id=\"51概述\"><a class=\"markdownIt-Anchor\" href=\"#51概述\">#</a> 5.1 概述</h2>\n<p><code>java.util.Arrays</code>  此类<strong>包含用来操作数组的各种方法</strong>，比如<strong>排序</strong> 和<strong>搜索</strong> 等。其所有方法<strong>均为静态方法</strong>，调用起来 非常简单。</p>\n<h2 id=\"52-操作数组的方法\"><a class=\"markdownIt-Anchor\" href=\"#52-操作数组的方法\">#</a> 5.2 操作数组的方法</h2>\n<ul>\n<li><code>Arrays.toString()</code>  ：返回指定数组内容的字符串表示形式。、</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义int 数组 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">2</span>,<span class=\"number\">34</span>,<span class=\"number\">35</span>,<span class=\"number\">4</span>,<span class=\"number\">657</span>,<span class=\"number\">8</span>,<span class=\"number\">69</span>,<span class=\"number\">9</span>&#125;; </span><br><span class=\"line\">\t\t<span class=\"comment\">// 打印数组,输出地址值</span></span><br><span class=\"line\">\t\tSystem.out.println(arr); <span class=\"comment\">// [I@2ac1fdc4 </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 数组内容转为字符串 </span></span><br><span class=\"line\">\t\tString s = Arrays.toString(arr); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 打印字符串,输出内容 </span></span><br><span class=\"line\">\t\tSystem.out.println(s); <span class=\"comment\">// [2, 34, 35, 4, 657, 8, 69, 9] &#125;</span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Arrays.sort(数组名)</code>  ：对指定的 int 型数组按数字升序进行排序。如果传入的是字符型数组按字符的 Acell 码排序（<strong>只能做升序排序，不能做降序排序。</strong>）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">// 定义int 数组 </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">24</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">48</span>, <span class=\"number\">4</span>, <span class=\"number\">46</span>, <span class=\"number\">35</span>, <span class=\"number\">11</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>&#125;; </span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;排序前:&quot;</span>+ Arrays.toString(arr)); </span><br><span class=\"line\">\t<span class=\"comment\">// 排序前:[24, 7, 5, 48, 4, 46, 35, 11, 6, 2]</span></span><br><span class=\"line\">\t<span class=\"comment\">// 升序排序</span></span><br><span class=\"line\">\tArrays.sort(arr); System.out.println(<span class=\"string\">&quot;排序后:&quot;</span>+ Arrays.toString(arr));</span><br><span class=\"line\">\t<span class=\"comment\">// 排序后:[2, 4, 5, 6, 7, 11, 24, 35, 46, 48] </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Arrays.fill(数组名 ,开始位置 , 结束位置, 填入的值)</code> ：向数组中填充元素</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">        Arrays.fill(arr, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a:arr)</span><br><span class=\"line\">            System.out.print(a+<span class=\"string\">&quot; &quot;</span>);       </span><br><span class=\"line\">        System.out.println(); </span><br><span class=\"line\">        <span class=\"keyword\">int</span> array[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">6</span>];</span><br><span class=\"line\">            Arrays.fill(array, <span class=\"number\">100</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>, n=array.length; i &lt; n; i++) &#123;</span><br><span class=\"line\">                System.out.print(array[i]+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">50</span> <span class=\"number\">50</span> <span class=\"number\">50</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span> <span class=\"number\">10</span> </span><br><span class=\"line\"><span class=\"number\">100</span> <span class=\"number\">100</span> <span class=\"number\">100</span> <span class=\"number\">100</span> <span class=\"number\">100</span> <span class=\"number\">100</span> </span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Arrays.copy(原数组，原数组起始位置，新数组，新数组起始位置，复制长度)</code> ：数组的复制</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Arrayscopy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr1 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">6</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.arraycopy(arr, <span class=\"number\">0</span>, arr1, <span class=\"number\">1</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> str : arr1)&#123;</span><br><span class=\"line\">            System.out.print(str+“ ”);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Arrays.copyOf(数组名，扩容后长度)</code> ：数组扩容</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;         </span><br><span class=\"line\">       arr = Arrays.copyOf(arr,<span class=\"number\">8</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a:arr)</span><br><span class=\"line\">           System.out.print(a+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> </span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "java",
                "数组",
                "Arrays",
                "容器"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%9C%80%E9%AB%98%E5%B1%82%E7%88%B6%E7%B1%BB-Object%E7%B1%BB/",
            "url": "http://yoursite.com/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88%E6%9C%80%E9%AB%98%E5%B1%82%E7%88%B6%E7%B1%BB-Object%E7%B1%BB/",
            "title": "Java学习-详谈最高层父类-Object类",
            "date_published": "2020-08-25T13:05:52.356Z",
            "content_html": "<h1 id=\"1-object类\"><a class=\"markdownIt-Anchor\" href=\"#1-object类\">#</a> 1、Object 类</h1>\n<ol>\n<li>Object 类是所有 Java 类的根父类  （多层继承中的最高层的父类）</li>\n<li>如果在类的声明中未使用 extends 关键字指明其父类，则默认父类为 Object 类</li>\n</ol>\n<p>比如：public class Person { } 等价于：public class Person extends Object</p>\n<p>method（Object obj）{ }   // 表示该方法可以接收任何类作为其参数</p>\n<p>（当我们想给某个方法设置一个形参参数，可以确定传递的实参一定会是一个类，但不确定会是一个什么类也就是形参的类型不确定，这时候就可以把形参设置为 Object 类型。）</p>\n<h1 id=\"2-object类中的主要方法\"><a class=\"markdownIt-Anchor\" href=\"#2-object类中的主要方法\">#</a> 2、Object 类中的主要方法</h1>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200812153259688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"21对象相等判断方法equals\"><a class=\"markdownIt-Anchor\" href=\"#21对象相等判断方法equals\">#</a> 2.1 对象相等判断方法：equals（）</h2>\n<p>该方法比较的是对象是否相等（其实就是比较堆内地址）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Text</span></span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         Student s1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;Mary&quot;</span>,<span class=\"number\">21</span>);</span><br><span class=\"line\">         Student s2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;Mary&quot;</span>,<span class=\"number\">21</span>);</span><br><span class=\"line\">         System.out.println(s1.equals(s2));<span class=\"comment\">//输出一个boolean值  false</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出 false 表示 s1 和 s2 指向的不是同一个对象即他们指向的堆内地址是不同的<br>\n（关于 equals () 的详细说明在后面的 “==” 和 equals 的对比和使用中会具体阐述）</strong></p>\n<h2 id=\"22-hashcode方法\"><a class=\"markdownIt-Anchor\" href=\"#22-hashcode方法\">#</a> 2.2 hashCode（）方法</h2>\n<p><strong>hashCode 方法的作用：</strong> 对于包含容器类型的程序设计语言来说，基本上都会涉及到 hashCode。在 Java 中也一样，hashCode 方法的主要作用是为了配合基于散列的集合一起正常运行，这样的散列集合包括<strong> HashSet、HashMap 以及 HashTable</strong>。</p>\n<p>（在集合查找时，hashcode 能大大降低对象比较次数，提高查找效率！）</p>\n<p><strong>1、hashCode 返回的就是对象的存储地址吗？</strong></p>\n<p>这种看法是不全面的，确实有些 JVM 在实现时是直接返回对象的存储地址，但是大多时候并不是这样，只能说可能存储地址有一定关联</p>\n<p><strong>2、可以根据 hashCode 值判断两个对象是否相等吗？</strong></p>\n<p>肯定是不可以的，因为不同的对象可能会生成相同的 hashcode 值。虽然不能根据 hashcode 值判断两个对象是否相等，但是可以直接根据 hashcode 值判断两个对象不等，如果两个对象的 hashcode 值不等，则必定是两个不同的对象。如果要判断两个对象是否真正相等，必须通过 equals 方法。也就是说对于两个对象：</p>\n<ul>\n<li>如果调用 equals 方法得到的结果为 true，则两个对象的 hashcode 值必定相等；</li>\n<li>如果 equals 方法得到的结果为 false，则两个对象的 hashcode 值不一定不同；</li>\n<li>如果两个对象的 hashcode 值不等，则 equals 方法得到的结果必定为 false；</li>\n<li>如果两个对象的 hashcode 值相等，则 equals 方法得到的结果未知。</li>\n</ul>\n<p><strong>3、在有些情况下，在设计一个类的时候需要重写 equals 方法，但是千万要注意，在重写 equals 方法的同时也要重写 hashCode 方法。（比如在 String 类中就已经重写了这两个方法）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test01</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t     </span>&#123;</span><br><span class=\"line\">\t         String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">\t         String s2 = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">\t         System.out.println(s1.equals(s2));</span><br><span class=\"line\">\t         System.out.println(s1.hashCode());</span><br><span class=\"line\">\t         System.out.println(s2.hashCode());</span><br><span class=\"line\">\t     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"number\">96321</span></span><br><span class=\"line\"><span class=\"number\">96321</span></span><br></pre></td></tr></table></figure>\n<p>下面为一个实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">     String name;</span><br><span class=\"line\"> </span><br><span class=\"line\">     Student(<span class=\"keyword\">int</span> num, String name) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.num = num;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> num + <span class=\"string\">&quot;:&quot;</span> + name;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test01</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t         HashSet&lt;Student&gt; hs = <span class=\"keyword\">new</span> HashSet();</span><br><span class=\"line\">\t\t         hs.add(<span class=\"keyword\">new</span> Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;zhangsan&quot;</span>));</span><br><span class=\"line\">\t\t         hs.add(<span class=\"keyword\">new</span> Student(<span class=\"number\">2</span>, <span class=\"string\">&quot;lisi&quot;</span>));</span><br><span class=\"line\">\t\t         hs.add(<span class=\"keyword\">new</span> Student(<span class=\"number\">3</span>, <span class=\"string\">&quot;wangwu&quot;</span>));</span><br><span class=\"line\">\t\t         hs.add(<span class=\"keyword\">new</span> Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;zhangsan&quot;</span>));</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t\t         Iterator it = hs.iterator();</span><br><span class=\"line\">\t\t         <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">\t\t            System.out.println(it.next());</span><br><span class=\"line\">\t\t         &#125;</span><br><span class=\"line\">\t\t     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>运行结果：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span>:wangwu</span><br><span class=\"line\"><span class=\"number\">1</span>:zhangsan</span><br><span class=\"line\"><span class=\"number\">2</span>:lisi</span><br><span class=\"line\"><span class=\"number\">1</span>:zhangsan</span><br></pre></td></tr></table></figure>\n<p><strong>思考：</strong> 为什么 hashset 添加了相等的元素呢，这是不是和 hashset 的原则违背了呢？回答是：没有。因为在根据 hashcode () 对两次建立的 new Student (1,“zhangsan”) 对象进行比较时，<strong>生成的是不同的哈希码值，所以 hashset 把他当作不同的对象对待了，当然此时的 equals () 方法返回的值也不等。</strong></p>\n<p>为什么会生成不同的哈希码值呢？上面我们在比较 s1 和 s2 的时候不是生成了同样的哈希码吗？原因就在于我们自己写的 Student 类并<strong>没有重写自己的 hashcode () 和 equals () 方法</strong>，所以在比较时，是继承的 object 类中的 hashcode () 方法，<strong>而 object 类中的 hashcode () 方法是一个本地方法，比较的是对象的地址（引用地址），使用 new 方法创建对象，两次生成的当然是不同的对象了，造成的结果就是两个对象的 hashcode () 返回的值不一样，所以 Hashset 会把它们当作不同的对象对待。</strong></p>\n<p><strong>解决途径：在 Student 类中重写 hashCode（）和 equals 方法 ——&gt;</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">     String name;</span><br><span class=\"line\"> </span><br><span class=\"line\">     Student(<span class=\"keyword\">int</span> num, String name) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.num = num;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> num * name.hashCode();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">         Student s = (Student) o;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> num == s.num &amp;&amp; name.equals(s.name);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> num + <span class=\"string\">&quot;:&quot;</span> + name;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test01</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t         HashSet&lt;Student&gt; hs = <span class=\"keyword\">new</span> HashSet();</span><br><span class=\"line\">\t\t         hs.add(<span class=\"keyword\">new</span> Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;zhangsan&quot;</span>));</span><br><span class=\"line\">\t\t         hs.add(<span class=\"keyword\">new</span> Student(<span class=\"number\">2</span>, <span class=\"string\">&quot;lisi&quot;</span>));</span><br><span class=\"line\">\t\t         hs.add(<span class=\"keyword\">new</span> Student(<span class=\"number\">3</span>, <span class=\"string\">&quot;wangwu&quot;</span>));</span><br><span class=\"line\">\t\t         hs.add(<span class=\"keyword\">new</span> Student(<span class=\"number\">1</span>, <span class=\"string\">&quot;zhangsan&quot;</span>));</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t\t         Iterator it = hs.iterator();</span><br><span class=\"line\">\t\t         <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">\t\t            System.out.println(it.next());</span><br><span class=\"line\">\t\t         &#125;</span><br><span class=\"line\">\t\t     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>运行结果：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span>:wangwu</span><br><span class=\"line\"><span class=\"number\">2</span>:lisi</span><br><span class=\"line\"><span class=\"number\">1</span>:zhangsan</span><br></pre></td></tr></table></figure>\n<h2 id=\"23取得对象信息的方法tostring\"><a class=\"markdownIt-Anchor\" href=\"#23取得对象信息的方法tostring\">#</a> 2.3 取得对象信息的方法：toString（）</h2>\n<p>该方法在打印对象时被调用，将对象信息变为字符串返回，<strong>默认输出对象地址。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> zhukun;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> age=<span class=\"number\">20</span>;</span><br><span class=\"line\">     String name = <span class=\"string\">&quot;zhukun&quot;</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test01</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t         Student s = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">\t\t         System.out.println(<span class=\"string\">&quot;姓名：&quot;</span>+s.name+<span class=\"string\">&quot;年龄：&quot;</span>+s.age);<span class=\"comment\">//输出对象属性</span></span><br><span class=\"line\">\t\t         System.out.println(s);<span class=\"comment\">//直接输出对象信息</span></span><br><span class=\"line\">                 System.out.println(s.toString());<span class=\"comment\">//调用父类方法输出对象信息</span></span><br><span class=\"line\">\t\t         &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>运行结果：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">姓名：zhukun年龄：<span class=\"number\">20</span></span><br><span class=\"line\">zhukun.Student@<span class=\"number\">15d</span>b9742</span><br><span class=\"line\">zhukun.Student@<span class=\"number\">15d</span>b9742</span><br></pre></td></tr></table></figure>\n<p>上述结果看出编译器默认调用 toString () 方法输出对象，但<strong>输出的是对象的地址</strong>，我们并不能看懂它的意思。那么<strong>就要通过重写 Object 类的 toString () 方法来输出对象属性信息。</strong></p>\n<p>重写 toString 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> zhukun;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> age=<span class=\"number\">20</span>;</span><br><span class=\"line\">     String name = <span class=\"string\">&quot;zhukun&quot;</span>;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">    \t <span class=\"keyword\">return</span> <span class=\"string\">&quot;姓名：&quot;</span>+name+<span class=\"string\">&quot;，年龄：&quot;</span>+age;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test01</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t         Student s = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">\t\t         System.out.println(<span class=\"string\">&quot;姓名：&quot;</span>+s.name+<span class=\"string\">&quot;年龄：&quot;</span>+s.age);<span class=\"comment\">//输出对象属性</span></span><br><span class=\"line\">\t\t         System.out.println(s);<span class=\"comment\">//直接输出对象信息</span></span><br><span class=\"line\">                 System.out.println(s.toString());<span class=\"comment\">//调用父类方法输出对象信息</span></span><br><span class=\"line\">\t\t         &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">姓名：zhukun年龄：<span class=\"number\">20</span></span><br><span class=\"line\">姓名：zhukun，年龄：<span class=\"number\">20</span></span><br><span class=\"line\">姓名：zhukun，年龄：<span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"4-instanceof操作符\"><a class=\"markdownIt-Anchor\" href=\"#4-instanceof操作符\">#</a> 4、instanceof 操作符</h1>\n<p>x  instanceof A：检验 x 是否为类 A 的对象，返回值为 boolean 型</p>\n<ul>\n<li>要求 x 所属的类与类 A 必须是子类和父类的关系，否则编译错误。</li>\n<li>如果 x 属于类 A 的子类 B，x instanceof A 的值也为 true。<br>\n（就是检验某个对象是不是类 A 的子类）</li>\n</ul>\n<p><strong>（就是检验某个对象是不是类 A 的子类）</strong></p>\n",
            "tags": [
                "java",
                "面向对象",
                "继承",
                "Object类"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%EF%BC%88%E8%A6%86%E7%9B%96%EF%BC%89%E5%92%8C%E9%87%8D%E8%BD%BD/",
            "url": "http://yoursite.com/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%EF%BC%88%E8%A6%86%E7%9B%96%EF%BC%89%E5%92%8C%E9%87%8D%E8%BD%BD/",
            "title": "Java学习-方法的重写（覆盖）和重载",
            "date_published": "2020-08-25T13:03:42.978Z",
            "content_html": "<h1 id=\"1-方法重写overide\"><a class=\"markdownIt-Anchor\" href=\"#1-方法重写overide\">#</a> 1、方法重写（Overide）</h1>\n<h2 id=\"11什么是方法重写\"><a class=\"markdownIt-Anchor\" href=\"#11什么是方法重写\">#</a> 1.1 什么是方法重写？</h2>\n<p>在 Java 程序中，类的继承关系可以产生一个子类，子类继承父类，它具备了父类所有的特征，继承了父类所有的方法和变量。          子类可以定义新的特征，<strong>当子类需要修改父类的一些方法进行扩展，增大功能，程序设计者常常把这样的一种操作方法称为重写，也叫称为覆写或覆盖。</strong> 在 Java 中的继承中，<strong>子类既可以隐藏和访问父类的方法，也可以覆盖继承父类的方法</strong>。在 Java 中覆盖继承父类的方法就是通过方法的重写来实现的。</p>\n<p>方法的重写：子类中的方法与父类中继承的方法有<strong>完全相同</strong>的<strong>返回值类型、方法名、参数个数以及参数类型</strong></p>\n<h2 id=\"12重写规则\"><a class=\"markdownIt-Anchor\" href=\"#12重写规则\">#</a> 1.2 重写规则</h2>\n<p>重写遵循 **“两同一小一大”** 规则：</p>\n<p><strong>两同：</strong></p>\n<ul>\n<li>父类方法的参数列表必须完全与被子类重写的方法的参数列表相同，否则不能称其为重写而是重载。</li>\n<li>父类的返回类型必须与被子类重写的方法返回类型相同，否则不能称其为重写而是重载</li>\n</ul>\n<p><strong>一小：</strong></p>\n<ul>\n<li>子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等</li>\n</ul>\n<p>(在继承过程中如果父类当中的方法抛出异常，那么在子类中重写父类的该方法时，也要抛出异常，而且抛出的异常不能多于父类中抛出的异常 (可以等于父类中抛出的异常)。换句话说，重写方法一定不能抛出新的检查异常，或者比被重写方法声明更加宽泛的检查型异常。例如，父类的一个方法申明了一个检查异常 IOException，在重写这个方法时就不能抛出 Exception，只能抛出 IOException 的子类异常，可以抛出非检查异常。同样的道理，如果子类中创建了一个成员变量，而该变量和父类中的一个变量名称相同，称作变量重写或属性覆盖。)</p>\n<p><strong>一大：</strong> 子类方法的访问权限应比父类方法访问权限更大或相等（特殊情况：子类不能重写父类被声明为 private 权限的方法）</p>\n<h2 id=\"13重写注意事项\"><a class=\"markdownIt-Anchor\" href=\"#13重写注意事项\">#</a> 1.3 重写注意事项</h2>\n<ol>\n<li>\n<p>父类中的私有方法不能被重写，该方法对于子类是隐藏的，因此其子类无法访问该方法，也无法重写</p>\n</li>\n<li>\n<p>父类静态方法，子类也必须通过静态方法进行覆盖，即静态只能覆盖静态</p>\n</li>\n<li>\n<p>子类重写父类方法时，最好声明得一模一样</p>\n</li>\n<li>\n<p>如果子类中定义了一个与父类 private 方法具有相同的方法名、相同的形参列表、相同的返回值类型的方法，依然不是重写，只是在子类中重新定义了一个新的方法，所以该新方法不会受父类方法的任何限制。<br>\n例子：</p>\n</li>\n</ol>\n<p>例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Overide;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(name+<span class=\"string\">&quot;学习马克思列宁主义&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//基础班的学生是属于学生中一种</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseStudent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//BaseStudent类的构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseStudent</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);<span class=\"comment\">//指定调用父类构造函数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.study();<span class=\"comment\">//一般子类调用的是重写后的方法，要想调用父类的要用super关键字</span></span><br><span class=\"line\">        System.out.println(name+<span class=\"string\">&quot;学习javase..&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//就业班学生 也是属于普通学生中一种</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkStudent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造 函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WorkStudent</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.study();</span><br><span class=\"line\">        System.out.println(name+<span class=\"string\">&quot;学习javaee+android..&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">demo01</span> </span>&#123;</span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t    </span>&#123;</span><br><span class=\"line\">\t\t \t<span class=\"comment\">//创建一个基础班的学生</span></span><br><span class=\"line\">\t        BaseStudent s = <span class=\"keyword\">new</span> BaseStudent(<span class=\"string\">&quot;居东东&quot;</span>);</span><br><span class=\"line\">\t        s.study();</span><br><span class=\"line\">\t        <span class=\"comment\">//创建一个就业班的学生</span></span><br><span class=\"line\">\t        WorkStudent w = <span class=\"keyword\">new</span> WorkStudent(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">\t        w.study();</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">居东东学习马克思列宁主义</span><br><span class=\"line\">居东东学习javase..</span><br><span class=\"line\">张三学习马克思列宁主义</span><br><span class=\"line\">张三学习javaee+android..</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-方法重载overload\"><a class=\"markdownIt-Anchor\" href=\"#2-方法重载overload\">#</a> 2、方法重载（Overload）</h1>\n<h2 id=\"21什么是方法重载\"><a class=\"markdownIt-Anchor\" href=\"#21什么是方法重载\">#</a> 2.1 什么是方法重载</h2>\n<p>方法重载是让类以统一的方式处理不同类型数据的一种手段。调用方法时通过传递给它们的不同个数和类型的参数来决定具体使用哪个方法，这就是多态性。在方法重载时，方法之间需要存在一定的联系，因为这样可以提高程序的可读性，一般只重载功能相似的方法，构造方法也可以重载。当 Java 调用一个重载方法时，参数与调用参数匹配的方法被执行</p>\n<p><strong>方法重载：</strong> 在同一个类中，多个方法的方法名相同，但是参数列表不同。参数列表不同指的是参数个数、参数类型或者参数的顺序不同。</p>\n<h2 id=\"22重载规则\"><a class=\"markdownIt-Anchor\" href=\"#22重载规则\">#</a> 2.2 重载规则</h2>\n<ol>\n<li>在使用重载时只能通过不同的参数列表，必须具有不同的参数列表。</li>\n<li>不能通过访问权限、返回类型、抛出的异常进行重载。</li>\n<li>可以有不同的返回类型，只要参数列表不同就可以了。</li>\n<li>方法的异常类型和数目不会对重载造成影响。</li>\n<li>可以有不同的访问修饰符。</li>\n<li>可以抛出不同的异常。</li>\n</ol>\n<p>例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Overload;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">House</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> height;</span><br><span class=\"line\">    House ()&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;无参数构造函数&quot;</span>);</span><br><span class=\"line\">        height = <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    House(<span class=\"keyword\">int</span> i) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;房子高度为 &quot;</span> + i + <span class=\"string\">&quot; 米&quot;</span>);</span><br><span class=\"line\">        height = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">info</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;房子高度为 &quot;</span> + height + <span class=\"string\">&quot; 米&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">info</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s + <span class=\"string\">&quot;房子高度为 &quot;</span> + height + <span class=\"string\">&quot; 米&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">demo2</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        House h1 = <span class=\"keyword\">new</span> House();</span><br><span class=\"line\">        House h2 = <span class=\"keyword\">new</span> House(<span class=\"number\">6</span>);</span><br><span class=\"line\">        h1.info();</span><br><span class=\"line\">        h1.info(<span class=\"string\">&quot;我的&quot;</span>);</span><br><span class=\"line\">        h2.info();</span><br><span class=\"line\">        h2.info(<span class=\"string\">&quot;你的&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">无参数构造函数</span><br><span class=\"line\">房子高度为 <span class=\"number\">6</span> 米</span><br><span class=\"line\">房子高度为 <span class=\"number\">4</span> 米</span><br><span class=\"line\">我的房子高度为 <span class=\"number\">4</span> 米</span><br><span class=\"line\">房子高度为 <span class=\"number\">6</span> 米</span><br><span class=\"line\">你的房子高度为 <span class=\"number\">6</span> 米</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-方法重写和方法重载的区别\"><a class=\"markdownIt-Anchor\" href=\"#3-方法重写和方法重载的区别\">#</a> 3、方法重写和方法重载的区别</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200810173239780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n",
            "tags": [
                "java",
                "面向对象",
                "重写",
                "重载"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/",
            "url": "http://yoursite.com/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/",
            "title": "Java学习-访问权限控制",
            "date_published": "2020-08-25T13:03:42.975Z",
            "content_html": "<h1 id=\"1-为什么要有访问权限控制\"><a class=\"markdownIt-Anchor\" href=\"#1-为什么要有访问权限控制\">#</a> 1、为什么要有访问权限控制？</h1>\n<p><strong>访问控制 (或隐藏具体实现) 与 “最初的实现并不恰当” 有关。</strong><br>\n所有优秀的作者，包括那些编写软件的程序员，都清楚其著作的某些部分直至重新创作的时候才变得完美，有时甚至要反复重写多次。如果你把一个代码段放到了某个位置，等过一会儿回头再看时，有可能会发现有更好的方式去实现相同的功能。这正是重构的原动力之一，重构即重写代码，以使得它更可读、更易理解，并因此而更具可维护性。但是，在这种修改和完善代码的愿望之下，也存在着巨大的压力。通常总是会有一些消费者 (客户端程序员) 需要你的代码在某些方面保持不变。因此你想改变代码，而他们却想让代码保持不变。由此而产生了在面向对象设计中需要考虑的一一个基本问题:“如何把变动的事物与保持不变的事物区分开来”。<br>\n这对<strong>类库 (library)</strong> 而言尤为重要。该类库的消费者必须依赖他所使用的那部分类库，并且能够知道如果类库出现了新版本，他们并不需要改写代码。从另一个方面来说，类库的开发者必须有权限进行修改和改进，并确保客户代码不会因为这些改动而受到影响。 这一目标可以通过约定来达到。例如，类库开发者必须同意在改动类库中的类时不得删除任何现有方法，因为那样会破坏客户端程序员的代码。但是，与之相反的情况会更加棘手。在有域 (即数据成员) 存在的情况下，类库开发者要怎样才能知道究竟都有哪些域已经被客户端程序员所调用了呢？这对于方法仅为类的实现的一部分，因此并不想让客户端程序员直接使用的情况来说同样如此。如果程序开发者想要移除旧的实现而要添加新的实现时，结果将会怎样呢？改动任何一个成员都有可能破坏客户端程序员的代码。于是类库开发者会手脚被缚，无法对任何事物进行改动。<br>\n为了解决这一问题，Java 提供了<strong>访问权限修饰词</strong>，以供类库开发人员向客户端程序员指明<br>\n哪些是可用的，哪些是不可用的。访向权限控制的等级，从最大权限到最小权限依次为:</p>\n<p><strong>public、protected、包访问权限 (没有关键词称为 &quot;缺省&quot;) 和 private</strong></p>\n<p>构件类库的概念以及对于谁有权取用该类库构件的控制问题都还是不完善的。其中仍旧存在着如何将构件捆绑到一个内聚的类库单元中的问题。对于这一点，Java 用<strong>关键字 package</strong> 加以控制，而访问权限修饰词会因类是存在于一个相同的包，还是存在于一个单独的包而受到影响。</p>\n<h1 id=\"2-包库单元\"><a class=\"markdownIt-Anchor\" href=\"#2-包库单元\">#</a> 2、包：库单元</h1>\n<p><strong>包内包含有一组类，它们在单一的名字空间之下被组织到一起。</strong></p>\n<pre><code>  例如，在Java的标准发布中有一个工具库，它被组织在java.util名字空间下。java.util中有一个叫做ArrayList的类，使用ArrayList的一种方式是用其全名java.util.ArrayList来指定。\n</code></pre>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">F</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        java.util.ArrayList list = <span class=\"keyword\">new</span> java.util.ArrayList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就使得程序变得很冗长，因此可以转而用 import 关键字，如果想要导入单个的类，可以在 import 语句中命名该类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">F</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ArrayList list = <span class=\"keyword\">new</span> java.util.ArrayList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，就可以不用限定地使用 ArrayList 了。但是，这样做 java.util 中的其他类仍旧是都不可以使用的。要想导入其中的所有类，只需要使用 &quot;*&quot;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*</span><br></pre></td></tr></table></figure>\n<p><strong>Java 常用的类库：</strong></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200808223508652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>注意：</strong><br>\n当编写一个 <strong>.Java</strong> 源代码文件时，此文件通常被称为<strong>编译单元</strong> (有时也被称为转译单元)。每个编译单元都必须有一个后缀名.java, 而在编译单元内则可以有一个 public 类，<strong>该类的名称必须与文件的名称相同</strong> (包括大小写，但不包括文件的后缀名.java)。<strong>每个编译单元只能有一一个 public 类，否则编译器就不会接受</strong>。如果在该编译单元之中还有额外的类的话，那么在包之外<br>\n的世界是无法看见这些类的，这是因为它们不是 public 类，而且它们主要用来为主 publice 类提供<br>\n支持。</p>\n<p>比如在 test 包下的 test.java 文件（编译单元）里面只能有一个和文件名称相同的 public 类也就是里面的 test 类 Person 类就不能加 public 限定符了。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200808222558691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n同一个 test 包名下的类 test02 可以调用 Person 类<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200808222645339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n在另一个 test03 包名下的类 test03 就不能调用 Person 类了即使导入了包也不能，因为它不是 public 类型的<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200808222651248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"3-java访问权限修饰词\"><a class=\"markdownIt-Anchor\" href=\"#3-java访问权限修饰词\">#</a> 3、Java 访问权限修饰词</h1>\n<ul>\n<li>\n<p>public：接口访问权限（无论是谁，无论在哪都可以访问）<br>\n使用关键字 public，就意味着 public 之后紧跟着的成员声明自己对每个人都是有用的，尤其是使用类库的客户程序员更是如此。</p>\n</li>\n<li>\n<p>protected：继承访问权限（子类可以访问父类的 public 成员和 protected 成员，但不可以访问父类的 private 成员）</p>\n</li>\n<li>\n<p>（缺省）：包访问权限（类内部和同一个包里面的类可以访问（缺省）成员）<br>\n因为（缺省）没有修饰词，形式如 int age ，也就是前面没有任何修饰词</p>\n</li>\n<li>\n<p>private: 你无法访问（除了包含该类成员的类之外，其他任何类都无法访问这个成员）</p>\n</li>\n</ul>\n<p>为了方便理解和比较准备了以下两张图片<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200808223740311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200808223806321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n",
            "tags": [
                "java",
                "类",
                "面向对象",
                "访问权限"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E7%BB%A7%E6%89%BF%E3%80%81super%E5%85%B3%E9%94%AE%E5%AD%97/",
            "url": "http://yoursite.com/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E7%BB%A7%E6%89%BF%E3%80%81super%E5%85%B3%E9%94%AE%E5%AD%97/",
            "title": "Java学习-继承、super关键字",
            "date_published": "2020-08-25T13:03:31.408Z",
            "content_html": "<h1 id=\"1-引例\"><a class=\"markdownIt-Anchor\" href=\"#1-引例\">#</a> 1、引例</h1>\n<p>假如现在有四个类它们的成员属性分别为：</p>\n<ul>\n<li>学生类：姓名，性别，年龄，学校</li>\n<li>教师类：姓名，性别，年龄，学科</li>\n<li>工人类：姓名，性别，年龄，工种</li>\n<li>农民类：姓名，性别，年龄，收入</li>\n</ul>\n<p>对于上面的四个类我们在实际写代码的时候会发现，发我在<strong>重复性</strong>地写一些代码比如（姓名、性别、年龄）是这四个类<strong>共有</strong>的<strong>成员属性</strong>。这时候我们就可以建一个 person 类把（姓名，性别，年龄）作为它的成员属性，而上面四个类通过继承这个 person 类实现对共有的成员属性的调用以提高代码的复用性</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200810094026212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"2-继承\"><a class=\"markdownIt-Anchor\" href=\"#2-继承\">#</a> 2、继承</h1>\n<h2 id=\"21-概述\"><a class=\"markdownIt-Anchor\" href=\"#21-概述\">#</a> 2.1 概述</h2>\n<p>继承是 java 面向对象编程技术的一块基石，因为它允许创建分等级层次的类。继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p>\n<ul>\n<li>\n<p>继承是面向对象思想的三大特性之一，使类与类之间产生特殊的关系，即 is-a 关系。</p>\n</li>\n<li>\n<p>继承是从已有类中派生出新的类，新的类能吸收已有类的属性和方法，并且能拓展新的属性和行为。</p>\n</li>\n<li>\n<p>在 Java 中使用 extends 关键字表示继承，语法表示为: class 子类 extends 父类 {}</p>\n</li>\n<li>\n<p>子类被称为派生类，父类又被称为超类。</p>\n</li>\n<li>\n<p>子类继承父类，表示子类是一种特殊的父类，子类拥有父类的非 private 属性和方法，并且子类可以拓展具有父类所没有的一些属性和方法。</p>\n</li>\n<li>\n<p>子类即使不扩展父类，也能维持拥有父类的操作。</p>\n</li>\n</ul>\n<h2 id=\"22优缺点\"><a class=\"markdownIt-Anchor\" href=\"#22优缺点\">#</a> 2.2 优缺点</h2>\n<p>继承的好处是：</p>\n<ul>\n<li>提高了代码的复用性</li>\n<li>提高了代码的维护性</li>\n<li>让类与类之间产生了关系，是多态的前提</li>\n</ul>\n<p>继承的缺点是：</p>\n<ul>\n<li>增加了耦合性（OOP 思想开发原则：高内聚，低耦合    耦合：类与类之间的关系  内聚：自身完成事情的能力）</li>\n</ul>\n<h2 id=\"23java继承的类型\"><a class=\"markdownIt-Anchor\" href=\"#23java继承的类型\">#</a> 2.3Java 继承的类型</h2>\n<ul>\n<li>Java 只支持单继承，不支持多重继承</li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200810101811626.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200810102402866.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n多重继承会存在安全隐患，因为当继承的多个类都存在相同的属性或方法体不同的方法，子类进行调用时，就会产生不知道该调用哪一个类中的方法的情况</p>\n<ul>\n<li>Java 支持继承体系</li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200810102503260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"3-关键字\"><a class=\"markdownIt-Anchor\" href=\"#3-关键字\">#</a> 3、关键字</h1>\n<h2 id=\"31super关键字\"><a class=\"markdownIt-Anchor\" href=\"#31super关键字\">#</a> 3.1super 关键字</h2>\n<p><strong>我们可以通过 super 关键字来实现对父类成员的访问，用来引用当前对象的父类。</strong></p>\n<p>两种方法：</p>\n<p>1、用在子类的构造方法里（初始化用），主要是调用父类的默认构造方法，如果父类有不止一个构造方法，可以通过 super 指定具体的构造函数，比如 super (paras)；</p>\n<p>注意：super 表示当前类的父类，super () 调用的是父类默认的构造方法，即这样可以对父类进行初始化。如何没有对父类进行初始化，当子类调用父类的方法时，便会从逻辑上出现错误，因为没对父类初始化，父类的方法和属性便没有内存空间。</p>\n<p>2、用在子类里调用隐藏或重写的属性或行为，比如 super.onDestroy () 等等</p>\n<h2 id=\"32super与this关键字的区别\"><a class=\"markdownIt-Anchor\" href=\"#32super与this关键字的区别\">#</a> 3.2super 与 this 关键字的区别</h2>\n<ol>\n<li>super（参数）：调用基类中的某一个构造函数（应该为构造函数中的第一条语句）</li>\n<li>this（参数）：调用本类中另一种形成的构造函数（应该为构造函数中的第一条语句）</li>\n<li>super:　它引用当前对象的直接父类中的成员（用来访问直接父类中被隐藏的父类中成员数据或函数，基类与派生类中有相同成员定义时如：super. 变量名 super. 成员函数据名（实参）</li>\n<li>this：它代表当前对象名（在程序中易产生二义性之处，应使用 this 来指明当前对象；如果函数的形参与类中的成员数据同名这时需用 this 来指明成员变量名）</li>\n<li>调用 super () 必须写在子类构造方法的第一行，否则编译不通过。每个子类构造方法的第一条语句，都是隐含地调用 super ()，如果父类没有这种形式的构造函数，那么在编译的时候就会报错。</li>\n<li>super () 和 this () 类似，区别是，super () 从子类中调用父类的构造方法，this () 在同一类内调用其它方法。</li>\n<li>super () 和 this () 均需放在构造方法内第一行。</li>\n<li>尽管可以用 this 调用一个构造器，但却不能调用两个。</li>\n<li>this 和 super 不能同时出现在一个构造函数里面，因为 this 必然会调用其它的构造函数，其它的构造函数必然也会有 super 语句的存在，所以在同一个构造函数里面有相同的语句，就失去了语句的意义，编译器也不会通过。</li>\n<li>this () 和 super () 都指的是对象，所以，均不可以在 static 环境中使用。包括：static 变量，static 方法，static 语句块。</li>\n<li>从本质上讲，this 是一个指向本对象的指针，然而 super 是一个 Java 关键字。</li>\n</ol>\n<h1 id=\"4-继承需要注意的几个问题\"><a class=\"markdownIt-Anchor\" href=\"#4-继承需要注意的几个问题\">#</a> 4、继承需要注意的几个问题</h1>\n<h2 id=\"41成员变量和方法\"><a class=\"markdownIt-Anchor\" href=\"#41成员变量和方法\">#</a> 4.1 成员变量和方法</h2>\n<p>1、子类只能继承父类的所有非私有的成员变量和方法。可以继承 public protected 修饰的成员，不可以继承 private 修饰的。<br>\n2、但是子类可以通过父类中提供的 public 的 setter 和 getter 方法进行间接的访问和操作 private 的属性<br>\n 3、对于子类可以继承父类中的成员变量和成员方法，如果子类中出现了和父类同名的成员变量和成员方法时，父类的成员变量会被隐藏，父类的成员方法会被覆盖。需要使用父类的成员变量和方法时，就需要使用 super 关键字来进行引用。           （隐藏是针对成员变量和静态方法，覆盖是针对普通方法。）</p>\n<p>4、当创建一个子类对象时，不仅会为该类的实例变量分配内存，也会为它从父类继承得到的所有实例变量分配内存，即使子类定义了与父类中同名的实例变量，也依然会为父类中定义的、被隐藏的变量分配内存。</p>\n<p>5、如果子类中的实例变量被私有了 ，其父类中的同名实例变量没有被私有，那么子类对象就无法直接调用该变量，但可以通过先将对象变量强制向上转型为父类型，在通过该对象引用变量来访问那个实例变量，就会得到的是父类中的那个实例变量。                                                                                                                                                                                          (补充：什么是向上转型和向下转型？)</p>\n<h2 id=\"42构造器\"><a class=\"markdownIt-Anchor\" href=\"#42构造器\">#</a> 4.2 构造器</h2>\n<p>1、子类不能继承获得父类的构造方法，但是可以通过 super 关键字来访问父类构造方法。</p>\n<p>2、在一个构造器中调用另一个重载构造器使用 this 调用完成，在子类构造器中调用父类构造器使用 super 调用来完成。</p>\n<p>3、super 和 this 的调用都必须是在第一句，否则会产生编译错误，this 和 super 只能存在一个。不能进行递归构造器调用，即多个构造器之间互相循环调用。</p>\n<p>4、如果父类有无参构造时，所有构造方法（包含任意有参构造）自动默认都会访问父类中的空参构造方法。（自带 super ();）</p>\n<p>5、因为继承的目的是子类获取和使用父类的属性和行为，所以子类初始化之前，一定要先完成父类数据的初始化。</p>\n<p>6、在 Java 中，每个类都会默认继承 Object 超类，所以每一个构造方法的第一条默认语句都是 super ()</p>\n<p>7、如果父类没有无参构造，反而有其他的有参构造方法时，子类继承父类后，子类必须显式的创建构造器，不论子类的构造器是否和父类构造器中参数类型是否一致，都必须在子类的构造器中显式的通过 super 关键字调用和父类构造器相应参数的构造方法，否则编译都通不过。</p>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">     System.out.println(age);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">super</span>(age);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">super</span>(<span class=\"number\">10</span>); <span class=\"comment\">//必须调用父类的有参构造</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;子类可以创建其他类型构造器，但是必须显式的用super调用父类构造器&quot;</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以使用 this 先调用子类中的构造方法，再间接调用父类中的有参构造方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExtendTest1</span>  </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;父类有参构造&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">super</span>(age);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;子类有参构造&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>(<span class=\"number\">10</span>); <span class=\"comment\">//可以使用this先调用子类中的有参构造，从而间接调用父类中的有参构造</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;子类无参构造&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 this，执行顺序结果为：先调用了子类中无参构造，此无参构造会接着调用子类中的有参构造，又接着调用父类中的有参构造，此时首先执行完毕了父类有参构造，接着子类有参构造执行完毕，最后子类无参构造才执行完毕。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父类有参构造</span><br><span class=\"line\">子类有参构造</span><br><span class=\"line\">子类无参构造</span><br></pre></td></tr></table></figure>\n<p>以下这种是错误的：（因为当父类中没有无参构造器时，父类中没有这种类型的构造方法）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">super</span>();</span><br><span class=\"line\"> &#125; <span class=\"comment\">//错误的，因为当父类中没有无参构造器时，父类中没有这种类型的构造方法</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">super</span>(age);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name ,<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">     System.out.println(name+age);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">     System.out.println(age);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下这种正确：（因为当父类中没有无参构造器时，子类中的构造方法的类型在父类中有）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">//因为当父类中没有无参构造器时，子类中的构造方法的类型在父类中有</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">super</span>(age);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name ,<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">     System.out.println(name+age);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">     System.out.println(age);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//因为当父类中没有无参构造器时，子类中的构造方法的类型在父类中有</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name ,<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">super</span>(name,age);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">super</span>(age);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name ,<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">     System.out.println(name+age);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">     System.out.println(age);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结论：当父类中没有无参构造器时，子类继承父类，子类中的构造器方法类型可以和父类中的构造器不同，但是必须每个构造器都显式的使用 super 关键字调用父类中的某个有参构造器，也可以使用 this 调用子类中的某个有参构造器，但这个有参构造器必须通过 super 访问父类中的有参构造器。</p>\n<h2 id=\"43继承的执行顺序问题\"><a class=\"markdownIt-Anchor\" href=\"#43继承的执行顺序问题\">#</a> 4.3 继承的执行顺序问题</h2>\n<p>1、继承体系中的构造器执行顺序：</p>\n<ul>\n<li>当调用子类构造器实例化子类对象时，父类构造器总是在子类构造器之前执行。</li>\n<li>创建任何对象总是从该类所在继承树最顶层类的构造器开始执行，然后依次向下执行，最后才执行本类的构造器。如果父类通过 this 调用了同类中的重载构造器，就会依次执行此父类的多个构造器。</li>\n</ul>\n<p>2、继承体系中的静态域执行顺序：</p>\n<ul>\n<li>\n<p>当调用子类构造器实例化子类对象时，父类优先于子类进行加载到内存，所以会先执行父类中的静态域</p>\n</li>\n<li>\n<p>从该类所在继承树最顶层类开始加载，并执行其静态域，依次向下执行，最后执行本类。</p>\n</li>\n<li>\n<p>静态域优先于 main 方法，优先于构造器执行</p>\n</li>\n</ul>\n<p>3、父类和子类中<strong>都有静态代码块和构造代码块</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test2_Extends</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;主类静态块&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Zi z = <span class=\"keyword\">new</span> Zi();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fu</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;静态代码块Fu&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;构造代码块Fu&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Fu</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;构造方法Fu&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Zi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fu</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;静态代码块Zi&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;构造代码块Zi&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Zi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;构造方法Zi&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主类静态块</span><br><span class=\"line\">静态代码块Fu</span><br><span class=\"line\">静态代码块Zi</span><br><span class=\"line\">构造代码块Fu</span><br><span class=\"line\">构造方法Fu</span><br><span class=\"line\">构造代码块Zi</span><br><span class=\"line\">构造方法Zi</span><br></pre></td></tr></table></figure>\n<p>执行顺序分析：</p>\n<p>1、主类 Test2_Extends 先加载到内存，静态域优先于 main 方法执行，先输出了主类静态块，其中的 main 方法入栈执行，main 方法中创建了子类对象<br>\n 2、子类对象创建过程中，父类和子类都加载到内存中，并且 Fu.class 优先于 Zi.class 加载，父类中的静态域先执行后，再执行子类中的静态域，此时会第一个输出：静态代码块 Fu，第二个输出：静态代码块 Zi<br>\n3、创建对象时进入子类的构造器，因为 Java 是分层初始化的，所以会先初始化父类再初始化子类，子类构造器会自动默认先执行父类的构造器，因为构造代码块优先于构造方法执行，所以此时就会先执行父类的构造代码块后，再执行父类的构造方法。所以第三个输出：构造代码块 Fu，第四个输出：构造方法 Fu<br>\n4、Fu 类初始化结束后，子类初始化，第五个输出的是：构造代码块 Zi，第六个输出：构造方法 Zi</p>\n<h2 id=\"44继承破坏父类封装性问题\"><a class=\"markdownIt-Anchor\" href=\"#44继承破坏父类封装性问题\">#</a> 4.4 继承破坏父类封装性问题</h2>\n<p>1、继承严重破坏了父类的封装性，每个类都应该它内部信息和实现细节，而只暴露必要的方法给其它类使用。但在继承关系中，子类可以直接访问父类的成员变量（内部信息）和方法， 从而造成子类和父类的严重耦合。</p>\n<p>2、父类的实现细节对其子类不再透明，从而导致子类可以恶意篡改父类的方法</p>\n<p><strong>改进方法：</strong></p>\n<ul>\n<li>尽量隐藏父类的内部数据。</li>\n<li>尽量把父类的所有成员变量都设置成 private 访问类型，不要让子类直接访问父类的成员变量</li>\n<li>不要让子类随意访问、修改父类的方法</li>\n<li>父类中那些仅为辅助其他的工具方法，应该使用 private 修饰，让子类无法访问方法；</li>\n<li>如果父类中的方法需要被外部类调用，则必须以 public 修饰，但又不想让子类重写，就可以使用 final 修饰符。</li>\n<li>如果希望父类的某个方法被子类重写，但不希望被其他类自由访问，则可以使用 protected 来修饰方法。</li>\n<li>尽量不要在父类构造器中调用将要被子类重写的方法。</li>\n</ul>\n<p>查看下面例子说明在父类构造器中调用被子类重写的方法引发的错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> extend;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Base</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;父类构造器&quot;</span>);</span><br><span class=\"line\">        test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span>           <span class=\"comment\">// ①号test()方法</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;将被子类重写的方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sub</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Sub</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;子类构造器&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name=<span class=\"string\">&quot;aa&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span>         <span class=\"comment\">// ②号test()方法</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;子类test&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;子类重写父类的方法，&quot;</span></span><br><span class=\"line\">            + <span class=\"string\">&quot;其name字符串长度&quot;</span> + name.length());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 下面代码会引发空指针异常</span></span><br><span class=\"line\">        Sub s = <span class=\"keyword\">new</span> Sub();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父类构造器</span><br><span class=\"line\">子类test</span><br><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.NullPointerException</span><br></pre></td></tr></table></figure>\n<p><strong>分析：</strong><br>\n当创建 Sub 对象时，先执行其父类构造器，如果父类构造器调用了被子类重写覆盖的方法，就会调用被子类重写后的②号 test () 方法，子类的 test 方法调用了子类的实例变量 name，父类直接调用的子类的 test 方法，此时子类还未初始化，还未调用子类构造器，实例变量 name 还未被指定初始值，仍然为默认值 null，所以引发了空指针异常。</p>\n<h2 id=\"45何时适合用继承\"><a class=\"markdownIt-Anchor\" href=\"#45何时适合用继承\">#</a> 4.5 何时适合用继承</h2>\n<ul>\n<li>子类需要额外增加属性，而不仅仅是属性值的改变。</li>\n<li>子类需要增加自己独有的行为方式（包括增加新的方法或重写父类的方法）。</li>\n</ul>\n",
            "tags": [
                "java",
                "面向对象",
                "继承",
                "super关键字"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E6%80%81%E6%80%A7/",
            "url": "http://yoursite.com/2020/08/25/Java%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E6%80%81%E6%80%A7/",
            "title": "Java学习-多态性",
            "date_published": "2020-08-25T13:03:31.402Z",
            "content_html": "<h1 id=\"1-面向对象三特征之一多态性\"><a class=\"markdownIt-Anchor\" href=\"#1-面向对象三特征之一多态性\">#</a> 1、面向对象三特征之一：多态性</h1>\n<p>1、多态性，是面向对象的最重要的概念，在 java 中有两种体现:</p>\n<ol>\n<li>方法的重载（overload）和重写（override）</li>\n<li>对象的多态性 ------ 可以直接应用在抽象类和接口上</li>\n</ol>\n<p>2、Java 引用变量有两个类型：编译时的类型和运行时的类型：</p>\n<ul>\n<li>编译时类型由声明该变量时使用的类型决定。</li>\n<li>运行时类型由实际赋给该变量的对象决定。</li>\n</ul>\n<p>若编译时类型和运行时类型不一致，就出现多态（Polymorphism）------- 这个多态就是对象的多态</p>\n<p><strong>子类对象的实例化过程：</strong></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200812095406924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"2-对象的多态\"><a class=\"markdownIt-Anchor\" href=\"#2-对象的多态\">#</a> 2、对象的多态</h1>\n<h2 id=\"21在java中子类的对象可以替代父类的的对象使用\"><a class=\"markdownIt-Anchor\" href=\"#21在java中子类的对象可以替代父类的的对象使用\">#</a> 2.1 在 Java 中，子类的对象可以替代父类的的对象使用：</h2>\n<ul>\n<li>一个变量只能有一种确定的数据类型</li>\n<li>一个引用类型变量可能指向（引用）多种不同类型的对象</li>\n</ul>\n<p>Person  p = new Student();<br>\nPerson  e = new Student ();//Person 类型的变量 e，指向 Student 类型的对象<br>\n子类可看做是特殊的父类，所以<strong>父类类型的引用可以指向子类的对象：</strong> 向上转型（upcasting）（把子类的对象给父类类型的变量引用）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">p = <span class=\"keyword\">new</span> Student();</span><br></pre></td></tr></table></figure>\n<p>问：上面代码的当前这个引用对象 p 引用的是哪个类实例对象？答案是：Student 类实例对象<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200812103553841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"22成员变量属性的调用\"><a class=\"markdownIt-Anchor\" href=\"#22成员变量属性的调用\">#</a> 2.2 成员变量（属性）的调用：</h2>\n<p>一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就不能再访问子类中添加拓展的成员变量和方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student m = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">m.school = <span class=\"string\">&quot;csdn&quot;</span>;<span class=\"comment\">//合法，Student类中有school成员变量</span></span><br><span class=\"line\">Person e = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">e.school = <span class=\"string\">&quot;csdn&quot;</span>;<span class=\"comment\">//非法，Person类没有school成员变量</span></span><br></pre></td></tr></table></figure>\n<p><strong>成员变量是在编译时确定的，编译时 e 为 Person 类型，没有 school 成员变量，因而编译出错。</strong></p>\n<h2 id=\"23虚拟方法的调用子类中含有父类的重写方法\"><a class=\"markdownIt-Anchor\" href=\"#23虚拟方法的调用子类中含有父类的重写方法\">#</a> 2.3 虚拟方法的调用（子类中含有父类的重写方法）：</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showInfo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;以下是Person类的showInfo方法：&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setInfo</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String school;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showInfo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;以下是Student类的showInfo方法：&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>正常的方法调用：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">p.showInfo();</span><br><span class=\"line\">Student s = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">s.showInfo();</span><br></pre></td></tr></table></figure>\n<p><strong>虚拟方法调用（多态情况下）：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person e = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">e.showInfo(); <span class=\"comment\">//调用的是Student类的showInfo()方法</span></span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200812113006375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>动态绑定：</strong><br>\n方法的调用是在运行时确定的，编译时 e 为 Person 类型，但运行时 e 为 Student 类型，所以调用的是 Student 类的 showInfo () 方法</p>\n<h1 id=\"3-小结\"><a class=\"markdownIt-Anchor\" href=\"#3-小结\">#</a> 3、小结</h1>\n<p><strong>前提：</strong></p>\n<ul>\n<li>需要存在继承或者实现关系</li>\n<li>需要覆盖操作</li>\n</ul>\n<p><strong>成员方法：</strong></p>\n<ul>\n<li>编译时：要查看引用变量所属的类中是否有所调用的方法<br>\n运行时：调用实际对象所属的类中的重写方法</li>\n</ul>\n<p><strong>成员变量：</strong></p>\n<ul>\n<li>不具备多态性，只看引用变量所属的类</li>\n</ul>\n",
            "tags": [
                "java",
                "面向对象",
                "多态性"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%A7%A3%E6%A0%88-%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/",
            "url": "http://yoursite.com/2020/08/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%A7%A3%E6%A0%88-%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/",
            "title": "数据结构（Java实现）-详解栈（实现中缀表达式计算器、逆波兰计算器   中缀表达式转逆波兰表达式过程）",
            "date_published": "2020-08-23T08:04:57.561Z",
            "content_html": "<h1 id=\"1-栈stack的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1-栈stack的介绍\">#</a> 1、栈（stack）的介绍：</h1>\n<ol>\n<li>栈是一个先入后出、后入先出的<strong>有序列表。</strong></li>\n<li>栈是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端为变化端，称为<strong>栈顶（Top）</strong>，另一端为固定端，称为<strong>栈底（Bottom）</strong>。</li>\n<li>根据栈的定义可知，最先放入栈中的元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除     （类似于子弹匣）</li>\n</ol>\n<h2 id=\"11例如\"><a class=\"markdownIt-Anchor\" href=\"#11例如\">#</a> 1.1 例如</h2>\n<p>1、入栈：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818202743623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 2、出栈：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081820280271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"12栈的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#12栈的应用场景\">#</a> 1.2 栈的应用场景</h2>\n<ol>\n<li>子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。</li>\n<li>处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。</li>\n<li>表达式的转换 [中缀表达式转后缀表达式] 与求值 (实际解决)。</li>\n<li>二叉树的遍历。</li>\n<li>图形的深度优先 (depth 一 first) 搜索法。</li>\n</ol>\n<h2 id=\"13栈的快速入门\"><a class=\"markdownIt-Anchor\" href=\"#13栈的快速入门\">#</a> 1.3 栈的快速入门</h2>\n<p>用数组模拟栈的使用，由于栈是一种有序列表， 当然可以使用数组的结构来储存栈的数据内容， 下面我们就用数组模拟栈的出栈，入栈等操作。<br>\n<strong>实现思路和示意图：</strong></p>\n<ol>\n<li>使用数组来模拟栈</li>\n<li>定义一个 top 来表示栈顶，初始化为 - 1</li>\n<li><strong>入栈</strong>的操作，当数据加入到栈是，top++；stack [top] = data；</li>\n<li><strong>出栈</strong>的操作，int value = stack [top];top–; return value;<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818203832795.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>代码：</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStackDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一下ArrayStack 是否正确</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//先创建一个ArrayStack对象-&gt;表示栈</span></span><br><span class=\"line\">\t\tArrayStack stack = <span class=\"keyword\">new</span> ArrayStack(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> key;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> loop = <span class=\"keyword\">true</span>; <span class=\"comment\">//控制是否退出菜单</span></span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(loop) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;1: 遍历栈中的所有元素&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;2: 表示添加数据到栈(入栈)&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;3: 表示从栈取出数据(出栈)&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;4: 退出程序&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入你的选择&quot;</span>);</span><br><span class=\"line\">\t\t\tkey = scanner.nextInt();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (key) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tstack.list();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入一个数&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> value = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\tstack.push(value);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> res = stack.pop();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.printf(<span class=\"string\">&quot;出栈的数据是 %d\\n&quot;</span>, res);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(e.getMessage());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\t\tscanner.close();</span><br><span class=\"line\">\t\t\t\tloop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;程序退出~~~&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义一个 ArrayStack 表示栈</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStack</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize; <span class=\"comment\">// 栈的大小</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] stack; <span class=\"comment\">// 数组，数组模拟栈，数据就放在该数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top = -<span class=\"number\">1</span>;<span class=\"comment\">// top表示栈顶，初始化为-1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">\t\tstack = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"keyword\">this</span>.maxSize];<span class=\"comment\">//初始化这个数组</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//栈满</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> top == maxSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//栈空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> top == -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//入栈-push</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断栈是否满</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isFull()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;栈满&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttop++;</span><br><span class=\"line\">\t\tstack[top] = value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//出栈-pop, 将栈顶的数据返回</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断栈是否空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//抛出异常</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;栈空，没有数据~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value = stack[top];</span><br><span class=\"line\">\t\ttop--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;栈空，没有数据~~&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//需要从栈顶开始显示数据</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = top; i &gt;= <span class=\"number\">0</span> ; i--) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;stack[%d]=%d\\n&quot;</span>, i, stack[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>测试：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">请输入一个数</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">请输入一个数</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">请输入一个数</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">stack[<span class=\"number\">2</span>]=<span class=\"number\">8</span></span><br><span class=\"line\">stack[<span class=\"number\">1</span>]=<span class=\"number\">6</span></span><br><span class=\"line\">stack[<span class=\"number\">0</span>]=<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">出栈的数据是 <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">程序退出~~~</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-栈实现计算器运算中缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#2-栈实现计算器运算中缀表达式\">#</a> 2、栈实现计算器（运算中缀表达式)</h1>\n<h2 id=\"1-提出问题\"><a class=\"markdownIt-Anchor\" href=\"#1-提出问题\">#</a> 1、提出问题</h2>\n<p><strong>计算式：[7<em>2</em>2-5+1-5+3-3]</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819091212282.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n请问：计算机底层是如何运算得到结果的？注意不是简单的把算式列出运算，<strong>思考计算机是怎么理解这个算式的</strong>（对计算机而言，它接收到的就是一个字符串）—— 栈</p>\n<h2 id=\"2-使用栈完成表达式的思路\"><a class=\"markdownIt-Anchor\" href=\"#2-使用栈完成表达式的思路\">#</a> 2、使用栈完成表达式的思路</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819094050556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 1、创建两个栈，分别为数栈（存放数）符号栈（存放符号）</p>\n<p>2、使用一个 index  值（索引），来遍历扫描我们的表达式</p>\n<p>3、如果扫描的是一个数字就直接入栈</p>\n<p>4、如果扫描的是一个符号，就分如下情况：</p>\n<pre><code>  a、如果发现当前的符号栈为空，就直接入栈\n\n  b、如果符号栈有操作符，就进行比较：\n</code></pre>\n<ul>\n<li>如果当前的操作符的优先级小于或者等于栈中的操作符， 就需要从数栈中 pop 出两个数，在从符号栈中 pop 出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈，</li>\n<li>如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.<br>\n5、当表达式扫描完毕，就顺序的从 数栈和符号栈中 pop 出相应的数和符号，并进行运算.</li>\n</ul>\n<p>6、最后在数栈中只有一个数字，就是表达式的结果</p>\n<h2 id=\"3-按照思路图解验证一个表达式的运算\"><a class=\"markdownIt-Anchor\" href=\"#3-按照思路图解验证一个表达式的运算\">#</a> 3、按照思路图解验证一个表达式的运算</h2>\n<p>验证：3+2<em>6-2=13<br>\n1、index 扫描到数字 3 直接入栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819095936939.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n 2、index 扫描到符号 +，判断当前的符号栈为空，就直接入栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819100152671.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n 3、index 扫描到 2，直接进栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819100346288.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n 4、扫描到</em>，<em>的优先级大于 +，直接进栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819100533648.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n 5、扫描到 6，直接进栈。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819100736986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 6、扫描到 -，- 的优先级小于栈中的</em>，从数栈中 pop 出两个数 6 和 2，从符号栈中 pop 出 *<br>\n 运算：2*6=12 ，将 12 进栈，- 进栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819101231934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 7、扫描到 2，直接进栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819101413213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 8、依次 pop 出两个数和一个符号进行运算（后一个数   符号   前一个数）<br>\n数栈 pop 出 2 和 12    符号栈 pop 出 -       运算：12-2=10   将 10 入栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819101709987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n数栈 pop 出 10 和 3     符号栈 pop 出 +     运算：3+10=13  将 13 入栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819101853220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 9、此时数栈中的 13 为最终运算结果，而符号栈栈空<br>\n<font color=red>注意：在测试过程中发现如果表达式中有多位数运算就会出问题。比如表达式中如果有数字 13 的话这里的 1 和 3 就会当成两个数分开入栈，后面的运算自然也会出问题。<br>\n解决方法：</p>\n<ol>\n<li><strong>在扫描到一个字符是数时不能立即入栈，向表达式中看向 index 指向字符的下一位，注意只是看 index 指向字符的后一位而不是 index++4、 掌握循环语句</strong></li>\n<li><strong>如果 index 指向字符的下一位还是数就继续扫描并将该数和之前的数进行字符拼接，如果下一位是符号就能入栈</strong></li>\n<li><strong>定义一个字符串变量，用于拼接</strong></li>\n</ol>\n<h2 id=\"4-实现代码\"><a class=\"markdownIt-Anchor\" href=\"#4-实现代码\">#</a> 4、实现代码：</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;请输入一个仅限于加减乘除的数学表达式：&quot;</span>);</span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\tString expression = scanner.next(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建两个栈，数栈，一个符号栈</span></span><br><span class=\"line\">\t\tCalculatorStack numStack = <span class=\"keyword\">new</span> CalculatorStack (<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tCalculatorStack  operStack = <span class=\"keyword\">new</span> CalculatorStack (<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义需要的相关变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;<span class=\"comment\">//用于扫描</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num1 = <span class=\"number\">0</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> oper = <span class=\"number\">0</span>;<span class=\"comment\">//保存运算符</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;<span class=\"comment\">//保存每次的运算结果</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> ch = <span class=\"string\">&#x27; &#x27;</span>; <span class=\"comment\">//将每次扫描得到char保存到ch</span></span><br><span class=\"line\">\t\tString keepNum = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">//用于拼接 多位数</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//开始while循环的扫描expression</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//依次得到expression 的每一个字符</span></span><br><span class=\"line\">\t\t\tch = expression.substring(index, index+<span class=\"number\">1</span>).charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//判断ch是什么，然后做相应的处理</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(operStack.isOper(ch)) &#123;<span class=\"comment\">//如果是运算符</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//判断当前的符号栈是否为空</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!operStack.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符,就需要从数栈中pop出两个数,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(operStack.priority(ch) &lt;= operStack.priority(operStack.peek())) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum1 = numStack.pop();</span><br><span class=\"line\">\t\t\t\t\t\tnum2 = numStack.pop();</span><br><span class=\"line\">\t\t\t\t\t\toper = operStack.pop();</span><br><span class=\"line\">\t\t\t\t\t\tres = numStack.cal(num1, num2, oper);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//把运算的结果入数栈</span></span><br><span class=\"line\">\t\t\t\t\t\tnumStack.push(res);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//然后将当前的操作符入符号栈</span></span><br><span class=\"line\">\t\t\t\t\t\toperStack.push(ch);</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.</span></span><br><span class=\"line\">\t\t\t\t\t\toperStack.push(ch);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//如果为空直接入符号栈..</span></span><br><span class=\"line\">\t\t\t\t\toperStack.push(ch); <span class=\"comment\">// 1 + 3</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果是数有以下分析</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//分析思路</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//1. 当处理多位数时，不能发现是一个数就立即入栈，因为他可能是多位数</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//2. 在处理数，需要向expression的表达式的index 后再看一位,如果是数就进行扫描，如果是符号才入栈</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//3. 因此我们需要定义一个变量 字符串，用于拼接\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//处理多位数</span></span><br><span class=\"line\">\t\t\t\tkeepNum += ch;\t\t<span class=\"comment\">//拼接\t\t</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果ch已经是expression的最后一位，就直接入栈</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (index == expression.length() - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tnumStack.push(Integer.parseInt(keepNum));</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//判断下一个字符是不是数字，如果是数字，就继续扫描，如果是运算符，则入栈</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//注意是看后一位，不是index++</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (operStack.isOper(expression.substring(index+<span class=\"number\">1</span>,index+<span class=\"number\">2</span>).charAt(<span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//如果后一位是运算符，则入栈 keepNum = &quot;1&quot; 或者 &quot;123&quot;</span></span><br><span class=\"line\">\t\t\t\t\t\tnumStack.push(Integer.parseInt(keepNum));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//重要的!!!!!!, keepNum清空,方便后面再次扫描到多位数时的使用</span></span><br><span class=\"line\">\t\t\t\t\t\tkeepNum = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//让index + 1, 并判断是否扫描到expression最后.</span></span><br><span class=\"line\">\t\t\tindex++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (index &gt;= expression.length()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//当表达式扫描完毕，就顺序的从 数栈和符号栈中pop出相应的数和符号，并运行.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果符号栈为空，则计算到最后的结果, 数栈中只有一个数字【结果】</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(operStack.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tnum1 = numStack.pop();</span><br><span class=\"line\">\t\t\tnum2 = numStack.pop();</span><br><span class=\"line\">\t\t\toper = operStack.pop();</span><br><span class=\"line\">\t\t\tres = numStack.cal(num1, num2, oper);</span><br><span class=\"line\">\t\t\tnumStack.push(res);<span class=\"comment\">//入栈</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将数栈的最后数，pop出，就是结果</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> res2 = numStack.pop();</span><br><span class=\"line\">\t\tSystem.out.printf(<span class=\"string\">&quot;表达式 %s = %d&quot;</span>, expression, res2);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先创建一个栈,直接使用前面创建好</span></span><br><span class=\"line\"><span class=\"comment\">//定义一个 ArrayStack2 表示栈, 需要扩展功能</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculatorStack</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize; <span class=\"comment\">// 栈的大小</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] stack; <span class=\"comment\">// 数组，数组模拟栈，数据就放在该数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top = -<span class=\"number\">1</span>;<span class=\"comment\">// top表示栈顶，初始化为-1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CalculatorStack</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">\t\tstack = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"keyword\">this</span>.maxSize];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//增加一个方法，可以返回当前栈顶的值, 但是不是真正的pop</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> stack[top];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//栈满</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> top == maxSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//栈空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> top == -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//入栈-push</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断栈是否满</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isFull()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;栈满&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttop++;</span><br><span class=\"line\">\t\tstack[top] = value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//出栈-pop, 将栈顶的数据返回</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断栈是否空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//抛出异常</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;栈空，没有数据~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value = stack[top];</span><br><span class=\"line\">\t\ttop--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;栈空，没有数据~~&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//需要从栈顶开始显示数据</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = top; i &gt;= <span class=\"number\">0</span> ; i--) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;stack[%d]=%d\\n&quot;</span>, i, stack[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//返回运算符的优先级，优先级是程序员来确定, 优先级使用数字表示</span></span><br><span class=\"line\">\t<span class=\"comment\">//数字越大，则优先级就越高.</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">priority</span><span class=\"params\">(<span class=\"keyword\">int</span> oper)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(oper == <span class=\"string\">&#x27;*&#x27;</span> || oper == <span class=\"string\">&#x27;/&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oper == <span class=\"string\">&#x27;+&#x27;</span> || oper == <span class=\"string\">&#x27;-&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>; <span class=\"comment\">// 假定目前的表达式只有 +, - , * , /</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//判断是不是一个运算符</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOper</span><span class=\"params\">(<span class=\"keyword\">char</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> val == <span class=\"string\">&#x27;+&#x27;</span> || val == <span class=\"string\">&#x27;-&#x27;</span> || val == <span class=\"string\">&#x27;*&#x27;</span> || val == <span class=\"string\">&#x27;/&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//计算方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2, <span class=\"keyword\">int</span> oper)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>; <span class=\"comment\">// res 用于存放计算的结果</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (oper) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">\t\t\tres = num2 + num1;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">\t\t\tres = num2 - num1;<span class=\"comment\">// 注意顺序</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">\t\t\tres = num2 * num1;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">\t\t\tres = num2 / num1;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请输入一个仅限于加减乘除的数学表达式：</span><br><span class=\"line\"><span class=\"number\">2</span>+<span class=\"number\">4</span>*<span class=\"number\">12</span>-<span class=\"number\">4</span>+<span class=\"number\">6</span>*<span class=\"number\">14</span></span><br><span class=\"line\">表达式 <span class=\"number\">2</span>+<span class=\"number\">4</span>*<span class=\"number\">12</span>-<span class=\"number\">4</span>+<span class=\"number\">6</span>*<span class=\"number\">14</span> = <span class=\"number\">130</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-前缀-中缀和后缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#3-前缀-中缀和后缀表达式\">#</a> 3、前缀、中缀和后缀表达式</h1>\n<h2 id=\"1-前缀表达式波兰式\"><a class=\"markdownIt-Anchor\" href=\"#1-前缀表达式波兰式\">#</a> 1、前缀表达式（波兰式）</h2>\n<p>（1）、前缀表达式又称波兰式，前缀表达式的运算符位于操作数之前</p>\n<p>（2）、举例说明： (3+4)×5-6 对应的前缀表达式就是 - × + 3 4 5 6<br>\n<font color=blue>前缀表达式的计算机求值：<br>\n<font color=red>从右至左<font color=black>扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（栈顶元素和次顶元素），并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果<br>\n例如: (3+4)×5-6 对应的前缀表达式就是 - × + 3 4 5 6 , 针对前缀表达式求值步骤如下:</p>\n<ol>\n<li>从右至左扫描表达式 &quot;- × + 3 4 5 6&quot;，将 6、5、4、3 压入堆栈</li>\n<li>遇到 + 运算符，因此弹出 3 和 4（3 为栈顶元素，4 为次顶元素），计算出 3+4 的值，得 7，再将 7 入栈</li>\n<li>接下来是 × 运算符，因此弹出 7 和 5，计算出 7×5=35，将 35 入栈</li>\n<li>最后是 - 运算符，计算出 35-6 的值，即 29，由此得出最终结果</li>\n</ol>\n<h2 id=\"2-中缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#2-中缀表达式\">#</a> 2、中缀表达式</h2>\n<p>（1）、中缀表达式就是常见的运算表达式，如 (3+4)×5-6<br>\n（2）、中缀表达式的求值是我们人最熟悉的，但是对计算机来说却不好操作 (前面我们讲的案例就能看的这个问题)，因此，在计算结果时，往往会将中缀表达式转成其它表达式来操作 (一般转成后缀表达式.)</p>\n<h2 id=\"3-后缀表达式逆波兰式\"><a class=\"markdownIt-Anchor\" href=\"#3-后缀表达式逆波兰式\">#</a> 3、后缀表达式（逆波兰式）</h2>\n<p>（1）、后缀表达式又称逆波兰表达式，与前缀表达式相似，只是运算符位于操作数之后<br>\n（2）、中举例说明： (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 –<br>\n（3）、再比如：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819154438442.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>后缀表达式的计算机求值：</strong><br>\n从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素 和 栈顶元素），并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果<br>\n<strong>例如: (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 - , 针对后缀表达式求值步骤如下:</strong></p>\n<ol>\n<li>从左至右扫描 &quot;3 4 + 5 × 6 -&quot;，将 3 和 4 压入堆栈；</li>\n<li>遇到 + 运算符，因此弹出 4 和 3（4 为栈顶元素，3 为次顶元素），计算出 3+4 的值，得 7，再将 7 入栈；</li>\n<li>将 5 入栈；</li>\n<li>接下来是 × 运算符，因此弹出 5 和 7，计算出 7×5=35，将 35 入栈；</li>\n<li>将 6 入栈；</li>\n<li>最后是 - 运算符，计算出 35-6（次顶 - 栈顶）的值，即 29，由此得出最终结果</li>\n</ol>\n<h1 id=\"4-逆波兰计算器\"><a class=\"markdownIt-Anchor\" href=\"#4-逆波兰计算器\">#</a> 4、逆波兰计算器</h1>\n<h2 id=\"1-中缀表达式转为后缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#1-中缀表达式转为后缀表达式\">#</a> 1、中缀表达式转为后缀表达式</h2>\n<p>后缀表达式适合计算式进行运算，但是人却不太容易写出来，尤其是表达式很长的情况下，因此在开发中，我们需要将 <strong>中缀表达式转成后缀表达式</strong><br>\n具体步骤：<br>\n1、初始化两个栈：运算符栈 s1 和储存中间结果的栈 s2；<br>\n2、从左至右扫描中缀表达式；<br>\n3、遇到操作数时，将其压入 s2<br>\n4、遇到运算符时，比较其与 s1 栈顶运算符的优先级：</p>\n<ol>\n<li>如果 s1 为空，或栈顶运算符为左括号 “(”，则直接将此运算符入栈；</li>\n<li>否则，若优先级比栈顶运算符的高，也将运算符压入 s1；</li>\n<li>否则，将 s1 栈顶的运算符弹出并压入到 s2 中，再次转到 (4.1 的操作) 与 s1 中新的栈顶运算符相比较；</li>\n</ol>\n<p>5、遇到括号时：<br>\n6、重复步骤 2 至 5，直到表达式的最右边<br>\n 7、将 s1 中剩余的运算符依次弹出并压入 s2<br>\n8、依次弹出 s2 中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式<br>\n *<em> 例如：将中缀表达式 “1+((2+3)<em> 4)-5” 转 换为后缀表达式的过程如下：</em></em><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081917095222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>因此结果为：&quot;1 2 3 + 4 * + 5 –&quot;</strong></p>\n<h2 id=\"2-将得到的后缀表达式进行运算\"><a class=\"markdownIt-Anchor\" href=\"#2-将得到的后缀表达式进行运算\">#</a> 2、将得到的后缀表达式进行运算</h2>\n<p><strong>后缀表达式：“1 2 3 + 4 * + 5 –”<br>\n 运算过程（即后缀表达式的运算过程）：</strong></p>\n<ol>\n<li>从左至右扫描 &quot;1 2 3 + 4 * + 5 –&quot;，将 1、2、3 压入堆栈；</li>\n<li>遇到 + 运算符，因此弹出 3 和 2（3 为栈顶元素，2 为次顶元素），计算出 2+3 的值，得 5，再将 5 入栈；</li>\n<li>将 4 入栈；</li>\n<li>接下来是 * 运算符，因此弹出 4 和 5，计算出 4×5=20，将 20 入栈；</li>\n<li>遇到 + 运算符，因此弹出 20 和 1（20 为栈顶元素，1 为次顶元素），计算出 20+1 的值，得 21，再将 21 入栈；</li>\n<li>将 5 入栈；</li>\n<li>最后是 - 运算符，弹出 5 和 21（5 为栈顶元素，21 为次顶元素）21-5（次顶 - 栈顶）的值，即 16，由此得出最终结果</li>\n</ol>\n<h2 id=\"3-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#3-代码实现\">#</a> 3、代码实现：</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PolandNotation</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//完成将一个中缀表达式转成后缀表达式的功能</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//说明</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 1+((2+3)×4)-5 =&gt; 转成  1 2 3 + 4 × + 5 –</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 因为直接对str 进行操作，不方便，因此 先将  &quot;1+((2+3)×4)-5&quot; =》 中缀的表达式对应的List</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//   即 &quot;1+((2+3)×4)-5&quot; =&gt; ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//3. 将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//   即 ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]  =》 ArrayList [1,2,3,+,4,*,+,5,–]\t</span></span><br><span class=\"line\">\t\tString expression = <span class=\"string\">&quot;1+((2+3)*4)-5&quot;</span>;<span class=\"comment\">//注意表达式 </span></span><br><span class=\"line\">\t\tList&lt;String&gt; infixExpressionList = toInfixExpressionList(expression);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;中缀表达式对应的List=&quot;</span> + infixExpressionList); <span class=\"comment\">// ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]</span></span><br><span class=\"line\">\t\tList&lt;String&gt; suffixExpreesionList = parseSuffixExpreesionList(infixExpressionList);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;后缀表达式对应的List&quot;</span> + suffixExpreesionList); <span class=\"comment\">//ArrayList [1,2,3,+,4,*,+,5,–] \t</span></span><br><span class=\"line\">\t\tSystem.out.printf(<span class=\"string\">&quot;运算结果=%d&quot;</span>, calculate(suffixExpreesionList)); <span class=\"comment\">// ?\t</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//即 ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]  =》 ArrayList [1,2,3,+,4,*,+,5,–]</span></span><br><span class=\"line\">\t<span class=\"comment\">//方法：将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">parseSuffixExpreesionList</span><span class=\"params\">(List&lt;String&gt; ls)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义两个栈</span></span><br><span class=\"line\">\t\tStack&lt;String&gt; s1 = <span class=\"keyword\">new</span> Stack&lt;String&gt;(); <span class=\"comment\">// 符号栈</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//说明：因为s2 这个栈，在整个转换过程中，没有pop操作，而且后面我们还需要逆序输出</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//因此比较麻烦，这里我们就不用 Stack&lt;String&gt; 直接使用 List&lt;String&gt; s2</span></span><br><span class=\"line\">\t\tList&lt;String&gt; s2 = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(); <span class=\"comment\">// 储存中间结果的Lists2\t\t</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历ls</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(String item: ls) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果是一个数，加入s2</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(item.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\ts2.add(item);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;(&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\ts1.push(item);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;)&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(!s1.peek().equals(<span class=\"string\">&quot;(&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\ts2.add(s1.pop());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\ts1.pop();<span class=\"comment\">//!!! 将 ( 弹出 s1栈， 消除小括号</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//当item的优先级小于等于s1栈顶运算符, 将s1栈顶的运算符弹出并加入到s2中，再次转到(4.1)与s1中新的栈顶运算符相比较</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//问题：我们缺少一个比较优先级高低的方法</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(s1.size() != <span class=\"number\">0</span> &amp;&amp; Operation.getValue(s1.peek()) &gt;= Operation.getValue(item) ) &#123;</span><br><span class=\"line\">\t\t\t\t\ts2.add(s1.pop());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//还需要将item压入栈</span></span><br><span class=\"line\">\t\t\t\ts1.push(item);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//将s1中剩余的运算符依次弹出并加入s2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(s1.size() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\ts2.add(s1.pop());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s2; <span class=\"comment\">//注意因为是存放到List, 因此按顺序输出就是对应的后缀表达式对应的List\t</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//方法：将 中缀表达式转成对应的List</span></span><br><span class=\"line\">\t<span class=\"comment\">//  s=&quot;1+((2+3)×4)-5&quot;;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">toInfixExpressionList</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义一个List,存放中缀表达式 对应的内容</span></span><br><span class=\"line\">\t\tList&lt;String&gt; ls = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; <span class=\"comment\">//这时是一个指针，用于遍历 中缀表达式字符串</span></span><br><span class=\"line\">\t\tString str; <span class=\"comment\">// 对多位数的拼接</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c; <span class=\"comment\">// 每遍历到一个字符，就放入到c</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果c是一个非数字，我需要加入到ls</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>((c=s.charAt(i)) &lt; <span class=\"number\">48</span> ||  (c=s.charAt(i)) &gt; <span class=\"number\">57</span>) &#123;</span><br><span class=\"line\">\t\t\t\tls.add(<span class=\"string\">&quot;&quot;</span> + c);</span><br><span class=\"line\">\t\t\t\ti++; <span class=\"comment\">//i需要后移</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果是一个数，需要考虑多位数</span></span><br><span class=\"line\">\t\t\t\tstr = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">//先将str 置成&quot;&quot; &#x27;0&#x27;[48]-&gt;&#x27;9&#x27;[57]</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(i &lt; s.length() &amp;&amp; (c=s.charAt(i)) &gt;= <span class=\"number\">48</span> &amp;&amp; (c=s.charAt(i)) &lt;= <span class=\"number\">57</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tstr += c;<span class=\"comment\">//拼接</span></span><br><span class=\"line\">\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tls.add(str);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">while</span>(i &lt; s.length());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ls;<span class=\"comment\">//返回</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//将一个逆波兰表达式， 依次将数据和运算符放入到 ArrayList中</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getListString</span><span class=\"params\">(String suffixExpression)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将 suffixExpression 分割</span></span><br><span class=\"line\">\t\tString[] split = suffixExpression.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\tList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(String ele: split) &#123;</span><br><span class=\"line\">\t\t\tlist.add(ele);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(List&lt;String&gt; ls)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建给栈, 只需要一个栈即可</span></span><br><span class=\"line\">\t\tStack&lt;String&gt; stack = <span class=\"keyword\">new</span> Stack&lt;String&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历 ls</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String item : ls) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 这里使用正则表达式来取出数</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (item.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>)) &#123; <span class=\"comment\">// 匹配的是多位数</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 入栈</span></span><br><span class=\"line\">\t\t\t\tstack.push(item);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// pop出两个数，并运算， 再入栈</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> num2 = Integer.parseInt(stack.pop());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> num1 = Integer.parseInt(stack.pop());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;+&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\tres = num1 + num2;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;-&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\tres = num1 - num2;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;*&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\tres = num1 * num2;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\tres = num1 / num2;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;运算符有误&quot;</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//把res 入栈</span></span><br><span class=\"line\">\t\t\t\tstack.push(<span class=\"string\">&quot;&quot;</span> + res);</span><br><span class=\"line\">\t\t\t&#125;\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//最后留在stack中的数据是运算结果</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Integer.parseInt(stack.pop());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//编写一个类 Operation 可以返回一个运算符 对应的优先级</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Operation</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ADD = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> SUB = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MUL = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DIV = <span class=\"number\">2</span>;\t</span><br><span class=\"line\">\t<span class=\"comment\">//写一个方法，返回对应的优先级数字</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">(String operation)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (operation) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;+&quot;</span>:</span><br><span class=\"line\">\t\t\tresult = ADD;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;-&quot;</span>:</span><br><span class=\"line\">\t\t\tresult = SUB;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;*&quot;</span>:</span><br><span class=\"line\">\t\t\tresult = MUL;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;/&quot;</span>:</span><br><span class=\"line\">\t\t\tresult = DIV;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;(&quot;</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;)&quot;</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;不存在该运算符&quot;</span> + operation);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">中缀表达式对应的List=[<span class=\"number\">1</span>, +, (, (, <span class=\"number\">2</span>, +, <span class=\"number\">3</span>, ), *, <span class=\"number\">4</span>, ), -, <span class=\"number\">5</span>]</span><br><span class=\"line\">后缀表达式对应的List[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, +, <span class=\"number\">4</span>, *, +, <span class=\"number\">5</span>, -]</span><br><span class=\"line\">运算结果=<span class=\"number\">16</span></span><br></pre></td></tr></table></figure>\n<hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\">\n",
            "tags": [
                "java",
                "栈",
                "数据结构",
                "逆波兰表达式"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/21/Java%E5%AD%A6%E4%B9%A0-%E7%B1%BB%E7%9A%84%E9%9A%90%E8%97%8F%E6%9C%BA%E5%88%B6(%E5%B0%81%E8%A3%85%E6%80%A7)/",
            "url": "http://yoursite.com/2020/08/21/Java%E5%AD%A6%E4%B9%A0-%E7%B1%BB%E7%9A%84%E9%9A%90%E8%97%8F%E6%9C%BA%E5%88%B6(%E5%B0%81%E8%A3%85%E6%80%A7)/",
            "title": "Java学习-类的隐藏机制（封装性）",
            "date_published": "2020-08-21T09:53:22.569Z",
            "content_html": "<h1 id=\"1-封装的含义\"><a class=\"markdownIt-Anchor\" href=\"#1-封装的含义\">#</a> 1、封装的含义</h1>\n<p><strong>封装</strong>（encapsulation）是面向对象的三要素之一（其它两个是<strong>继承</strong>和<strong>多态</strong>），它有两成含义：<br>\n1、将数据（属性）和函数（行为）放在一个独立的类中，使类成为一个独立的单元。<br>\n2、通过访问限定符（private 等）实现对<strong>信息的隐藏或公开</strong>，隐藏类的内部实现。而留下一些接口（public 的成员函数）与外界进行信息交换（外界要想访问某个成员只能通过接口实现）当类的设计者改变了类的内部实现时，但只要接口不变，对于类的使用者而言，没有任何影响。这就是所谓的 “<strong>接口和实现的分离</strong>”<br>\n<strong> 那么什么是封装？</strong> 简单地说，封装就是将数据和函数放在一起，将不想让外界看到的内容（通常是数据）声明为 private 的，不允许外界存取。外界要想访问的话，就只能通过类留给外部的接口。<br>\n<strong>为了更好的理解为什么要对对象进行封装，下面举个例子进行说明</strong><br>\n先写两个类  ：</p>\n<ul>\n<li>Person 类</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package day01</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\tpublic int age;</span><br><span class=\"line\">\tpublic <span class=\"keyword\">void</span> printAge()</span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;年龄是：&quot;</span>+age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Test 测试类</li>\n</ul>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package day01</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">\t public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"built_in\">String</span>[] args)</span><br><span class=\"line\">\t &#123;</span><br><span class=\"line\">\t \tPerson p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t \tp.age = <span class=\"number\">-100</span>;</span><br><span class=\"line\">\t \tp.printAge();</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行后打印结果为：年龄是：-100<br>\n<strong> 分析一下代码：</strong><br>\n程序是没问题的也能正常运行，但是年龄为 - 100 显然不符合正常逻辑。从代码可以看出在 new 完一个 person 对象后用户可以对它的 age 属性随便赋值。像这种情况是把类的属性开放出来，让调用者随意使用，这样就会出现问题，它们很容易被一些粗心的或不知情的客户端程序员所毁坏。<br>\n所以我们需要对这样不能让调用者随意使用的属性做封装和隐藏以减少程序的 bug。这意味着类的创建者可以任意修改被隐藏的部分，而不用担心对其他调用者造成影响。<br>\n代码修改后如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package day01</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\tpublic <span class=\"keyword\">void</span> setAge(int a)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a &lt;=<span class=\"number\">150</span> &amp;&amp; a&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.age = a;\t</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;输入的年龄：&quot;</span>+a+<span class=\"string\">&quot;不在0到150之间&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic int getAge()</span><br><span class=\"line\">\t&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.age;&#125;</span><br><span class=\"line\">\tpublic <span class=\"keyword\">void</span> showAge()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;年龄是：&quot;</span>+<span class=\"built_in\">this</span>.getAge());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package day01</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">\t public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"built_in\">String</span>[] args)</span><br><span class=\"line\">\t &#123;</span><br><span class=\"line\">\t \tPerson p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t \tPerson p2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t \tp1.setAge(<span class=\"number\">55</span>);</span><br><span class=\"line\">\t \tp1.showAge();</span><br><span class=\"line\">\t \tp2.setAge(<span class=\"number\">60</span>);</span><br><span class=\"line\">\t \tp2.showAge();</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到修改过后的对象不能直接通过 p.age 进行赋值操作，因为此时的 age 属性已经是被 private 限制，只能由类内部的成员函数调用并进行传参。</p>\n<h1 id=\"2-类的setxxx-和-getxxx\"><a class=\"markdownIt-Anchor\" href=\"#2-类的setxxx-和-getxxx\">#</a> 2、类的 setXXX 和 getXXX</h1>\n<p>封装的一个原则是：“信息的最小化公开”, 所以在理想状态下，通常将所有的数据都声明为 private（因为随便对类的内部数据进行更改是很危险的），如果想改变和得到某个数据的话，那么使用相应的接口进行访问</p>\n<ul>\n<li>通常设置数据的接口命名为 setXXX（如 public void setAge () ）</li>\n<li>将得到数据的接口命名为 getXXX（如 public int getAge () ）<br>\n<strong>? 考虑这样两个问题：</strong><br>\n<strong>问题一：</strong> 使用 Person 类来定义的两个对象 p1 和 p2, 那么 p1 和 p2 两个对象在内存中的存储状态是怎么样的呢？即数据成员和成员函数是否都存放在对象中呢？<br>\n<strong>问题二：</strong> p1 和 p2 调用相同的成员函数，为什么显示结果不一样？它们调用的是同一段代码吗？<br>\n其实对象空间中仅存储数据成员，而类的成员函数代码不会存储在对象中，用一个类的不同的对象调用成员函数时，调用的是同一段函数代码。<br>\n<strong>成员函数和普通函数的区别：</strong><br>\n在编译器的角度来看，成员函数和普通函数是没有本质区别的，成员函数只不过是为了封装的需要，而在形式上放在类中。最主要的区别是：<br>\n<em>成员函数暗自具备了一个从编译器传过来的指向类对象的 this（当前对象的引用），通过它成员函数就可以操作当前对象的数据成员。</em></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Person p2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">p1.setAge(<span class=\"number\">55</span>);<span class=\"comment\">//在这里this指向p1</span></span><br><span class=\"line\">p2.setAge(<span class=\"number\">60</span>);<span class=\"comment\">//在这里this指向p2</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-this关键字\"><a class=\"markdownIt-Anchor\" href=\"#3-this关键字\">#</a> 3、this 关键字</h1>\n<ul>\n<li>在类的方法定义中使用的 this 关键字表示使用该方法对象的引用。</li>\n<li>当必须指出当前使用方法对象是谁时要使用 this</li>\n<li>this 可以看作是一个变量，它的值是当前对象的引用</li>\n<li>当处理方法中成员变量和局部变量重名时要用 this</li>\n</ul>\n<h1 id=\"4-总结\"><a class=\"markdownIt-Anchor\" href=\"#4-总结\">#</a> 4、总结</h1>\n<p>java 中类的封装和隐藏就是：<br>\n通过将类的成员数据声明为私有的（private），再提供公共的（public）方法：getXXX () 和 setXXX () 实现对该属性的操作。以实现以下目的。</p>\n<ul>\n<li>隐藏一个类中不需要对外提供的实现细节</li>\n<li>使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑，限制对属性的不合理操作；</li>\n<li>便于修改，增强代码的可维护性</li>\n</ul>\n",
            "tags": [
                "java",
                "类",
                "面向对象"
            ]
        }
    ]
}