{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog • All posts by \"面试题\" tag",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "https://jQueryZK.github.io",
    "items": [
        {
            "id": "https://jqueryzk.github.io/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E5%8D%95%E9%93%BE%E8%A1%A8%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E6%96%B0%E6%B5%AA%E3%80%81%E7%99%BE%E5%BA%A6%E3%80%81%E8%85%BE%E8%AE%AF%EF%BC%89/",
            "url": "https://jqueryzk.github.io/2020/08/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E5%8D%95%E9%93%BE%E8%A1%A8%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E6%96%B0%E6%B5%AA%E3%80%81%E7%99%BE%E5%BA%A6%E3%80%81%E8%85%BE%E8%AE%AF%EF%BC%89/",
            "title": "数据结构（Java实现）-单链表常见面试题（新浪、百度、腾讯）",
            "date_published": "2020-08-24T13:56:07.823Z",
            "content_html": "<h1 id=\"1-求单链表中有效节点个数\"><a class=\"markdownIt-Anchor\" href=\"#1-求单链表中有效节点个数\">#</a> 1、求单链表中有效节点个数</h1>\n<p><strong>思路：</strong> 遍历链表获取单链表的节点的个数（如果是带头节点的链表，不能统计头节点）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">(LinkNode head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head.next==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//空链表</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//定义一个辅助的变量，这里我们没有统计头节点</span></span><br><span class=\"line\">    LinkNode cur = head.next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        length++;</span><br><span class=\"line\">        cur = cur.next;<span class=\"comment\">//继续向下遍历</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-查找单链表中的倒数第k个节点新浪面试题\"><a class=\"markdownIt-Anchor\" href=\"#2-查找单链表中的倒数第k个节点新浪面试题\">#</a> 2、查找单链表中的倒数第 k 个节点（新浪面试题）</h1>\n<p><strong>思路：</strong></p>\n<ol>\n<li>编写一个方法，接收 head 节点，同时接收一个 index 值（即 k 的值）</li>\n<li>先把链表从头到尾遍历，得到链表的总长度，用上一题的 getLength（）方法</li>\n<li>得到长度 size 后，我们从链表的第一个开始遍历（size-index）个，就可以得到</li>\n<li>如果找到了，返回该节点，否则返回 null</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LinkNode <span class=\"title\">findLastIndexNode</span><span class=\"params\">(LinkNode head,<span class=\"keyword\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//判断如果链表为空，返回null</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//第一遍遍历得到长度</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> size = getLength(head);</span><br><span class=\"line\">\t<span class=\"comment\">//第二次遍历size-index位置，就是倒数的第K个节点</span></span><br><span class=\"line\">\t<span class=\"comment\">//先做一个index校验</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(index &lt;= <span class=\"number\">0</span> || index &gt; size)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//定义一个辅助变量cur，for循环定位到倒数的index</span></span><br><span class=\"line\">\tLinkNode cur = head.next;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;size-index;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcur = cur.next;<span class=\"comment\">//向后遍历</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-单链表的反转腾讯面试题\"><a class=\"markdownIt-Anchor\" href=\"#3-单链表的反转腾讯面试题\">#</a> 3、单链表的反转 (腾讯面试题）</h1>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081416344023.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200814163450550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>思路：</strong></p>\n<ol>\n<li>先定义一个新的头节点 reverseHead = new LinkNode ();</li>\n<li>从头到尾遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表头 reverseHead.next 上</li>\n<li>原来的链表头 head.next = reverseHead.next</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reversetList</span><span class=\"params\">(LinkNode head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果当前链表为空，或者只有一个节点，无需反转，直接返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span> || head.next.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//定义一个辅助变量，帮助我们遍历原来的链表</span></span><br><span class=\"line\">\tLinkNode cur = head.next;</span><br><span class=\"line\">\tStudentLinkNode temp = <span class=\"keyword\">null</span>;<span class=\"comment\">//定义一个空的temp节点</span></span><br><span class=\"line\">\tLinkNode reverseHead = <span class=\"keyword\">new</span> LinkNode();</span><br><span class=\"line\">\t<span class=\"comment\">//遍历原来的链表，每遍历一个节点，就将其取出并放在新的reverseHead的后面第一个节点的位置</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttemp = cur.next;<span class=\"comment\">//空的temp节点暂时储存当前节点cur的下一个节点</span></span><br><span class=\"line\">\t\tcur.next = reverseHead.next;<span class=\"comment\">//将cur的下一个节点指向新的链表的最前端</span></span><br><span class=\"line\">\t\treverseHead.next = cur;<span class=\"comment\">//将cur连接到新的链表上</span></span><br><span class=\"line\">\t\tcur = cur.next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//将head.next指向reverseHead,next实现单链表的反转</span></span><br><span class=\"line\">\thead.next = reverseHead.next;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-从尾到头打印单链表\"><a class=\"markdownIt-Anchor\" href=\"#4-从尾到头打印单链表\">#</a> 4、从尾到头打印单链表</h1>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200814172922544.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>思路：</strong></p>\n<ol>\n<li>这道题目要求的是逆序打印单链表</li>\n<li>方式一：先将单链表进行反转操作，然后进行遍历即可，但是这样做的问题是会破坏原来的单链表的结构（不建议）</li>\n<li>方式二：可以利用<strong>栈</strong>这个数据结构，将<strong>各个节点压入到栈中</strong>，然后利用栈的<strong>先进后出</strong>的特点，就实现了逆序打印的效果。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reversePrint</span><span class=\"params\">(LinkNode head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;<span class=\"comment\">//空链表，不能打印</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//创建一个栈，将各个节点压入栈中</span></span><br><span class=\"line\">\tStack&lt;LinkNode&gt; Stack = <span class=\"keyword\">new</span> Stack&lt;LinkNode&gt;();</span><br><span class=\"line\">\tLinkNode cur = head.next;</span><br><span class=\"line\">\t<span class=\"comment\">//将链表的所有节点压入栈中</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstack.push(cur);</span><br><span class=\"line\">\t\tcur = cur.next;<span class=\"comment\">//cur后移，这样就可以压入下一个节点</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//将栈中的节点进行打印，pop出栈</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(stack.size()&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tSystem,out.println(stack.pop());<span class=\"comment\">//stack的特点就是先进的后出</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-合并两个有序的单链表合并之后的链表依然有序\"><a class=\"markdownIt-Anchor\" href=\"#5-合并两个有序的单链表合并之后的链表依然有序\">#</a> 5、合并两个有序的单链表，合并之后的链表依然有序</h1>\n<p><strong>思路：</strong></p>\n<ol>\n<li>cur1 和 cur2 分别是两条有序链表的辅助引用（指针）方便两个链表的遍历，result 则为合并之后的结果链表，tail 为结果链表的最后一个节点，方便尾插</li>\n<li>cur1 和 cur2 同时往后走，两个引用所指的数分别比较，拿出来的节点尾插在 result 链表中<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200814211820459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LinkNode <span class=\"title\">mergeList</span><span class=\"params\">(LinkNode node1,LinkNode node2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//定义一个辅助变量cur1，帮助我们遍历第一条链表</span></span><br><span class=\"line\">    LinkNode cur1 = node1;</span><br><span class=\"line\">\t<span class=\"comment\">//定义一个辅助变量cur2，帮助我们遍历第二条链表</span></span><br><span class=\"line\">    LinkNode cur2 = node2;</span><br><span class=\"line\">    LinkNode result = <span class=\"keyword\">new</span> LinkNode();<span class=\"comment\">//定义节点temp为合并后产生的新链表的头节点</span></span><br><span class=\"line\">\t<span class=\"comment\">//result 则为合并之后的结果链表头节点，tail为结果链表的最后一个节点，方便尾插</span></span><br><span class=\"line\">    result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ListNode tail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//定义一个空的temp节点</span></span><br><span class=\"line\">    ListNode next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((cur1 != <span class=\"keyword\">null</span>)  &amp;&amp;  (cur2 != <span class=\"keyword\">null</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(cur1.data &lt;= cur2.data)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(result != <span class=\"keyword\">null</span>)<span class=\"comment\">//当结果链表不为空时</span></span><br><span class=\"line\">\t\t\t&#123;   </span><br><span class=\"line\">\t\t\t\ttemp = cur1.next;  <span class=\"comment\">// temp节点保存链表1的下一个节点，让循环可以继续</span></span><br><span class=\"line\">                tail.next = cur1;   <span class=\"comment\">// 插入过程</span></span><br><span class=\"line\">                cur1.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                tail = cur1;  <span class=\"comment\">//保存结果链表的最后一个节点</span></span><br><span class=\"line\">                cur1 = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;   <span class=\"comment\">// 结果链表为空时</span></span><br><span class=\"line\">                temp = cur1.next;</span><br><span class=\"line\">                result = cur1;</span><br><span class=\"line\">                cur1.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"comment\">//保存新的最后一个节点</span></span><br><span class=\"line\">                tail = cur1;</span><br><span class=\"line\">                cur1 = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">                temp = cur2.next;</span><br><span class=\"line\">                tail.next = cur2;</span><br><span class=\"line\">                cur2.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                tail = cur2;</span><br><span class=\"line\">                cur2 = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">                temp = cur2.next;</span><br><span class=\"line\">                result = cur2;</span><br><span class=\"line\">                cur2.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"comment\">//保存新的最后一个节点</span></span><br><span class=\"line\">                tail = cur2;</span><br><span class=\"line\">                cur2 = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//其中一个链表为空之后</span></span><br><span class=\"line\">    <span class=\"comment\">//第一条链表的cur1走完以后，第二条链表的cur2还没走完就直接插到结果链表的尾部</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur1 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        tail.next = cur2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//第二条链表的cur2走完以后，第一条链表的cur1还没走完就直接插到结果链表的尾部</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur2 == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        tail.next = cur1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "单链表",
                "数据结构",
                "面试题"
            ]
        }
    ]
}