{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog • All posts by \"异常\" tag",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "https://jQueryZK.github.io",
    "items": [
        {
            "id": "https://jqueryzk.github.io/2020/09/27/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88Java%E5%BC%82%E5%B8%B8%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "url": "https://jqueryzk.github.io/2020/09/27/Java%E5%AD%A6%E4%B9%A0-%E8%AF%A6%E8%B0%88Java%E5%BC%82%E5%B8%B8%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "title": "Java学习-详谈Java异常和异常处理",
            "date_published": "2020-09-27T06:29:34.088Z",
            "content_html": "<h1 id=\"1-异常\"><a class=\"markdownIt-Anchor\" href=\"#1-异常\">#</a> 1、异常</h1>\n<h2 id=\"11异常概念\"><a class=\"markdownIt-Anchor\" href=\"#11异常概念\">#</a> 1.1 异常概念</h2>\n<p>异常，就是不正常的意思。在生活中：医生说，你的身体某个部位有异常，该部位和正常相比有点不同，该部位的功能将 受影响。在程序中的意思就是：</p>\n<ul>\n<li><strong>异常</strong> ：指的是程序在执行过程中，出现的非正常的情况，最终会导致 JVM 的非正常停止。 ( <strong>异常机制其实是帮助我们找到程序中的问题</strong> )</li>\n</ul>\n<p>在 Java 等面向对象的编程语言中，<strong>异常本身是一个类</strong>，<strong>产生异常就是创建异常对象并抛出了一个异常对象</strong>。Java 处理异常的方式是<font color=red>中断处理</font>。</p>\n<h1 id=\"2-异常体系\"><a class=\"markdownIt-Anchor\" href=\"#2-异常体系\">#</a> 2、异常体系</h1>\n<h2 id=\"21throwable类\"><a class=\"markdownIt-Anchor\" href=\"#21throwable类\">#</a> 2.1Throwable 类</h2>\n<p>异常的<strong>根类</strong>：  <code>java.lang.Throwable</code> <br>\n (Java 中的所有不正常类都继承于 Throwable 类)</p>\n<p><strong>Throwable 中的常用方法</strong>：</p>\n<ul>\n<li><code>public void printStackTrace()</code>  : 打印异常的详细信息。 包含了异常的类型，异常的原因，还包括异常出现的位置，在开发和调试阶段，都得使用 printStackTrace。</li>\n<li><code>public String getMessage()</code>  : 获取发生异常的原因。 提示给用户的时候，就提示错误原因。</li>\n<li><code>public String toString()</code>  : 获取异常的类型和异常描述信息 (不用)。</li>\n</ul>\n<p><strong>出现异常，不要紧张，把异常的简单类名，拷贝到 API 中去查</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913150055239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong> Throwable 类</strong>下有两个子类：  <code>java.lang.Error</code>  与  <code>java.lang.Exception</code> <br>\n（注意：<font color=red>平常所说的异常指<strong> Exception</strong> 异常</font>）<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913143745634.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"22error类\"><a class=\"markdownIt-Anchor\" href=\"#22error类\">#</a> 2.2Error 类</h2>\n<p><code>java.lang.Error</code>  ：Error 类中包括<strong>虚拟机错误</strong>和<strong>线程死锁</strong>，<font color=blue>一旦 Error 出现了，程序就彻底的挂了，被称为程序终结者</font><br>\n（严重错误 Error，无法通过处理的错误，只能事先避免，好比绝症。）<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913144920753.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"23exception类\"><a class=\"markdownIt-Anchor\" href=\"#23exception类\">#</a> 2.3Exception 类</h2>\n<p><code>java.lang.Exception</code> ：Exception 类，也就是通常所说的 “异常”。主要指<strong>编码、环境、用户操作输入</strong>出现问题，Exception 主要包括两大类，<strong>非检查异常（RuntimeException）</strong> 和 <strong>检查异常（其他的一些异常）</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913145240967.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong> 1、RuntimeException 异常</strong>（<font color=blue>运行时期异常</font>）<br>\n<strong>在运行时期，检查异常。在编译时期，运行异常不会被编译器检测 (不报错)</strong><br>\n 主要包括以下四种异常（其实还有很多其他异常，这里不一一列出）：</p>\n<ul>\n<li>空指针异常</li>\n<li>数组下标越界异常</li>\n<li>类型转换异常</li>\n<li>算术异常。</li>\n</ul>\n<p>RuntimeException 异常会由<strong> java 虚拟机自动抛出并自动捕获</strong>（<font color=red>就算我们没写异常捕获语句运行时也会抛出错误！！</font>），此类异常的出现绝大数情况是<strong>代码本身有问题应该从逻辑上去解决并改进代码</strong>。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913145422898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong> 2、检查异常</strong>（<font color=blue>编译时期异常</font>）<br>\n在编译时期，就会检查，如果没有处理异常，则编译失败 (如日期格式化异常)<br>\n 引起该异常的原因多种多样，比如说<strong>文件不存在、或者是连接错误</strong>等。跟它的 “兄弟” RuntimeException 运行异常不同，该异常<strong>我们必须手动在代码里添加捕获语句来处理该异常</strong>，这也<font color=red>是我们学习 java 异常语句中主要处理的异常对象</font>。</p>\n<p><strong>总结图</strong>：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913151851131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"3-异常的产生过程解析\"><a class=\"markdownIt-Anchor\" href=\"#3-异常的产生过程解析\">#</a> 3、异常的产生过程解析</h1>\n<p>先运行下面的程序，程序会产生一个数组索引越界异常 ArrayIndexOfBoundsException</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayTools</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">// 对给定的数组通过给定的角标获取元素。 </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> element = arr[index]; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> element; </span><br><span class=\"line\">\t&#125; \t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionDemo</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">67</span> &#125;; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num = ArrayTools.getElement(arr, <span class=\"number\">4</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;num=&quot;</span> + num); </span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;over&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过图解来解析下 异常产生的过程。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913152518503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"4-异常处理\"><a class=\"markdownIt-Anchor\" href=\"#4-异常处理\">#</a> 4、异常处理</h1>\n<h2 id=\"41捕获异常try-catch语句\"><a class=\"markdownIt-Anchor\" href=\"#41捕获异常try-catch语句\">#</a> 4.1 捕获异常 try-catch 语句</h2>\n<p>如果异常出现的话，会立刻终止程序，所以我们得处理异常:</p>\n<ol>\n<li>该方法不处理，而是声明抛出，由该方法的调用者来处理 (throws)。</li>\n<li>在方法中使用 try-catch 的语句块来处理异常。</li>\n</ol>\n<p><strong>try-catch</strong> 的方式就是捕获异常。</p>\n<ul>\n<li>捕获异常：Java 中对异常有针对性的语句进行捕获，可以对出现的异常进行指定方式的处理。 捕获异常语法如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123; </span><br><span class=\"line\">\t编写可能会出现异常的代码 </span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型 e)&#123; </span><br><span class=\"line\">\t处理异常的代码 </span><br><span class=\"line\">\t<span class=\"comment\">//记录日志/打印异常信息/继续抛出异常 </span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>（Exception e）&#123;</span><br><span class=\"line\">\t处理该异常的代码块</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（1）<strong>try 块：</strong> 负责捕获异常，一旦 try 中发现异常，程序的控制权将被移交给 catch 块中的异常处理程序。<br>\n(<font color=blue>try 语句块不可以独立存在，必须与 catch 或者 finally 块同存</font>)<br>\n（2）<strong>catch 块：</strong> 如何处理？比如发出警告：提示、检查配置、网络连接，记录错误等。执行完 catch 块之后程序跳出 catch 块，继续执行后面的代码。<br>\n(<font color=blue>编写 catch 块的注意事项：多个 catch 块处理的异常类，要按照先 catch 子类后 catch 父类的处理方式，因为会【就近处理】异常（由上自下）</font>)</p>\n<p>当异常出现时，程序将终止执行，交由异常处理程序（抛出提醒或记录日志等），异常代码块外代码正常执行。 try 会抛出很多种类型的异常，由多个 catch 块捕获多钟错误。<br>\n多重异常处理代码块顺序问题：<strong>先子类再父类</strong>（顺序不对编译器会提醒错误）<br>\n<strong>代码演示：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 当产生异常时，必须有处理方式。要么捕获，要么声明。 </span></span><br><span class=\"line\">\t\t\tread(<span class=\"string\">&quot;b.txt&quot;</span>); </span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 括号中需要定义什么呢？ </span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//try中抛出的是什么异常，在括号中就定义什么异常类型 </span></span><br><span class=\"line\">\t\t\tSystem.out.println(e); &#125;System.out.println(<span class=\"string\">&quot;over&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * ** 我们 当前的这个方法中 有异常 有编译期异常 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> FileNotFoundException </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!path.equals(<span class=\"string\">&quot;a.txt&quot;</span>)) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果不是 a.txt这个文件</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 我假设 如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常 throw </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FileNotFoundException(<span class=\"string\">&quot;文件不存在&quot;</span>); </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020091316261476.png#\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"42finally-代码块\"><a class=\"markdownIt-Anchor\" href=\"#42finally-代码块\">#</a> 4.2finally 代码块</h2>\n<p><strong>finally：</strong> 有一些特定的代码<strong>无论异常是否发生，都需要执行</strong>。另外，因为异常会引发程序跳转，导致有些语句执行不到。而 finally 就是解决这个问题的，在 finally 代码块中存放的代码都是<strong>一定会被执行</strong>的。<strong>同时用于关闭和释放资源</strong>。<br>\n什么时候的代码必须最终执行？<br>\n当我们在 try 语句块中打开了一些物理资源 (磁盘文件 / 网络连接 / 数据库连接等), 我们都得在使用完之后，最终关闭打开 的资源。<br>\n<strong>finally 的语法:</strong><br>\ntry…catch…finally: 自身需要处理异常，最终还得关闭资源。<br>\n(<font color=red>注意:finally 不能单独使用。</font>)</p>\n<p>比如在我们之后学习的 IO 流中，当打开了一个关联文件的资源，最后程序不管结果如何，都需要把这个资源关闭掉。<br>\n<strong>代码演示：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> divider=<span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> result=<span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(divider&gt;-<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tdivider--;</span><br><span class=\"line\">                result=result+<span class=\"number\">100</span>/divider;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">             e.printStackTrace();</span><br><span class=\"line\">             System.out.println(<span class=\"string\">&quot;异常抛出了！！&quot;</span>);</span><br><span class=\"line\">             <span class=\"keyword\">return</span> result=<span class=\"number\">999</span>;</span><br><span class=\"line\">         &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">             System.out.println(<span class=\"string\">&quot;result的值为：&quot;</span>+result);</span><br><span class=\"line\">         &#125;       </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">         test t1=<span class=\"keyword\">new</span> test();</span><br><span class=\"line\">         t1.test2();</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;test2方法执行完毕！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913164024619.png#\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"43throw和thows关键字\"><a class=\"markdownIt-Anchor\" href=\"#43throw和thows关键字\">#</a> 4.3throw 和 thows 关键字</h2>\n<p>java 中的异常抛出通常使用<strong> throw</strong> 和<strong> throws</strong> 关键字来实现。</p>\n<ul>\n<li><strong>throw 关键字</strong></li>\n</ul>\n<p><strong>抛出异常 throw</strong>—— 将产生的异常抛出，是抛出异常的一个<font color=red>动作</font></p>\n<p>在编写程序时，我们必须要考虑程序出现问题的情况。比如，在定义方法时，方法需要接受参数。那么，当调用方法使用接受到的参数时，首先需要先对参数数据进行合法的判断，数据若不合法，就应该告诉调用者，传递合法的数据进来。这时需要使用抛出异常的方式来告诉调用者。<br>\n在 java 中，提供了一个 throw 关键字，它用来抛出一个指定的异常对象。<br>\n<strong>具体操作</strong>：</p>\n<ol>\n<li>创建一个异常对象。封装一些提示信息 (信息可以自己编写)。</li>\n<li>需要将这个异常对象告知给调用者。怎么告知呢？怎么将这个异常对象传递到调用者处呢？通过关键字 throw 就可以完成。throw 异常对象。</li>\n</ol>\n<p>（<font color=blue>throw 用在方法内，用来抛出一个异常对象，将这个异常对象传递到调用者处，并结束当前方法的执行</font>）</p>\n<p><strong>使用格式：</strong></p>\n<blockquote>\n<p>throw new 异常类名 (参数);</p>\n</blockquote>\n<p><strong>例如：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">&quot;要访问的arr数组不存在&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArrayIndexOutOfBoundsException(<span class=\"string\">&quot;该索引在数组中不存在，已超出范围&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>代码演示：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个数组 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">52</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//根据索引找对应的元素 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">4</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> element = getElement(arr, index);</span><br><span class=\"line\">\t\tSystem.out.println(element);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;over&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * * 根据 索引找到数组中对应的元素 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//判断 索引是否越界 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index&lt;<span class=\"number\">0</span> || index&gt;arr.length-<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*判断条件如果满足，当执行完throw抛出异常对象后，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t 方法已经无法继续运算。 这时就会结束当前方法的执行，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t  并将异常告知给调用者。这时就需要通过异常来解决。 */</span> </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArrayIndexOutOfBoundsException(<span class=\"string\">&quot;哥们，角标越界了~~~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> element = arr[index];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> element; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200913154612166.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>注意</strong>：如果产生了问题，我们就会 throw 将问题描述类即异常进行抛出，也就是<strong>将问题返回给该方法的调用者</strong>。<br>\n那么对于调用者来说，该怎么处理呢？一种是进行捕获处理，另一种就是<strong>继续讲问题声明出去，使用 throws 声明处理</strong>。</p>\n<ul>\n<li><strong>throws 关键字</strong></li>\n</ul>\n<p><strong>声明异常 throws</strong>—— 将要抛出何种类型的异常进行<font color=red>声明</font><br>\n<strong>声明异常</strong>：将问题标识出来，报告给调用者。如果方法内通过 throw 抛出了编译时异常，而没有捕获处理（稍后讲 解该方式），那么必须通过 throws 进行声明，让调用者去处理。<br>\n（<font color=blue>关键字 throws 运用于方法声明之上，用于表示当前方法不处理异常，而是提醒该方法的调用者来处理异常 (抛出异常)</font>）<br>\n<strong>声明异常格式</strong>：</p>\n<blockquote>\n<p>修饰符 返回值类型 方法名 (参数) throws 异常类名 1, 异常类名 2…</p>\n</blockquote>\n<p><strong>声明异常的代码演示：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\tread(<span class=\"string\">&quot;a.txt&quot;</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果定义功能时有问题发生需要报告给调用者。可以通过在方法上使用throws关键字进行声明 </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> FileNotFoundException </span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!path.equals(<span class=\"string\">&quot;a.txt&quot;</span>)) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果不是 a.txt这个文件</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 假设如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常 throw</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FileNotFoundException(<span class=\"string\">&quot;文件不存在&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>throws 用于进行异常类的声明，若该方法可能有多种异常情况产生，那么在 throws 后面<strong>可以写多个异常类，用逗 号隔开</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\tread(<span class=\"string\">&quot;a.txt&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(String path)</span><span class=\"keyword\">throws</span> FileNotFoundException, IOException </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!path.equals(<span class=\"string\">&quot;a.txt&quot;</span>)) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果不是 a.txt这个文件 </span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常 throw </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FileNotFoundException(<span class=\"string\">&quot;文件不存在&quot;</span>); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!path.equals(<span class=\"string\">&quot;b.txt&quot;</span>)) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>throw 与 throws 的比较：</strong><br>\n1、throws 出现在方法函数头；而 throw 出现在函数体。<br>\n2、throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw 则是抛出了异常，执行 throw 则一定抛出了某种异常对象。<br>\n3、两者都是消极处理异常的方式（这里的消极并不是说这种方式不好），只是抛出或者可能抛出异常，但是不会由函数去处理异常，真正的处理异常由函数的上层调用处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doA</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> <span class=\"title\">throws</span> <span class=\"params\">(Exception1,Exception2,Exception3)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">          ......</span><br><span class=\"line\">   </span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception1 e)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception2 e)&#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;出错了！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(a!=b)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception3(<span class=\"string\">&quot;自定义异常&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>分析:</strong><br>\n1. 代码块中可能会产生 3 个异常，(Exception1,Exception2,Exception3)。<br>\n2. 如果产生 Exception1 异常，则捕获之后再抛出，由该方法的调用者去处理。<br>\n3. 如果产生 Exception2 异常，则该方法自己处理了（即 System.out.println (“出错了！”);）。所以该方法就不会再向外抛出 Exception2 异常了，void doA () throws Exception1,Exception3 里面的 Exception2 也就不用写了。因为已经用 try-catch 语句捕获并处理了。<br>\n4.Exception3 异常是该方法的某段逻辑出错，程序员自己做了处理，在该段逻辑错误的情况下抛出异常 Exception3，则该方法的调用者也要处理此异常。</p>\n<p><strong>使用 throw 和 throws 关键字需要注意以下几点：</strong></p>\n<ul>\n<li>throws 的异常列表可以是抛出一条异常，也可以是抛出多条异常，每个类型的异常中间用逗号隔开</li>\n<li>方法体中调用会抛出异常的方法或者是先抛出一个异常：用 throw new Exception（） throw 写在方法体里，表示 “抛出异常” 这个动作。</li>\n<li>如果某个方法调用了抛出异常的方法，那么必须添加 try catch 语句去尝试捕获这种异常， 或者添加声明，将异常抛出给更上一层的调用者进行处理</li>\n</ul>\n<h1 id=\"5-自定义异常\"><a class=\"markdownIt-Anchor\" href=\"#5-自定义异常\">#</a> 5、自定义异常</h1>\n<h2 id=\"51概述\"><a class=\"markdownIt-Anchor\" href=\"#51概述\">#</a> 5.1 概述</h2>\n<p><strong>为什么需要自定义异常类</strong>:<br>\n 我们说了 Java 中不同的异常类，分别表示着某一种具体的异常情况，那么在开发中总是有些异常情况是 SUN 没有定义 好的，此时我们根据自己业务的异常情况来定义异常类。例如年龄负数问题，考试成绩负数问题等等。 在上述代码中，发现这些异常都是 JDK 内部定义好的，但是实际开发中也会出现很多异常，这些异常很可能在 JDK 中 没有定义过，例如年龄负数问题，考试成绩负数问题。那么能不能自己定义异常呢？<br>\n<strong>什么是自定义异常类</strong>:<br>\n 在开发中根据自己业务的异常情况来定义异常类。自定义一个业务逻辑异常: RegisterException。一个注册异常类。<br>\n<strong>异常类如何定义</strong>:</p>\n<ol>\n<li>自定义一个编译期异常：自定义类 并继承于  <code>java.lang.Exception</code></li>\n<li>自定义一个运行时期的异常类：自定义类 并继承于  <code>java.lang.RuntimeException</code></li>\n</ol>\n<p><strong>练习</strong>：模拟注册操作，如果用户名已存在，则抛出异常并提示：亲，该用户名已经被注册。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegisterException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*** 空参构造 */</span> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RegisterException</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**** <span class=\"doctag\">@param</span> message 表示异常提示 */</span> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RegisterException</span><span class=\"params\">(String message)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 模拟数据库中已存在账号 </span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] names = &#123;<span class=\"string\">&quot;bill&quot;</span>,<span class=\"string\">&quot;hill&quot;</span>,<span class=\"string\">&quot;jill&quot;</span>&#125;; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> LoginException </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"comment\">//调用方法 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123; </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 可能出现异常的代码 </span></span><br><span class=\"line\">\t\t\tcheckUsername(<span class=\"string\">&quot;bill&quot;</span>); </span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;注册成功&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果没有异常就是注册成功</span></span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">catch</span>(RegisterException e)&#123; </span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//处理异常 </span></span><br><span class=\"line\">\t\t\t\te.printStackTrace(); </span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//判断当前注册账号是否存在 </span></span><br><span class=\"line\">\t<span class=\"comment\">//因为是编译期异常，又想调用者去处理 所以声明该异常 </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkUsername</span><span class=\"params\">(String uname)</span> <span class=\"keyword\">throws</span> LoginException, RegisterException</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String name : names) </span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(name.equals(uname))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果名字在这里面 就抛出登陆异常 </span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RegisterException(<span class=\"string\">&quot;亲&quot;</span>+name+<span class=\"string\">&quot;已经被注册了！&quot;</span>); </span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/202009131703557.png\" alt=\"在这里插入图片描述\"><br>\n在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。</p>\n<ul>\n<li>所有异常都必须是 Throwable 的子类。</li>\n<li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li>\n<li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li>\n</ul>\n",
            "tags": [
                "java",
                "异常",
                "异常处理"
            ]
        }
    ]
}