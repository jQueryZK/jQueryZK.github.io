{
    "version": "https://jsonfeed.org/version/1",
    "title": "jQueryZK Blog • All posts by \"逆波兰表达式\" tag",
    "description": "过去无法挽回，未来可以改变",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/2020/08/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%A7%A3%E6%A0%88-%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/",
            "url": "http://yoursite.com/2020/08/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89-%E8%AF%A6%E8%A7%A3%E6%A0%88-%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/",
            "title": "数据结构（Java实现）-详解栈（实现中缀表达式计算器、逆波兰计算器   中缀表达式转逆波兰表达式过程）",
            "date_published": "2020-08-23T08:04:57.561Z",
            "content_html": "<h1 id=\"1-栈stack的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1-栈stack的介绍\">#</a> 1、栈（stack）的介绍：</h1>\n<ol>\n<li>栈是一个先入后出、后入先出的<strong>有序列表。</strong></li>\n<li>栈是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端为变化端，称为<strong>栈顶（Top）</strong>，另一端为固定端，称为<strong>栈底（Bottom）</strong>。</li>\n<li>根据栈的定义可知，最先放入栈中的元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除     （类似于子弹匣）</li>\n</ol>\n<h2 id=\"11例如\"><a class=\"markdownIt-Anchor\" href=\"#11例如\">#</a> 1.1 例如</h2>\n<p>1、入栈：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818202743623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 2、出栈：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081820280271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"12栈的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#12栈的应用场景\">#</a> 1.2 栈的应用场景</h2>\n<ol>\n<li>子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。</li>\n<li>处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。</li>\n<li>表达式的转换 [中缀表达式转后缀表达式] 与求值 (实际解决)。</li>\n<li>二叉树的遍历。</li>\n<li>图形的深度优先 (depth 一 first) 搜索法。</li>\n</ol>\n<h2 id=\"13栈的快速入门\"><a class=\"markdownIt-Anchor\" href=\"#13栈的快速入门\">#</a> 1.3 栈的快速入门</h2>\n<p>用数组模拟栈的使用，由于栈是一种有序列表， 当然可以使用数组的结构来储存栈的数据内容， 下面我们就用数组模拟栈的出栈，入栈等操作。<br>\n<strong>实现思路和示意图：</strong></p>\n<ol>\n<li>使用数组来模拟栈</li>\n<li>定义一个 top 来表示栈顶，初始化为 - 1</li>\n<li><strong>入栈</strong>的操作，当数据加入到栈是，top++；stack [top] = data；</li>\n<li><strong>出栈</strong>的操作，int value = stack [top];top–; return value;<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818203832795.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>代码：</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStackDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一下ArrayStack 是否正确</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//先创建一个ArrayStack对象-&gt;表示栈</span></span><br><span class=\"line\">\t\tArrayStack stack = <span class=\"keyword\">new</span> ArrayStack(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> key;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> loop = <span class=\"keyword\">true</span>; <span class=\"comment\">//控制是否退出菜单</span></span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(loop) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;1: 遍历栈中的所有元素&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;2: 表示添加数据到栈(入栈)&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;3: 表示从栈取出数据(出栈)&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;4: 退出程序&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入你的选择&quot;</span>);</span><br><span class=\"line\">\t\t\tkey = scanner.nextInt();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (key) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tstack.list();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入一个数&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> value = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\tstack.push(value);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> res = stack.pop();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.printf(<span class=\"string\">&quot;出栈的数据是 %d\\n&quot;</span>, res);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(e.getMessage());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\t\tscanner.close();</span><br><span class=\"line\">\t\t\t\tloop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;程序退出~~~&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义一个 ArrayStack 表示栈</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStack</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize; <span class=\"comment\">// 栈的大小</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] stack; <span class=\"comment\">// 数组，数组模拟栈，数据就放在该数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top = -<span class=\"number\">1</span>;<span class=\"comment\">// top表示栈顶，初始化为-1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">\t\tstack = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"keyword\">this</span>.maxSize];<span class=\"comment\">//初始化这个数组</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//栈满</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> top == maxSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//栈空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> top == -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//入栈-push</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断栈是否满</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isFull()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;栈满&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttop++;</span><br><span class=\"line\">\t\tstack[top] = value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//出栈-pop, 将栈顶的数据返回</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断栈是否空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//抛出异常</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;栈空，没有数据~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value = stack[top];</span><br><span class=\"line\">\t\ttop--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;栈空，没有数据~~&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//需要从栈顶开始显示数据</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = top; i &gt;= <span class=\"number\">0</span> ; i--) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;stack[%d]=%d\\n&quot;</span>, i, stack[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>测试：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">请输入一个数</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">请输入一个数</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">请输入一个数</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">stack[<span class=\"number\">2</span>]=<span class=\"number\">8</span></span><br><span class=\"line\">stack[<span class=\"number\">1</span>]=<span class=\"number\">6</span></span><br><span class=\"line\">stack[<span class=\"number\">0</span>]=<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">出栈的数据是 <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">1</span>: 遍历栈中的所有元素</span><br><span class=\"line\"><span class=\"number\">2</span>: 表示添加数据到栈(入栈)</span><br><span class=\"line\"><span class=\"number\">3</span>: 表示从栈取出数据(出栈)</span><br><span class=\"line\"><span class=\"number\">4</span>: 退出程序</span><br><span class=\"line\">请输入你的选择</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">程序退出~~~</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-栈实现计算器运算中缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#2-栈实现计算器运算中缀表达式\">#</a> 2、栈实现计算器（运算中缀表达式)</h1>\n<h2 id=\"1-提出问题\"><a class=\"markdownIt-Anchor\" href=\"#1-提出问题\">#</a> 1、提出问题</h2>\n<p><strong>计算式：[7<em>2</em>2-5+1-5+3-3]</strong><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819091212282.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n请问：计算机底层是如何运算得到结果的？注意不是简单的把算式列出运算，<strong>思考计算机是怎么理解这个算式的</strong>（对计算机而言，它接收到的就是一个字符串）—— 栈</p>\n<h2 id=\"2-使用栈完成表达式的思路\"><a class=\"markdownIt-Anchor\" href=\"#2-使用栈完成表达式的思路\">#</a> 2、使用栈完成表达式的思路</h2>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819094050556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 1、创建两个栈，分别为数栈（存放数）符号栈（存放符号）</p>\n<p>2、使用一个 index  值（索引），来遍历扫描我们的表达式</p>\n<p>3、如果扫描的是一个数字就直接入栈</p>\n<p>4、如果扫描的是一个符号，就分如下情况：</p>\n<pre><code>  a、如果发现当前的符号栈为空，就直接入栈\n\n  b、如果符号栈有操作符，就进行比较：\n</code></pre>\n<ul>\n<li>如果当前的操作符的优先级小于或者等于栈中的操作符， 就需要从数栈中 pop 出两个数，在从符号栈中 pop 出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈，</li>\n<li>如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.<br>\n5、当表达式扫描完毕，就顺序的从 数栈和符号栈中 pop 出相应的数和符号，并进行运算.</li>\n</ul>\n<p>6、最后在数栈中只有一个数字，就是表达式的结果</p>\n<h2 id=\"3-按照思路图解验证一个表达式的运算\"><a class=\"markdownIt-Anchor\" href=\"#3-按照思路图解验证一个表达式的运算\">#</a> 3、按照思路图解验证一个表达式的运算</h2>\n<p>验证：3+2<em>6-2=13<br>\n1、index 扫描到数字 3 直接入栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819095936939.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n 2、index 扫描到符号 +，判断当前的符号栈为空，就直接入栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819100152671.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n 3、index 扫描到 2，直接进栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819100346288.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n 4、扫描到</em>，<em>的优先级大于 +，直接进栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819100533648.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n 5、扫描到 6，直接进栈。<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819100736986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 6、扫描到 -，- 的优先级小于栈中的</em>，从数栈中 pop 出两个数 6 和 2，从符号栈中 pop 出 *<br>\n 运算：2*6=12 ，将 12 进栈，- 进栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819101231934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 7、扫描到 2，直接进栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819101413213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 8、依次 pop 出两个数和一个符号进行运算（后一个数   符号   前一个数）<br>\n数栈 pop 出 2 和 12    符号栈 pop 出 -       运算：12-2=10   将 10 入栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819101709987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n数栈 pop 出 10 和 3     符号栈 pop 出 +     运算：3+10=13  将 13 入栈<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819101853220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n 9、此时数栈中的 13 为最终运算结果，而符号栈栈空<br>\n<font color=red>注意：在测试过程中发现如果表达式中有多位数运算就会出问题。比如表达式中如果有数字 13 的话这里的 1 和 3 就会当成两个数分开入栈，后面的运算自然也会出问题。<br>\n解决方法：</p>\n<ol>\n<li><strong>在扫描到一个字符是数时不能立即入栈，向表达式中看向 index 指向字符的下一位，注意只是看 index 指向字符的后一位而不是 index++4、 掌握循环语句</strong></li>\n<li><strong>如果 index 指向字符的下一位还是数就继续扫描并将该数和之前的数进行字符拼接，如果下一位是符号就能入栈</strong></li>\n<li><strong>定义一个字符串变量，用于拼接</strong></li>\n</ol>\n<h2 id=\"4-实现代码\"><a class=\"markdownIt-Anchor\" href=\"#4-实现代码\">#</a> 4、实现代码：</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;请输入一个仅限于加减乘除的数学表达式：&quot;</span>);</span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\tString expression = scanner.next(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建两个栈，数栈，一个符号栈</span></span><br><span class=\"line\">\t\tCalculatorStack numStack = <span class=\"keyword\">new</span> CalculatorStack (<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tCalculatorStack  operStack = <span class=\"keyword\">new</span> CalculatorStack (<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义需要的相关变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;<span class=\"comment\">//用于扫描</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num1 = <span class=\"number\">0</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> oper = <span class=\"number\">0</span>;<span class=\"comment\">//保存运算符</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;<span class=\"comment\">//保存每次的运算结果</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> ch = <span class=\"string\">&#x27; &#x27;</span>; <span class=\"comment\">//将每次扫描得到char保存到ch</span></span><br><span class=\"line\">\t\tString keepNum = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">//用于拼接 多位数</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//开始while循环的扫描expression</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//依次得到expression 的每一个字符</span></span><br><span class=\"line\">\t\t\tch = expression.substring(index, index+<span class=\"number\">1</span>).charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//判断ch是什么，然后做相应的处理</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(operStack.isOper(ch)) &#123;<span class=\"comment\">//如果是运算符</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//判断当前的符号栈是否为空</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!operStack.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符,就需要从数栈中pop出两个数,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(operStack.priority(ch) &lt;= operStack.priority(operStack.peek())) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tnum1 = numStack.pop();</span><br><span class=\"line\">\t\t\t\t\t\tnum2 = numStack.pop();</span><br><span class=\"line\">\t\t\t\t\t\toper = operStack.pop();</span><br><span class=\"line\">\t\t\t\t\t\tres = numStack.cal(num1, num2, oper);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//把运算的结果入数栈</span></span><br><span class=\"line\">\t\t\t\t\t\tnumStack.push(res);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//然后将当前的操作符入符号栈</span></span><br><span class=\"line\">\t\t\t\t\t\toperStack.push(ch);</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.</span></span><br><span class=\"line\">\t\t\t\t\t\toperStack.push(ch);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//如果为空直接入符号栈..</span></span><br><span class=\"line\">\t\t\t\t\toperStack.push(ch); <span class=\"comment\">// 1 + 3</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果是数有以下分析</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//分析思路</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//1. 当处理多位数时，不能发现是一个数就立即入栈，因为他可能是多位数</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//2. 在处理数，需要向expression的表达式的index 后再看一位,如果是数就进行扫描，如果是符号才入栈</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//3. 因此我们需要定义一个变量 字符串，用于拼接\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//处理多位数</span></span><br><span class=\"line\">\t\t\t\tkeepNum += ch;\t\t<span class=\"comment\">//拼接\t\t</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果ch已经是expression的最后一位，就直接入栈</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (index == expression.length() - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tnumStack.push(Integer.parseInt(keepNum));</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//判断下一个字符是不是数字，如果是数字，就继续扫描，如果是运算符，则入栈</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//注意是看后一位，不是index++</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (operStack.isOper(expression.substring(index+<span class=\"number\">1</span>,index+<span class=\"number\">2</span>).charAt(<span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//如果后一位是运算符，则入栈 keepNum = &quot;1&quot; 或者 &quot;123&quot;</span></span><br><span class=\"line\">\t\t\t\t\t\tnumStack.push(Integer.parseInt(keepNum));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//重要的!!!!!!, keepNum清空,方便后面再次扫描到多位数时的使用</span></span><br><span class=\"line\">\t\t\t\t\t\tkeepNum = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//让index + 1, 并判断是否扫描到expression最后.</span></span><br><span class=\"line\">\t\t\tindex++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (index &gt;= expression.length()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//当表达式扫描完毕，就顺序的从 数栈和符号栈中pop出相应的数和符号，并运行.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果符号栈为空，则计算到最后的结果, 数栈中只有一个数字【结果】</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(operStack.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tnum1 = numStack.pop();</span><br><span class=\"line\">\t\t\tnum2 = numStack.pop();</span><br><span class=\"line\">\t\t\toper = operStack.pop();</span><br><span class=\"line\">\t\t\tres = numStack.cal(num1, num2, oper);</span><br><span class=\"line\">\t\t\tnumStack.push(res);<span class=\"comment\">//入栈</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将数栈的最后数，pop出，就是结果</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> res2 = numStack.pop();</span><br><span class=\"line\">\t\tSystem.out.printf(<span class=\"string\">&quot;表达式 %s = %d&quot;</span>, expression, res2);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先创建一个栈,直接使用前面创建好</span></span><br><span class=\"line\"><span class=\"comment\">//定义一个 ArrayStack2 表示栈, 需要扩展功能</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculatorStack</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize; <span class=\"comment\">// 栈的大小</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] stack; <span class=\"comment\">// 数组，数组模拟栈，数据就放在该数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top = -<span class=\"number\">1</span>;<span class=\"comment\">// top表示栈顶，初始化为-1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CalculatorStack</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">\t\tstack = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"keyword\">this</span>.maxSize];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//增加一个方法，可以返回当前栈顶的值, 但是不是真正的pop</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> stack[top];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//栈满</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> top == maxSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//栈空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> top == -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//入栈-push</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断栈是否满</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isFull()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;栈满&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttop++;</span><br><span class=\"line\">\t\tstack[top] = value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//出栈-pop, 将栈顶的数据返回</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断栈是否空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//抛出异常</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;栈空，没有数据~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value = stack[top];</span><br><span class=\"line\">\t\ttop--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;栈空，没有数据~~&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//需要从栈顶开始显示数据</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = top; i &gt;= <span class=\"number\">0</span> ; i--) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;stack[%d]=%d\\n&quot;</span>, i, stack[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//返回运算符的优先级，优先级是程序员来确定, 优先级使用数字表示</span></span><br><span class=\"line\">\t<span class=\"comment\">//数字越大，则优先级就越高.</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">priority</span><span class=\"params\">(<span class=\"keyword\">int</span> oper)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(oper == <span class=\"string\">&#x27;*&#x27;</span> || oper == <span class=\"string\">&#x27;/&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oper == <span class=\"string\">&#x27;+&#x27;</span> || oper == <span class=\"string\">&#x27;-&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>; <span class=\"comment\">// 假定目前的表达式只有 +, - , * , /</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//判断是不是一个运算符</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOper</span><span class=\"params\">(<span class=\"keyword\">char</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> val == <span class=\"string\">&#x27;+&#x27;</span> || val == <span class=\"string\">&#x27;-&#x27;</span> || val == <span class=\"string\">&#x27;*&#x27;</span> || val == <span class=\"string\">&#x27;/&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//计算方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2, <span class=\"keyword\">int</span> oper)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>; <span class=\"comment\">// res 用于存放计算的结果</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (oper) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">\t\t\tres = num2 + num1;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">\t\t\tres = num2 - num1;<span class=\"comment\">// 注意顺序</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">\t\t\tres = num2 * num1;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">\t\t\tres = num2 / num1;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请输入一个仅限于加减乘除的数学表达式：</span><br><span class=\"line\"><span class=\"number\">2</span>+<span class=\"number\">4</span>*<span class=\"number\">12</span>-<span class=\"number\">4</span>+<span class=\"number\">6</span>*<span class=\"number\">14</span></span><br><span class=\"line\">表达式 <span class=\"number\">2</span>+<span class=\"number\">4</span>*<span class=\"number\">12</span>-<span class=\"number\">4</span>+<span class=\"number\">6</span>*<span class=\"number\">14</span> = <span class=\"number\">130</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-前缀-中缀和后缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#3-前缀-中缀和后缀表达式\">#</a> 3、前缀、中缀和后缀表达式</h1>\n<h2 id=\"1-前缀表达式波兰式\"><a class=\"markdownIt-Anchor\" href=\"#1-前缀表达式波兰式\">#</a> 1、前缀表达式（波兰式）</h2>\n<p>（1）、前缀表达式又称波兰式，前缀表达式的运算符位于操作数之前</p>\n<p>（2）、举例说明： (3+4)×5-6 对应的前缀表达式就是 - × + 3 4 5 6<br>\n<font color=blue>前缀表达式的计算机求值：<br>\n<font color=red>从右至左<font color=black>扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（栈顶元素和次顶元素），并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果<br>\n例如: (3+4)×5-6 对应的前缀表达式就是 - × + 3 4 5 6 , 针对前缀表达式求值步骤如下:</p>\n<ol>\n<li>从右至左扫描表达式 &quot;- × + 3 4 5 6&quot;，将 6、5、4、3 压入堆栈</li>\n<li>遇到 + 运算符，因此弹出 3 和 4（3 为栈顶元素，4 为次顶元素），计算出 3+4 的值，得 7，再将 7 入栈</li>\n<li>接下来是 × 运算符，因此弹出 7 和 5，计算出 7×5=35，将 35 入栈</li>\n<li>最后是 - 运算符，计算出 35-6 的值，即 29，由此得出最终结果</li>\n</ol>\n<h2 id=\"2-中缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#2-中缀表达式\">#</a> 2、中缀表达式</h2>\n<p>（1）、中缀表达式就是常见的运算表达式，如 (3+4)×5-6<br>\n（2）、中缀表达式的求值是我们人最熟悉的，但是对计算机来说却不好操作 (前面我们讲的案例就能看的这个问题)，因此，在计算结果时，往往会将中缀表达式转成其它表达式来操作 (一般转成后缀表达式.)</p>\n<h2 id=\"3-后缀表达式逆波兰式\"><a class=\"markdownIt-Anchor\" href=\"#3-后缀表达式逆波兰式\">#</a> 3、后缀表达式（逆波兰式）</h2>\n<p>（1）、后缀表达式又称逆波兰表达式，与前缀表达式相似，只是运算符位于操作数之后<br>\n（2）、中举例说明： (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 –<br>\n（3）、再比如：<br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819154438442.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>后缀表达式的计算机求值：</strong><br>\n从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素 和 栈顶元素），并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果<br>\n<strong>例如: (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 - , 针对后缀表达式求值步骤如下:</strong></p>\n<ol>\n<li>从左至右扫描 &quot;3 4 + 5 × 6 -&quot;，将 3 和 4 压入堆栈；</li>\n<li>遇到 + 运算符，因此弹出 4 和 3（4 为栈顶元素，3 为次顶元素），计算出 3+4 的值，得 7，再将 7 入栈；</li>\n<li>将 5 入栈；</li>\n<li>接下来是 × 运算符，因此弹出 5 和 7，计算出 7×5=35，将 35 入栈；</li>\n<li>将 6 入栈；</li>\n<li>最后是 - 运算符，计算出 35-6（次顶 - 栈顶）的值，即 29，由此得出最终结果</li>\n</ol>\n<h1 id=\"4-逆波兰计算器\"><a class=\"markdownIt-Anchor\" href=\"#4-逆波兰计算器\">#</a> 4、逆波兰计算器</h1>\n<h2 id=\"1-中缀表达式转为后缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#1-中缀表达式转为后缀表达式\">#</a> 1、中缀表达式转为后缀表达式</h2>\n<p>后缀表达式适合计算式进行运算，但是人却不太容易写出来，尤其是表达式很长的情况下，因此在开发中，我们需要将 <strong>中缀表达式转成后缀表达式</strong><br>\n具体步骤：<br>\n1、初始化两个栈：运算符栈 s1 和储存中间结果的栈 s2；<br>\n2、从左至右扫描中缀表达式；<br>\n3、遇到操作数时，将其压入 s2<br>\n4、遇到运算符时，比较其与 s1 栈顶运算符的优先级：</p>\n<ol>\n<li>如果 s1 为空，或栈顶运算符为左括号 “(”，则直接将此运算符入栈；</li>\n<li>否则，若优先级比栈顶运算符的高，也将运算符压入 s1；</li>\n<li>否则，将 s1 栈顶的运算符弹出并压入到 s2 中，再次转到 (4.1 的操作) 与 s1 中新的栈顶运算符相比较；</li>\n</ol>\n<p>5、遇到括号时：<br>\n6、重复步骤 2 至 5，直到表达式的最右边<br>\n 7、将 s1 中剩余的运算符依次弹出并压入 s2<br>\n8、依次弹出 s2 中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式<br>\n *<em> 例如：将中缀表达式 “1+((2+3)<em> 4)-5” 转 换为后缀表达式的过程如下：</em></em><br>\n<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081917095222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDI3OTE3OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>\n<strong>因此结果为：&quot;1 2 3 + 4 * + 5 –&quot;</strong></p>\n<h2 id=\"2-将得到的后缀表达式进行运算\"><a class=\"markdownIt-Anchor\" href=\"#2-将得到的后缀表达式进行运算\">#</a> 2、将得到的后缀表达式进行运算</h2>\n<p><strong>后缀表达式：“1 2 3 + 4 * + 5 –”<br>\n 运算过程（即后缀表达式的运算过程）：</strong></p>\n<ol>\n<li>从左至右扫描 &quot;1 2 3 + 4 * + 5 –&quot;，将 1、2、3 压入堆栈；</li>\n<li>遇到 + 运算符，因此弹出 3 和 2（3 为栈顶元素，2 为次顶元素），计算出 2+3 的值，得 5，再将 5 入栈；</li>\n<li>将 4 入栈；</li>\n<li>接下来是 * 运算符，因此弹出 4 和 5，计算出 4×5=20，将 20 入栈；</li>\n<li>遇到 + 运算符，因此弹出 20 和 1（20 为栈顶元素，1 为次顶元素），计算出 20+1 的值，得 21，再将 21 入栈；</li>\n<li>将 5 入栈；</li>\n<li>最后是 - 运算符，弹出 5 和 21（5 为栈顶元素，21 为次顶元素）21-5（次顶 - 栈顶）的值，即 16，由此得出最终结果</li>\n</ol>\n<h2 id=\"3-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#3-代码实现\">#</a> 3、代码实现：</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PolandNotation</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//完成将一个中缀表达式转成后缀表达式的功能</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//说明</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 1+((2+3)×4)-5 =&gt; 转成  1 2 3 + 4 × + 5 –</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 因为直接对str 进行操作，不方便，因此 先将  &quot;1+((2+3)×4)-5&quot; =》 中缀的表达式对应的List</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//   即 &quot;1+((2+3)×4)-5&quot; =&gt; ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//3. 将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//   即 ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]  =》 ArrayList [1,2,3,+,4,*,+,5,–]\t</span></span><br><span class=\"line\">\t\tString expression = <span class=\"string\">&quot;1+((2+3)*4)-5&quot;</span>;<span class=\"comment\">//注意表达式 </span></span><br><span class=\"line\">\t\tList&lt;String&gt; infixExpressionList = toInfixExpressionList(expression);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;中缀表达式对应的List=&quot;</span> + infixExpressionList); <span class=\"comment\">// ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]</span></span><br><span class=\"line\">\t\tList&lt;String&gt; suffixExpreesionList = parseSuffixExpreesionList(infixExpressionList);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;后缀表达式对应的List&quot;</span> + suffixExpreesionList); <span class=\"comment\">//ArrayList [1,2,3,+,4,*,+,5,–] \t</span></span><br><span class=\"line\">\t\tSystem.out.printf(<span class=\"string\">&quot;运算结果=%d&quot;</span>, calculate(suffixExpreesionList)); <span class=\"comment\">// ?\t</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//即 ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]  =》 ArrayList [1,2,3,+,4,*,+,5,–]</span></span><br><span class=\"line\">\t<span class=\"comment\">//方法：将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">parseSuffixExpreesionList</span><span class=\"params\">(List&lt;String&gt; ls)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义两个栈</span></span><br><span class=\"line\">\t\tStack&lt;String&gt; s1 = <span class=\"keyword\">new</span> Stack&lt;String&gt;(); <span class=\"comment\">// 符号栈</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//说明：因为s2 这个栈，在整个转换过程中，没有pop操作，而且后面我们还需要逆序输出</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//因此比较麻烦，这里我们就不用 Stack&lt;String&gt; 直接使用 List&lt;String&gt; s2</span></span><br><span class=\"line\">\t\tList&lt;String&gt; s2 = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(); <span class=\"comment\">// 储存中间结果的Lists2\t\t</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历ls</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(String item: ls) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果是一个数，加入s2</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(item.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\ts2.add(item);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;(&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\ts1.push(item);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;)&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(!s1.peek().equals(<span class=\"string\">&quot;(&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\ts2.add(s1.pop());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\ts1.pop();<span class=\"comment\">//!!! 将 ( 弹出 s1栈， 消除小括号</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//当item的优先级小于等于s1栈顶运算符, 将s1栈顶的运算符弹出并加入到s2中，再次转到(4.1)与s1中新的栈顶运算符相比较</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//问题：我们缺少一个比较优先级高低的方法</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(s1.size() != <span class=\"number\">0</span> &amp;&amp; Operation.getValue(s1.peek()) &gt;= Operation.getValue(item) ) &#123;</span><br><span class=\"line\">\t\t\t\t\ts2.add(s1.pop());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//还需要将item压入栈</span></span><br><span class=\"line\">\t\t\t\ts1.push(item);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//将s1中剩余的运算符依次弹出并加入s2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(s1.size() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\ts2.add(s1.pop());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s2; <span class=\"comment\">//注意因为是存放到List, 因此按顺序输出就是对应的后缀表达式对应的List\t</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//方法：将 中缀表达式转成对应的List</span></span><br><span class=\"line\">\t<span class=\"comment\">//  s=&quot;1+((2+3)×4)-5&quot;;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">toInfixExpressionList</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义一个List,存放中缀表达式 对应的内容</span></span><br><span class=\"line\">\t\tList&lt;String&gt; ls = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; <span class=\"comment\">//这时是一个指针，用于遍历 中缀表达式字符串</span></span><br><span class=\"line\">\t\tString str; <span class=\"comment\">// 对多位数的拼接</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c; <span class=\"comment\">// 每遍历到一个字符，就放入到c</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果c是一个非数字，我需要加入到ls</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>((c=s.charAt(i)) &lt; <span class=\"number\">48</span> ||  (c=s.charAt(i)) &gt; <span class=\"number\">57</span>) &#123;</span><br><span class=\"line\">\t\t\t\tls.add(<span class=\"string\">&quot;&quot;</span> + c);</span><br><span class=\"line\">\t\t\t\ti++; <span class=\"comment\">//i需要后移</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果是一个数，需要考虑多位数</span></span><br><span class=\"line\">\t\t\t\tstr = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">//先将str 置成&quot;&quot; &#x27;0&#x27;[48]-&gt;&#x27;9&#x27;[57]</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(i &lt; s.length() &amp;&amp; (c=s.charAt(i)) &gt;= <span class=\"number\">48</span> &amp;&amp; (c=s.charAt(i)) &lt;= <span class=\"number\">57</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tstr += c;<span class=\"comment\">//拼接</span></span><br><span class=\"line\">\t\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tls.add(str);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">while</span>(i &lt; s.length());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ls;<span class=\"comment\">//返回</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//将一个逆波兰表达式， 依次将数据和运算符放入到 ArrayList中</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getListString</span><span class=\"params\">(String suffixExpression)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将 suffixExpression 分割</span></span><br><span class=\"line\">\t\tString[] split = suffixExpression.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\tList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(String ele: split) &#123;</span><br><span class=\"line\">\t\t\tlist.add(ele);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(List&lt;String&gt; ls)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建给栈, 只需要一个栈即可</span></span><br><span class=\"line\">\t\tStack&lt;String&gt; stack = <span class=\"keyword\">new</span> Stack&lt;String&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历 ls</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String item : ls) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 这里使用正则表达式来取出数</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (item.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>)) &#123; <span class=\"comment\">// 匹配的是多位数</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 入栈</span></span><br><span class=\"line\">\t\t\t\tstack.push(item);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// pop出两个数，并运算， 再入栈</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> num2 = Integer.parseInt(stack.pop());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> num1 = Integer.parseInt(stack.pop());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;+&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\tres = num1 + num2;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;-&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\tres = num1 - num2;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;*&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\tres = num1 * num2;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\tres = num1 / num2;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;运算符有误&quot;</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//把res 入栈</span></span><br><span class=\"line\">\t\t\t\tstack.push(<span class=\"string\">&quot;&quot;</span> + res);</span><br><span class=\"line\">\t\t\t&#125;\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//最后留在stack中的数据是运算结果</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Integer.parseInt(stack.pop());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//编写一个类 Operation 可以返回一个运算符 对应的优先级</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Operation</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ADD = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> SUB = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MUL = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DIV = <span class=\"number\">2</span>;\t</span><br><span class=\"line\">\t<span class=\"comment\">//写一个方法，返回对应的优先级数字</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">(String operation)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (operation) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;+&quot;</span>:</span><br><span class=\"line\">\t\t\tresult = ADD;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;-&quot;</span>:</span><br><span class=\"line\">\t\t\tresult = SUB;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;*&quot;</span>:</span><br><span class=\"line\">\t\t\tresult = MUL;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;/&quot;</span>:</span><br><span class=\"line\">\t\t\tresult = DIV;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;(&quot;</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;)&quot;</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;不存在该运算符&quot;</span> + operation);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">中缀表达式对应的List=[<span class=\"number\">1</span>, +, (, (, <span class=\"number\">2</span>, +, <span class=\"number\">3</span>, ), *, <span class=\"number\">4</span>, ), -, <span class=\"number\">5</span>]</span><br><span class=\"line\">后缀表达式对应的List[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, +, <span class=\"number\">4</span>, *, +, <span class=\"number\">5</span>, -]</span><br><span class=\"line\">运算结果=<span class=\"number\">16</span></span><br></pre></td></tr></table></figure>\n<hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\">\n",
            "tags": [
                "java",
                "数据结构",
                "栈",
                "逆波兰表达式"
            ]
        }
    ]
}